{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wire","text":"<p>\u201cA man got to have a code!\u201d - Omar Little</p> <p>As our teams and programs grow, the variety and volume of data also grows. Success will turn your simple data models into complex ones! Whether your application is storing data to disk or transmitting it over a network, the structure and interpretation of that data should be clear. Consumers work best with data they understand!</p> <p>Schemas describe and document data models. If you have data, you should have a schema.</p>"},{"location":"#protocol-buffers","title":"Protocol Buffers","text":"<p>Google\u2019s Protocol Buffers are built around a great schema language:</p> <ul> <li> <p>It\u2019s cross platform and language independent. Whatever programming language you use, you\u2019ll be    able to use proto schemas with your application.</p> </li> <li> <p>Proto schemas are backwards-compatible and future-proof. You can evolve your schema as your    application loses old features and gains new ones.</p> </li> <li> <p>It\u2019s focused. Proto schemas describe your data models. That\u2019s it.</p> </li> </ul> Protocol Buffer Examples  Here's a [sample message][dinosaur_proto] definition:  <pre><code>syntax = \"proto3\";\n\npackage squareup.dinosaurs;\n\noption java_package = \"com.squareup.dinosaurs\";\n\nimport \"squareup/geology/period.proto\";\n\nmessage Dinosaur {\n// Common name of this dinosaur, like \"Stegosaurus\".\nstring name = 1;\n\n// URLs with images of this dinosaur.\nrepeated string picture_urls = 2;\n\nsquareup.geology.Period period = 5;\n}\n</code></pre>  And here's an [enum][period_proto] definition:  <pre><code>syntax = \"proto3\";\n\npackage squareup.geology;\n\n\noption java_package = \"com.squareup.geology\";\n\nenum Period {\n// 145.5 million years ago \u2014 66.0 million years ago.\nCRETACEOUS = 0;\n\n// 201.3 million years ago \u2014 145.0 million years ago.\nJURASSIC = 1;\n\n// 252.17 million years ago \u2014 201.3 million years ago.\nTRIASSIC = 2;\n}\n</code></pre>  This schema language is Protocol Buffers' best feature. You might even use it purely for documentation purposes, such as to describe a JSON API.  Protocol Buffers also defines a compact binary encoding of messages that conform to the schema. This encoding is fast to encode, fast to decode, small to transmit, and small to store. The binary encoding uses numeric tags from the schema, like the `5` for `period` above.  For example, let's encode this dinosaur:  <pre><code>{\n  name: \"Stegosaurus\",\n  period: JURASSIC\n}\n</code></pre>  The encoded value is just 15 bytes:  <pre><code>Hex  Description\n 0a  tag: name(1), field encoding: LENGTH_DELIMITED(2). 1 &lt;&lt; 3 | 2\n 0b  \"Stegosaurus\".length()\n 53  'S'\n 74  't'\n 65  'e'\n 67  'g'\n 6f  'o'\n 73  's'\n 61  'a'\n 75  'u'\n 72  'r'\n 75  'u'\n 73  's'\n 28  tag: period(5), field encoding: VARINT(0). 5 &lt;&lt; 3 | 0\n 02  JURASSIC(2)\n</code></pre>"},{"location":"#why-wire","title":"Why Wire?","text":"<p>The Protocol Buffers schema language and binary encoding are both defined by Google. Wire is an independent implementation from Square that\u2019s specifically designed for Android and Java.</p> <p>For each message type defined in the schema, Wire generates an immutable model class and its builder. The generated code looks like code you\u2019d write by hand: it\u2019s documented, formatted, and simple. Wire\u2019s APIs should feel at home to programmers who like Effective Java.</p> <p>That said, there are some interesting design decisions in Wire:</p> <ul> <li> <p>Wire messages declare <code>public final</code> fields instead of the usual getter methods. This cuts down    on both code generated and code executed. Less code is particularly beneficial for Android    programs.</p> </li> <li> <p>Wire avoids case mapping. A field declared as <code>picture_urls</code> in a schema yields a Java field    <code>picture_urls</code> and not the conventional <code>pictureUrls</code> camel case. Though the name feels awkward    at first, it\u2019s fantastic whenever you use <code>grep</code> or more sophisticated search tools. No more    mapping when navigating between schema, Java source code, and data. It also provides a gentle    reminder to calling code that proto messages are a bit special.</p> </li> <li> <p>Primitive types are always boxed. If a field is absent, its value is <code>null</code>. This is used for    naturally optional fields, such as a dinosaur whose period is unknown. A field may also be null    due to schema evolution: if tomorrow we add a <code>carnivore</code> boolean to our message definition,    today\u2019s data won\u2019t have a value for that field.</p> </li> </ul> Generated Java Code  Here's the compact [generated code][dinosaur_java] for the `Dinosaur` message defined above:  <pre><code>// Code generated by Wire protocol buffer compiler, do not edit.\n// Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto\npackage com.squareup.dinosaurs;\n\nimport com.squareup.geology.Period;\nimport com.squareup.wire.Message;\nimport com.squareup.wire.ProtoAdapter;\nimport com.squareup.wire.Syntax;\nimport com.squareup.wire.WireField;\nimport com.squareup.wire.internal.Internal;\nimport java.lang.Object;\nimport java.lang.Override;\nimport java.lang.String;\nimport java.util.List;\nimport okio.ByteString;\n\npublic final class Dinosaur extends Message&lt;Dinosaur, Dinosaur.Builder&gt; {\npublic static final ProtoAdapter&lt;Dinosaur&gt; ADAPTER = ProtoAdapter.newMessageAdapter(Dinosaur.class, \"type.googleapis.com/squareup.dinosaurs.Dinosaur\", Syntax.PROTO_3);\n\nprivate static final long serialVersionUID = 0L;\n\n/**\n   * Common name of this dinosaur, like \"Stegosaurus\".\n   */\n@WireField(\ntag = 1,\nadapter = \"com.squareup.wire.ProtoAdapter#STRING\",\nlabel = WireField.Label.OMIT_IDENTITY\n)\npublic final String name;\n\n/**\n   * URLs with images of this dinosaur.\n   */\n@WireField(\ntag = 2,\nadapter = \"com.squareup.wire.ProtoAdapter#STRING\",\nlabel = WireField.Label.REPEATED,\njsonName = \"pictureUrls\"\n)\npublic final List&lt;String&gt; picture_urls;\n\n@WireField(\ntag = 5,\nadapter = \"com.squareup.geology.Period#ADAPTER\",\nlabel = WireField.Label.OMIT_IDENTITY\n)\npublic final Period period;\n\npublic Dinosaur(String name, List&lt;String&gt; picture_urls, Period period) {\nthis(name, picture_urls, period, ByteString.EMPTY);\n}\n\npublic Dinosaur(String name, List&lt;String&gt; picture_urls, Period period, ByteString unknownFields) {\nsuper(ADAPTER, unknownFields);\nif (name == null) {\nthrow new IllegalArgumentException(\"name == null\");\n}\nthis.name = name;\nthis.picture_urls = Internal.immutableCopyOf(\"picture_urls\", picture_urls);\nif (period == null) {\nthrow new IllegalArgumentException(\"period == null\");\n}\nthis.period = period;\n}\n\n@Override\npublic Builder newBuilder() {\nBuilder builder = new Builder();\nbuilder.name = name;\nbuilder.picture_urls = Internal.copyOf(picture_urls);\nbuilder.period = period;\nbuilder.addUnknownFields(unknownFields());\nreturn builder;\n}\n\n@Override\npublic boolean equals(Object other) {\nif (other == this) return true;\nif (!(other instanceof Dinosaur)) return false;\nDinosaur o = (Dinosaur) other;\nreturn unknownFields().equals(o.unknownFields())\n&amp;&amp; Internal.equals(name, o.name)\n&amp;&amp; picture_urls.equals(o.picture_urls)\n&amp;&amp; Internal.equals(period, o.period);\n}\n\n@Override\npublic int hashCode() {\nint result = super.hashCode;\nif (result == 0) {\nresult = unknownFields().hashCode();\nresult = result * 37 + (name != null ? name.hashCode() : 0);\nresult = result * 37 + picture_urls.hashCode();\nresult = result * 37 + (period != null ? period.hashCode() : 0);\nsuper.hashCode = result;\n}\nreturn result;\n}\n\npublic static final class Builder extends Message.Builder&lt;Dinosaur, Builder&gt; {\npublic String name;\n\npublic List&lt;String&gt; picture_urls;\n\npublic Period period;\n\npublic Builder() {\nname = \"\";\npicture_urls = Internal.newMutableList();\nperiod = Period.CRETACEOUS;\n}\n\n/**\n     * Common name of this dinosaur, like \"Stegosaurus\".\n     */\npublic Builder name(String name) {\nthis.name = name;\nreturn this;\n}\n\n/**\n     * URLs with images of this dinosaur.\n     */\npublic Builder picture_urls(List&lt;String&gt; picture_urls) {\nInternal.checkElementsNotNull(picture_urls);\nthis.picture_urls = picture_urls;\nreturn this;\n}\n\npublic Builder period(Period period) {\nthis.period = period;\nreturn this;\n}\n\n@Override\npublic Dinosaur build() {\nreturn new Dinosaur(name, picture_urls, period, super.buildUnknownFields());\n}\n}\n}\n</code></pre>  The Java code to create and access proto models is compact and readable:  <pre><code>Dinosaur stegosaurus = new Dinosaur.Builder()\n.name(\"Stegosaurus\")\n.period(Period.JURASSIC)\n.build();\n\nSystem.out.println(\"My favorite dinosaur existed in the \" + stegosaurus.period + \" period.\");\n</code></pre>  Each type has a corresponding `ProtoAdapter` that can encode a message to bytes and decode bytes back into a message.  <pre><code>Dinosaur stegosaurus = ...\nbyte[] stegosaurusBytes = Dinosaur.ADAPTER.encode(stegosaurus);\n\nbyte[] tyrannosaurusBytes = ...\nDinosaur tyrannosaurus = Dinosaur.ADAPTER.decode(tyrannosaurusBytes);\n</code></pre>  When accessing a field, use `Wire.get()` to replace null values with the corresponding default:  <pre><code>Period period = Wire.get(stegosaurus.period, Dinosaur.DEFAULT_PERIOD);\n</code></pre>  This is equivalent to the following:  <pre><code>Period period = stegosaurus.period != null ? stegosaurus.period : Dinosaur.DEFAULT_PERIOD;\n</code></pre>"},{"location":"#wire-kotlin","title":"Wire Kotlin","text":"<p>Since version 3.0.0, Wire can generate Kotlin code. See Wire Compiler &amp; Gradle Plugin to learn how to configure your build.</p> <p>Kotlin is a pragmatic and expressive programming language that makes it easy to model data. Here\u2019s how we used Kotlin to model Protocol Buffers messages:</p> <ul> <li>Messages feel like <code>data</code> classes, but in fact they\u2019re not. Compiler still generates <code>equals()</code>,    <code>hashCode()</code>, <code>toString()</code> and <code>copy()</code> for you. Wire does not generate <code>componentN()</code> functions    though, we believe that destructuring declarations are not a good fit for Protocol Buffers: a    change in the schema that removes or adds a field might lead to a situation when your    destructuring declaration still compiles but now describes a completely different subset of    fields, rendering your code incorrect.</li> <li><code>copy()</code> is a substitute for the <code>Builder</code>, which is not used anymore. If your program relies on    the <code>Builder</code> to be present, you may generate code in Java interoperability mode -    Wire Compiler &amp; Gradle Plugin explains how that works.</li> <li>Fields are generated as properties. While this is idiomatic in Kotlin, Java code will now have    to access fields using getters. If your program relies on accessing fields directly, use Java    interoperability mode - the compiler will generate <code>@JvmField</code> annotations for each field.</li> <li>The nullability of each field\u2019s type depends on its label: <code>required</code>, <code>repeated</code> and <code>map</code>    fields get non-nullable types, whereas <code>optional</code> fields are of nullable types.</li> <li> <p>With the exception of <code>required</code> fields, each field has a default value:</p> </li> <li> <p>null for <code>optional</code> fields,</p> </li> <li><code>emptyList()</code> for <code>repeated</code> fields,</li> <li><code>emptyMap()</code> for <code>map</code> fields.</li> </ul> Generated Kotlin Code  Here's the compact [generated code][dinosaur_kotlin] for the `Dinosaur` message defined above:  <pre><code>// Code generated by Wire protocol buffer compiler, do not edit.\n// Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto\npackage com.squareup.dinosaurs\n\nimport com.squareup.geology.Period\nimport com.squareup.wire.FieldEncoding\nimport com.squareup.wire.Message\nimport com.squareup.wire.ProtoAdapter\nimport com.squareup.wire.ProtoReader\nimport com.squareup.wire.ProtoWriter\nimport com.squareup.wire.Syntax.PROTO_3\nimport com.squareup.wire.WireField\nimport com.squareup.wire.internal.immutableCopyOf\nimport com.squareup.wire.internal.sanitize\nimport kotlin.Any\nimport kotlin.AssertionError\nimport kotlin.Boolean\nimport kotlin.Deprecated\nimport kotlin.DeprecationLevel\nimport kotlin.Int\nimport kotlin.Long\nimport kotlin.Nothing\nimport kotlin.String\nimport kotlin.collections.List\nimport kotlin.hashCode\nimport kotlin.jvm.JvmField\nimport okio.ByteString\n\nclass Dinosaur(\n/**\n   * Common name of this dinosaur, like \"Stegosaurus\".\n   */\n@field:WireField(\ntag = 1,\nadapter = \"com.squareup.wire.ProtoAdapter#STRING\",\nlabel = WireField.Label.OMIT_IDENTITY\n)\nval name: String = \"\",\npicture_urls: List&lt;String&gt; = emptyList(),\n@field:WireField(\ntag = 5,\nadapter = \"com.squareup.geology.Period#ADAPTER\",\nlabel = WireField.Label.OMIT_IDENTITY\n)\nval period: Period = Period.CRETACEOUS,\nunknownFields: ByteString = ByteString.EMPTY\n) : Message&lt;Dinosaur, Nothing&gt;(ADAPTER, unknownFields) {\n/**\n   * URLs with images of this dinosaur.\n   */\n@field:WireField(\ntag = 2,\nadapter = \"com.squareup.wire.ProtoAdapter#STRING\",\nlabel = WireField.Label.REPEATED,\njsonName = \"pictureUrls\"\n)\nval picture_urls: List&lt;String&gt; = immutableCopyOf(\"picture_urls\", picture_urls)\n\n@Deprecated(\nmessage = \"Shouldn't be used in Kotlin\",\nlevel = DeprecationLevel.HIDDEN\n)\noverride fun newBuilder(): Nothing = throw AssertionError()\n\noverride fun equals(other: Any?): Boolean {\nif (other === this) return true\nif (other !is Dinosaur) return false\nif (unknownFields != other.unknownFields) return false\nif (name != other.name) return false\nif (picture_urls != other.picture_urls) return false\nif (period != other.period) return false\nreturn true\n}\n\noverride fun hashCode(): Int {\nvar result = super.hashCode\nif (result == 0) {\nresult = unknownFields.hashCode()\nresult = result * 37 + name.hashCode()\nresult = result * 37 + picture_urls.hashCode()\nresult = result * 37 + period.hashCode()\nsuper.hashCode = result\n}\nreturn result\n}\n\noverride fun toString(): String {\nval result = mutableListOf&lt;String&gt;()\nresult += \"\"\"name=${sanitize(name)}\"\"\"\nif (picture_urls.isNotEmpty()) result += \"\"\"picture_urls=${sanitize(picture_urls)}\"\"\"\nresult += \"\"\"period=$period\"\"\"\nreturn result.joinToString(prefix = \"Dinosaur{\", separator = \", \", postfix = \"}\")\n}\n\nfun copy(\nname: String = this.name,\npicture_urls: List&lt;String&gt; = this.picture_urls,\nperiod: Period = this.period,\nunknownFields: ByteString = this.unknownFields\n): Dinosaur = Dinosaur(name, picture_urls, period, unknownFields)\n\ncompanion object {\n@JvmField\nval ADAPTER: ProtoAdapter&lt;Dinosaur&gt; = object : ProtoAdapter&lt;Dinosaur&gt;(\nFieldEncoding.LENGTH_DELIMITED,\nDinosaur::class,\n\"type.googleapis.com/squareup.dinosaurs.Dinosaur\",\nPROTO_3,\nnull\n) {\noverride fun encodedSize(value: Dinosaur): Int {\nvar size = value.unknownFields.size\nif (value.name != \"\") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)\nsize += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(2, value.picture_urls)\nif (value.period != Period.CRETACEOUS) size += Period.ADAPTER.encodedSizeWithTag(5,\nvalue.period)\nreturn size\n}\n\noverride fun encode(writer: ProtoWriter, value: Dinosaur) {\nif (value.name != \"\") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)\nProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 2, value.picture_urls)\nif (value.period != Period.CRETACEOUS) Period.ADAPTER.encodeWithTag(writer, 5, value.period)\nwriter.writeBytes(value.unknownFields)\n}\n\noverride fun decode(reader: ProtoReader): Dinosaur {\nvar name: String = \"\"\nval picture_urls = mutableListOf&lt;String&gt;()\nvar period: Period = Period.CRETACEOUS\nval unknownFields = reader.forEachTag { tag -&gt;\nwhen (tag) {\n1 -&gt; name = ProtoAdapter.STRING.decode(reader)\n2 -&gt; picture_urls.add(ProtoAdapter.STRING.decode(reader))\n5 -&gt; try {\nperiod = Period.ADAPTER.decode(reader)\n} catch (e: ProtoAdapter.EnumConstantNotFoundException) {\nreader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())\n}\nelse -&gt; reader.readUnknownField(tag)\n}\n}\nreturn Dinosaur(\nname = name,\npicture_urls = picture_urls,\nperiod = period,\nunknownFields = unknownFields\n)\n}\n\noverride fun redact(value: Dinosaur): Dinosaur = value.copy(\nunknownFields = ByteString.EMPTY\n)\n}\n\nprivate const val serialVersionUID: Long = 0L\n}\n}\n</code></pre>  Creating and accessing proto models is easy:  <pre><code>val stegosaurus = Dinosaur(\nname = \"Stegosaurus\",\nperiod = Period.JURASSIC\n)\n\nprintln(\"My favorite dinosaur existed in the ${stegosaurus.period} period.\")\n</code></pre>  Here's how you can modify the object to add extra fields:  <pre><code>val stegosaurus = stegosaurus.copy(\npicture_urls = listOf(\"https://www.flickr.com/photos/tags/Stegosaurus/\")\n)\n\nprintln(\"Here are some photos of ${stegosaurus.name}: ${stegosaurus.picture_urls}\")\n</code></pre>"},{"location":"#wire-swift","title":"Wire Swift","text":"<p>Since version 3.3.0, Wire can generate Swift code. See Wire Compiler &amp; Gradle Plugin to learn how to configure your build.</p> <p>Swift support is considered a \u201cbeta\u201d and may still feature breaking changes. That being said, Block is shipping it in production apps and SDKs.</p> <p>Swift is a pragmatic and expressive programming language with rich support for value types. Here\u2019s how we used Swift to model Protocol Buffers messages:</p> <ul> <li>Messages are structs that conform to <code>Equatable</code>, <code>Codable</code> and <code>Sendable</code>. All Messages have value semantics.</li> <li>Messages have a memberwise initializer to populate fields.</li> <li>Fields are generated as properties.</li> <li>The nullability of each field\u2019s type depends on its label: <code>required</code>, <code>repeated</code> and <code>map</code>    fields get non-nullable types, whereas <code>optional</code> fields are of nullable types.</li> </ul> Generated Swift Code  Here's the compact [generated code][dinosaur_swift] for the `Dinosaur` message defined above:  <pre><code>// Code generated by Wire protocol buffer compiler, do not edit.\n// Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto\nimport Foundation\nimport Wire\n\npublic struct Dinosaur {\n\n    /**\n     * Common name of this dinosaur, like \"Stegosaurus\".\n     */\n    public var name: String?\n    /**\n     * URLs with images of this dinosaur.\n     */\n    public var picture_urls: [String]\n    public var length_meters: Double?\n    public var mass_kilograms: Double?\n    public var period: Period?\n    public var unknownFields: Data = .init()\n\n    public init(\n        name: String? = nil,\n        picture_urls: [String] = [],\n        length_meters: Double? = nil,\n        mass_kilograms: Double? = nil,\n        period: Period? = nil\n    ) {\n        self.name = name\n        self.picture_urls = picture_urls\n        self.length_meters = length_meters\n        self.mass_kilograms = mass_kilograms\n        self.period = period\n    }\n\n}\n\n#if !WIRE_REMOVE_EQUATABLE\nextension Dinosaur : Equatable {\n}\n#endif\n\n#if !WIRE_REMOVE_HASHABLE\nextension Dinosaur : Hashable {\n}\n#endif\n\n#if swift(&gt;=5.5)\nextension Dinosaur : Sendable {\n}\n#endif\n\nextension Dinosaur : ProtoMessage {\n    public static func protoMessageTypeURL() -&gt; String {\n        return \"type.googleapis.com/squareup.dinosaurs.Dinosaur\"\n    }\n}\n\nextension Dinosaur : Proto2Codable {\n    public init(from reader: ProtoReader) throws {\n        var name: String? = nil\n        var picture_urls: [String] = []\n        var length_meters: Double? = nil\n        var mass_kilograms: Double? = nil\n        var period: Period? = nil\n\n        let token = try reader.beginMessage()\n        while let tag = try reader.nextTag(token: token) {\n            switch tag {\n            case 1: name = try reader.decode(String.self)\n            case 2: try reader.decode(into: &amp;picture_urls)\n            case 3: length_meters = try reader.decode(Double.self)\n            case 4: mass_kilograms = try reader.decode(Double.self)\n            case 5: period = try reader.decode(Period.self)\n            default: try reader.readUnknownField(tag: tag)\n            }\n        }\n        self.unknownFields = try reader.endMessage(token: token)\n\n        self.name = name\n        self.picture_urls = picture_urls\n        self.length_meters = length_meters\n        self.mass_kilograms = mass_kilograms\n        self.period = period\n    }\n\n    public func encode(to writer: ProtoWriter) throws {\n        try writer.encode(tag: 1, value: self.name)\n        try writer.encode(tag: 2, value: self.picture_urls)\n        try writer.encode(tag: 3, value: self.length_meters)\n        try writer.encode(tag: 4, value: self.mass_kilograms)\n        try writer.encode(tag: 5, value: self.period)\n        try writer.writeUnknownFields(unknownFields)\n    }\n}\n\n#if !WIRE_REMOVE_CODABLE\nextension Dinosaur : Codable {\n    public init(from decoder: Decoder) throws {\n        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)\n        self.name = try container.decodeIfPresent(String.self, forKey: \"name\")\n        self.picture_urls = try container.decodeProtoArray(String.self, firstOfKeys: \"pictureUrls\", \"picture_urls\")\n        self.length_meters = try container.decodeIfPresent(Double.self, firstOfKeys: \"lengthMeters\", \"length_meters\")\n        self.mass_kilograms = try container.decodeIfPresent(Double.self, firstOfKeys: \"massKilograms\", \"mass_kilograms\")\n        self.period = try container.decodeIfPresent(Period.self, forKey: \"period\")\n    }\n\n    public func encode(to encoder: Encoder) throws {\n        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)\n        let preferCamelCase = encoder.protoKeyNameEncodingStrategy == .camelCase\n        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include\n\n        try container.encodeIfPresent(self.name, forKey: \"name\")\n        if includeDefaults || !self.picture_urls.isEmpty {\n            try container.encodeProtoArray(self.picture_urls, forKey: preferCamelCase ? \"pictureUrls\" : \"picture_urls\")\n        }\n        try container.encodeIfPresent(self.length_meters, forKey: preferCamelCase ? \"lengthMeters\" : \"length_meters\")\n        try container.encodeIfPresent(self.mass_kilograms, forKey: preferCamelCase ? \"massKilograms\" : \"mass_kilograms\")\n        try container.encodeIfPresent(self.period, forKey: \"period\")\n    }\n}\n#endif\n</code></pre>  Creating and accessing proto models is easy:  <pre><code>let stegosaurus = Dinosaur(\n    name: \"Stegosaurus\",\n    period: .JURASSIC\n)\n\nprint(\"My favorite dinosaur existed in the \\(stegosaurus.period) period.\")\n</code></pre>  Here's how you can modify the object to add extra fields:  <pre><code>var stegosaurus = stegosaurus\nstegosaurus.picture_urls = [\"https://www.flickr.com/photos/tags/Stegosaurus/\"]\n\nprint(\"Here are some photos of \\(stegosaurus.name): \\(stegosaurus.picture_urls)\")\n</code></pre>"},{"location":"#wire-grpc","title":"Wire gRPC","text":"<p>Since version 3.0.0, Wire supports gRPC.</p>"},{"location":"#generating-code-with-wire","title":"Generating Code With Wire","text":"<p>Wire can read <code>.proto</code> files from the local file system and from within <code>.jar</code> files.</p> <p>The compiler can optionally prune your schema to a subset of root types and their transitive dependencies. This is useful when sharing a schema between projects: a Java service and Android app may each use a subset of a larger shared schema.</p> <p>For more info on how to get started, see Wire Compiler &amp; Gradle Plugin.</p> <p>If you don\u2019t use Gradle, the compiler also has a command line interface. Just substitute <code>wire-compiler-VERSION-jar-with-dependencies.jar</code> with the path to your jar. Download the latest precompiled jar.</p> <pre><code>% java -jar wire-compiler-VERSION-jar-with-dependencies.jar \\\n    --proto_path=src/main/proto \\\n    --java_out=out \\\n    squareup/dinosaurs/dinosaur.proto \\\n    squareup/geology/period.proto\nWriting com.squareup.dinosaurs.Dinosaur to out\nWriting com.squareup.geology.Period to out\n</code></pre> <p>Supplying the <code>--android</code> flag to the compiler causes Wire messages to implement <code>Parcelable</code>.</p> <p>If you use Proguard, then you need to add <code>keep</code> rules.  The simplest option is to tell Proguard not to touch the Wire runtime library and your generated protocol buffers (of course these simple rules will miss opportunities to shrink and optimize the code):</p> <pre><code>-keep class com.squareup.wire.** { *; }\n-keep class com.yourcompany.yourgeneratedcode.** { *; }\n</code></pre>"},{"location":"#get-wire","title":"Get Wire","text":"<p>The <code>wire-runtime</code> package contains runtime support libraries that must be included in applications that use Wire-generated code.</p> <p>With Maven:</p> <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;com.squareup.wire&lt;/groupId&gt;\n&lt;artifactId&gt;wire-runtime-jvm&lt;/artifactId&gt;\n&lt;version&gt;4.5.1&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>With Gradle:</p> <pre><code>api \"com.squareup.wire:wire-runtime:4.5.1\"\n</code></pre> <p>Snapshots of the development version are available in Sonatype\u2019s <code>snapshots</code> repository.</p>"},{"location":"#unsupported","title":"Unsupported","text":"<p>Wire does not support:</p> <ul> <li>Groups - they are skipped when parsing binary input data</li> </ul> <p>Wire supports custom options on messages and fields. Other custom options are ignored. Pass <code>--excludes=google.protobuf.*</code> to the compiler to omit options from the generated code.</p>"},{"location":"#further-documentation","title":"Further Documentation","text":"<p>See Google\u2019s excellent documentation on the structure and syntax of proto schemas.</p>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#version-451","title":"Version 4.5.1","text":"<p>2023-02-11</p> <ul> <li>Fix swift Copy-on-Write behavior.</li> <li>Support deserialization of camelCased fields in proto2.</li> </ul>"},{"location":"changelog/#version-450","title":"Version 4.5.0","text":"<p>2023-02-02</p> <ul> <li>Add support for <code>tvOS</code>.</li> <li>Add ability to supply custom schema handler from command line.</li> </ul>"},{"location":"changelog/#swift","title":"Swift","text":"<ul> <li>Add <code>Sendable</code> conformance to all generated types.</li> <li>Improved support for Proto3 types such as <code>Struct</code>, <code>Any</code>, <code>Duration</code>, and <code>Timestamp</code>.</li> <li><code>@JsonString</code> has been deprecated and will be removed in a future release.</li> <li>Codable conformance has been completely rewritten and should be much more compliant to the spec.<ul> <li>This is a somewhat breaking change and heavily dependent upon the types you were using.</li> <li>Notably: Dictionaries with non-string keys are not forwards compatible with new models.</li> <li>The corrected encoding are not backwards compatible with old models.</li> <li>Encoding fixes:<ul> <li><code>unknownFields</code> should never be encoded any more.</li> <li>Don\u2019t encode default values by default (configurable).</li> <li>Encode field names in camelCase by default (configurable).</li> <li>Encode Enums as Strings by default (configurable).</li> <li>Maps will now always encode their keys as Strings.</li> </ul> </li> <li>Decoding fixes:<ul> <li>Data now supports both base64 and base64url binary formats.</li> <li>Enums can now be decoded from either String or UInt32 values.</li> <li>Unknown Enum values can optionally be skipped.</li> <li>Both camelCase and snake_case key names are accepted. camelCase is preferred.</li> </ul> </li> </ul> </li> </ul>"},{"location":"changelog/#version-443","title":"Version 4.4.3","text":"<p>2022-10-26</p> <ul> <li>Fix: No more NPEs when the building project uses Kotlin <code>1.7.20</code>.</li> </ul>"},{"location":"changelog/#version-442","title":"Version 4.4.2","text":"<p>2022-10-06</p> <ul> <li>Fix: Use KotlinProjectExtension to access source sets.</li> <li>Fix: Improve support for ZIP artifacts.</li> <li>Fix: When set to true, <code>buildersOnly</code> will take precedence over <code>javaInterop</code> when generating Kotlin.</li> <li>Fix: Support nested extensions in a message.</li> </ul>"},{"location":"changelog/#version-441","title":"Version 4.4.1","text":"<p>2022-08-05</p> <ul> <li>New: Check HTTP2 protocol is set for passed client to <code>GrpcClient</code>.</li> <li>New: Add buildersOnly option for Java and Kotlin target, setting it to true will change the   visibility of generate types\u2019 constructor to non-public.</li> <li>Fix: Properly define api dependency for <code>okio</code> in <code>wire-schema</code>.</li> <li>Fix: Sort input locations so they match on all platforms.</li> <li>Fix: Avoid NPEs with kotlin <code>1.7.20</code> around source sets.</li> <li>Update: Bumped KotlinPoet to <code>1.12.0</code>.</li> </ul>"},{"location":"changelog/#version-440","title":"Version 4.4.0","text":"<p>2022-06-07</p> <ul> <li>New: Custom schema handlers! Wire lets you now plug in your own logic to deal with the protobuf     schema the way you want. Check our documentation for details. You can     also check our recipe directory for examples.     Note that this API obsoletes the <code>CustomHandlerBeta</code> type Wire had until now.</li> <li>New: You can now easily create an in-memory protobuf schema with the new <code>SchemaBuilder</code> class.     This lives in the new <code>wire-schema-tests</code> artifact. For usage examples, check the tests in     custom handler recipes.</li> <li>Breaking: the <code>wire-profiles</code> artifact has been removed and is now inlined in <code>wire-schema</code>.</li> <li>Breaking: <code>CoreLoader</code> \u2018s <code>isWireRuntimeProto</code> methods are now static.</li> <li>Breaking: <code>SchemaLoader</code> and related classes have been moved from <code>wire-compiler</code> to     <code>wire-schema</code>.</li> <li>New: Support packed and map fields when converting to/from JSON with Kotlin.</li> <li>New: Support typesafe accessors and version catalogs in Wire plugin.</li> <li>New: Generate annotations for repeated options.</li> <li>New: Allow parsing of <code>oneof</code> options.</li> <li>New: Support map fields in options.</li> <li>New: Add macosArm64 support to the KMP projects supporting mac.</li> <li>Fix: Properly deal with maps of scalar types, deserializing missing scala key/value into identity.</li> <li>Fix: Fix a crash where ProtoMember was populated with the wrong data.</li> </ul>"},{"location":"changelog/#version-430","title":"Version 4.3.0","text":"<p>2022-03-24</p> <ul> <li>New: reserved tags and names in enum types are now honoured by Wire.</li> <li>Fix: <code>max</code> keyword is now correctly parsed for enum types.</li> <li>Fix: Wire now writes minus double zeros and minus float zeros on proto3.</li> <li>Fix: Wire doesn\u2019t write google wrappers types\u2019 identity values anymore.</li> <li>Fix: <code>CoreLoader</code> correctly loads <code>.proto</code> files present in the resources of the project.</li> <li>Fix: Propagate <code>GrpcExceptions</code> in <code>GrpcCalls</code>.</li> <li>Fix: Change <code>GrpcCall.isCanceled</code> to honor OkHttp cancellations.</li> </ul>"},{"location":"changelog/#version-420","title":"Version 4.2.0","text":"<p>2022-02-17</p> <ul> <li> <p>New: Publish a bill of materials (BOM) for Wire. Depend on this from Gradle or Maven to    keep all of your Wire artifacts on the same version, even if they\u2019re declared via transitive    dependencies. You can even omit versions when declaring other Wire dependencies.</p> <pre><code>dependencies {\nimplementation(platform(\"com.squareup.wire:wire-bom:4.2.0\"))\nimplementation(\"com.squareup.wire:wire-compiler\")      // No version!\nimplementation(\"com.squareup.wire:wire-gradle-plugin\") // No version!\nimplementation(\"com.squareup.wire:wire-grpc-client\")   // No version!\n// Etc.\n}\n</code></pre> </li> </ul>"},{"location":"changelog/#version-411","title":"Version 4.1.1","text":"<p>2022-02-15</p> <ul> <li>Fix: Print target name in <code>ConsoleWireLogger</code>.</li> <li>Fix: Throw early when field or constant names start with a digit.</li> <li>Update: Bumped SwiftPoet to <code>1.3.1</code>.</li> <li>Fix: Wire will not generate annotations for <code>repeated</code> options.</li> </ul>"},{"location":"changelog/#version-410","title":"Version 4.1.0","text":"<p>2022-01-28</p> <ul> <li>New: When using Wire JSON factories, you can now override the proto3 behavior of skipping default    values when writing JSON. Set <code>writeIdentityValues</code> to true for either <code>WireJsonAdapterFactory</code>    or <code>WireTypeAdapterFactory</code> to enable it.</li> <li>Breaking: WireLogger methods has been refactored to remove platform dependencies and allow more    precise callbacks. We might add new methods in the future for better logging still.</li> <li>Removal: The <code>dry-run</code> option on <code>WireCompiler</code> has been removed.</li> <li>Swift: WireCompiler podspec is now backup by a jar so consumers will not have to locally build it     on <code>pod install</code>.</li> </ul>"},{"location":"changelog/#version-401","title":"Version 4.0.1","text":"<p>2021-12-07</p> <ul> <li>Fix: Don\u2019t fail at compilation when an enum is in a <code>oneof</code> for Swift generation.</li> </ul>"},{"location":"changelog/#version-400","title":"Version 4.0.0","text":"<p>2021-12-03</p> <ul> <li>New: Add \u2018nameSuffix\u2019 parameter for configuring generated service-class names in Kotlin.</li> <li>New: Define <code>oneofName</code> in <code>@WireField</code>.</li> <li>New: Enable iosSimulatorArm64 for Kotlin multiplatform.</li> <li>New: Expose the source <code>.proto</code> file at <code>ProtoAdaper.sourceFile</code>. This is null for built-in types    and types generated prior to this release.</li> <li>New: Generate Kotlin code whose members match the declaration order of the corresponding <code>.proto</code>    files. In previous releases, generated members were sorted by kind (fields, oneofs), then by    declaration order. With this update only declaration order is used. Note that this will change    the encoded-bytes of these messages. This change is both forwards and backwards-compatible.    Identical encoding of equal messages across Wire releases is typical but not guaranteed, and this    is a rare release that changes that encoding. If you do cryptographic hashes on encoded proto    messages, you will notice that the hashes are different in this release.</li> <li>New: Option in <code>SchemaLoader</code> to exhaustively load imported files. By default we only load what\u2019s    immediately necessary to generate code; this new option loads everything reachable into the    schema.</li> <li>New: Programmatic API to prune schemas. See <code>Pruner</code> in wire-schema.</li> <li>New: SchemaLoader doesn\u2019t extend the <code>Closeable</code> interface anymore.</li> <li>New: Support <code>rpcRole = 'none'</code> in the Gradle plugin to generate neither client nor server code.</li> <li>New: Support for Android variants.</li> <li>New: Support for glob syntax in srcJar includes.</li> <li>New: Support for special float literals.</li> <li>New: Swift support <code>Timestamp</code> and <code>Duration</code>.</li> <li>New: The Wire plugin requires an output to be set. Before, it would generate Java code by    default; it will now throw if there are no output defined.</li> <li>New: The default value of <code>emitAppliedOptions</code> for our Java and Kotlin target is now set to true.</li> <li>New: Wire should build and execute properly on Windows.</li> <li>New: <code>@WireRpc</code> has a new <code>sourceFile</code> attribute.</li> <li>New: <code>GrpcClient.Builder.minMessageToCompress()</code> configures which messages are compressed. This    will completely disable compression if the size is <code>Long.MAX_VALUE</code>. We\u2019ve seen problems where    some Golang gRPC servers don\u2019t support compression; setting this to <code>MAX_VALUE</code> is necessary to    interop with them.</li> <li>New: <code>SchemaReflector</code> is our initial implementation of the    gRPC Server Reflection Protocol. Note that although we implement the business logic of    gRPC reflection, we don\u2019t offer a gRPC server built into Wire.</li> <li>New: <code>wire-reflector</code> bundles gRPC\u2019s <code>reflection.proto</code> which it is built upon.</li> <li>New: <code>wire-runtime</code> exposes a <code>com.squareup.wire.VERSION</code> constant reflecting the project version.</li> <li>New: change the Gradle plugin so that (unstable) custom handlers can be configured with instance    instead of with a class name.</li> <li>Fix: Be more aggressive about loading transitive files with <code>SchemaLoader.loadExhaustively</code>.</li> <li>Fix: Bugs in JSON serialization of builder-less Kotlin types have been addressed.</li> <li>Fix: Compile Kotlin/JS with both LEGACY and IR compilers.</li> <li>Fix: Deep copy metadata on <code>GrpcCall.clone()</code>.</li> <li>Fix: Don\u2019t break task caching by using absolute paths in the Gradle plugin. Wire now uses    project-relative paths in any attribute that is used as a cache key.</li> <li>Fix: Don\u2019t crash encoding schemas when an option contains a repeated field, an enum, or a double.</li> <li>Fix: Don\u2019t depend on moshi-kotlin in wire-moshi. This caused a transitive dependency on    kotlin-reflect, which we neither needed nor wanted.</li> <li>Fix: Don\u2019t generate invalid code when an enum constant is named <code>name</code> or <code>ordinal</code>.</li> <li>Fix: Don\u2019t re-use the cache if protobuf inputs have changed.</li> <li>Fix: Emitting proper protobuf format for option values defined as a list of enum constants.</li> <li>Fix: Explicitly defined Wire gRPC server generation as experimental: the feature isn\u2019t complete.</li> <li>Fix: Generate <code>@Deprecated</code> annotations on deprecated messages, fields, enums, and enum    constants.</li> <li>Fix: Handle out of order proto fields when initializing Kotlin constructors.</li> <li>Fix: Handle writing/reading exceptions for duplex calls in Wire gRPC.</li> <li>Fix: In Java, rename instances to avoid field and class name conflicts.</li> <li>Fix: Locate files in the root package when importing.</li> <li>Fix: Memory fixes found with Address Sanitizer in Swift.</li> <li>Fix: Permit values other than <code>0</code> and <code>1</code> when decoding protobuf-encoded booleans. Previously we    threw an <code>IOException</code> for other values; now all non-zero values are true.</li> <li>Fix: Redact boxed <code>OneOf</code> fields.</li> <li>Fix: Redacted Kotlin scalars now respect nullability.</li> <li>Fix: Retain field order when emitting a schema as <code>.proto</code> files.</li> <li>Fix: Reverse the topological sort of dependent files in <code>SchemaReflector</code>. We had problems with    <code>grpc-curl</code> which expects the requested file to be listed first.</li> <li>Fix: Support Kotlin-generated annotations on Java fields.</li> <li>Fix: Support for serializing builder-less Kotlin generated classes to JSON.</li> <li>Fix: Support reporting errors in <code>CustomHandlerBeta</code>.</li> <li>Fix: Suppress deprecation warnings on generated enum\u2019s <code>fromValue</code> method in Kotlin.</li> <li>Fix: Swift adapters will throw an error when encountering an unexpected    <code>ProtoReader.beginMessage()</code> rather than calling <code>fatalError()</code>.</li> <li>Fix: Update the Wire Gradle plugin to clear the output directory before generating code. This    prevents the need to do a clean build after removing a message type.</li> <li>Fix: Update the Wire Gradle plugin to register generated <code>.java</code> sources with the Java compiler.    Previously this was broken if the Kotlin plugin was installed.</li> <li>Fix: Use Gradle\u2019s logging mechanism to reduce output when Wire generates code.</li> <li>Fix: Use correct type when referencing a custom adapter in Kotlin generated code.</li> <li>Fix: Use relative path sensitivity and file collection.</li> <li>Fix: Validate enum constant uniqueness for the entire package.</li> <li>Fix: Wire Gradle plugin tasks have been modernized with configuration caching support.</li> <li>Fix: Wire will not generate respective built-in types for Java, Kotlin, and Swift generation.    Those are usually the google types for which Wire will provide its own implementation.</li> <li>Upgrade: Update KotlinPoet to <code>1.8.0</code>.</li> <li>Upgrade: OkHttp 4.9.3.</li> <li>Upgrade: Okio 3.0.0. We now use Okio 3\u2019s <code>FileSystem</code> in <code>SchemaLoader</code>, which    makes it easier to load <code>.proto</code> files from the classpath. This is binary-incompatible with the    Okio 3.0 alpha releases.</li> <li>Bye: Drop support for emitKotlinxSerialization.</li> </ul>"},{"location":"changelog/#version-371","title":"Version 3.7.1","text":"<p>2021-11-03</p> <ul> <li>Fix: Properly load schema located at root without packages.</li> </ul>"},{"location":"changelog/#version-370","title":"Version 3.7.0","text":"<p>2021-03-25</p> <ul> <li>New: <code>srcProject(\":project-name\")</code> makes it easier to depend on <code>.proto</code> files of other projects.</li> <li>Fix: Don\u2019t require source that <code>.proto</code> directories exist at Gradle plugin configuration time.    This was preventing Wire from using other tasks\u2019 outputs as its inputs.</li> <li>Fix: Don\u2019t fail if options have a <code>.</code> prefix.</li> </ul>"},{"location":"changelog/#version-361","title":"Version 3.6.1","text":"<p>2021-03-09</p> <ul> <li>Fix: The Wire Gradle plugin now supports Java only Android projects.</li> <li>Fix: In the Wire Gradle plugin, <code>sourcePath</code> will now include only protos defined with <code>include</code>    if the option is present. It used to include all existing <code>.proto</code> files even if <code>include</code> was    used.</li> <li>New: Full support Optional Int64 and UInt64 for JSONString in Swift.</li> </ul>"},{"location":"changelog/#version-360","title":"Version 3.6.0","text":"<p>2021-02-08</p> <ul> <li>New: Automatically add a dependency when a <code>protoPath</code> or <code>protoSource</code> depends on a project.</li> <li>New: <code>protoPath</code> and <code>protoSource</code> dependencies are now not transitive by default.</li> <li>New: New protoLibrary option for the Wire Gradle plugin. Configuring a project as a protoLibrary    will cause the generated <code>.jar</code> file to include <code>.proto</code> sources.</li> <li>New: Code generation for plain gRPC server. The Kotlin target now has a new    <code>grpcServerCompatible</code> option which if set to <code>true</code> will generate gRPC server-compatible    classes.</li> <li>New: Introduce <code>GrpcException</code>.</li> <li>New: Add GrpcMethod tag to the request.</li> <li>New: Adds redacting support for Moshi JSON adapters.</li> <li>New: Publish plugin marker for Gradle plugin.</li> <li>Fix: Escape square brackets in Kotlin generated code documentation.</li> <li>Fix: Improved proto parsing performance.</li> </ul>"},{"location":"changelog/#version-350","title":"Version 3.5.0","text":"<p>2020-10-27</p> <ul> <li>New: Wire Gradle plugin improvements:</li> <li>A task is now created for each available sources (main, Android variants, etc).</li> <li>The <code>wire-runtime</code> dependency is automatically added.</li> <li>Generated code directories are automatically added into their module\u2019s source sets.</li> <li>New: Wire\u2019s proto parser now knows about <code>oneOfOptions</code>.</li> <li>New: Wire will throw when two enum constants are ambiguous, like <code>ZERO</code> and <code>zero</code>.</li> <li>New: Bytes options are not eligible anymore as annotation members.</li> <li>Fix: Optional fields in proto3 are now generated as nullable fields.</li> <li>Fix: JSON camel-casing is updated to fit latest protobuf specifications.</li> <li>Fix: Exception messages when gRPC fails have been improved.</li> <li>Fix: Allow <code>;</code> as entry separator in option maps.</li> <li>Fix: Enum constants are now properly escaped when conflicting with keywords of their generated  target platform.</li> <li>Fix: Update to KotlinPoet 1.7.2 which makes a lot of change in how Kotlin code is generated.</li> </ul>"},{"location":"changelog/#version-340","title":"Version 3.4.0","text":"<p>2020-09-24</p> <ul> <li>New: Stop emitting enum constant options as fields for Kotlin.</li> <li>New: The Wire Gradle plugin task is now cacheable.</li> <li>New: New GrpcCall function to help implement fakes.</li> <li>New: Change GrpcStreamingCall.execute() to support structured concurrency.</li> </ul>"},{"location":"changelog/#version-330","title":"Version 3.3.0","text":"<p>2020-09-14</p> <ul> <li>New: Proto3 support! This includes the new behaviors, the new types, and the JSON.</li> <li>New: Swift support for proto2 schemas. The details are in our blog post.</li> <li>New: Wire will now throw an error when:</li> <li>two generated files end up overriding each other,</li> <li>imports form a cycle,</li> <li>packages form a cycle. This can be turned off with the flag <code>permitPackageCycles</code>,</li> <li>an option within the source set cannot be resolved,</li> <li>there are name duplications of members in a message, or of rpcs in a service,</li> <li>a map is used as an extension.</li> <li>New: Support for the <code>json_name</code> pseudo option.</li> <li>New: The <code>wire_package</code> file option allows one to set the JVM package where classes generated    from the concerned file will be placed. <code>wire_package</code> takes precedence over <code>java_package</code>.</li> <li>New: Lists and maps in Kotlin generated code are now immutable.</li> <li>New: Support UTF-8 with BOM in proto files.</li> <li>New: <code>wire.since</code> and <code>wire.until</code> have been renamed with the prefix <code>constant_</code> for    <code>EnumValueOptions</code>.</li> <li>New: Wire generates 1) annotations for options which 2) gets assigned to the generated code where    appropriate. Both behavior can be turn on or off via the flags:</li> <li><code>emitDeclaredOptions</code>: True to emit types for options declared on messages, fields, etc.      Default to true,</li> <li><code>emitAppliedOptions</code>: True to emit annotations for options applied on messages, fields, etc.      Default to false.</li> <li>Fix: Recursive map values.</li> <li>Fix: Long expressions in equals and encodedSize functions.</li> </ul>"},{"location":"changelog/#version-322","title":"Version 3.2.2","text":"<p>2020-05-15</p> <ul> <li>Fix: JSON serialization correctly emits all values.</li> </ul>"},{"location":"changelog/#version-321","title":"Version 3.2.1","text":"<p>2020-05-02</p> <ul> <li>New: <code>onlyVersion</code> option on the Wire Gradle plugin to target a unique version. By and large,    service code that supports many clients would target ranges via <code>sinceVersion</code> and    <code>untilVersion</code>, while client code would target a unique version via <code>onlyVersion</code>.</li> <li>New: Support for optional fields in Proto3.</li> <li>Fix: Restored the <code>GrpcClient.create</code> API to create implementations for gRPC interfaces.</li> </ul>"},{"location":"changelog/#version-320","title":"Version 3.2.0","text":"<p>2020-04-23</p> <ul> <li>New: <code>wire.since</code> and <code>wire.until</code> options on members and enum values. You can prune fields or    constants using these two options. When generating code with the Wire Gradle plugin, define    <code>sinceVersion</code> and/or <code>untilVersion</code> to scope the generated code.</li> <li>New: Messages\u2019 <code>toString</code> method on Kotlin and Java now escape string values for easy parsing.</li> <li>Fix: Link the entire <code>descriptor.proto</code> every time when building the <code>Schema</code>.</li> <li>Fix: Properly handle members named after keywords of the target language for both Java and    Kotlin.</li> <li>Fix: Use the declared name for keys in JSON when emitting/reading keyword named members.</li> <li>Fix: Generated Kotlin code is malformed for long identifiers.</li> <li>Fix: Make the Wire Gradle plugin compatible with instant execution.</li> </ul>"},{"location":"changelog/#version-310","title":"Version 3.1.0","text":"<p>2020-02-06</p> <p>This release includes major non-backwards-compatible API changes to the <code>wire-schema</code> module. This will break tools that use Wire\u2019s schema modeling as a standalone library. We are making big changes to this component and we sacrificed API compatibility to accelerate these improvements.</p> <ul> <li>New: <code>proto { ... }</code> target in the Wire Gradle plugin. Use this to perform basic source code    transformations on collections of <code>.proto</code> files. We use it to prune large collections of protos    to just the subset used by the application.</li> <li>Fix: Support all forms of reserved extensions, such as <code>extensions 1, 3 to 5, 7;</code>.</li> <li>Fix: Don\u2019t re-generate source files when their <code>.proto</code> files haven\u2019t changed.</li> <li>New: <code>includes</code>, <code>excludes</code>, <code>root</code>, and <code>prune</code> give precedence to the most precise rule.    Previously <code>excludes</code> always took precedence over <code>includes</code>, and <code>prune</code> always took precedence    over <code>root</code>.</li> <li>Fix: Generate non-instantiable class for enclosing types in Kotlin. These are emitted when a    nested type is retained but its enclosing type is pruned.</li> <li>Fix: Do not fail to build when the profile cannot find a dependency.</li> </ul>"},{"location":"changelog/#version-303","title":"Version 3.0.3","text":"<p>2019-12-23</p> <p>Starting with this version the Wire Maven plugin is no longer maintained and has been removed from the repository.</p> <ul> <li>New: Support for custom options in Kotlin.</li> <li>New: Kotlin 1.3.61.</li> <li>New: Add support for custom targets in <code>WireRun</code> and the Gradle plugin.</li> <li>New: Improve schema evaluation algorithm when loading separate <code>sourcePath</code> and <code>protoPath</code>.</li> <li>New: Lazy loading of <code>protoPath</code> contents.</li> <li>New: Make it possible to customize Gradle plugin\u2019s configurations.</li> <li>New: Make it possible to customize Gradle plugin\u2019s <code>generateProtos</code> task.</li> <li>Fix: Use correct <code>ProtoAdapter</code> for packed fields in Kotlin.</li> <li>Fix: Properly handle name clashes between fields and enclosing types.</li> <li>Fix: Preserve the package name on files loaded from <code>protoPath</code>.</li> <li>Fix: ProtoPruner: Properly evaluate Pruner\u2019s reachable objects.</li> <li>Fix: ProtoPruner: Ensure <code>--excludes</code> properly prunes options.</li> <li>Fix: ProtoPruner: Keep used <code>ServiceOptions</code> and <code>MethodOptions</code> when pruning.</li> </ul>"},{"location":"changelog/#version-302","title":"Version 3.0.2","text":"<p>2019-11-22</p> <ul> <li>Fix: Generate correct unknownFields code if a message field\u2019s name is a Kotlin keyword.</li> <li>Fix: Properly handle unknown enum values in Kotlin.</li> <li>Fix: ProtoPruner: retain used extends.</li> <li>Fix: ProtoPruner: retain only used imports.</li> <li>Fix: ProtoPruner: use NewSchemaLoader that correctly loads google.protobuf.descriptor.</li> <li>Fix: ProtoPruner: print default values for scalar types for proto target within the options.</li> <li>Fix: ProtoPruner: fix handling of options.</li> <li>Fix: ProtoPruner: print default values for enums.</li> </ul>"},{"location":"changelog/#version-301","title":"Version 3.0.1","text":"<p>2019-10-18</p> <ul> <li>Fix: Use the correct adapter path for gRPC endpoints that customize the Java package.</li> <li>Fix: Preserve documentation in generated services.</li> <li>Fix: Fail to generate code if the source directory doesn\u2019t exist.</li> <li>Fix: Make Kotlin consistent with Java for unknown enum constants. We now treat these as unknown    fields rather than failing to decode the enclosing message.</li> </ul>"},{"location":"changelog/#version-300","title":"Version 3.0.0","text":"<p>2019-10-07</p> <ul> <li>Update: All gRPC networking calls are encoded in gzip.</li> </ul>"},{"location":"changelog/#version-300-rc03","title":"Version 3.0.0-rc03","text":"<p>2019-10-04</p> <ul> <li>Fix: Update dependency to a stable version, <code>2.4.1</code> of Okio.</li> </ul>"},{"location":"changelog/#version-300-rc02","title":"Version 3.0.0-rc02","text":"<p>2019-10-01</p>"},{"location":"changelog/#kotlin","title":"Kotlin","text":"<ul> <li>Fix: Nullify other oneof fields in Builder setters in Kotlin interop.</li> <li>Fix: Use unknownFields in <code>hashCode()</code>.</li> <li>Fix: Remove <code>withoutUnknownFields()</code> from Kotlin.</li> </ul>"},{"location":"changelog/#grpc","title":"gRPC","text":"<ul> <li>Update: Total rewrite of the generated interfaces for clients:</li> </ul> <p>Introduce two interfaces, <code>GrpcCall</code> for simple RPCs, and <code>GrpcStreamingCall</code> fox duplex ones. Both    will provide blocking and suspending API, including a reference to the underlying    OkHttp Call object and its timeout.</p> <ul> <li>Fix: Send stream cancels from clients.</li> </ul>"},{"location":"changelog/#misc","title":"Misc","text":"<ul> <li>New: Changes printing of options and enums:</li> <li>No empty lines between options and fields for enums.</li> <li>Print options on new lines only when more than one.</li> <li>Fix: Don\u2019t cache Message\u2019s hash code on Native.</li> <li>Fix: Fix handling of map values in <code>FieldBinding</code>.</li> <li>Fix: Fix import fails on windows due to path separator.</li> <li>Fix: Don\u2019t emit proto2 sources for proto3 syntax.</li> </ul>"},{"location":"changelog/#version-300-rc01","title":"Version 3.0.0-rc01","text":"<p>2019-08-02</p>"},{"location":"changelog/#compiler-gradle-plugin","title":"Compiler + Gradle plugin","text":"<ul> <li>New: Support includes on Maven coordinate dependencies.</li> <li>New: Track includes separately for source vs proto paths.</li> <li>New: Follow symlinks when building.</li> <li>New: Change the Gradle plugin to track targets as a list.</li> <li>New: Includes and Excludes for Wire targets.</li> <li>New: Print errors on ambiguous and missing imports.</li> <li>Fix: Fix a bug where protopath Maven resources weren\u2019t working.</li> <li>Fix: Don\u2019t reuse source dependencies as protopath dependencies.</li> <li>Fix: Fix <code>equals()</code> implementation for messages with no fields.</li> </ul>"},{"location":"changelog/#kotlin_1","title":"Kotlin","text":"<ul> <li>New: Move Wire.kt into <code>jvmMain</code> to discourage its use in common Kotlin code.</li> <li>New: Make <code>Message.adapter</code> a <code>val</code>.</li> <li>New: Optimize <code>decode()</code> code for protos with no fields.</li> <li>New: Update supported Native platforms.</li> <li>New: Make <code>Message.unknownFields</code> property non-nullable.</li> <li>New: Make <code>Message.unknownFields</code> a <code>val</code>.</li> <li>Fix: Don\u2019t use <code>KClass.simpleName</code> to avoid needing <code>kotlin-reflect</code> dependency.</li> <li>Fix: Use <code>kotlin.UnsupportedOperationException</code> in generated code.</li> </ul>"},{"location":"changelog/#grpc_1","title":"gRPC","text":"<ul> <li>New: Introduce <code>MessageSource</code> and <code>MessageSink</code> interfaces in <code>wire-runtime</code>.</li> <li>New: Honor Java package names in Wire gRPC services.</li> <li>New: Make <code>PipeDuplexRequestBody</code> internal.</li> <li>Fix: Workaround for <code>@Generated</code> annotation on Java 9+.</li> <li>Fix: Fix types for blocking APIs.</li> </ul>"},{"location":"changelog/#misc_1","title":"Misc","text":"<ul> <li>Fix: Fix deserializing null values in Gson adapter.</li> <li>Fix: Change <code>wire-runtime</code> artifact names to preserve 2.x compatibility.</li> </ul>"},{"location":"changelog/#version-300-alpha03","title":"Version 3.0.0-alpha03","text":"<p>2019-06-22</p> <ul> <li>Similar to alpha02, but with proper <code>wire-runtime</code> multiplatform artifacts.</li> </ul>"},{"location":"changelog/#version-300-alpha02","title":"Version 3.0.0-alpha02","text":"<p>2019-06-21</p> <ul> <li>New: Experimental multiplatform runtime.</li> </ul> <p>Starting with this version, <code>wire-runtime</code> is published as a multiplatform Kotlin artifact. While    the JVM artifact is binary- and behavior-compatible with 3.0.0-alpha01, artifacts for other    platforms may not work correctly at this point. The artifact name for the JVM artifact has been    changed to <code>wire-runtime-jvm</code>: now, in order to depend on the multiplatform runtime, use the    following Gradle dependency declaration:</p> <pre><code>api \"com.squareup.wire:wire-runtime:3.0.0-alpha02\"\n</code></pre> <p>and if you want to depend on the JVM artifact only, use the following declaration:</p> <pre><code>api \"com.squareup.wire:wire-runtime-jvm:3.0.0-alpha02\"\n</code></pre> <ul> <li>New: Generate RPCs as Single Abstract Methods.</li> <li>New: Add \u201csingleMethod\u201d Gradle plugin configuration for services.</li> <li>New: Add \u201cblockingServices\u201d Gradle plugin configuration for services.</li> <li>New: Support packageless services code generation.</li> <li>New: Remove sealed classes-based oneof implementation.</li> <li>New: Don\u2019t generate a Builder for non-interop Kotlin messages.</li> <li>Fix: Kotlin Generator correctly generates code for Protobuf services.</li> <li>Fix: Improved formatting of generated Kotlin code.</li> <li>Fix: Generate correct adapter names for WireField annotation.</li> <li>Fix: Generate labels for WireField annotation.</li> <li>Fix: Wrap oneof error message properly.</li> </ul>"},{"location":"changelog/#version-300-alpha01","title":"Version 3.0.0-alpha01","text":"<p>2019-03-14</p> <ul> <li>New: Kotlin Generator</li> </ul> <p>Wire 3 can generate Kotlin data classes. To enable this feature via the command line API, pass in    the <code>--kotlin_out</code> parameter that should specify the output directory for the generated <code>*.kt</code>    files.    Given the following simple proto:</p> <pre><code>message Person {\nrequired string name = 1;\nrequired int32 id = 2;\noptional string email = 3;\n}\n</code></pre> <p>the generated Kotlin code will look like the following:</p> <pre><code>data class Person(\n@field:WireField(tag = 1, adapter = \"com.squareup.wire.ProtoAdapter#STRING\")\nval name: String,\n@field:WireField(tag = 2, adapter = \"com.squareup.wire.ProtoAdapter#INT32\")\nval id: Int,\n@field:WireField(tag = 3, adapter = \"com.squareup.wire.ProtoAdapter#STRING\")\nval email: String? = null,\nval unknownFields: ByteString = ByteString.EMPTY\n) : Message&lt;Person, Person.Builder&gt;(ADAPTER, unknownFields) {\ncompanion object {\n@JvmField\nval ADAPTER: ProtoAdapter&lt;Person&gt; = ... // code omitted for brevity\n</code></pre> <p>The <code>copy()</code> method of a data class replaces most usages of the builder. If your code relies on    the <code>Builder</code>, you can enable full <code>Builder</code> generation by passing the <code>--java_interop</code> parameter    to the compiler.</p> <ul> <li>New: gRPC support</li> </ul> <p>In addition to generating Kotlin code from proto messages, Wire can now generate code for gRPC    endpoints. Here\u2019s an example schema:</p> <pre><code>service RouteGuide {\n// A simple RPC.\n//\n// Obtains the feature at a given position.\n//\n// A feature with an empty name is returned if there's no feature at the given\n// position.\nrpc GetFeature(Point) returns (Feature) {}\n}\n</code></pre> <p>The generated code will look like the following (message protos, referenced by the schema, are    omitted):</p> <pre><code>interface RouteGuide : Service {\n@WireRpc(\npath = \"/routeguide.RouteGuide/GetFeature\",\nrequestAdapter = \"routeguide.Point#ADAPTER\",\nresponseAdapter = \"routeguide.Feature#ADAPTER\"\n)\nsuspend fun GetFeature(request: Point): Feature\n}\n</code></pre> <p>All four gRPC modes are supported: the generated code uses suspendable functions to implement    non-blocking asynchronous execution. In streaming modes, <code>ReceiveChannel</code> and <code>SendChannel</code> are    used to listen to asynchronous data in a non-blocking fashion.</p> <p>This feature works out of the box in Wire 3 compiler as long as the input file contains a gRPC    schema.</p> <ul> <li>New: Gradle plugin</li> </ul> <p>Here\u2019s an example Gradle configuration:</p> <pre><code>apply plugin: 'com.squareup.wire'\n\nwire {\n// Keeps only 'Dinosaur#name' as the root of the object graph\nroots 'squareup.dinosaurs.Dinosaur#name'\n\n// Keeps all fields, except 'name', in 'Dinosaur'\nprunes 'squareup.dinosaurs.Dinosaur#name'\n\n// Both roots and prunes in an external file\nrules 'rules.txt'\n\nkotlin {\njavaInterop true\nout \"${buildDir}/generated/custom\"\n}\n}\n</code></pre> <p>The <code>wire</code> extension introduces the concept of compilation targets, such as <code>kotlin</code> and <code>java</code>,    where each target has its own configuration properties. Multiple targets can be supplied, which    benefits use cases such as migrating Java protos to Kotlin.</p> <ul> <li>New: Decouple the option of using Android annotations for nullability from the option of having messages implement Parcelable.</li> <li>New: Wire Moshi adapter for serializing proto JSON representation using the Moshi library.</li> <li>New: Implement support for custom enum types.</li> <li>New: Generate AndroidX nullability annotations instead of old support library annotations.</li> <li>New: Import JSR 305 and use it to mark nullability of public API.</li> <li>New: Allow inline multiline comments.</li> <li>New: Generate an empty class when a nested message is retained but its parent was pruned.</li> <li>New: Support rendering a <code>ProtoFile</code> to its schema.</li> <li>New: Support hexadecimal numeric literals.</li> <li>New: Allow custom types to be constrained with a \u2018with\u2019 clause.</li> <li>New: Generate a constructor which takes in a <code>Message.Builder</code> instead of all fields separately.</li> <li>New: Add location to the error message about unsupported group elements.</li> <li>New: Permit single files to be used on the proto path.</li> <li>Fix: Emit \u2018=\u2019 for syntax declaration.</li> <li>Fix: Don\u2019t crash when a comment has a dollar sign.</li> <li>Fix: Return subclass type instead of abstract parameterized type for newBuilder.</li> <li>Fix: Validate enum namespace in file context are unique.</li> </ul>"},{"location":"changelog/#version-220","title":"Version 2.2.0","text":"<p>2016-06-17</p> <ul> <li>New: Support for <code>map</code> type in the schema, compiler, and runtime!</li> <li>New: <code>AndroidMessage</code> base class consolidates everything required for supporting Android and will    now be used for generating code with <code>--android</code>.</li> <li>New: <code>stream</code> keyword in RPC definitions is now parsed and exposed in the schema.</li> <li>Fix: Nested types which are retained no longer cause their enclosing type to be retained. Instead,    non-instantiable empty types will be generated for pruned enclosing types.</li> <li>Fix: Remove per-type <code>Parcelable.Creator</code> classes and instead use a single type which delegates    to the message\u2019s <code>ProtoAdapter</code>.</li> <li>Fix: Retain information on redacted fields even when options were pruned.</li> <li>Fix: Do not generate code for handling <code>null</code> from list types (and now map types) which are    guaranteed to never be <code>null</code>.</li> </ul>"},{"location":"changelog/#version-212","title":"Version 2.1.2","text":"<p>2016-04-15</p> <ul> <li>Fix: Gson type adapter now deserializes JSON null literals to empty list for repeated fields.</li> </ul>"},{"location":"changelog/#version-211","title":"Version 2.1.1","text":"<p>2016-02-01</p> <ul> <li>New: <code>reserved</code> keyword is now supported and enforced.</li> <li>Fix: Defer reflection-based lookup of enum method until first use to avoid    class loading race conditions.</li> <li>Fix: Support single-quoted string literals.</li> <li>Fix: Adjacent string literals are not correctly concatenated.</li> </ul>"},{"location":"changelog/#version-210","title":"Version 2.1.0","text":"<p>2016-01-18</p> <ul> <li>Empty lists of packed values were being encoded incorrectly. In Wire 2.0.x our message    adapters incorrectly included empty lists for <code>[packed=true]</code> rather than omitting them. This is    now fixed.</li> <li>New: <code>Message.encode()</code> to concisely encode a message.</li> <li>New: <code>MessageAdapter.decode(ByteString)</code> to decode a message from a byte string without an    intermediate byte array.</li> <li>New: Wire now includes a sample code generation for service interfaces.</li> </ul>"},{"location":"changelog/#version-203","title":"Version 2.0.3","text":"<p>2016-01-04</p> <ul> <li>New: <code>ProtoAdapter.get</code> overload which returns an adapter given an instance of a message.</li> <li>New: <code>@Nullable</code> annotations are emitted for <code>optional</code> fields when using <code>--android</code>.</li> <li>Fix: Remove the need for <code>javac</code> to generate synthetic accessor methods in the generated code.    This results in smaller code size and less method references (for Android users).</li> </ul>"},{"location":"changelog/#version-202","title":"Version 2.0.2","text":"<p>2015-12-14</p> <ul> <li>Fix: Exclude unknown fields when encoding JSON and drop unknown fields when parsing JSON.</li> <li>Fix: Ensure JSON encoding and decoding works in the default generation mode (not just    <code>--compact</code>) by always adding <code>@WireField</code> metadata to message fields.</li> <li>Fix: Update to JavaPoet 1.4 for more accurate generation of valid Java code.</li> </ul>"},{"location":"changelog/#version-201","title":"Version 2.0.1","text":"<p>2015-11-12</p> <ul> <li>Fix: Do not emit <code>case</code> statements for aliased enum constant values. The first constant for a    value will be returned when deserializing.</li> <li>Fix: Emit <code>@Deprecated</code> annotation on deprecated enum constants.</li> <li>Fix: Correctly prune dependencies of excluded message, enum, or service members. Previously    the dependencies of an excluded member were retained despite the member itself being omitted.</li> </ul>"},{"location":"changelog/#version-200","title":"Version 2.0.0","text":"<p>2015-10-23</p> <p>Wire 2 is a backwards-incompatible release. It makes breaking changes to the compiler, runtime, extensions, and generated code. These changes aren\u2019t made lightly as we\u2019ve endured the upgrade in our own projects! We believe the cost of migration is worth the benefits.</p> <p>We\u2019ve created the <code>wire-schema</code> library that models <code>.proto</code> schema definitions. This is a capable library that packs several neat features. You can load a <code>Schema</code> from <code>.proto</code> files located on the local file system, a ZIP or JAR file, or any <code>java.nio.FileSystem</code> like Jimfs. You can prune this schema with includes or excludes, allowing you to reuse <code>.proto</code> definitions with minimal code. And you can decode data directly from a schema: no code generation is necessary!</p> <p>We\u2019ve flattened extensions. Wire 2.0 combines the fields defined directly on messages with fields defined far away in extensions. In the generated code, extension fields look just like every other field! One limitation of this approach is that it\u2019s no longer possible to compile extensions separately from the messages they extend. For this reason we now recommend always generating all Wire code in a single step.</p> <p>We\u2019ve rearranged the runtime. Types related to the protocol buffers format are now prefixed <code>Proto</code> and types related to our implementation are prefixed <code>Wire</code>. To encode and decode messages you must first get an adapter either from the <code>ADAPTER</code> constant or from <code>ProtoAdapter.get()</code>. You no longer need a <code>Wire</code> instance!</p>"},{"location":"changelog/#runtime","title":"Runtime","text":"<ul> <li>New <code>ADAPTER</code> constant on most messages gives access to encode &amp; decode values. This replaces    the encoding and decoding methods on <code>Wire</code>.</li> <li>Guard against null lists. Code that passes <code>null</code> to builder methods expecting a <code>List</code> used to    accept that; now Wire throws a <code>NullPointerException</code>. Similarly list elements must also be    non-null.</li> <li>New <code>Message.newBuilder()</code> API. This replaces the previous copy constructor on <code>Builder</code>.</li> <li>New: <code>Message.withoutUnknownFields()</code> strips unknown fields.</li> <li>Fix: Always throw <code>ProtocolException</code> when there are decoding problems.</li> <li>Fix: Stricter checking for oneof fields. Previously it was possible to create instances with    multiple values set!</li> <li>Fix: Improve redacting of repeated fields.</li> <li>Fix: <code>ProtoReader</code> now silently unpacks packed values.</li> <li>Fix: <code>ProtoReader</code> doesn\u2019t return groups to callers.</li> </ul>"},{"location":"changelog/#schema-java-generator","title":"Schema &amp; Java Generator","text":"<ul> <li>The Java generator is now standalone. Use these APIs programmatically to build plugins without    delegating to the command line interface.</li> <li>New: Prune schemas using includes and excludes. The <code>IdentifierSet</code> can be used to configure    which types and members are retained and which are pruned.</li> <li>New: Encode and decode values directly from the schema.</li> <li>New: Improved error messages for validation.</li> <li>Fix: Strict imports.</li> <li>Fix: Detect and forbid conflicts on extension tags.</li> </ul>"},{"location":"changelog/#compiler","title":"Compiler","text":"<ul> <li>New: Always use Wire\u2019s bundled <code>descriptor.proto</code>. Previously to define custom options you    needed to import a potentially-inconsistent descriptor.</li> <li>New: Emit all types when no <code>.proto</code> files are explicitly specified.</li> <li>New: Generate code for encoding and decoding messages. The previous, reflection-based    encoder and decoder are accessible with <code>--compact</code>.</li> <li>New: <code>ServiceFactory</code> has been removed. To generate code for your services, load a schema with    <code>wire-schema</code> and then use a library like JavaPoet to generate your own code. The    <code>JavaGenerator</code> class can be used to look up Java names of message types.</li> <li>New: Compiler will load all <code>.proto</code> files if none are explicitly specified.</li> <li>New: Load <code>.proto</code> files from ZIP and JAR files.</li> <li>New: The <code>--android</code> flag causes Wire messages to implement <code>Parcelable</code>.</li> <li>New: Support multiple <code>--proto_path</code> arguments</li> <li>New: The <code>--named_files_only</code> flag limits which <code>.proto</code> files yield <code>.java</code> files. This was the    default in Wire 1.x.</li> <li>New: The <code>--no_options</code> flag has been deleted. Use <code>--excludes=google.protobuf.*</code> instead.</li> </ul>"},{"location":"changelog/#extensions","title":"Extensions","text":"<ul> <li>Extensions have been flattened.</li> <li>Fix: Better field resolution for options.</li> <li>Fix: Extension fields must not be <code>required</code>.</li> </ul>"},{"location":"changelog/#version-180","title":"Version 1.8.0","text":"<p>2015-06-27</p> <ul> <li>New: <code>oneof</code> support!</li> <li>Fix: Correct serialization of repeated unknown fields.</li> <li>Fix: Removed superfluous <code>private</code> modifier on enum constructor.</li> <li>Warning: The \u2018protoparser\u2019 library was updated to version 4.0. This changes the type passed to    any <code>ServiceWriter</code> implementations.</li> </ul>"},{"location":"changelog/#version-170","title":"Version 1.7.0","text":"<p>2015-03-05</p> <ul> <li>New: Messages implement <code>Serializable</code>. The serialized form follows protobuf encoding, so    renaming fields is safe as long as tags are consistent. (Renaming classes is unsafe, however).    Note that extension fields are deserialized as unknown fields.</li> </ul>"},{"location":"changelog/#version-161","title":"Version 1.6.1","text":"<p>2015-01-16</p> <ul> <li>New: <code>--quiet</code> and <code>--dry-run</code> command-line arguments.</li> <li>Fix: Handle an extension registry with zero or only one item.</li> <li>Okio dependency bumped to 1.2.0.</li> </ul>"},{"location":"changelog/#version-160","title":"Version 1.6.0","text":"<p>2014-10-23</p> <ul> <li>Fix: Correctly throw <code>IOException</code> when parsing bad input fails.</li> <li>Fix: Ensure emitted code references to <code>Arrays.asList</code> correctly compiles in some edge cases.</li> <li>\u2018UNDEFINED\u2018 enum value has been removed.</li> </ul>"},{"location":"changelog/#version-152","title":"Version 1.5.2","text":"<p>2014-09-15</p> <ul> <li>New: \u2018UNDEFINED\u2018 enum value represents values that the generated code is unable to handle.</li> <li>New: Service writer implementation can now be specified on the command-line.</li> </ul>"},{"location":"changelog/#version-151","title":"Version 1.5.1","text":"<p>2014-06-18</p> <ul> <li>New: Generate interface definition for a <code>Service</code> with a partial list of methods.</li> <li>Okio dependency bumped to 1.0.0.</li> </ul>"},{"location":"changelog/#version-150","title":"Version 1.5.0","text":"<p>2014-04-22</p> <ul> <li>New: Options on enums and enum values are now supported.</li> <li>New: Options ending with <code>.redacted</code> on fields will omit values from <code>toString</code>.</li> <li>New: <code>Redactor</code> creates copies of messages with redacted fields omitted.</li> <li>Various internal serialization improvements and memory reduction.</li> <li>Okio dependency bumped to 0.9.0.</li> </ul>"},{"location":"changelog/#version-140","title":"Version 1.4.0","text":"<p>2014-04-22</p> <ul> <li> <p>Replace Wire\u2019s ByteString class with the one from Okio (https://github.com/square/okio).    This is a breaking API change.</p> </li> <li> <p>Add a new static method <code>Wire.parseFrom(okio.Source input, Class&lt;M&gt; messageClass)</code>.</p> </li> <li> <p>Reimplement Wire\u2019s input handling to use Okio internally.</p> </li> <li> <p>Provide basic support for generating code from service declarations (see README.md).</p> </li> <li> <p>Improve deserialization performance.</p> </li> <li> <p>Fix a bug where no some extension dependencies were not detected.</p> </li> </ul>"},{"location":"changelog/#version-133","title":"Version 1.3.3","text":"<p>2014-03-28</p> <ul> <li>New: Support service declarations as roots. The request and response types of their methods will    be included.</li> </ul>"},{"location":"changelog/#version-132","title":"Version 1.3.2","text":"<p>2014-03-27</p> <ul> <li>Fix: Enum value duplicate check now correctly looks at names instead of values.</li> </ul>"},{"location":"changelog/#version-131","title":"Version 1.3.1","text":"<p>2014-03-25</p> <ul> <li>New: Automatically add Maven plugin\u2019s generated source as a compilation root.</li> <li>Fix: Correct Maven plugin\u2019s \u2018no arguments\u2019 flag to work properly.</li> <li>Fix: Support extend declarations nested inside message types.</li> </ul>"},{"location":"changelog/#version-130","title":"Version 1.3.0","text":"<p>2014-03-21</p> <ul> <li>New: Empty repeated fields are now initialized to an empty collection.</li> <li>New: Emit field options. Use <code>--no_options</code> flag to disable.</li> <li>New: <code>@Deprecated</code> is now added to fields and setters on the builder.</li> <li>New: Maven plugin for running the compiler as part of a build.</li> <li>Fix: Treat empty and null repeated fields the same in <code>equals()</code> and <code>hashCode()</code>.</li> </ul> <p>Note: This version is not backwards compatible with code generated from previous versions.</p>"},{"location":"changelog/#version-120","title":"Version 1.2.0","text":"<p>2013-11-01</p> <ul> <li>New: <code>--registry_class</code> compiler argument emits a class with a list of extensions suitable for    passing to the <code>Wire</code> constructor.</li> <li>Fix: Ensure all trailing whitespace is trimmed on documentation.</li> </ul>"},{"location":"changelog/#version-111","title":"Version 1.1.1","text":"<p>2013-10-23</p> <ul> <li>Fix: Correct parsing and emission of multi-line documentation.</li> </ul>"},{"location":"changelog/#version-110","title":"Version 1.1.0","text":"<p>2013-10-22</p> <ul> <li>New: Support for message options.</li> <li>New: Check for duplicate field tag numbers.</li> <li>New: Emit Javadoc on messages, enum values, and builder methods.</li> <li>Fix: Emit imports for extension fields and classes outside of package.</li> <li>Fix: Correctly generate sources for protos with the same basename.</li> <li>Fix: Do not generate default constants for message types.</li> <li>Fix: Avoid shadowing fields named \u201cresult\u201d, \u201cother\u201d, or \u201co\u201d.</li> </ul>"},{"location":"changelog/#version-101","title":"Version 1.0.1","text":"<p>2013-08-27</p> <ul> <li>New: Support reading directly from <code>InputStream</code>.</li> <li>New: Add \u2018<code>other == this</code>\u2018 shortcut in generated <code>equals()</code> methods.</li> </ul>"},{"location":"changelog/#version-100","title":"Version 1.0.0","text":"<p>2013-08-23</p> <p>Initial version.</p>"},{"location":"code_of_conduct/","title":"Open Source Code of Conduct","text":"<p>At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone.</p> <p>This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored.</p> <p>Square\u2019s open source community strives to:</p> <ul> <li> <p>Be open: We invite anyone to participate in any aspect of our projects. Our community is    open, and any responsibility can be carried by a contributor who demonstrates the required    capacity and competence.</p> </li> <li> <p>Be considerate: People use our work, and we depend on the work of others. Consider users and    colleagues before taking action. For example, changes to code, infrastructure, policy, and    documentation may negatively impact others.</p> </li> <li> <p>Be respectful: We expect people to work together to resolve conflict, assume good intentions,    and act with empathy. Do not turn disagreements into personal attacks.</p> </li> <li> <p>Be collaborative: Collaboration reduces redundancy and improves the quality of our work. We    strive for transparency within our open source community, and we work closely with upstream    developers and others in the free software community to coordinate our efforts.</p> </li> <li> <p>Be pragmatic: Questions are encouraged and should be asked early in the process to avoid    problems later. Be thoughtful and considerate when seeking out the appropriate forum for your    questions. Those who are asked should be responsive and helpful.</p> </li> <li> <p>Step down considerately: Members of every project come and go. When somebody leaves or    disengages from the project, they should make it known and take the proper steps to ensure that    others can pick up where they left off.</p> </li> </ul> <p>This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.</p>"},{"location":"code_of_conduct/#diversity-statement","title":"Diversity Statement","text":"<p>We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal.</p> <p>Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong.</p> <p>Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.</p>"},{"location":"code_of_conduct/#reporting-issues","title":"Reporting Issues","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. For more details, please see our Reporting Guidelines below.</p>"},{"location":"code_of_conduct/#thanks","title":"Thanks","text":"<p>Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter, Ubuntu, GDC, and Django communities. We are thankful for their work.</p>"},{"location":"code_of_conduct/#reporting-guide","title":"Reporting Guide","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. All reports will be handled with discretion.</p> <p>In your report please include:</p> <ul> <li>Your contact information.</li> <li>Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional    witnesses, please include them as well.</li> <li>Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly    available record (e.g. a mailing list archive or a public IRC logger), please include a link.</li> <li>Any additional information that may be helpful.</li> </ul> <p>After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond.</p> <p>Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome.</p> <p>If you\u2019ve found a security problem, please follow our bug bounty program.</p> <p>If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it.</p> <p>Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA).</p>"},{"location":"contributing/#code-contributions","title":"Code Contributions","text":"<p>Get working code on a personal branch with tests passing before you submit a PR:</p> <pre><code>./gradlew clean check\n</code></pre> <p>Please make every effort to follow existing conventions and style in order to keep the code as readable as possible.</p> <p>Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge.</p>"},{"location":"contributing/#committers-guides","title":"Committer\u2019s Guides","text":"<ul> <li>Releasing</li> </ul>"},{"location":"releasing/","title":"Releasing","text":""},{"location":"releasing/#prerequisite-sonatype-maven-central-account","title":"Prerequisite: Sonatype (Maven Central) Account","text":"<p>Create an account on the Sonatype issues site. Ask an existing publisher to open an issue requesting publishing permissions for <code>com.squareup</code> projects.</p>"},{"location":"releasing/#cutting-a-jvm-release","title":"Cutting a JVM Release","text":"<ol> <li> <p>Update <code>CHANGELOG.md</code>.</p> </li> <li> <p>Set versions:</p> <pre><code>export RELEASE_VERSION=X.Y.Z\nexport NEXT_VERSION=X.Y.Z-SNAPSHOT\n</code></pre> </li> <li> <p>Update versions:</p> <pre><code>sed -i \"\" \\\n  \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\\n  `find . -name \"gradle.properties\"`\nsed -i \"\" \\\n  \"s/\\\"com.squareup.wire:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.wire:\\1:$RELEASE_VERSION\\\"/g\" \\\n  `find . -name \"README.md\"`\nsed -i \"\" \\\n  \"s/\\&lt;version\\&gt;\\([^&lt;]*\\)\\&lt;\\/version\\&gt;/\\&lt;version\\&gt;$RELEASE_VERSION\\&lt;\\/version\\&gt;/g\" \\\n  `find . -name \"README.md\"`\n</code></pre> </li> <li> <p>Tag the release and push to GitHub.</p> <pre><code>git commit -am \"Prepare for release $RELEASE_VERSION.\"\ngit tag -a $RELEASE_VERSION -m \"Version $RELEASE_VERSION\"\ngit push &amp;&amp; git push --tags\n</code></pre> </li> <li> <p>Wait for GitHub Actions to start building the release.</p> </li> <li> <p>Prepare for ongoing development and push to GitHub.</p> <pre><code>sed -i \"\" \\\n  \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\\n  `find . -name \"gradle.properties\"`\ngit commit -am \"Prepare next development version.\"\ngit push\n</code></pre> </li> <li> <p>Wait for GitHub Actions to build and publish releases for both Windows and    Non-Windows.</p> </li> <li> <p>Visit Sonatype Nexus to promote (close then release) the releases. Or drop it    if there is a problem!</p> </li> <li> <p>Deploy the documentation website.</p> <pre><code>./deploy_website.sh\n</code></pre> </li> </ol>"},{"location":"releasing/#publishing-the-swift-cocoapods","title":"Publishing the Swift CocoaPods","text":"<p>There are two Podspecs to publish to CocoaPods: the Swift Wire runtime and the Swift Wire compiler. The same version number should be used for both.</p> <p>CocoaPods are published to the trunk repo, which is the main public repo for all CocoaPods. If you have not published Wire before then you\u2019ll need to get set up to publish to trunk, and be added as a publisher for the Wire Podspecs.</p>"},{"location":"releasing/#setting-the-version","title":"Setting the Version","text":"<p>When publishing a new version, two things must be done: 1. The version must be tagged in Git. So if you\u2019re publishing version <code>4.0.0-alpha1</code>, then you\u2019d check out the SHA you want to publish and run: <pre><code>git tag 4.0.0-alpha1\ngit push origin refs/tags/4.0.0-alpha1\n</code></pre></p> <ol> <li>The version being published needs to be passed into the Podspecs. This is done by setting the <code>POD_VERSION</code> environment variable: <pre><code>export POD_VERSION=4.0.0-alpha1\n</code></pre></li> </ol> <p>If publishing a release version (like <code>4.0.0</code> rather than <code>4.0.0-alpha1</code>) then setting the <code>POD_VERSION</code> is optional and it will be pulled automatically from <code>gradle.properties</code>.</p>"},{"location":"releasing/#publishing-the-podspecs","title":"Publishing the Podspecs","text":"<p>After setting the version as described above, you can publish the two Podspecs by doing:</p> <pre><code># Tests are currently failing, thus --skip-tests is required\npod trunk push Wire.podspec --skip-tests\n</code></pre> <p>and</p> <pre><code>pod trunk push WireCompiler.podspec\n</code></pre>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"Version Supported 3.x \u2705 2.x 1.x"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository.</p> <p>If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource</p>"},{"location":"wire_compiler/","title":"Wire Compiler &amp; Gradle Plugin","text":"<p>Wire has two key components: a compiler that generates source code at build time, and a runtime library that supports the generated code when your program executes. The compiler is very configurable; this guide explains its features and their use.</p>"},{"location":"wire_compiler/#getting-started","title":"Getting Started","text":"<p>The best way to configure and execute the Wire compiler is via our Gradle plugin. It requires Gradle 5.5 or newer.</p> <p>A typical project has <code>.proto</code> files in the standard <code>src/main/proto</code> directory.</p> <pre><code>src/\n  main/\n    proto/\n      com/\n        example/\n          pizza/\n            pizza_delivery.proto\n            pizza.proto\n          sales/\n            price.proto\n            store.proto\n          geo/\n            address.proto\n            country.proto\n    kotlin/\n      com/\n        example/\n          pizza/\n            PizzaApp.kt\n  test/\n    kotlin/\n      com/\n        example/\n          pizza/\n            PizzaAppTest.kt\nbuild.gradle\n</code></pre> <p>Because this project uses the default configuration, plugin setup is easy. Just a simple block in <code>build.gradle</code>,</p> <p>Using plugin application: <pre><code>buildscript {\nrepositories {\nmavenCentral()\n}\ndependencies {\nclasspath 'com.squareup.wire:wire-gradle-plugin:&lt;version&gt;'\n}\n}\n\napply plugin: 'com.squareup.wire'\n\nwire {\nkotlin {}\n}\n</code></pre></p> <p>Using the plugins DSL: <pre><code>plugins {\nid 'application'\nid 'org.jetbrains.kotlin.jvm'\nid 'com.squareup.wire'\n}\n\nwire {\nkotlin {}\n}\n</code></pre></p> <p>The plugin will read the <code>.proto</code> schema definitions, validate them, link them, and generate Kotlin code. It uses KotlinPoet internally to generate compact and legible source files.</p> <p></p> <p>Wire will generate files in <code>build/generated/source/wire</code>. It\u2019ll also register this directory as a source directory for the project so the generated sources are compiled by the Kotlin compiler.</p> <p>Replace <code>kotlin</code> with <code>java</code> to generate the Java sources instead.</p>"},{"location":"wire_compiler/#inputs-and-outputs","title":"Inputs and Outputs","text":"<p>Wire can pull source <code>.proto</code> schema definitions from a local directory, a local <code>.jar</code> file, or an external artifact specified with Maven coordinates.</p> <pre><code>wire {\nsourcePath {\nsrcDir 'src/main/protos'\n}\n\nsourcePath {\nsrcJar 'lib/pizza-protos.jar'\n}\n\nsourcePath {\nsrcJar 'com.example.pizza:pizza-protos:1.0.0'\n}\n\n...\n}\n</code></pre> <p>If your resource or directory contains more <code>.proto</code> files than you need to compile you can constrain the inputs to specific files:</p> <pre><code>wire {\nsourcePath {\nsrcDir 'src/main/protos'\ninclude 'com/example/pizza/pizza_delivery.proto'\ninclude 'com/example/pizza/pizza.proto'\n}\n}\n</code></pre> <p>Wildcards (with two stars) are also accepted:</p> <pre><code>wire {\nsourcePath {\nsrcDir 'src/main/protos'\ninclude 'com/example/pizza/**'\n}\n}\n</code></pre> <p>You can also do the opposite and exclude some files: <pre><code>wire {\nsourcePath {\nsrcDir 'src/main/protos'\nexclude 'com/example/juice/**'\nexclude 'com/example/pizza/toppings.proto'\n}\n}\n</code></pre></p> <p>Wire can emit multiple languages in the same build. Use <code>includes</code> to specify which types are emitted for a target language; subsequent languages will emit what\u2019s left over.</p> <pre><code>wire {\n...\n\nkotlin {\n// Kotlin emits the matched types only.\nincludes = ['com.example.pizza.*']\n}\njava {\n// Java gets everything else!\n}\n}\n</code></pre> <p>Note that sources are specified as file system paths (slash delimiter) and targets are specified as Proto type names (dot delimiter).</p> <p></p> <p>You may also specify targets with excludes. If you have both includes and excludes, excludes take precedence.</p> <pre><code>wire {\n...\n\nkotlin {\n// Kotlin emits everything but sales and geo packages.\nexcludes = ['com.example.sales.*', 'com.example.geo.*']\n}\njava {\n// Java gets those because they're left over.\n}\n}\n</code></pre> <p>Wire will print a warning if any name in includes or excludes is unused.</p> <p>When configuring Wire you must use the package name from the <code>.proto</code> file\u2019s <code>package</code> declaration. The <code>option java_package</code> name is not used for Wire configuration.</p>"},{"location":"wire_compiler/#proto-path-for-libraries","title":"Proto Path for Libraries","text":"<p>Large projects may span multiple modules. To support this Wire has a \u2018proto path\u2019. The <code>.proto</code> schema files on this path are used for linking and validation, but they do not yield files in the generated output.</p> <p>The proto path supports the same inputs as the source path: directories, <code>.jar</code> files, and Maven coordinates. Similarly, the proto path may be filtered with <code>include</code>.</p> <pre><code>wire {\nprotoPath {\nsrcDir 'src/main/address-protos'\n}\n\nprotoPath {\nsrcJar 'lib/price.jar'\n}\n\nprotoPath {\nsrcJar 'com.example:countries:1.0.0'\ninclude 'com/example/geo/country.proto'\n}\n\nprotoPath {\nsrcDir 'src/main/extra-protos'\nexclude 'com/example/**'\n}\n\n...\n}\n</code></pre> <p>The source path and proto path are linked together but only types on the source path are generated.</p> <p></p>"},{"location":"wire_compiler/#dependencies-between-gradle-modules","title":"Dependencies between Gradle Modules","text":"<p>Wire provides support to define dependencies between modules within the same project.</p> <p>A module can include its <code>.proto</code> files into the output resources. Use this when your <code>.jar</code> file can be used as a library for other proto or Wire projects. Note that only the <code>.proto</code> files used in the library will be included.</p> <pre><code>wire {\nprotoLibrary = true\n}\n</code></pre> <p>Wire also creates two configurations, <code>protoPath</code> and <code>protoSource</code> you can use to define a dependency on another proto or Wire project.</p> <pre><code>dependencies {\n// The task `:common-protos:jar` will be added into the dependency\n// graph of this module for the Wire generating tasks.\nprotoPath(project(':common-protos'))\nimplementation(project(':common-protos'))\n}\n\nwire {\nkotlin {\n}\n}\n</code></pre> <p>Note that <code>protoPath</code> and <code>protoSource</code> dependencies are not transitive by default. If needed, you can change it manually.</p> <pre><code>configurations.protoPath {\ntransitive = true\n}\n</code></pre>"},{"location":"wire_compiler/#pruning","title":"Pruning","text":"<p>For mobile projects it\u2019s easy to generate a lot of unnecessary code. For example, a <code>.proto</code> schema might support types for obsolete features.</p> <p>General-purpose code-shrinking tools like R8 and ProGuard have difficulty shrinking Wire-generated sources because the <code>encode()</code> and <code>decode()</code> functions still use them. Instead, Wire offers its own code shrinker to eliminate unwanted declarations early.</p> <p>Use <code>prune</code> to precisely eliminate an unwanted type or member. These will be eliminated along with all references to them.</p> <pre><code>wire {\n...\n\nprune 'com.example.store.Store'\nprune 'com.example.geo.Country'\n\n...\n}\n</code></pre> <p></p> <p>Alternately you may prefer to specify what to keep, pruning everything not reachable from that set.</p> <pre><code>wire {\n...\n\nroot 'com.example.pizza.PizzaDelivery'\n\n...\n}\n</code></pre>"},{"location":"wire_compiler/#version-matching","title":"Version Matching","text":"<p>Another way to prune obsolete fields is to assign them a version, then to generate your code against a version range or a unique version. The fields out of the version range will get pruned.</p> <p>Members may be declared with <code>wire.since</code> and <code>wire.until</code> options; enum constant can use <code>wire.constant_since</code> and <code>wire.constant_until</code>. For example, these options declare a field <code>age</code> that was replaced with <code>birth_date</code> in version \u201c5.0\u201d:</p> <pre><code>import \"wire/extensions.proto\";\n\nmessage Singer {\noptional string name = 1;\noptional int32 age = 2 [(wire.until) = \"5.0\"];\noptional Date birth_date = 3 [(wire.since) = \"5.0\"];\n}\n</code></pre> <p>Client code should typically target a single version. In this example, clients will have the <code>name</code> and <code>birth_date</code> fields only.</p> <pre><code>wire {\nonlyVersion \"5.0\"\n}\n</code></pre> <p>Service code that supports many clients should support the union of versions of all supported clients. Such code will have <code>name</code>, as well as both the <code>age</code> and <code>birth_date</code> fields.</p> <pre><code>wire {\nsinceVersion \"3.0\"\nuntilVersion \"6.0\"\n}\n</code></pre>"},{"location":"wire_compiler/#proto-libraries","title":"Proto Libraries","text":"<p>By default, <code>.proto</code> input files are not included in the generated <code>.jar</code> artifact. Use the <code>protoLibrary</code> option to include them:</p> <pre><code>wire {\nprotoLibrary = true\n}\n</code></pre> <p>This is most useful when building <code>.jar</code> files for other <code>wire</code> tasks to use as dependencies. Note that only the true sources are included \u2013 proto messages that are pruned or not used are not included in the output artifact.</p>"},{"location":"wire_compiler/#customizing-output","title":"Customizing Output","text":""},{"location":"wire_compiler/#java","title":"Java","text":"<p>Here\u2019s an exhaustive Java configuration. Booleans are shown with their default behavior.</p> <pre><code>wire {\njava {\n// Proto types to include generated sources for. Types listed here will be\n// generated for this/ target and not for subsequent targets in the task.\n//\n// This list should contain package names (suffixed with `.*`) and type names\n// only. It should not contain member names.\nincludes = ['com.example.pizza.*']\n\n// Proto types to excluded generated sources for. Types listed here will not\n// be generated for this target.\n//\n// This list should contain package names (suffixed with `.*`) and type names\n// only. It should not contain member names.\nexcludes = ['com.example.sales.*']\n\n// True if types emitted for this target should not also be emitted for other\n// targets. Use this to cause multiple outputs to be emitted for the same input\n// type.\nexclusive = true\n\n// Directory to emit to.\nout \"${buildDir}/custom\"\n\n// True for emitted types to implement android.os.Parcelable.\nandroid = false\n\n// True to enable the androidx.annotation.Nullable annotation where applicable.\nandroidAnnotations = false\n\n// True to emit code that uses reflection for reading, writing, and toString\n// methods which are normally implemented with generated code.\ncompact = false\n\n// True to turn visibility of all generated types' constructors to non-public.\nbuildersOnly = false\n\n// True to emit types for options declared on messages, fields, etc.\nemitDeclaredOptions = true\n\n// True to emit annotations for options applied on messages, fields, etc.\nemitAppliedOptions = true\n}\n}\n</code></pre>"},{"location":"wire_compiler/#kotlin","title":"Kotlin","text":"<p>Here\u2019s an exhaustive Kotlin configuration. Booleans and enums are shown with their default behavior.</p> <pre><code>wire {\nkotlin {\n// Proto types to include generated sources for. Types listed here will be\n// generated for this/ target and not for subsequent targets in the task.\n//\n// This list should contain package names (suffixed with `.*`) and type names\n// only. It should not contain member names.\nincludes = ['com.example.pizza.*']\n\n// Proto types to excluded generated sources for. Types listed here will not\n// be generated for this target.\n//\n// This list should contain package names (suffixed with `.*`) and type names\n// only. It should not contain member names.\nexcludes = ['com.example.sales.*']\n\n// True if types emitted for this target should not also be emitted for other\n// targets. Use this to cause multiple outputs to be emitted for the same input\n// type.\nexclusive = true\n\n// Directory to emit to.\nout \"${buildDir}/custom\"\n\n// True for emitted types to implement android.os.Parcelable.\nandroid = false\n\n// True for emitted types to implement APIs for easier migration from the Java\n// target.\njavaInterop = false\n\n// True to turn visibility of all generated types' constructors to non-public.\nbuildersOnly = false\n\n// True to emit types for options declared on messages, fields, etc.\nemitDeclaredOptions = true\n\n// True to emit annotations for options applied on messages, fields, etc.\nemitAppliedOptions = true\n\n// `suspending` to generate coroutines APIs that require a Kotlin coroutines context.\n// `blocking` to generate blocking APIs callable by Java and Kotlin.\nrpcCallStyle = 'blocking'\n\n// `client` to generate interfaces best suited to sending outbound calls.\n// `server` to generate interfaces best suited to receiving inbound calls.\n// `none` to not generate services.\nrpcRole = 'server'\n\n// If set, the value will be appended to generated service type names. If null, their rpcRole\n// will be used as a suffix instead.\nnameSuffix = \"Suffix\"\n\n// True for emitted services to implement one interface per RPC.\nsingleMethodServices = false\n}\n}\n</code></pre>"},{"location":"wire_compiler/#proto","title":"Proto","text":"<p>Here\u2019s an exhaustive Proto configuration. You can use this target to generate a pruned proto schema, or to pretty-print one. Note that even with multiple outputs set, the proto target will always emit all types, all services, and all extensions of the schema.</p> <pre><code>wire {\nproto {\n// Directory to emit to.\nout \"${buildDir}/custom\"\n}\n}\n</code></pre>"},{"location":"wire_compiler/#custom-handlers","title":"Custom Handlers","text":"<p>With a custom schema handler, you can handle a proto schema in any way you want, including code generation or other side effects such as validation, logging, etc.</p> <p>You\u2019ll need to first extend the SchemaHandler class, and then the SchemaHandler.Factory interface which is to return an instance of the former. See our recipes for different use cases\u2019 implementations.</p> <p>Build that into an <code>jar</code> artifact and add that as a buildscript dependency to your Gradle project.</p> <pre><code>buildscript {\ndependencies {\nclasspath \"com.example.my-custom-handler:my-custom-handler:1.0.0\"\n}\n}\n</code></pre> <p>Next configure the Wire plugin to call your custom handler. Here\u2019s an exhaustive custom configuration. Booleans and enums are shown with their default behavior.</p> <pre><code>wire {\ncustom {\n// The name of a Java class to generate code with. This class must:\n//  * be in the buildscript dependencies for this Gradle project\n//  * be a public class\n//  * have a public no-arguments constructor\n//  * implement the com.squareup.wire.schema.SchemaHandler.Factory interface\nschemaHandlerFactoryClass = \"com.example.MyCustomHandlerFactory\"\n\n// These options work the same as the java and kotlin targets above.\nincludes = ['com.example.pizza.*']\nexcludes = ['com.example.sales.*']\nexclusive = true\nout \"${buildDir}/custom\"\n}\n}\n</code></pre>"},{"location":"wire_compiler/#swift-support","title":"Swift Support","text":"<p>The easiest way to get started is to use CocoaPods.</p> <pre><code># Add the Wire compiler so that it is downloaded and available.\n# CocoaPods will download the source and build the compiler directly,\n# so you'll need Java installed.\npod 'WireCompiler'\n\n# Add the Wire runtime to do the serializing/deserializing\npod 'Wire'\n</code></pre> <p>Then run pod install to get the dependencies and build the Wire compiler.</p> <p>Swift Package Manager is also supported for linking the Wire runtime.</p>"},{"location":"wire_compiler/#build-your-protos","title":"Build Your Protos","text":"<p>The Wire compiler uses SwiftPoet to generate Swift code. The resulting objects automatically conform to <code>Equatable</code>, <code>Codable</code> and <code>Sendable</code>.</p> <p>Assuming you\u2019ve used CocoaPods to download the Wire compiler, to compile your protos into Swift files:</p> <pre><code>java -jar ./Pods/WireCompiler/compiler.jar \\\n\"--proto_path=&lt;directory containing .proto files&gt;\" \\\n\"--swift_out=&lt;directory where the generated .swift files go&gt;\" \\\n\"--experimental-module-manifest=&lt;path to manifest yaml file&gt;\"\n</code></pre>"},{"location":"wire_compiler/#swift-manifest","title":"Swift Manifest","text":"<p>Swift introduced a new challenge that didn\u2019t exist with Kotlin and Java: modules. Kotlin and Java both use fully-qualified package names, but Swift modules are defined by their compilation unit, and thus namespaces aren\u2019t declared at the type or file level. This meant that we needed to build a new packaging system for Swift that could deal with Swift module namespacing and imports.</p> <p>We decided that the easiest way for a caller to define modules was to make those definitions handled directly by Wire. A single manifest file defines the modules, their names, their dependencies, and the content roots and prunes mentioned above.</p> <p>In this example manifest the DarkSide and LightSide modules would depend on and import the CommonProtos module:</p> <pre><code>CommonProtos:\nroots:\n- jedi.Lightsaber\n- jedi.MindTrick\n- jedi.TheForce\n- jedi.Anakin\n\nDarkSideProtos:\ndependencies:\n- CommonProtos\nroots:\n- darkside.*\n- jedi.Lightning\nprunes:\n- jedi.Mercy\n\nLightSideProtos:\ndependencies:\n- CommonProtos\nroots:\n- lightside.*\n# Import the rest of the Jedi powers not already in CommonProtos\n- jedi.*\nprunes:\n# Remove unused lightsaber colors\n- jedi.LightsaberColor#red\n# Remove deprecated field. Use green_lightsaber instead.\n- lightside.Luke#blue_lightsaber\n# Remove dark-side-only types\n- jedi.Lightning\n</code></pre>"},{"location":"wire_grpc/","title":"Wire gRPC","text":"<p>The Wire compiler will generate interfaces for your service RPCs defined in your protobuf schema; under the condition that the target is set to Kotlin.</p>"},{"location":"wire_grpc/#getting-started","title":"Getting Started","text":"<p>You can configure how your services are generated via the Gradle plugin:</p> <pre><code>wire {\n// Kotlin target will generate code for services.\nkotlin {\n// `client` to generate interfaces best suited to sending outbound calls.\n// `server` to generate interfaces best suited to receiving inbound calls.\nrpcRole = 'server'\n// Server only\n// `suspending` to generate coroutines APIs that require a Kotlin coroutines context.\n// `blocking` to generate blocking APIs callable by Java and Kotlin.\nrpcCallStyle = 'suspending'\n// Server only\n// True for emitted services to generate one interface per RPC. \nsingleMethodServices = false\n}\n}\n</code></pre> <p>The generated code varies depending on your RPC role, namely client or server. We\u2019ll use the following schema to demonstrate how they differ:</p> <pre><code>syntax = \"proto2\";\n\npackage routeguide;\n\nservice RouteGuide {\n// A simple RPC.\nrpc GetFeature(Point) returns (Feature) {}\n\n// A server-to-client streaming RPC.\nrpc ListFeatures(Rectangle) returns (stream Feature) {}\n\n// A client-to-server streaming RPC.\nrpc RecordRoute(stream Point) returns (RouteSummary) {}\n\n// A Bidirectional streaming RPC.\nrpc RouteChat(stream RouteNote) returns (stream RouteNote) {}\n}\n</code></pre>"},{"location":"wire_grpc/#grpc-for-clients","title":"gRPC for Clients","text":"<p>For the schema <code>RouteGuide</code>, when <code>rpcRole</code> is <code>client</code>, the Wire compiler will generate the following interface: <pre><code>interface RouteGuideClient : Service {\nfun GetFeature(): GrpcCall&lt;Point, Feature&gt;\n\nfun ListFeatures(): GrpcStreamingCall&lt;Rectangle, Feature&gt;\n\nfun RecordRoute(): GrpcStreamingCall&lt;Point, RouteSummary&gt;\n\nfun RouteChat(): GrpcStreamingCall&lt;RouteNote, RouteNote&gt;\n}\n</code></pre></p> <p>For streaming APIs, we return a GrpcStreamingCall, and a GrpcCall otherwise. With these objects, the caller can communicate with the server. Both blocking and suspending APIs are provided.</p>"},{"location":"wire_grpc/#wire-runtime","title":"Wire runtime","text":"<p>To help you instantiate your service, we provide a small runtime, namely GrpcClient:</p> <pre><code>val grpcClient = GrpcClient.Builder()\n.client(OkHttpClient.Builder().protocols(listOf(Protocol.H2_PRIOR_KNOWLEDGE)).build())\n.baseUrl(serverUrl)\n.build()\nval routeGuideClient = grpcClient.create(RouteGuideClient::class)\n</code></pre>"},{"location":"wire_grpc/#grpc-for-servers","title":"gRPC for Servers","text":""},{"location":"wire_grpc/#blocking-apis","title":"Blocking APIs","text":"<p>Following this configuration: <pre><code>wire {\nkotlin {\nrpcRole = 'server'\nrpcCallStyle = 'blocking'\n}\n}\n</code></pre> the Wire compiler will generate the following interface for the server to implement: <pre><code>interface RouteGuideBlockingServer : Service {\nfun GetFeature(request: Point): Feature\n\nfun ListFeatures(request: Rectangle, response: MessageSink&lt;Feature&gt;)\n\nfun RecordRoute(request: MessageSource&lt;Point&gt;): RouteSummary\n\nfun RouteChat(request: MessageSource&lt;RouteNote&gt;, response: MessageSink&lt;RouteNote&gt;)\n}\n</code></pre> For streaming connections, the server can use Wire\u2019s blocking APIs: MessageSource and MessageSink.</p>"},{"location":"wire_grpc/#suspending-apis","title":"Suspending APIs","text":"<p>Following this configuration: <pre><code>wire {\nkotlin {\nrpcRole = 'server'\nrpcCallStyle = 'suspending'\n}\n}\n</code></pre> the Wire compiler will generate the following interface for the server to implement: <pre><code>interface RouteGuideServer : Service {\nsuspend fun GetFeature(request: Point): Feature\n\nfun ListFeatures(request: Rectangle, response: SendChannel&lt;Feature&gt;)\n\nfun RecordRoute(request: ReceiveChannel&lt;Point&gt;): RouteSummary\n\nfun RouteChat(request: ReceiveChannel&lt;RouteNote&gt;, response: SendChannel&lt;RouteNote&gt;)\n}\n</code></pre> The server can use Kotlin coroutines\u2019 suspend and Channels mechanisms to execute suspending network calls.</p>"},{"location":"wire_grpc/#implementing-client-interfaces","title":"Implementing Client Interfaces","text":"<p>Wire has helper functions to make it easier to implement its client interfaces. This can be particularly useful for testing. It supports both streaming and non-streaming APIs in Kotlin:</p> <pre><code>class FakeRouteGuideClient : RouteGuideClient {\noverride fun GetFeature(): GrpcCall&lt;Point, Feature&gt; {\nreturn GrpcCall { request: Point -&gt;\nreturn@GrpcCall Feature(name = \"test\", location = request)\n}\n}\n\noverride fun RouteChat(): GrpcStreamingCall&lt;RouteNote, RouteNote&gt; {\nreturn GrpcStreamingCall { requests: ReceiveChannel&lt;RouteNote&gt;, responses: SendChannel&lt;RouteNote&gt; -&gt;\ntry {\nrequests.consumeEach { routeNote: RouteNote -&gt;\nresponses.send(RouteNote(message = \"ACK: ${routeNote.message}\"))\n}\n} finally {\nresponses.close()\n}\n}\n}\n\n...\n}\n</code></pre> <p>The <code>GrpcCall</code> and <code>GrpcStreamingCall</code> functions are well suited to expression functions:</p> <pre><code>class FakeRouteGuideClient : RouteGuideClient {\noverride fun GetFeature() =\nGrpcCall&lt;Point, Feature&gt; { request -&gt;\nreturn@GrpcCall Feature(name = \"test\", location = request)\n}\n\noverride fun RouteChat() =\nGrpcStreamingCall&lt;RouteNote, RouteNote&gt; { requests, responses -&gt;\ntry {\nrequests.consumeEach { routeNote -&gt;\nresponses.send(RouteNote(message = \"ACK: ${routeNote.message}\"))\n}\n} finally {\nresponses.close()\n}\n}\n\n...\n}\n</code></pre> <p>The client interface may also be implemented in Java. Wire only offers a non-streaming helper function. The <code>GrpcStreamingCall</code> above uses coroutines which is Kotlin-only.</p> <pre><code>public class FakeRouteGuideClient implements RouteGuideClient {\n@Override public GrpcCall&lt;Point, Feature&gt; GetFeature() {\nreturn GrpcCalls.grpcCall(new Function1&lt;Point, Feature&gt;() {\n@Override public Feature invoke(Point request) {\nreturn new Feature.Builder()\n.name(\"test\")\n.location(request)\n.build();\n}\n});\n}\n\n...\n}\n</code></pre> <p>These similarly interact nicely with Java lambdas.</p>"},{"location":"wire_grpc/#sample","title":"Sample","text":"<p>Check out our sample project demonstrating bidirectional communication between an Android application and a server.</p>"},{"location":"wire_grpc/#get-it","title":"Get it","text":"<p>Use Wire runtime Gradle coordinates: <pre><code>implementation(\"com.squareup.wire:wire-runtime:LATEST_VERSION\")\n</code></pre></p> <p>In addition, to use Wire gRPC for clients, use these new Gradle coordinates:</p> <pre><code>implementation(\"com.squareup.wire:wire-grpc-client:LATEST_VERSION\")\n</code></pre>"},{"location":"wire_json/","title":"Wire JSON","text":"<p>Wire offers JSON serialization over Moshi or Gson. We provide an adapter factory for both to configure them to deal with protobuf specifics.</p>"},{"location":"wire_json/#moshi","title":"Moshi","text":"<p>Moshi support is part of the <code>wire-moshi-adapter</code> module. It has to be added to the project dependencies in order to plug the <code>WireJsonAdapterFactory</code> into Moshi.</p> <p>The Maven coordinates are: <code>com.squareup.wire:wire-moshi-adapter:&lt;version&gt;</code></p> <pre><code>val moshi = Moshi.Builder()\n.add(WireJsonAdapterFactory())\n.build()\n\nval adapter = moshi.adapter(Pizza::class.java)\nval pizza: Pizza = ...\nval json = adapter.toJson(pizza)\nval parsedPizza = adapter.fromJson(json)\n</code></pre>"},{"location":"wire_json/#gson","title":"Gson","text":"<p>Moshi support is part of the <code>wire-gson-support</code> module. It has to be added to the project dependencies in order to plug the <code>WireTypeAdapterFactory</code> into Gson.</p> <p>The Maven coordinates are: <code>com.squareup.wire:wire-gson-support:&lt;version&gt;</code></p> <pre><code>val gson = GsonBuilder()\n.registerTypeAdapterFactory(WireTypeAdapterFactory())\n.create()\n\nval adapter = gson.adapter(Pizza::class.java)\nval pizza: Pizza = ...\nval json = adapter.toJson(pizza)\nval parsedPizza = adapter.fromJson(json)\n</code></pre>"},{"location":"wire_json/#protoc","title":"Protoc","text":"<p>Wire is interoperable with protoc for all proto3 messages. The JSON representation of proto2 is unspecified. JSON representations of proto2 messages from Wire and protoc are not interoperable. Note that by default Protoc throws an error for unknown fields. Wire will ignore them.</p>"},{"location":"wire_vs_protoc/","title":"Wire versus Protoc","text":""},{"location":"wire_vs_protoc/#non-primitive-types","title":"Non-Primitive Types","text":"<p>Protoc generates literal equivalents for all the Proto3 new types like <code>empty</code>, <code>struct</code>, etc. Wire tries to reuse existing types in the corresponding language when possible. The only new type Wire brings is <code>AnyMessage</code> for the <code>google.protobuf.Any</code> proto type.</p>"},{"location":"wire_vs_protoc/#any","title":"Any","text":"<p>The <code>Any</code> type wraps an arbitrary protobuf message by holding a field to identify its type and another field for storing the serialized representation of the wrapped message. Wire comes with its own <code>AnyMessage</code> type to represent <code>google.protobuf.Any</code>.</p> <pre><code>class AnyMessage(\nval typeUrl: String,\nval value: okio.ByteString\n)\n</code></pre> <p>It comes with a few methods to wrap or unwrap the embedded message.</p> <pre><code>// Wire\nval anyMessage: AnyMessage = AnyMessage.pack(person)\nval person: Person = anyMessage.unpack(Person.ADAPTER)\n\n// Protoc\nval any: Any = Any.pack(foo)\nval person: Person = any.unpack(Person.class)\n</code></pre>"},{"location":"wire_vs_protoc/#duration-timestamp","title":"Duration &amp; Timestamp","text":"<p>Both <code>google.protobuf.Duration</code> and <code>google.protobuf.Timestamp</code> types will be generated by using their JVM equivalent: <code>java.time.Duration</code> and <code>java.time.Instant</code>. For non-JVM platforms, we provide two new Wire types with the same APIs:</p> <pre><code>class com.squareup.wire.Duration {\nfun getSeconds(): Long\nfun getNano(): Int\n}\nfun durationOfSeconds(seconds: Long, nano: Long): Duration\n\nclass com.squareup.wire.Instant {\nfun getEpochSecond(): Long\nfun getNano(): Int\n}\nfun ofEpochSecond(epochSecond: Long, nano: Long): Instant\n</code></pre> <pre><code>// Wire\nval duration: java.time.Duration = Duration.standardMinutes(15)\nval instant: java.time.Instant = Instant.now()\n\n// Protoc\nval duration: google.protobuf.Duration =\nDuration.newBuilder()\n.setSeconds(60 * 15)\n.build()\nval instant: google.protobuf.Timestamp =\nTimestamps.fromMillis(System.currentTimeMillis())\n</code></pre>"},{"location":"wire_vs_protoc/#struct","title":"Struct","text":"<p><code>google.protobuf.Struct</code> is meant mainly to represent JSON objects in code. Instead of building new types, Wire reuses Java/Kotlin native types to represent all Struct types.</p> Google Protobuf Type Wire\u2019s Java Equivalent Wire\u2019s Kotlin Equivalent <code>Struct</code> <code>Map&lt;String, ?&gt;</code> <code>Map&lt;String, ?&gt;?</code> <code>ListValue</code> <code>List&lt;?&gt;</code> <code>List&lt;?&gt;?</code> <code>Value</code> <code>Object</code> <code>Any?</code> <code>NullValue</code> <code>Void</code> <code>Nothing?</code> <p>One difference worth noting between Protoc and Wire is that Protoc can make the difference between an absent value, and a <code>null</code> value, Wire doesn\u2019t. Wire will always write <code>null</code>s in JSON objects except at the root of it.</p> <pre><code>// Wire\nval struct = mapOf(\"a\" to 1.0)\nval list = listOf(\u201cb\u201d, 2.0)\nval boolValue = true\nval nullValue = null\n\n// Protoc\nval struct: Struct =\nStruct.newBuilder().apply {\nputFields(\u201ca\u201d, Value.newBuilder.setNumberValue(1.0).build())\n}\n.build()\nval list: List =\nListValue.newBuilder().apply {\naddValues(Value.newBuilder.setStringValue(\u201ca\u201d).build())\naddValues(Value.newBuilder.setNumberValue(2.0).build())\n}\n.build()\nval boolValue = Value.newBuilder.setBoolValue(true).build()\nval nullValue = Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build()\n</code></pre>"},{"location":"wire_vs_protoc/#wrappers","title":"Wrappers","text":"<p>Wire didn\u2019t create new types for wrappers either, each wrapper will be represented by a nullable version of the primitive type it defines. For instance <code>google.protobuf.FloatValue</code> will be represented in Java by the float boxed type <code>@Nullable Float</code>, in Kotlin by <code>Float?</code>.</p> <pre><code>// Wire\nval floatValue = 33.3f\n\n// Protoc\nval floatValue = FloatValue.newBuilder().setValue(33.3f).build()\n</code></pre>"},{"location":"wire_vs_protoc/#json","title":"JSON","text":"<p>While Proto2 didn\u2019t, Proto3 defines Protobuf serialization over JSON. Wire and Protoc are interoperable but their API are quite different. Wire offers JSON serialization over Moshi or Gson. Protoc brings its own JsonFormatter. Beware that Protoc throws an error for unknown fields, you need to configure it to opt-out of this behavior!</p> <pre><code>// Wire &amp; Moshi\nval moshi = Moshi.Builder()\n.add(WireJsonAdapterFactory())\n.build()\nval adapter = moshi.adapter(Pizza::class.java)\nval pizza: Pizza = ...\nval json = adapter.toJson(pizza)\nval parsedPizza = adapter.fromJson(json)\n\n// Protoc\nval pizza: PizzaOuterClass.Pizza = \u2026\nval json = JsonFormat.printer().print(value)\nval jsonParser = JsonFormat.parser().ignoringUnknownFields()\nval parsedBuilder = PizzaOuterClass.Pizza.newBuilder()\njsonParser.merge(json, parsedBuilder)\nval parsedPizza = parsedBuilder.build()\n</code></pre>"},{"location":"3.x/","title":"Index","text":"<p>//wire-swift-generator</p>"},{"location":"3.x/#wire-swift-generator","title":"wire-swift-generator","text":""},{"location":"3.x/#packages","title":"Packages","text":"Name com.squareup.wire.swift"},{"location":"3.x/wire-compiler/com.squareup.wire/","title":"wire-compiler","text":"<p>//wire-compiler/com.squareup.wire</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/#package-comsquareupwire","title":"Package com.squareup.wire","text":""},{"location":"3.x/wire-compiler/com.squareup.wire/#types","title":"Types","text":"Name Summary WireCompiler [jvm]class WireCompilerCommand line interface to the Wire Java generator."},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/","title":"Index","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/#wirecompiler","title":"WireCompiler","text":"<p>[jvm]\\ class WireCompiler</p> <p>Command line interface to the Wire Java generator.</p> <p>Usage</p> <p>java WireCompiler \u2013proto_path=&lt;path&gt;\\   [\u2013java_out=&lt;path&gt;]\\   [\u2013kotlin_out=&lt;path&gt;]\\   [\u2013swift_out=&lt;path&gt;]\\   [\u2013custom_out=&lt;path&gt;]\\   [\u2013schema_handler_factory_class=&lt;class_name&gt;]\\   [\u2013files=&lt;protos.include&gt;]\\   [\u2013includes=&lt;message_name&gt;[,&lt;message_name&gt;\u2026]]\\   [\u2013excludes=&lt;message_name&gt;[,&lt;message_name&gt;\u2026]]\\   [\u2013android]\\   [\u2013android-annotations]\\   [\u2013compact]\\   [file [file\u2026]]</p> <p>\u2013java_out should provide the folder where the files generated by the Java code generator should be placed. Similarly, \u2013kotlin_out should provide the folder where the files generated by the Kotlin code generator will be written. Only one of the two should be specified.</p> <p>\u2013swift_out should provide the folder where the files generated by the Swift code generator should be placed.</p> <p>\u2013schema_handler_factory_class should be used if you want a custom SchemaHandler to be called. The factory class itself should be included in your classpath. If set, custom_out should also be provided and will passed to the factory\u2019s handler as a location to where it will be able to write files.</p> <p>If the \u2013includes flag is present, its argument must be a comma-separated list of fully-qualified message or enum names. The output will be limited to those messages and enums that are (transitive) dependencies of the listed names. The \u2013excludes flag excludes types, and takes precedence over \u2013includes.</p> <p>If the \u2013registry_class flag is present, its argument must be a Java class name. A class with the given name will be generated, containing a constant list of all extension classes generated during the compile. This list is suitable for passing to Wire\u2019s constructor at runtime for constructing its internal extension registry.</p> <p>The \u2013dry_run flag causes the compile to just emit the names of the source files that would be generated to stdout.</p> <p>The \u2013android flag will cause all messages to implement the Parcelable interface. This implies \u2013android-annotations as well.</p> <p>The \u2013android-annotations flag will add the Nullable annotation to optional fields.</p> <p>The \u2013compact flag will emit code that uses reflection for reading, writing, and toString methods which are normally implemented with code generation.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/#functions","title":"Functions","text":"Name Summary compile [jvm]fun compile()"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/#properties","title":"Properties","text":"Name Summary customOut [jvm]val customOut: String? emitAndroid [jvm]val emitAndroid: Boolean emitAndroidAnnotations [jvm]val emitAndroidAnnotations: Boolean emitAppliedOptions [jvm]val emitAppliedOptions: Boolean emitCompact [jvm]val emitCompact: Boolean emitDeclaredOptions [jvm]val emitDeclaredOptions: Boolean fs [jvm]val fs: FileSystem javaInterop [jvm]val javaInterop: Boolean javaOut [jvm]val javaOut: String? kotlinBoxOneOfsMinSize [jvm]val kotlinBoxOneOfsMinSize: Int kotlinOut [jvm]val kotlinOut: String? log [jvm]val log: WireLogger modules [jvm]val modules: Map&lt;String, WireRun.Module&gt; permitPackageCycles [jvm]val permitPackageCycles: Boolean protoPaths [jvm]val protoPaths: List&lt;String&gt; schemaHandlerFactoryClass [jvm]val schemaHandlerFactoryClass: String? sourceFileNames [jvm]val sourceFileNames: List&lt;String&gt; swiftOut [jvm]val swiftOut: String? treeShakingRoots [jvm]val treeShakingRoots: List&lt;String&gt; treeShakingRubbish [jvm]val treeShakingRubbish: List&lt;String&gt;"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/compile/","title":"Compile","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/compile</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/compile/#compile","title":"compile","text":"<p>[jvm]\\ fun compile()</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/custom-out/","title":"Custom out","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/customOut</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/custom-out/#customout","title":"customOut","text":"<p>[jvm]\\ val customOut: String?</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-android-annotations/","title":"Emit android annotations","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/emitAndroidAnnotations</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-android-annotations/#emitandroidannotations","title":"emitAndroidAnnotations","text":"<p>[jvm]\\ val emitAndroidAnnotations: Boolean</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-android/","title":"Emit android","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/emitAndroid</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-android/#emitandroid","title":"emitAndroid","text":"<p>[jvm]\\ val emitAndroid: Boolean</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-applied-options/","title":"Emit applied options","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/emitAppliedOptions</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-applied-options/#emitappliedoptions","title":"emitAppliedOptions","text":"<p>[jvm]\\ val emitAppliedOptions: Boolean</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-compact/","title":"Emit compact","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/emitCompact</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-compact/#emitcompact","title":"emitCompact","text":"<p>[jvm]\\ val emitCompact: Boolean</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-declared-options/","title":"Emit declared options","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/emitDeclaredOptions</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-declared-options/#emitdeclaredoptions","title":"emitDeclaredOptions","text":"<p>[jvm]\\ val emitDeclaredOptions: Boolean</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/fs/","title":"Fs","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/fs</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/fs/#fs","title":"fs","text":"<p>[jvm]\\ val fs: FileSystem</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/java-interop/","title":"Java interop","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/javaInterop</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/java-interop/#javainterop","title":"javaInterop","text":"<p>[jvm]\\ val javaInterop: Boolean</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/java-out/","title":"Java out","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/javaOut</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/java-out/#javaout","title":"javaOut","text":"<p>[jvm]\\ val javaOut: String?</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/kotlin-box-one-ofs-min-size/","title":"Kotlin box one ofs min size","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/kotlinBoxOneOfsMinSize</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/kotlin-box-one-ofs-min-size/#kotlinboxoneofsminsize","title":"kotlinBoxOneOfsMinSize","text":"<p>[jvm]\\ val kotlinBoxOneOfsMinSize: Int</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/kotlin-out/","title":"Kotlin out","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/kotlinOut</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/kotlin-out/#kotlinout","title":"kotlinOut","text":"<p>[jvm]\\ val kotlinOut: String?</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/log/","title":"Log","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/log</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/log/#log","title":"log","text":"<p>[jvm]\\ val log: WireLogger</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/modules/","title":"Modules","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/modules</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/modules/#modules","title":"modules","text":"<p>[jvm]\\ val modules: Map&lt;String, WireRun.Module&gt;</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/permit-package-cycles/","title":"Permit package cycles","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/permitPackageCycles</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/permit-package-cycles/#permitpackagecycles","title":"permitPackageCycles","text":"<p>[jvm]\\ val permitPackageCycles: Boolean</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/proto-paths/","title":"Proto paths","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/protoPaths</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/proto-paths/#protopaths","title":"protoPaths","text":"<p>[jvm]\\ val protoPaths: List&lt;String&gt;</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/schema-handler-factory-class/","title":"Schema handler factory class","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/schemaHandlerFactoryClass</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/schema-handler-factory-class/#schemahandlerfactoryclass","title":"schemaHandlerFactoryClass","text":"<p>[jvm]\\ val schemaHandlerFactoryClass: String?</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/source-file-names/","title":"Source file names","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/sourceFileNames</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/source-file-names/#sourcefilenames","title":"sourceFileNames","text":"<p>[jvm]\\ val sourceFileNames: List&lt;String&gt;</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/swift-out/","title":"Swift out","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/swiftOut</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/swift-out/#swiftout","title":"swiftOut","text":"<p>[jvm]\\ val swiftOut: String?</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/tree-shaking-roots/","title":"Tree shaking roots","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/treeShakingRoots</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/tree-shaking-roots/#treeshakingroots","title":"treeShakingRoots","text":"<p>[jvm]\\ val treeShakingRoots: List&lt;String&gt;</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/tree-shaking-rubbish/","title":"Tree shaking rubbish","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/treeShakingRubbish</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/tree-shaking-rubbish/#treeshakingrubbish","title":"treeShakingRubbish","text":"<p>[jvm]\\ val treeShakingRubbish: List&lt;String&gt;</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/","title":"Index","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/Companion</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/#functions","title":"Functions","text":"Name Summary forArgs [jvm]@JvmStaticfun forArgs(fileSystem: FileSystem, logger: WireLogger, vararg args: String): WireCompiler@JvmOverloads@JvmStaticfun forArgs(fileSystem: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger(), vararg args: String): WireCompiler main [jvm]@JvmStaticfun main(args: Array&lt;String&gt;)"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/#properties","title":"Properties","text":"Name Summary CODE_GENERATED_BY_WIRE [jvm]const val CODE_GENERATED_BY_WIRE: String"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/-c-o-d-e_-g-e-n-e-r-a-t-e-d_-b-y_-w-i-r-e/","title":"c o d e  g e n e r a t e d  b y  w i r e","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/Companion/CODE_GENERATED_BY_WIRE</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/-c-o-d-e_-g-e-n-e-r-a-t-e-d_-b-y_-w-i-r-e/#code_generated_by_wire","title":"CODE_GENERATED_BY_WIRE","text":"<p>[jvm]\\ const val CODE_GENERATED_BY_WIRE: String</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/for-args/","title":"For args","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/Companion/forArgs</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/for-args/#forargs","title":"forArgs","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun forArgs(fileSystem: FileSystem, logger: WireLogger, vararg args: String): WireCompiler</p> <p>@JvmOverloads</p> <p>@JvmStatic</p> <p>fun forArgs(fileSystem: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger(), vararg args: String): WireCompiler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/main/","title":"Main","text":"<p>//wire-compiler/com.squareup.wire/WireCompiler/Companion/main</p>"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/main/#main","title":"main","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun main(args: Array&lt;String&gt;)</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/","title":"Index","text":"<p>//wire-compiler/com.squareup.wire.schema</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/#package-comsquareupwireschema","title":"Package com.squareup.wire.schema","text":""},{"location":"3.x/wire-compiler/com.squareup.wire.schema/#types","title":"Types","text":"Name Summary CustomTarget [jvm]data class CustomTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String, schemaHandlerFactory: SchemaHandler.Factory) : Target JavaTarget [jvm]data class JavaTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String, android: Boolean, androidAnnotations: Boolean, compact: Boolean, emitDeclaredOptions: Boolean, emitAppliedOptions: Boolean, buildersOnly: Boolean) : TargetGenerate .java sources. KotlinTarget [jvm]data class KotlinTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String, android: Boolean, javaInterop: Boolean, emitDeclaredOptions: Boolean, emitAppliedOptions: Boolean, rpcCallStyle: RpcCallStyle, rpcRole: RpcRole, singleMethodServices: Boolean, boxOneOfsMinSize: Int, grpcServerCompatible: Boolean, nameSuffix: String?, buildersOnly: Boolean) : TargetGenerate .kt sources. ProtoTarget [jvm]data class ProtoTarget(outDirectory: String) : Target SwiftTarget [jvm]data class SwiftTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String) : Target Target [jvm]sealed class Target : Serializable WireRun [jvm]data class WireRun(sourcePath: List&lt;Location&gt;, protoPath: List&lt;Location&gt;, treeShakingRoots: List&lt;String&gt;, treeShakingRubbish: List&lt;String&gt;, moves: List&lt;TypeMover.Move&gt;, sinceVersion: String?, untilVersion: String?, onlyVersion: String?, targets: List&lt;Target&gt;, modules: Map&lt;String, WireRun.Module&gt;, permitPackageCycles: Boolean)An invocation of the Wire compiler. Each invocation performs the following operations:"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/#functions","title":"Functions","text":"Name Summary newSchemaHandler [jvm]fun newSchemaHandler(schemaHandlerFactoryClass: String): SchemaHandler.FactoryCreate and return an instance of SchemaHandler.Factory."},{"location":"3.x/wire-compiler/com.squareup.wire.schema/new-schema-handler/","title":"New schema handler","text":"<p>//wire-compiler/com.squareup.wire.schema/newSchemaHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/new-schema-handler/#newschemahandler","title":"newSchemaHandler","text":"<p>[jvm]\\ fun newSchemaHandler(schemaHandlerFactoryClass: String): SchemaHandler.Factory</p> <p>Create and return an instance of SchemaHandler.Factory.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/new-schema-handler/#parameters","title":"Parameters","text":"<p>jvm</p> schemaHandlerFactoryClass a fully qualified class name for a class that implements     SchemaHandler.Factory. The class must have a no-arguments public constructor."},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/","title":"Index","text":"<p>//wire-compiler/com.squareup.wire.schema/CustomTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/#customtarget","title":"CustomTarget","text":"<p>[jvm]\\ data class CustomTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String, schemaHandlerFactory: SchemaHandler.Factory) : Target</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/#functions","title":"Functions","text":"Name Summary copyTarget [jvm]open override fun copyTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String): TargetReturns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm]open override fun newHandler(): SchemaHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/#properties","title":"Properties","text":"Name Summary excludes [jvm]open override val excludes: List&lt;String&gt;Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm]open override val exclusive: Boolean = trueTrue if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm]open override val includes: List&lt;String&gt;Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm]open override val outDirectory: StringDirectory where this target will write its output. schemaHandlerFactory [jvm]val schemaHandlerFactory: SchemaHandler.Factory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/-custom-target/","title":"custom target","text":"<p>//wire-compiler/com.squareup.wire.schema/CustomTarget/CustomTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/-custom-target/#customtarget","title":"CustomTarget","text":"<p>[jvm]\\ fun CustomTarget(includes: List&lt;String&gt; = listOf(\u201c*\u201d), excludes: List&lt;String&gt; = listOf(), exclusive: Boolean = true, outDirectory: String, schemaHandlerFactory: SchemaHandler.Factory)</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/copy-target/","title":"Copy target","text":"<p>//wire-compiler/com.squareup.wire.schema/CustomTarget/copyTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/copy-target/#copytarget","title":"copyTarget","text":"<p>[jvm]\\ open override fun copyTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String): Target</p> <p>Returns a new Target object that is a copy of this one, but with the given fields updated.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/excludes/","title":"Excludes","text":"<p>//wire-compiler/com.squareup.wire.schema/CustomTarget/excludes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/excludes/#excludes","title":"excludes","text":"<p>[jvm]\\ open override val excludes: List&lt;String&gt;</p> <p>Proto types to excluded generated sources for. Types listed here will not be generated for this target.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/exclusive/","title":"Exclusive","text":"<p>//wire-compiler/com.squareup.wire.schema/CustomTarget/exclusive</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/exclusive/#exclusive","title":"exclusive","text":"<p>[jvm]\\ open override val exclusive: Boolean = true</p> <p>True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/includes/","title":"Includes","text":"<p>//wire-compiler/com.squareup.wire.schema/CustomTarget/includes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/includes/#includes","title":"includes","text":"<p>[jvm]\\ open override val includes: List&lt;String&gt;</p> <p>Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/new-handler/","title":"New handler","text":"<p>//wire-compiler/com.squareup.wire.schema/CustomTarget/newHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/new-handler/#newhandler","title":"newHandler","text":"<p>[jvm]\\ open override fun newHandler(): SchemaHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/out-directory/","title":"Out directory","text":"<p>//wire-compiler/com.squareup.wire.schema/CustomTarget/outDirectory</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/out-directory/#outdirectory","title":"outDirectory","text":"<p>[jvm]\\ open override val outDirectory: String</p> <p>Directory where this target will write its output.</p> <p>In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/schema-handler-factory/","title":"Schema handler factory","text":"<p>//wire-compiler/com.squareup.wire.schema/CustomTarget/schemaHandlerFactory</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/schema-handler-factory/#schemahandlerfactory","title":"schemaHandlerFactory","text":"<p>[jvm]\\ val schemaHandlerFactory: SchemaHandler.Factory</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/","title":"Index","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/#javatarget","title":"JavaTarget","text":"<p>[jvm]\\ data class JavaTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String, android: Boolean, androidAnnotations: Boolean, compact: Boolean, emitDeclaredOptions: Boolean, emitAppliedOptions: Boolean, buildersOnly: Boolean) : Target</p> <p>Generate .java sources.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/#constructors","title":"Constructors","text":"JavaTarget [jvm]fun JavaTarget(includes: List&lt;String&gt; = listOf(\u201c*\u201d), excludes: List&lt;String&gt; = listOf(), exclusive: Boolean = true, outDirectory: String, android: Boolean = false, androidAnnotations: Boolean = false, compact: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, buildersOnly: Boolean = false)"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/#functions","title":"Functions","text":"Name Summary copyTarget [jvm]open override fun copyTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String): TargetReturns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm]open override fun newHandler(): SchemaHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/#properties","title":"Properties","text":"Name Summary android [jvm]val android: Boolean = falseTrue for emitted types to implement android.os.Parcelable. androidAnnotations [jvm]val androidAnnotations: Boolean = falseTrue to enable the androidx.annotation.Nullable annotation where applicable. buildersOnly [jvm]val buildersOnly: Boolean = falseIf true, the constructor of all generated types will be non-public. compact [jvm]val compact: Boolean = falseTrue to emit code that uses reflection for reading, writing, and toString methods which are normally implemented with generated code. emitAppliedOptions [jvm]val emitAppliedOptions: Boolean = trueTrue to emit annotations for options applied on messages, fields, etc. emitDeclaredOptions [jvm]val emitDeclaredOptions: Boolean = trueTrue to emit types for options declared on messages, fields, etc. excludes [jvm]open override val excludes: List&lt;String&gt;Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm]open override val exclusive: Boolean = trueTrue if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm]open override val includes: List&lt;String&gt;Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm]open override val outDirectory: StringDirectory where this target will write its output."},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/-java-target/","title":"java target","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/JavaTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/-java-target/#javatarget","title":"JavaTarget","text":"<p>[jvm]\\ fun JavaTarget(includes: List&lt;String&gt; = listOf(\u201c*\u201d), excludes: List&lt;String&gt; = listOf(), exclusive: Boolean = true, outDirectory: String, android: Boolean = false, androidAnnotations: Boolean = false, compact: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, buildersOnly: Boolean = false)</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/android-annotations/","title":"Android annotations","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/androidAnnotations</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/android-annotations/#androidannotations","title":"androidAnnotations","text":"<p>[jvm]\\ val androidAnnotations: Boolean = false</p> <p>True to enable the androidx.annotation.Nullable annotation where applicable.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/android/","title":"Android","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/android</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/android/#android","title":"android","text":"<p>[jvm]\\ val android: Boolean = false</p> <p>True for emitted types to implement android.os.Parcelable.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/builders-only/","title":"Builders only","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/buildersOnly</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/builders-only/#buildersonly","title":"buildersOnly","text":"<p>[jvm]\\ val buildersOnly: Boolean = false</p> <p>If true, the constructor of all generated types will be non-public.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/compact/","title":"Compact","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/compact</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/compact/#compact","title":"compact","text":"<p>[jvm]\\ val compact: Boolean = false</p> <p>True to emit code that uses reflection for reading, writing, and toString methods which are normally implemented with generated code.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/copy-target/","title":"Copy target","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/copyTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/copy-target/#copytarget","title":"copyTarget","text":"<p>[jvm]\\ open override fun copyTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String): Target</p> <p>Returns a new Target object that is a copy of this one, but with the given fields updated.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/emit-applied-options/","title":"Emit applied options","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/emitAppliedOptions</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/emit-applied-options/#emitappliedoptions","title":"emitAppliedOptions","text":"<p>[jvm]\\ val emitAppliedOptions: Boolean = true</p> <p>True to emit annotations for options applied on messages, fields, etc.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/emit-declared-options/","title":"Emit declared options","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/emitDeclaredOptions</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/emit-declared-options/#emitdeclaredoptions","title":"emitDeclaredOptions","text":"<p>[jvm]\\ val emitDeclaredOptions: Boolean = true</p> <p>True to emit types for options declared on messages, fields, etc.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/excludes/","title":"Excludes","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/excludes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/excludes/#excludes","title":"excludes","text":"<p>[jvm]\\ open override val excludes: List&lt;String&gt;</p> <p>Proto types to excluded generated sources for. Types listed here will not be generated for this target.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/exclusive/","title":"Exclusive","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/exclusive</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/exclusive/#exclusive","title":"exclusive","text":"<p>[jvm]\\ open override val exclusive: Boolean = true</p> <p>True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/includes/","title":"Includes","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/includes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/includes/#includes","title":"includes","text":"<p>[jvm]\\ open override val includes: List&lt;String&gt;</p> <p>Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/new-handler/","title":"New handler","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/newHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/new-handler/#newhandler","title":"newHandler","text":"<p>[jvm]\\ open override fun newHandler(): SchemaHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/out-directory/","title":"Out directory","text":"<p>//wire-compiler/com.squareup.wire.schema/JavaTarget/outDirectory</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/out-directory/#outdirectory","title":"outDirectory","text":"<p>[jvm]\\ open override val outDirectory: String</p> <p>Directory where this target will write its output.</p> <p>In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/","title":"Index","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/#kotlintarget","title":"KotlinTarget","text":"<p>[jvm]\\ data class KotlinTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String, android: Boolean, javaInterop: Boolean, emitDeclaredOptions: Boolean, emitAppliedOptions: Boolean, rpcCallStyle: RpcCallStyle, rpcRole: RpcRole, singleMethodServices: Boolean, boxOneOfsMinSize: Int, grpcServerCompatible: Boolean, nameSuffix: String?, buildersOnly: Boolean) : Target</p> <p>Generate .kt sources.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/#constructors","title":"Constructors","text":"KotlinTarget [jvm]fun KotlinTarget(includes: List&lt;String&gt; = listOf(\u201c*\u201d), excludes: List&lt;String&gt; = listOf(), exclusive: Boolean = true, outDirectory: String, android: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, singleMethodServices: Boolean = false, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String? = null, buildersOnly: Boolean = false)"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/#functions","title":"Functions","text":"Name Summary copyTarget [jvm]open override fun copyTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String): TargetReturns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm]open override fun newHandler(): SchemaHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/#properties","title":"Properties","text":"Name Summary android [jvm]val android: Boolean = falseTrue for emitted types to implement android.os.Parcelable. boxOneOfsMinSize [jvm]val boxOneOfsMinSize: Int = 5_000If a oneof has more than or boxOneOfsMinSize fields, it will be generated using boxed oneofs as defined in OneOf. buildersOnly [jvm]val buildersOnly: Boolean = falseIf true, the constructor of all generated types will be non-public, and they will be instantiable via their builders, regardless of the value of javaInterop. emitAppliedOptions [jvm]val emitAppliedOptions: Boolean = trueTrue to emit annotations for options applied on messages, fields, etc. emitDeclaredOptions [jvm]val emitDeclaredOptions: Boolean = trueTrue to emit types for options declared on messages, fields, etc. excludes [jvm]open override val excludes: List&lt;String&gt;Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm]open override val exclusive: Boolean = trueTrue if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. grpcServerCompatible [jvm]val grpcServerCompatible: Boolean = falseTrue to also generate gRPC server-compatible classes. Experimental feature. includes [jvm]open override val includes: List&lt;String&gt;Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. javaInterop [jvm]val javaInterop: Boolean = falseTrue for emitted types to implement APIs for easier migration from the Java target. nameSuffix [jvm]val nameSuffix: String? = nullIf present, generated services classes will use this as a suffix instead of inferring one from the rpcRole. outDirectory [jvm]open override val outDirectory: StringDirectory where this target will write its output. rpcCallStyle [jvm]val rpcCallStyle: RpcCallStyleBlocking or suspending. rpcRole [jvm]val rpcRole: RpcRoleClient or server. singleMethodServices [jvm]val singleMethodServices: Boolean = falseTrue for emitted services to implement one interface per RPC."},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/-kotlin-target/","title":"kotlin target","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/KotlinTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/-kotlin-target/#kotlintarget","title":"KotlinTarget","text":"<p>[jvm]\\ fun KotlinTarget(includes: List&lt;String&gt; = listOf(\u201c*\u201d), excludes: List&lt;String&gt; = listOf(), exclusive: Boolean = true, outDirectory: String, android: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, singleMethodServices: Boolean = false, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String? = null, buildersOnly: Boolean = false)</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/android/","title":"Android","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/android</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/android/#android","title":"android","text":"<p>[jvm]\\ val android: Boolean = false</p> <p>True for emitted types to implement android.os.Parcelable.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/box-one-ofs-min-size/","title":"Box one ofs min size","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/boxOneOfsMinSize</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/box-one-ofs-min-size/#boxoneofsminsize","title":"boxOneOfsMinSize","text":"<p>[jvm]\\ val boxOneOfsMinSize: Int = 5_000</p> <p>If a oneof has more than or boxOneOfsMinSize fields, it will be generated using boxed oneofs as defined in OneOf.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/builders-only/","title":"Builders only","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/buildersOnly</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/builders-only/#buildersonly","title":"buildersOnly","text":"<p>[jvm]\\ val buildersOnly: Boolean = false</p> <p>If true, the constructor of all generated types will be non-public, and they will be instantiable via their builders, regardless of the value of javaInterop.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/copy-target/","title":"Copy target","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/copyTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/copy-target/#copytarget","title":"copyTarget","text":"<p>[jvm]\\ open override fun copyTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String): Target</p> <p>Returns a new Target object that is a copy of this one, but with the given fields updated.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/emit-applied-options/","title":"Emit applied options","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/emitAppliedOptions</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/emit-applied-options/#emitappliedoptions","title":"emitAppliedOptions","text":"<p>[jvm]\\ val emitAppliedOptions: Boolean = true</p> <p>True to emit annotations for options applied on messages, fields, etc.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/emit-declared-options/","title":"Emit declared options","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/emitDeclaredOptions</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/emit-declared-options/#emitdeclaredoptions","title":"emitDeclaredOptions","text":"<p>[jvm]\\ val emitDeclaredOptions: Boolean = true</p> <p>True to emit types for options declared on messages, fields, etc.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/excludes/","title":"Excludes","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/excludes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/excludes/#excludes","title":"excludes","text":"<p>[jvm]\\ open override val excludes: List&lt;String&gt;</p> <p>Proto types to excluded generated sources for. Types listed here will not be generated for this target.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/exclusive/","title":"Exclusive","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/exclusive</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/exclusive/#exclusive","title":"exclusive","text":"<p>[jvm]\\ open override val exclusive: Boolean = true</p> <p>True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/grpc-server-compatible/","title":"Grpc server compatible","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/grpcServerCompatible</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/grpc-server-compatible/#grpcservercompatible","title":"grpcServerCompatible","text":"<p>[jvm]\\ val grpcServerCompatible: Boolean = false</p> <p>True to also generate gRPC server-compatible classes. Experimental feature.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/includes/","title":"Includes","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/includes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/includes/#includes","title":"includes","text":"<p>[jvm]\\ open override val includes: List&lt;String&gt;</p> <p>Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/java-interop/","title":"Java interop","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/javaInterop</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/java-interop/#javainterop","title":"javaInterop","text":"<p>[jvm]\\ val javaInterop: Boolean = false</p> <p>True for emitted types to implement APIs for easier migration from the Java target.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/name-suffix/","title":"Name suffix","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/nameSuffix</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/name-suffix/#namesuffix","title":"nameSuffix","text":"<p>[jvm]\\ val nameSuffix: String? = null</p> <p>If present, generated services classes will use this as a suffix instead of inferring one from the rpcRole.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/new-handler/","title":"New handler","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/newHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/new-handler/#newhandler","title":"newHandler","text":"<p>[jvm]\\ open override fun newHandler(): SchemaHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/out-directory/","title":"Out directory","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/outDirectory</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/out-directory/#outdirectory","title":"outDirectory","text":"<p>[jvm]\\ open override val outDirectory: String</p> <p>Directory where this target will write its output.</p> <p>In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/rpc-call-style/","title":"Rpc call style","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/rpcCallStyle</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/rpc-call-style/#rpccallstyle","title":"rpcCallStyle","text":"<p>[jvm]\\ val rpcCallStyle: RpcCallStyle</p> <p>Blocking or suspending.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/rpc-role/","title":"Rpc role","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/rpcRole</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/rpc-role/#rpcrole","title":"rpcRole","text":"<p>[jvm]\\ val rpcRole: RpcRole</p> <p>Client or server.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/single-method-services/","title":"Single method services","text":"<p>//wire-compiler/com.squareup.wire.schema/KotlinTarget/singleMethodServices</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/single-method-services/#singlemethodservices","title":"singleMethodServices","text":"<p>[jvm]\\ val singleMethodServices: Boolean = false</p> <p>True for emitted services to implement one interface per RPC.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/","title":"Index","text":"<p>//wire-compiler/com.squareup.wire.schema/ProtoTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/#prototarget","title":"ProtoTarget","text":"<p>[jvm]\\ data class ProtoTarget(outDirectory: String) : Target</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/#functions","title":"Functions","text":"Name Summary copyTarget [jvm]open override fun copyTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String): TargetReturns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm]open override fun newHandler(): SchemaHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/#properties","title":"Properties","text":"Name Summary excludes [jvm]open override val excludes: List&lt;String&gt;Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm]open override val exclusive: Boolean = falseTrue if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm]open override val includes: List&lt;String&gt;Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm]open override val outDirectory: StringDirectory where this target will write its output."},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/-proto-target/","title":"proto target","text":"<p>//wire-compiler/com.squareup.wire.schema/ProtoTarget/ProtoTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/-proto-target/#prototarget","title":"ProtoTarget","text":"<p>[jvm]\\ fun ProtoTarget(outDirectory: String)</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/copy-target/","title":"Copy target","text":"<p>//wire-compiler/com.squareup.wire.schema/ProtoTarget/copyTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/copy-target/#copytarget","title":"copyTarget","text":"<p>[jvm]\\ open override fun copyTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String): Target</p> <p>Returns a new Target object that is a copy of this one, but with the given fields updated.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/excludes/","title":"Excludes","text":"<p>//wire-compiler/com.squareup.wire.schema/ProtoTarget/excludes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/excludes/#excludes","title":"excludes","text":"<p>[jvm]\\ open override val excludes: List&lt;String&gt;</p> <p>Proto types to excluded generated sources for. Types listed here will not be generated for this target.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/exclusive/","title":"Exclusive","text":"<p>//wire-compiler/com.squareup.wire.schema/ProtoTarget/exclusive</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/exclusive/#exclusive","title":"exclusive","text":"<p>[jvm]\\ open override val exclusive: Boolean = false</p> <p>True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/includes/","title":"Includes","text":"<p>//wire-compiler/com.squareup.wire.schema/ProtoTarget/includes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/includes/#includes","title":"includes","text":"<p>[jvm]\\ open override val includes: List&lt;String&gt;</p> <p>Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/new-handler/","title":"New handler","text":"<p>//wire-compiler/com.squareup.wire.schema/ProtoTarget/newHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/new-handler/#newhandler","title":"newHandler","text":"<p>[jvm]\\ open override fun newHandler(): SchemaHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/out-directory/","title":"Out directory","text":"<p>//wire-compiler/com.squareup.wire.schema/ProtoTarget/outDirectory</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/out-directory/#outdirectory","title":"outDirectory","text":"<p>[jvm]\\ open override val outDirectory: String</p> <p>Directory where this target will write its output.</p> <p>In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/","title":"Index","text":"<p>//wire-compiler/com.squareup.wire.schema/SwiftTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/#swifttarget","title":"SwiftTarget","text":"<p>[jvm]\\ data class SwiftTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String) : Target</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/#functions","title":"Functions","text":"Name Summary copyTarget [jvm]open override fun copyTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String): TargetReturns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm]open override fun newHandler(): SchemaHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/#properties","title":"Properties","text":"Name Summary excludes [jvm]open override val excludes: List&lt;String&gt;Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm]open override val exclusive: Boolean = trueTrue if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm]open override val includes: List&lt;String&gt;Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm]open override val outDirectory: StringDirectory where this target will write its output."},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/-swift-target/","title":"swift target","text":"<p>//wire-compiler/com.squareup.wire.schema/SwiftTarget/SwiftTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/-swift-target/#swifttarget","title":"SwiftTarget","text":"<p>[jvm]\\ fun SwiftTarget(includes: List&lt;String&gt; = listOf(\u201c*\u201d), excludes: List&lt;String&gt; = listOf(), exclusive: Boolean = true, outDirectory: String)</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/copy-target/","title":"Copy target","text":"<p>//wire-compiler/com.squareup.wire.schema/SwiftTarget/copyTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/copy-target/#copytarget","title":"copyTarget","text":"<p>[jvm]\\ open override fun copyTarget(includes: List&lt;String&gt;, excludes: List&lt;String&gt;, exclusive: Boolean, outDirectory: String): Target</p> <p>Returns a new Target object that is a copy of this one, but with the given fields updated.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/excludes/","title":"Excludes","text":"<p>//wire-compiler/com.squareup.wire.schema/SwiftTarget/excludes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/excludes/#excludes","title":"excludes","text":"<p>[jvm]\\ open override val excludes: List&lt;String&gt;</p> <p>Proto types to excluded generated sources for. Types listed here will not be generated for this target.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/exclusive/","title":"Exclusive","text":"<p>//wire-compiler/com.squareup.wire.schema/SwiftTarget/exclusive</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/exclusive/#exclusive","title":"exclusive","text":"<p>[jvm]\\ open override val exclusive: Boolean = true</p> <p>True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/includes/","title":"Includes","text":"<p>//wire-compiler/com.squareup.wire.schema/SwiftTarget/includes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/includes/#includes","title":"includes","text":"<p>[jvm]\\ open override val includes: List&lt;String&gt;</p> <p>Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/new-handler/","title":"New handler","text":"<p>//wire-compiler/com.squareup.wire.schema/SwiftTarget/newHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/new-handler/#newhandler","title":"newHandler","text":"<p>[jvm]\\ open override fun newHandler(): SchemaHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/out-directory/","title":"Out directory","text":"<p>//wire-compiler/com.squareup.wire.schema/SwiftTarget/outDirectory</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/out-directory/#outdirectory","title":"outDirectory","text":"<p>[jvm]\\ open override val outDirectory: String</p> <p>Directory where this target will write its output.</p> <p>In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/","title":"Index","text":"<p>//wire-compiler/com.squareup.wire.schema/Target</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/#target","title":"Target","text":"<p>[jvm]\\ sealed class Target : Serializable</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/#functions","title":"Functions","text":"Name Summary copyTarget [jvm]abstract fun copyTarget(includes: List&lt;String&gt; = this.includes, excludes: List&lt;String&gt; = this.excludes, exclusive: Boolean = this.exclusive, outDirectory: String = this.outDirectory): TargetReturns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm]abstract fun newHandler(): SchemaHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/#properties","title":"Properties","text":"Name Summary excludes [jvm]abstract val excludes: List&lt;String&gt;Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm]abstract val exclusive: BooleanTrue if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm]abstract val includes: List&lt;String&gt;Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm]abstract val outDirectory: StringDirectory where this target will write its output."},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/#inheritors","title":"Inheritors","text":"Name JavaTarget KotlinTarget SwiftTarget ProtoTarget CustomTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/copy-target/","title":"Copy target","text":"<p>//wire-compiler/com.squareup.wire.schema/Target/copyTarget</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/copy-target/#copytarget","title":"copyTarget","text":"<p>[jvm]\\ abstract fun copyTarget(includes: List&lt;String&gt; = this.includes, excludes: List&lt;String&gt; = this.excludes, exclusive: Boolean = this.exclusive, outDirectory: String = this.outDirectory): Target</p> <p>Returns a new Target object that is a copy of this one, but with the given fields updated.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/excludes/","title":"Excludes","text":"<p>//wire-compiler/com.squareup.wire.schema/Target/excludes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/excludes/#excludes","title":"excludes","text":"<p>[jvm]\\ abstract val excludes: List&lt;String&gt;</p> <p>Proto types to excluded generated sources for. Types listed here will not be generated for this target.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/exclusive/","title":"Exclusive","text":"<p>//wire-compiler/com.squareup.wire.schema/Target/exclusive</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/exclusive/#exclusive","title":"exclusive","text":"<p>[jvm]\\ abstract val exclusive: Boolean</p> <p>True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/includes/","title":"Includes","text":"<p>//wire-compiler/com.squareup.wire.schema/Target/includes</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/includes/#includes","title":"includes","text":"<p>[jvm]\\ abstract val includes: List&lt;String&gt;</p> <p>Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task.</p> <p>This list should contain package names (suffixed with .*) and type names only. It should not contain member names.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/new-handler/","title":"New handler","text":"<p>//wire-compiler/com.squareup.wire.schema/Target/newHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/new-handler/#newhandler","title":"newHandler","text":"<p>[jvm]\\ abstract fun newHandler(): SchemaHandler</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/out-directory/","title":"Out directory","text":"<p>//wire-compiler/com.squareup.wire.schema/Target/outDirectory</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/out-directory/#outdirectory","title":"outDirectory","text":"<p>[jvm]\\ abstract val outDirectory: String</p> <p>Directory where this target will write its output.</p> <p>In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/","title":"Index","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#wirerun","title":"WireRun","text":"<p>[jvm]\\ data class WireRun(sourcePath: List&lt;Location&gt;, protoPath: List&lt;Location&gt;, treeShakingRoots: List&lt;String&gt;, treeShakingRubbish: List&lt;String&gt;, moves: List&lt;TypeMover.Move&gt;, sinceVersion: String?, untilVersion: String?, onlyVersion: String?, targets: List&lt;Target&gt;, modules: Map&lt;String, WireRun.Module&gt;, permitPackageCycles: Boolean)</p> <p>An invocation of the Wire compiler. Each invocation performs the following operations:</p> <ol><li>Read source .proto files directly from the file system or from archive files (ie. .jar     and .zip files). This will also load imported .proto files from either the [sourcePath](source-path.md)     or [protoPath](proto-path.md). The collection of loaded type declarations is called a schema.</li><li>Validate the schema and resolve references between types.</li><li>Optionally refactor the schema. This builds a new schema that is a subset of the original.     The new schema contains only types that are both transitively reachable from     [treeShakingRoots](tree-shaking-roots.md) and not in [treeShakingRubbish](tree-shaking-rubbish.md). Types are moved to different files as     specified by [moves](moves.md).</li><li>Call each target. It will generate sources for protos in the [sourcePath](source-path.md) that are in its     [Target.includes](../-target/includes.md), that are not in its [Target.excludes](../-target/excludes.md), and that haven't already been     emitted by an earlier target.</li></ol> <p>Source Directories and Archives</p> <p>The sourcePath and protoPath lists contain locations that are of the following forms:</p> <ul><li>Locations of .proto files.</li><li>Locations of directories that contain a tree of .proto files. Typically this is a directory     ending in src/main/proto.</li><li>Locations of .zip and .jar archives that contain a tree of .proto files. Typically this     is a .jar file from a Maven repository.</li></ul> <p>When one .proto message imports another, the import is resolved from the base of each location and archive. If the build is in the unfortunate situation where an import could be resolved by multiple files, whichever was listed first takes precedence.</p> <p>Although the content and structure of sourcePath and protoPath are the same, only types defined in sourcePath are used to generate sources.</p> <p>Matching Packages, Types, and Members</p> <p>The treeShakingRoots, treeShakingRubbish, Target.includes and Target.excludes lists contain strings that select proto types and members. Strings in these lists are in one of these forms:</p> <ul><li>Package names followed by .*, like squareup.dinosaurs.*. This matches types defined in the     package and its descendant packages. A lone asterisk * matches all packages.</li><li>Fully-qualified type names like squareup.dinosaurs.Dinosaur. Types may be messages, enums,     or services.</li><li>Fully-qualified member names like squareup.dinosaurs.Dinosaur#name. These are type names     followed by # followed by a member name. Members may be message fields, enum constants, or     service RPCs.</li></ul> <p>It is an error to specify mutually-redundant values in any of these lists. For example, the list [squareup.dinosaurs, squareup.dinosaurs.Dinosaur] is invalid because the second element is already matched by the first.</p> <p>Every element in each lists must apply to at least one declaration. Otherwise that option is unnecessary and a possible typo.</p> <p>Composability</p> <p>There are many moving parts in this system! For most applications it is safe to use sourcePath and targets only. The other options are for the benefit of large and modular applications.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#use-protopath-when-one-proto-module-depends-on-another-proto-module","title":"Use protoPath when one proto module depends on another proto module.","text":"<p>These .proto files are used for checking dependencies only. It is assumed that the sources for these protos are generated elsewhere.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#use-tree-shaking-to-remove-unwanted-types","title":"Use tree shaking to remove unwanted types.","text":"<p>Tree shaking can be used to create a small-as-possible generated footprint even if the source declarations are large. This works like ProGuard and other code shrinking compilers: it allows you to benefit from a shared codebase without creating a large artifact.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#use-multiple-targets-to-split-generated-code-across-multiple-programming-languages","title":"Use multiple targets to split generated code across multiple programming languages.","text":"<p>If your project is already using generated Java, it\u2019s difficult to switch to generated Kotlin. Instead of switching everything over at once you can use multiple targets to switch over incrementally. Targets consume their types; subsequent targets get whatever types are left over.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#constructors","title":"Constructors","text":"WireRun [jvm]fun WireRun(sourcePath: List&lt;Location&gt;, protoPath: List&lt;Location&gt; = listOf(), treeShakingRoots: List&lt;String&gt; = listOf(\u201c*\u201d), treeShakingRubbish: List&lt;String&gt; = listOf(), moves: List&lt;TypeMover.Move&gt; = listOf(), sinceVersion: String? = null, untilVersion: String? = null, onlyVersion: String? = null, targets: List&lt;Target&gt;, modules: Map&lt;String, WireRun.Module&gt; = emptyMap(), permitPackageCycles: Boolean = false)"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#types","title":"Types","text":"Name Summary Module [jvm]data class Module(dependencies: Set&lt;String&gt;, pruningRules: PruningRules?)"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#functions","title":"Functions","text":"Name Summary execute [jvm]fun execute(fs: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger())"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#properties","title":"Properties","text":"Name Summary modules [jvm]val modules: Map&lt;String, WireRun.Module&gt;A map from module dir to module info which dictates how the loaded types are partitioned and generated. moves [jvm]val moves: List&lt;TypeMover.Move&gt;Types to move before generating code or producing other output. Use this with ProtoTarget to refactor proto schemas safely. onlyVersion [jvm]val onlyVersion: String? = nullThe only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained. This field is mutually exclusive with sinceVersion and untilVersion. permitPackageCycles [jvm]val permitPackageCycles: Boolean = falseIf true, no validation will be executed to check package cycles. protoPath [jvm]val protoPath: List&lt;Location&gt;Sources .proto files for this task to use when resolving references. sinceVersion [jvm]val sinceVersion: String? = nullThe exclusive lower bound of the version range. Fields with until values greater than this are retained. sourcePath [jvm]val sourcePath: List&lt;Location&gt;Source .proto files for this task to generate from. targets [jvm]val targets: List&lt;Target&gt;Action to take with the loaded, resolved, and possibly-pruned schema. treeShakingRoots [jvm]val treeShakingRoots: List&lt;String&gt;The roots of the schema model. Wire will prune the schema model to only include types in this list and the types transitively required by them. treeShakingRubbish [jvm]val treeShakingRubbish: List&lt;String&gt;Types and members that will be stripped from the schema model. Wire will remove the elements themselves and also all references to them. untilVersion [jvm]val untilVersion: String? = nullThe inclusive upper bound of the version range. Fields with since values less than or equal to this are retained."},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-wire-run/","title":"wire run","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/WireRun</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-wire-run/#wirerun","title":"WireRun","text":"<p>[jvm]\\ fun WireRun(sourcePath: List&lt;Location&gt;, protoPath: List&lt;Location&gt; = listOf(), treeShakingRoots: List&lt;String&gt; = listOf(\u201c*\u201d), treeShakingRubbish: List&lt;String&gt; = listOf(), moves: List&lt;TypeMover.Move&gt; = listOf(), sinceVersion: String? = null, untilVersion: String? = null, onlyVersion: String? = null, targets: List&lt;Target&gt;, modules: Map&lt;String, WireRun.Module&gt; = emptyMap(), permitPackageCycles: Boolean = false)</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/execute/","title":"Execute","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/execute</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/execute/#execute","title":"execute","text":"<p>[jvm]\\ fun execute(fs: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger())</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/modules/","title":"Modules","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/modules</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/modules/#modules","title":"modules","text":"<p>[jvm]\\ val modules: Map&lt;String, WireRun.Module&gt;</p> <p>A map from module dir to module info which dictates how the loaded types are partitioned and generated.</p> <p>When empty everything is generated in the root output directory. If desired, multiple modules can be specified along with dependencies between them. Types which appear in dependencies will not be re-generated.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/moves/","title":"Moves","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/moves</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/moves/#moves","title":"moves","text":"<p>[jvm]\\ val moves: List&lt;TypeMover.Move&gt;</p> <p>Types to move before generating code or producing other output. Use this with ProtoTarget to refactor proto schemas safely.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/only-version/","title":"Only version","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/onlyVersion</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/only-version/#onlyversion","title":"onlyVersion","text":"<p>[jvm]\\ val onlyVersion: String? = null</p> <p>The only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained. This field is mutually exclusive with sinceVersion and untilVersion.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/permit-package-cycles/","title":"Permit package cycles","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/permitPackageCycles</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/permit-package-cycles/#permitpackagecycles","title":"permitPackageCycles","text":"<p>[jvm]\\ val permitPackageCycles: Boolean = false</p> <p>If true, no validation will be executed to check package cycles.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/proto-path/","title":"Proto path","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/protoPath</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/proto-path/#protopath","title":"protoPath","text":"<p>[jvm]\\ val protoPath: List&lt;Location&gt;</p> <p>Sources .proto files for this task to use when resolving references.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/since-version/","title":"Since version","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/sinceVersion</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/since-version/#sinceversion","title":"sinceVersion","text":"<p>[jvm]\\ val sinceVersion: String? = null</p> <p>The exclusive lower bound of the version range. Fields with until values greater than this are retained.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/source-path/","title":"Source path","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/sourcePath</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/source-path/#sourcepath","title":"sourcePath","text":"<p>[jvm]\\ val sourcePath: List&lt;Location&gt;</p> <p>Source .proto files for this task to generate from.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/targets/","title":"Targets","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/targets</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/targets/#targets","title":"targets","text":"<p>[jvm]\\ val targets: List&lt;Target&gt;</p> <p>Action to take with the loaded, resolved, and possibly-pruned schema.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/tree-shaking-roots/","title":"Tree shaking roots","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/treeShakingRoots</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/tree-shaking-roots/#treeshakingroots","title":"treeShakingRoots","text":"<p>[jvm]\\ val treeShakingRoots: List&lt;String&gt;</p> <p>The roots of the schema model. Wire will prune the schema model to only include types in this list and the types transitively required by them.</p> <p>If a member is included in this list then the enclosing type is included but its other members are not. For example, if squareup.dinosaurs.Dinosaur#name is in this list then the emitted source of the Dinosaur message will have the name field, but not the length_meters or mass_kilograms fields.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/tree-shaking-rubbish/","title":"Tree shaking rubbish","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/treeShakingRubbish</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/tree-shaking-rubbish/#treeshakingrubbish","title":"treeShakingRubbish","text":"<p>[jvm]\\ val treeShakingRubbish: List&lt;String&gt;</p> <p>Types and members that will be stripped from the schema model. Wire will remove the elements themselves and also all references to them.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/until-version/","title":"Until version","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/untilVersion</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/until-version/#untilversion","title":"untilVersion","text":"<p>[jvm]\\ val untilVersion: String? = null</p> <p>The inclusive upper bound of the version range. Fields with since values less than or equal to this are retained.</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/","title":"Index","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/Module</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/#module","title":"Module","text":"<p>[jvm]\\ data class Module(dependencies: Set&lt;String&gt;, pruningRules: PruningRules?)</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/#properties","title":"Properties","text":"Name Summary dependencies [jvm]val dependencies: Set&lt;String&gt; pruningRules [jvm]val pruningRules: PruningRules? = null"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/-module/","title":"module","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/Module/Module</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/-module/#module","title":"Module","text":"<p>[jvm]\\ fun Module(dependencies: Set&lt;String&gt; = emptySet(), pruningRules: PruningRules? = null)</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/dependencies/","title":"Dependencies","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/Module/dependencies</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/dependencies/#dependencies","title":"dependencies","text":"<p>[jvm]\\ val dependencies: Set&lt;String&gt;</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/pruning-rules/","title":"Pruning rules","text":"<p>//wire-compiler/com.squareup.wire.schema/WireRun/Module/pruningRules</p>"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/pruning-rules/#pruningrules","title":"pruningRules","text":"<p>[jvm]\\ val pruningRules: PruningRules? = null</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/","title":"wire-grpc-client","text":"<p>//wire-grpc-client/com.squareup.wire</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/#package-comsquareupwire","title":"Package com.squareup.wire","text":""},{"location":"3.x/wire-grpc-client/com.squareup.wire/#types","title":"Types","text":"Name Summary GrpcCall [common]interface GrpcCall&lt;S : Any, R : Any&gt;A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. GrpcClient [common, js, jvm, native][common, js, jvm, native]class GrpcClient GrpcException [common]class GrpcException(grpcStatus: GrpcStatus, grpcMessage: String?) : IOException GrpcHeaders [common, js, native, jvm][common, js, native]class GrpcHeaders[jvm]typealias GrpcHeaders = Headers GrpcHttpUrl [common, js, native, jvm][common, js, native]class GrpcHttpUrl[jvm]typealias GrpcHttpUrl = HttpUrl GrpcMethod [common]class GrpcMethod&lt;S : Any, R : Any&gt;(path: String, requestAdapter: ProtoAdapter&lt;S&gt;, responseAdapter: ProtoAdapter&lt;R&gt;) GrpcRequest [common, js, native, jvm][common, js, native]class GrpcRequest[jvm]typealias GrpcRequest = Request GrpcRequestBody [common, js, native, jvm][common, js, native]abstract class GrpcRequestBody[jvm]typealias GrpcRequestBody = RequestBody GrpcRequestBuilder [common, js, native, jvm][common, js, native]open class GrpcRequestBuilder[jvm]typealias GrpcRequestBuilder = Request.Builder GrpcResponse [common, js, native, jvm][common, js, native]class GrpcResponse[jvm]typealias GrpcResponse = Response GrpcResponseBody [common, js, native, jvm][common, js, native]abstract class GrpcResponseBody[jvm]typealias GrpcResponseBody = ResponseBody GrpcStatus [common]class GrpcStatus GrpcStreamingCall [common]interface GrpcStreamingCall&lt;S : Any, R : Any&gt;A single streaming call to a remote server. This class handles three streaming call types: WireGrpcExperimental [common]@ExperimentalCoroutinesApi@Target(allowedTargets = [AnnotationTarget.CLASS, AnnotationTarget.FUNCTION])annotation class WireGrpcExperimentalMarker annotation for experimental Wire gRPC features."},{"location":"3.x/wire-grpc-client/com.squareup.wire/#functions","title":"Functions","text":"Name Summary GrpcCall [jvm]@JvmName(name = \u201cgrpcCall\u201d)fun &lt;S : Any, R : Any&gt; GrpcCall(function: (S) -&gt; R): GrpcCall&lt;S, R&gt;Returns a new instance of GrpcCall that can be used for a single call to execute, executeBlocking, or enqueue. GrpcStreamingCall [jvm]@JvmName(name = \u201cgrpcStreamingCall\u201d)fun &lt;S : Any, R : Any&gt; GrpcStreamingCall(function: suspend (ReceiveChannel&lt;S&gt;, SendChannel&lt;R&gt;) -&gt; Unit): GrpcStreamingCall&lt;S, R&gt;Returns a new instance of GrpcStreamingCall that can be used for a single call to executeIn or executeBlocking. toHttpUrl [common, js, jvm, native][common, js, jvm, native]fun String.toHttpUrl(): GrpcHttpUrl"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/","title":"grpc call","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#grpccall","title":"GrpcCall","text":"<p>[jvm]\\</p> <p>@JvmName(name = \u201cgrpcCall\u201d)</p> <p>fun &lt;S : Any, R : Any&gt; GrpcCall(function: (S) -&gt; R): GrpcCall&lt;S, R&gt;</p> <p>Returns a new instance of GrpcCall that can be used for a single call to execute, executeBlocking, or enqueue.</p> <p>The returned instance executes function synchronously on the calling thread, regardless of which blocking mode is used. If function throws, the thrown exception will be wrapped in an IOException.</p> <p>This method is useful when implementing the interfaces that are generated by Wire:</p> <p>override fun GetFeature(): GrpcCall&lt;Point, Feature&gt; {\\   return GrpcCall&lt;Point, Feature&gt; { request -&gt;\\     return@GrpcCall lookupNearestFeature(request.latitude, request.longitude)\\   }\\ }</p> <p>It is succinct when used in an expression function:</p> <p>override fun GetFeature() = GrpcCall&lt;Point, Feature&gt; { request -&gt;\\   return@GrpcCall lookupNearestFeature(request.latitude, request.longitude)\\ }</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/","title":"grpc streaming call","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#grpcstreamingcall","title":"GrpcStreamingCall","text":"<p>[jvm]\\</p> <p>@JvmName(name = \u201cgrpcStreamingCall\u201d)</p> <p>fun &lt;S : Any, R : Any&gt; GrpcStreamingCall(function: suspend (ReceiveChannel&lt;S&gt;, SendChannel&lt;R&gt;) -&gt; Unit): GrpcStreamingCall&lt;S, R&gt;</p> <p>Returns a new instance of GrpcStreamingCall that can be used for a single call to executeIn or executeBlocking.</p> <p>The returned instance launches function on Dispatchers.IO. The function must close the SendChannel when it has no more messages to transmit. If function throws, both channels will be closed using the thrown exception as a cause.</p> <p>This method is useful when implementing the interfaces that are generated by Wire:</p> <p>override fun RouteChat(): GrpcStreamingCall&lt;RouteNote, RouteNote&gt; {\\   return GrpcStreamingCall { requests, responses -&gt;\\     requests.consumeEach { note -&gt;\\       responses.send(translateNote(note))\\     }\\     responses.close()\\   }\\ }</p> <p>It is succinct when used in an expression function:</p> <p>override fun RouteChat() = GrpcStreamingCall&lt;RouteNote, RouteNote&gt; { requests, responses -&gt;\\   requests.consumeEach { note -&gt;\\     responses.send(translateNote(note))\\   }\\   responses.close()\\ }</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/to-http-url/","title":"To http url","text":"<p>//wire-grpc-client/com.squareup.wire/toHttpUrl</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/to-http-url/#tohttpurl","title":"toHttpUrl","text":"<p>[common, js, jvm, native]\\ [common, js, jvm, native]\\ fun String.toHttpUrl(): GrpcHttpUrl</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#grpccall","title":"GrpcCall","text":"<p>[common]\\ interface GrpcCall&lt;S : Any, R : Any&gt;</p> <p>A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice.</p> <p>gRPC calls can be suspending, blocking, or asynchronous. Use whichever mechanism works at your call site: the bytes transmitted on the network are the same.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#types","title":"Types","text":"Name Summary Callback [common]interface Callback&lt;S : Any, R : Any&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#functions","title":"Functions","text":"Name Summary cancel [common]abstract fun cancel()Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone [common]abstract fun clone(): GrpcCall&lt;S, R&gt;Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. enqueue [common]abstract fun enqueue(request: S, callback: GrpcCall.Callback&lt;S, R&gt;)Enqueues this call for asynchronous execution. The callback will be invoked on the client\u2019s dispatcher thread when the call completes. execute [common]abstract suspend fun execute(request: S): RInvokes the call immediately and suspends until its response is received. executeBlocking [common]abstract fun executeBlocking(request: S): RInvokes the call immediately and blocks until its response is received. isCanceled [common]abstract fun isCanceled(): BooleanTrue if cancel was called. isExecuted [common]abstract fun isExecuted(): BooleanReturns true if execute, executeBlocking, or enqueue was called. It is an error to execute or enqueue a call more than once."},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#properties","title":"Properties","text":"Name Summary method [common]abstract val method: GrpcMethod&lt;S, R&gt;The method invoked by this call. requestMetadata [common]abstract var requestMetadata: Map&lt;String, String&gt;A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed. responseMetadata [common]abstract val responseMetadata: Map&lt;String, String&gt;?A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present. timeout [common]abstract val timeout: TimeoutConfigures how long the call can take to complete before it is automatically canceled."},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/cancel/","title":"Cancel","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/cancel</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/cancel/#cancel","title":"cancel","text":"<p>[common]\\ abstract fun cancel()</p> <p>Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/clone/","title":"Clone","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/clone</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/clone/#clone","title":"clone","text":"<p>[common]\\ abstract fun clone(): GrpcCall&lt;S, R&gt;</p> <p>Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/enqueue/","title":"Enqueue","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/enqueue</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/enqueue/#enqueue","title":"enqueue","text":"<p>[common]\\ abstract fun enqueue(request: S, callback: GrpcCall.Callback&lt;S, R&gt;)</p> <p>Enqueues this call for asynchronous execution. The callback will be invoked on the client\u2019s dispatcher thread when the call completes.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute-blocking/","title":"Execute blocking","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/executeBlocking</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute-blocking/#executeblocking","title":"executeBlocking","text":"<p>[common]\\ abstract fun executeBlocking(request: S): R</p> <p>Invokes the call immediately and blocks until its response is received.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute/","title":"Execute","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/execute</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute/#execute","title":"execute","text":"<p>[common]\\ abstract suspend fun execute(request: S): R</p> <p>Invokes the call immediately and suspends until its response is received.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-canceled/","title":"Is canceled","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/isCanceled</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-canceled/#iscanceled","title":"isCanceled","text":"<p>[common]\\ abstract fun isCanceled(): Boolean</p> <p>True if cancel was called.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-executed/","title":"Is executed","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/isExecuted</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-executed/#isexecuted","title":"isExecuted","text":"<p>[common]\\ abstract fun isExecuted(): Boolean</p> <p>Returns true if execute, executeBlocking, or enqueue was called. It is an error to execute or enqueue a call more than once.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/method/","title":"Method","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/method</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/method/#method","title":"method","text":"<p>[common]\\ abstract val method: GrpcMethod&lt;S, R&gt;</p> <p>The method invoked by this call.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/request-metadata/","title":"Request metadata","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/requestMetadata</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/request-metadata/#requestmetadata","title":"requestMetadata","text":"<p>[common]\\ abstract var requestMetadata: Map&lt;String, String&gt;</p> <p>A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/response-metadata/","title":"Response metadata","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/responseMetadata</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/response-metadata/#responsemetadata","title":"responseMetadata","text":"<p>[common]\\ abstract val responseMetadata: Map&lt;String, String&gt;?</p> <p>A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/timeout/","title":"Timeout","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/timeout</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/timeout/#timeout","title":"timeout","text":"<p>[common]\\ abstract val timeout: Timeout</p> <p>Configures how long the call can take to complete before it is automatically canceled.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/Callback</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/#callback","title":"Callback","text":"<p>[common]\\ interface Callback&lt;S : Any, R : Any&gt;</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/#functions","title":"Functions","text":"Name Summary onFailure [common]abstract fun onFailure(call: GrpcCall&lt;S, R&gt;, exception: IOException) onSuccess [common]abstract fun onSuccess(call: GrpcCall&lt;S, R&gt;, response: R)"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-failure/","title":"On failure","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/Callback/onFailure</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-failure/#onfailure","title":"onFailure","text":"<p>[common]\\ abstract fun onFailure(call: GrpcCall&lt;S, R&gt;, exception: IOException)</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-success/","title":"On success","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcCall/Callback/onSuccess</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-success/#onsuccess","title":"onSuccess","text":"<p>[common]\\ abstract fun onSuccess(call: GrpcCall&lt;S, R&gt;, response: R)</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#grpcclient","title":"GrpcClient","text":"<p>[common, js, jvm, native]\\ class GrpcClient</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#types","title":"Types","text":"Name Summary Builder [jvm]class Builder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#functions","title":"Functions","text":"Name Summary create [jvm]inline fun &lt;T : Service&gt; create(): TReturns a T that makes gRPC calls using this client.[jvm]fun &lt;T : Service&gt; create(service: KClass&lt;T&gt;): TReturns a service that makes gRPC calls using this client. newBuilder [jvm]fun newBuilder(): GrpcClient.Builder newCall [common, js, jvm, native][common]fun &lt;S : Any, R : Any&gt; newCall(method: GrpcMethod&lt;S, R&gt;): GrpcCall&lt;S, R&gt;[js, jvm, native]fun &lt;S : Any, R : Any&gt; newCall(method: GrpcMethod&lt;S, R&gt;): GrpcCall&lt;S, R&gt; newStreamingCall [common, js, jvm, native][common]fun &lt;S : Any, R : Any&gt; newStreamingCall(method: GrpcMethod&lt;S, R&gt;): GrpcStreamingCall&lt;S, R&gt;[js, jvm, native]fun &lt;S : Any, R : Any&gt; newStreamingCall(method: GrpcMethod&lt;S, R&gt;): GrpcStreamingCall&lt;S, R&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-grpc-client/","title":"grpc client","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/GrpcClient</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-grpc-client/#grpcclient","title":"GrpcClient","text":"<p>[js, native]\\ [js, native]\\ fun GrpcClient()</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/create/","title":"Create","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/create</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/create/#create","title":"create","text":"<p>[jvm]\\ inline fun &lt;T : Service&gt; create(): T</p> <p>Returns a T that makes gRPC calls using this client.</p> <p>[jvm]\\ fun &lt;T : Service&gt; create(service: KClass&lt;T&gt;): T</p> <p>Returns a service that makes gRPC calls using this client.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-builder/","title":"New builder","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/newBuilder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-builder/#newbuilder","title":"newBuilder","text":"<p>[jvm]\\ fun newBuilder(): GrpcClient.Builder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-call/","title":"New call","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/newCall</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-call/#newcall","title":"newCall","text":"<p>[common, js, jvm, native]\\ [common]\\ fun &lt;S : Any, R : Any&gt; newCall(method: GrpcMethod&lt;S, R&gt;): GrpcCall&lt;S, R&gt;</p> <p>[js, jvm, native]\\ fun &lt;S : Any, R : Any&gt; newCall(method: GrpcMethod&lt;S, R&gt;): GrpcCall&lt;S, R&gt;</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-streaming-call/","title":"New streaming call","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/newStreamingCall</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-streaming-call/#newstreamingcall","title":"newStreamingCall","text":"<p>[common, js, jvm, native]\\ [common]\\ fun &lt;S : Any, R : Any&gt; newStreamingCall(method: GrpcMethod&lt;S, R&gt;): GrpcStreamingCall&lt;S, R&gt;</p> <p>[js, jvm, native]\\ fun &lt;S : Any, R : Any&gt; newStreamingCall(method: GrpcMethod&lt;S, R&gt;): GrpcStreamingCall&lt;S, R&gt;</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/Builder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ class Builder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/#functions","title":"Functions","text":"Name Summary baseUrl [jvm]fun baseUrl(baseUrl: String): GrpcClient.Builderfun baseUrl(url: GrpcHttpUrl): GrpcClient.Builder build [jvm]fun build(): GrpcClient callFactory [jvm]fun callFactory(client: Call.Factory): GrpcClient.Builder client [jvm]fun client(client: OkHttpClient): GrpcClient.Builder minMessageToCompress [jvm]fun minMessageToCompress(bytes: Long): GrpcClient.BuilderSets the minimum outbound message size (in bytes) that will be compressed."},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/-builder/","title":"builder","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/Builder/Builder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/-builder/#builder","title":"Builder","text":"<p>[jvm]\\ fun Builder()</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/base-url/","title":"Base url","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/Builder/baseUrl</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/base-url/#baseurl","title":"baseUrl","text":"<p>[jvm]\\ fun baseUrl(baseUrl: String): GrpcClient.Builder</p> <p>fun baseUrl(url: GrpcHttpUrl): GrpcClient.Builder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/build/","title":"Build","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/Builder/build</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/build/#build","title":"build","text":"<p>[jvm]\\ fun build(): GrpcClient</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/call-factory/","title":"Call factory","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/Builder/callFactory</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/call-factory/#callfactory","title":"callFactory","text":"<p>[jvm]\\ fun callFactory(client: Call.Factory): GrpcClient.Builder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/client/","title":"Client","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/Builder/client</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/client/#client","title":"client","text":"<p>[jvm]\\ fun client(client: OkHttpClient): GrpcClient.Builder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/min-message-to-compress/","title":"Min message to compress","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcClient/Builder/minMessageToCompress</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/min-message-to-compress/#minmessagetocompress","title":"minMessageToCompress","text":"<p>[jvm]\\ fun minMessageToCompress(bytes: Long): GrpcClient.Builder</p> <p>Sets the minimum outbound message size (in bytes) that will be compressed.</p> <p>Set this to 0 to enable compression for all outbound messages. Set to Long.MAX_VALUE to disable compression.</p> <p>This is 0 by default.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcException</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/#grpcexception","title":"GrpcException","text":"<p>[common]\\ class GrpcException(grpcStatus: GrpcStatus, grpcMessage: String?) : IOException</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/#properties","title":"Properties","text":"Name Summary cause [common]open val cause: Throwable? grpcMessage [common]val grpcMessage: String? grpcStatus [common]val grpcStatus: GrpcStatus message [common]open val message: String?"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/-grpc-exception/","title":"grpc exception","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcException/GrpcException</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/-grpc-exception/#grpcexception","title":"GrpcException","text":"<p>[common]\\ fun GrpcException(grpcStatus: GrpcStatus, grpcMessage: String?)</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-message/","title":"Grpc message","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcException/grpcMessage</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-message/#grpcmessage","title":"grpcMessage","text":"<p>[common]\\ val grpcMessage: String?</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-status/","title":"Grpc status","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcException/grpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-status/#grpcstatus","title":"grpcStatus","text":"<p>[common]\\ val grpcStatus: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcHeaders</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/#grpcheaders","title":"GrpcHeaders","text":"<p>[common, js, native]\\ class GrpcHeaders</p> <p>[jvm]\\ typealias GrpcHeaders = Headers</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/#functions","title":"Functions","text":"Name Summary get [common, js, native][common, js, native]operator fun get(name: String): String?"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-grpc-headers/","title":"grpc headers","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcHeaders/GrpcHeaders</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-grpc-headers/#grpcheaders","title":"GrpcHeaders","text":"<p>[js, native]\\ [js, native]\\ fun GrpcHeaders()</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/get/","title":"Get","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcHeaders/get</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/get/#get","title":"get","text":"<p>[common, js, native]\\ [common, js, native]\\ operator fun get(name: String): String?</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcHttpUrl</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/#grpchttpurl","title":"GrpcHttpUrl","text":"<p>[common, js, native]\\ class GrpcHttpUrl</p> <p>[jvm]\\ typealias GrpcHttpUrl = HttpUrl</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/#functions","title":"Functions","text":"Name Summary resolve [common, js, native][common, js, native]fun resolve(link: String): GrpcHttpUrl?"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-grpc-http-url/","title":"grpc http url","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcHttpUrl/GrpcHttpUrl</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-grpc-http-url/#grpchttpurl","title":"GrpcHttpUrl","text":"<p>[js, native]\\ [js, native]\\ fun GrpcHttpUrl()</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/resolve/","title":"Resolve","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcHttpUrl/resolve</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/resolve/#resolve","title":"resolve","text":"<p>[common, js, native]\\ [common, js, native]\\ fun resolve(link: String): GrpcHttpUrl?</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcMethod</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/#grpcmethod","title":"GrpcMethod","text":"<p>[common]\\ class GrpcMethod&lt;S : Any, R : Any&gt;(path: String, requestAdapter: ProtoAdapter&lt;S&gt;, responseAdapter: ProtoAdapter&lt;R&gt;)</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/#properties","title":"Properties","text":"Name Summary path [common]val path: String requestAdapter [common]val requestAdapter: ProtoAdapter&lt;S&gt; responseAdapter [common]val responseAdapter: ProtoAdapter&lt;R&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/-grpc-method/","title":"grpc method","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcMethod/GrpcMethod</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/-grpc-method/#grpcmethod","title":"GrpcMethod","text":"<p>[common]\\ fun &lt;S : Any, R : Any&gt; GrpcMethod(path: String, requestAdapter: ProtoAdapter&lt;S&gt;, responseAdapter: ProtoAdapter&lt;R&gt;)</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/path/","title":"Path","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcMethod/path</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/path/#path","title":"path","text":"<p>[common]\\ val path: String</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/request-adapter/","title":"Request adapter","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcMethod/requestAdapter</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/request-adapter/#requestadapter","title":"requestAdapter","text":"<p>[common]\\ val requestAdapter: ProtoAdapter&lt;S&gt;</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/response-adapter/","title":"Response adapter","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcMethod/responseAdapter</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/response-adapter/#responseadapter","title":"responseAdapter","text":"<p>[common]\\ val responseAdapter: ProtoAdapter&lt;R&gt;</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcRequest</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/#grpcrequest","title":"GrpcRequest","text":"<p>[common, js, native]\\ class GrpcRequest</p> <p>[jvm]\\ typealias GrpcRequest = Request</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/-grpc-request/","title":"grpc request","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcRequest/GrpcRequest</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/-grpc-request/#grpcrequest","title":"GrpcRequest","text":"<p>[js, native]\\ [js, native]\\ fun GrpcRequest()</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcRequestBody</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/#grpcrequestbody","title":"GrpcRequestBody","text":"<p>[common, js, native]\\ abstract class GrpcRequestBody</p> <p>[jvm]\\ typealias GrpcRequestBody = RequestBody</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/-grpc-request-body/","title":"grpc request body","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcRequestBody/GrpcRequestBody</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/-grpc-request-body/#grpcrequestbody","title":"GrpcRequestBody","text":"<p>[js, native]\\ [js, native]\\ fun GrpcRequestBody()</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcRequestBuilder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/#grpcrequestbuilder","title":"GrpcRequestBuilder","text":"<p>[common, js, native]\\ open class GrpcRequestBuilder</p> <p>[jvm]\\ typealias GrpcRequestBuilder = Request.Builder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/#functions","title":"Functions","text":"Name Summary addHeader [common, js, native][common, js, native]open fun addHeader(name: String, value: String): GrpcRequestBuilder build [common, js, native][common, js, native]open fun build(): GrpcRequest method [common, js, native][common, js, native]open fun method(method: String, body: GrpcRequestBody?): GrpcRequestBuilder url [common, js, native][common, js, native]open fun url(url: GrpcHttpUrl): GrpcRequestBuilder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/","title":"grpc request builder","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcRequestBuilder/GrpcRequestBuilder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/#grpcrequestbuilder","title":"GrpcRequestBuilder","text":"<p>[js, native]\\ [js, native]\\ fun GrpcRequestBuilder()</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/add-header/","title":"Add header","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcRequestBuilder/addHeader</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/add-header/#addheader","title":"addHeader","text":"<p>[common, js, native]\\ [common, js, native]\\ open fun addHeader(name: String, value: String): GrpcRequestBuilder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/build/","title":"Build","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcRequestBuilder/build</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/build/#build","title":"build","text":"<p>[common, js, native]\\ [common, js, native]\\ open fun build(): GrpcRequest</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/method/","title":"Method","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcRequestBuilder/method</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/method/#method","title":"method","text":"<p>[common, js, native]\\ [common, js, native]\\ open fun method(method: String, body: GrpcRequestBody?): GrpcRequestBuilder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/url/","title":"Url","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcRequestBuilder/url</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/url/#url","title":"url","text":"<p>[common, js, native]\\ [common, js, native]\\ open fun url(url: GrpcHttpUrl): GrpcRequestBuilder</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcResponse</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/#grpcresponse","title":"GrpcResponse","text":"<p>[common, js, native]\\ class GrpcResponse</p> <p>[jvm]\\ typealias GrpcResponse = Response</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/#functions","title":"Functions","text":"Name Summary close [common, js, native][common, js, native]fun close() header [common, js, native][common]@JvmOverloadsfun header(name: String, defaultValue: String? = null): String?[js, native]fun header(name: String, defaultValue: String? = null): String? trailers [common, js, native][common, js, native]fun trailers(): GrpcHeaders"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/#properties","title":"Properties","text":"Name Summary body [common]@get:JvmName(name = \u201cbody\u201d)val body: GrpcResponseBody?[js, native]val body: GrpcResponseBody?"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/","title":"grpc response","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcResponse/GrpcResponse</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/#grpcresponse","title":"GrpcResponse","text":"<p>[js, native]\\ [js, native]\\ fun GrpcResponse()</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/body/","title":"Body","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcResponse/body</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/body/#body","title":"body","text":"<p>[common, js, native]\\ [common]\\</p> <p>@get:JvmName(name = \u201cbody\u201d)</p> <p>val body: GrpcResponseBody?</p> <p>[js, native]\\ val body: GrpcResponseBody?</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/close/","title":"Close","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcResponse/close</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/close/#close","title":"close","text":"<p>[common, js, native]\\ [common, js, native]\\ fun close()</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/header/","title":"Header","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcResponse/header</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/header/#header","title":"header","text":"<p>[common, js, native]\\ [common]\\</p> <p>@JvmOverloads</p> <p>fun header(name: String, defaultValue: String? = null): String?</p> <p>[js, native]\\ fun header(name: String, defaultValue: String? = null): String?</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/trailers/","title":"Trailers","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcResponse/trailers</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/trailers/#trailers","title":"trailers","text":"<p>[common, js, native]\\ [common, js, native]\\ fun trailers(): GrpcHeaders</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcResponseBody</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/#grpcresponsebody","title":"GrpcResponseBody","text":"<p>[common, js, native]\\ abstract class GrpcResponseBody</p> <p>[jvm]\\ typealias GrpcResponseBody = ResponseBody</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/#functions","title":"Functions","text":"Name Summary source [common, js, native][common, js, native]abstract fun source(): BufferedSource"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-grpc-response-body/","title":"grpc response body","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcResponseBody/GrpcResponseBody</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-grpc-response-body/#grpcresponsebody","title":"GrpcResponseBody","text":"<p>[js, native]\\ [js, native]\\ fun GrpcResponseBody()</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/source/","title":"Source","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcResponseBody/source</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/source/#source","title":"source","text":"<p>[common, js, native]\\ [common, js, native]\\ abstract fun source(): BufferedSource</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/#grpcstatus","title":"GrpcStatus","text":"<p>[common]\\ class GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/#properties","title":"Properties","text":"Name Summary code [common]val code: Int name [common]val name: String"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/code/","title":"Code","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/code</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/code/#code","title":"code","text":"<p>[common]\\ val code: Int</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/name/","title":"Name","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/name</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/#functions","title":"Functions","text":"Name Summary get [common]@Synchronizedfun get(status: Int): GrpcStatus"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/#properties","title":"Properties","text":"Name Summary ABORTED [common]@JvmFieldval ABORTED: GrpcStatus ALREADY_EXISTS [common]@JvmFieldval ALREADY_EXISTS: GrpcStatus CANCELLED [common]@JvmFieldval CANCELLED: GrpcStatus DATA_LOSS [common]@JvmFieldval DATA_LOSS: GrpcStatus DEADLINE_EXCEEDED [common]@JvmFieldval DEADLINE_EXCEEDED: GrpcStatus FAILED_PRECONDITION [common]@JvmFieldval FAILED_PRECONDITION: GrpcStatus INTERNAL [common]@JvmFieldval INTERNAL: GrpcStatus INVALID_ARGUMENT [common]@JvmFieldval INVALID_ARGUMENT: GrpcStatus NOT_FOUND [common]@JvmFieldval NOT_FOUND: GrpcStatus OK [common]@JvmFieldval OK: GrpcStatus OUT_OF_RANGE [common]@JvmFieldval OUT_OF_RANGE: GrpcStatus PERMISSION_DENIED [common]@JvmFieldval PERMISSION_DENIED: GrpcStatus RESOURCE_EXHAUSTED [common]@JvmFieldval RESOURCE_EXHAUSTED: GrpcStatus UNAUTHENTICATED [common]@JvmFieldval UNAUTHENTICATED: GrpcStatus UNAVAILABLE [common]@JvmFieldval UNAVAILABLE: GrpcStatus UNIMPLEMENTED [common]@JvmFieldval UNIMPLEMENTED: GrpcStatus UNKNOWN [common]@JvmFieldval UNKNOWN: GrpcStatus"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-a-b-o-r-t-e-d/","title":"a b o r t e d","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/ABORTED</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-a-b-o-r-t-e-d/#aborted","title":"ABORTED","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val ABORTED: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-a-l-r-e-a-d-y_-e-x-i-s-t-s/","title":"a l r e a d y  e x i s t s","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/ALREADY_EXISTS</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-a-l-r-e-a-d-y_-e-x-i-s-t-s/#already_exists","title":"ALREADY_EXISTS","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val ALREADY_EXISTS: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-c-a-n-c-e-l-l-e-d/","title":"c a n c e l l e d","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/CANCELLED</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-c-a-n-c-e-l-l-e-d/#cancelled","title":"CANCELLED","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val CANCELLED: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-d-a-t-a_-l-o-s-s/","title":"d a t a  l o s s","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/DATA_LOSS</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-d-a-t-a_-l-o-s-s/#data_loss","title":"DATA_LOSS","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val DATA_LOSS: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-d-e-a-d-l-i-n-e_-e-x-c-e-e-d-e-d/","title":"d e a d l i n e  e x c e e d e d","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/DEADLINE_EXCEEDED</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-d-e-a-d-l-i-n-e_-e-x-c-e-e-d-e-d/#deadline_exceeded","title":"DEADLINE_EXCEEDED","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val DEADLINE_EXCEEDED: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-f-a-i-l-e-d_-p-r-e-c-o-n-d-i-t-i-o-n/","title":"f a i l e d  p r e c o n d i t i o n","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/FAILED_PRECONDITION</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-f-a-i-l-e-d_-p-r-e-c-o-n-d-i-t-i-o-n/#failed_precondition","title":"FAILED_PRECONDITION","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val FAILED_PRECONDITION: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-i-n-t-e-r-n-a-l/","title":"i n t e r n a l","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/INTERNAL</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-i-n-t-e-r-n-a-l/#internal","title":"INTERNAL","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val INTERNAL: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-i-n-v-a-l-i-d_-a-r-g-u-m-e-n-t/","title":"i n v a l i d  a r g u m e n t","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/INVALID_ARGUMENT</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-i-n-v-a-l-i-d_-a-r-g-u-m-e-n-t/#invalid_argument","title":"INVALID_ARGUMENT","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val INVALID_ARGUMENT: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-n-o-t_-f-o-u-n-d/","title":"n o t  f o u n d","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/NOT_FOUND</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-n-o-t_-f-o-u-n-d/#not_found","title":"NOT_FOUND","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val NOT_FOUND: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-o-k/","title":"o k","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/OK</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-o-k/#ok","title":"OK","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val OK: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-o-u-t_-o-f_-r-a-n-g-e/","title":"o u t  o f  r a n g e","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/OUT_OF_RANGE</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-o-u-t_-o-f_-r-a-n-g-e/#out_of_range","title":"OUT_OF_RANGE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val OUT_OF_RANGE: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-p-e-r-m-i-s-s-i-o-n_-d-e-n-i-e-d/","title":"p e r m i s s i o n  d e n i e d","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/PERMISSION_DENIED</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-p-e-r-m-i-s-s-i-o-n_-d-e-n-i-e-d/#permission_denied","title":"PERMISSION_DENIED","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val PERMISSION_DENIED: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-r-e-s-o-u-r-c-e_-e-x-h-a-u-s-t-e-d/","title":"r e s o u r c e  e x h a u s t e d","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/RESOURCE_EXHAUSTED</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-r-e-s-o-u-r-c-e_-e-x-h-a-u-s-t-e-d/#resource_exhausted","title":"RESOURCE_EXHAUSTED","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val RESOURCE_EXHAUSTED: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-a-u-t-h-e-n-t-i-c-a-t-e-d/","title":"u n a u t h e n t i c a t e d","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/UNAUTHENTICATED</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-a-u-t-h-e-n-t-i-c-a-t-e-d/#unauthenticated","title":"UNAUTHENTICATED","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val UNAUTHENTICATED: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-a-v-a-i-l-a-b-l-e/","title":"u n a v a i l a b l e","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/UNAVAILABLE</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-a-v-a-i-l-a-b-l-e/#unavailable","title":"UNAVAILABLE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val UNAVAILABLE: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-i-m-p-l-e-m-e-n-t-e-d/","title":"u n i m p l e m e n t e d","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/UNIMPLEMENTED</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-i-m-p-l-e-m-e-n-t-e-d/#unimplemented","title":"UNIMPLEMENTED","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val UNIMPLEMENTED: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-k-n-o-w-n/","title":"u n k n o w n","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/UNKNOWN</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-k-n-o-w-n/#unknown","title":"UNKNOWN","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val UNKNOWN: GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/get/","title":"Get","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStatus/Companion/get</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/get/#get","title":"get","text":"<p>[common]\\</p> <p>@Synchronized</p> <p>fun get(status: Int): GrpcStatus</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#grpcstreamingcall","title":"GrpcStreamingCall","text":"<p>[common]\\ interface GrpcStreamingCall&lt;S : Any, R : Any&gt;</p> <p>A single streaming call to a remote server. This class handles three streaming call types:</p> <ul><li>Single request, streaming response. The send channel or message sink accept exactly one     message. The receive channel or message source produce zero or more messages. The outbound     request message is sent before any inbound response messages.</li><li>Streaming request, single response. The send channel or message sink accept zero or more     messages. The receive channel or message source produce exactly one message. All outbound     request messages are sent before the inbound response message.</li><li>Streaming request, streaming response. The send channel or message sink accept zero or more     messages, and the receive channel or message source produce any number of messages. Unlike     the above two types, you are free to interleave request and response messages.</li></ul> <p>A gRPC call cannot be executed twice.</p> <p>gRPC calls can be suspending or blocking. Use whichever mechanism works at your call site: the bytes transmitted on the network are the same.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#functions","title":"Functions","text":"Name Summary cancel [common]abstract fun cancel()Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone [common]abstract fun clone(): GrpcStreamingCall&lt;S, R&gt;Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. executeBlocking [common]abstract fun executeBlocking(): Pair&lt;MessageSink&lt;S&gt;, MessageSource&lt;R&gt;&gt;Enqueues this call for execution and returns streams to send and receive the call\u2019s messages. Reads and writes on the returned streams are blocking. executeIn [common]abstract fun executeIn(scope: CoroutineScope): Pair&lt;SendChannel&lt;S&gt;, ReceiveChannel&lt;R&gt;&gt;Enqueues this call for execution and returns channels to send and receive the call\u2019s messages. This uses the Dispatchers.IO to transmit outbound messages. isCanceled [common]abstract fun isCanceled(): BooleanTrue if cancel was called. isExecuted [common]abstract fun isExecuted(): BooleanReturns true if executeIn or executeBlocking was called. It is an error to execute a call more than once."},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#properties","title":"Properties","text":"Name Summary method [common]abstract val method: GrpcMethod&lt;S, R&gt;The method invoked by this call. requestMetadata [common]abstract var requestMetadata: Map&lt;String, String&gt;A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed. responseMetadata [common]abstract val responseMetadata: Map&lt;String, String&gt;?A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present. timeout [common]abstract val timeout: TimeoutConfigures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout."},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/cancel/","title":"Cancel","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall/cancel</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/cancel/#cancel","title":"cancel","text":"<p>[common]\\ abstract fun cancel()</p> <p>Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/clone/","title":"Clone","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall/clone</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/clone/#clone","title":"clone","text":"<p>[common]\\ abstract fun clone(): GrpcStreamingCall&lt;S, R&gt;</p> <p>Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-blocking/","title":"Execute blocking","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall/executeBlocking</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-blocking/#executeblocking","title":"executeBlocking","text":"<p>[common]\\ abstract fun executeBlocking(): Pair&lt;MessageSink&lt;S&gt;, MessageSource&lt;R&gt;&gt;</p> <p>Enqueues this call for execution and returns streams to send and receive the call\u2019s messages. Reads and writes on the returned streams are blocking.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-in/","title":"Execute in","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall/executeIn</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-in/#executein","title":"executeIn","text":"<p>[common]\\ abstract fun executeIn(scope: CoroutineScope): Pair&lt;SendChannel&lt;S&gt;, ReceiveChannel&lt;R&gt;&gt;</p> <p>Enqueues this call for execution and returns channels to send and receive the call\u2019s messages. This uses the Dispatchers.IO to transmit outbound messages.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-canceled/","title":"Is canceled","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall/isCanceled</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-canceled/#iscanceled","title":"isCanceled","text":"<p>[common]\\ abstract fun isCanceled(): Boolean</p> <p>True if cancel was called.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-executed/","title":"Is executed","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall/isExecuted</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-executed/#isexecuted","title":"isExecuted","text":"<p>[common]\\ abstract fun isExecuted(): Boolean</p> <p>Returns true if executeIn or executeBlocking was called. It is an error to execute a call more than once.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/method/","title":"Method","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall/method</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/method/#method","title":"method","text":"<p>[common]\\ abstract val method: GrpcMethod&lt;S, R&gt;</p> <p>The method invoked by this call.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/request-metadata/","title":"Request metadata","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall/requestMetadata</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/request-metadata/#requestmetadata","title":"requestMetadata","text":"<p>[common]\\ abstract var requestMetadata: Map&lt;String, String&gt;</p> <p>A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/response-metadata/","title":"Response metadata","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall/responseMetadata</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/response-metadata/#responsemetadata","title":"responseMetadata","text":"<p>[common]\\ abstract val responseMetadata: Map&lt;String, String&gt;?</p> <p>A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/timeout/","title":"Timeout","text":"<p>//wire-grpc-client/com.squareup.wire/GrpcStreamingCall/timeout</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/timeout/#timeout","title":"timeout","text":"<p>[common]\\ abstract val timeout: Timeout</p> <p>Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/","title":"Index","text":"<p>//wire-grpc-client/com.squareup.wire/WireGrpcExperimental</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/#wiregrpcexperimental","title":"WireGrpcExperimental","text":"<p>[common]\\ @ExperimentalCoroutinesApi</p> <p>@Target(allowedTargets = [AnnotationTarget.CLASS, AnnotationTarget.FUNCTION])</p> <p>annotation class WireGrpcExperimental</p> <p>Marker annotation for experimental Wire gRPC features.</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/#constructors","title":"Constructors","text":"WireGrpcExperimental [common]fun WireGrpcExperimental()"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/-wire-grpc-experimental/","title":"wire grpc experimental","text":"<p>//wire-grpc-client/com.squareup.wire/WireGrpcExperimental/WireGrpcExperimental</p>"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/-wire-grpc-experimental/#wiregrpcexperimental","title":"WireGrpcExperimental","text":"<p>[common]\\ fun WireGrpcExperimental()</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/","title":"wire-gson-support","text":"<p>//wire-gson-support/com.squareup.wire</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/#package-comsquareupwire","title":"Package com.squareup.wire","text":""},{"location":"3.x/wire-gson-support/com.squareup.wire/#types","title":"Types","text":"Name Summary AnyMessageTypeAdapter [jvm]class AnyMessageTypeAdapter(gson: Gson, typeUrlToAdapter: Map&lt;String, ProtoAdapter&lt;*&gt;&gt;) : TypeAdapter&lt;AnyMessage&gt; WireTypeAdapterFactory [jvm]class WireTypeAdapterFactory@JvmOverloadsconstructor(typeUrlToAdapter: Map&lt;String, ProtoAdapter&lt;*&gt;&gt;, writeIdentityValues: Boolean) : TypeAdapterFactoryA TypeAdapterFactory that allows Wire messages to be serialized and deserialized using the GSON Json library. To create a Gson instance that works with Wire, use the com.google.gson.GsonBuilder interface:"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/","title":"Index","text":"<p>//wire-gson-support/com.squareup.wire/AnyMessageTypeAdapter</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/#anymessagetypeadapter","title":"AnyMessageTypeAdapter","text":"<p>[jvm]\\ class AnyMessageTypeAdapter(gson: Gson, typeUrlToAdapter: Map&lt;String, ProtoAdapter&lt;*&gt;&gt;) : TypeAdapter&lt;AnyMessage&gt;</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/#functions","title":"Functions","text":"Name Summary fromJson [jvm]fun fromJson(p0: Reader): AnyMessagefun fromJson(p0: String): AnyMessage fromJsonTree [jvm]fun fromJsonTree(p0: JsonElement): AnyMessage nullSafe [jvm]fun nullSafe(): TypeAdapter&lt;AnyMessage&gt; read [jvm]open override fun read(reader: JsonReader): AnyMessage? toJson [jvm]fun toJson(p0: AnyMessage): Stringfun toJson(p0: Writer, p1: AnyMessage) toJsonTree [jvm]fun toJsonTree(p0: AnyMessage): JsonElement write [jvm]open override fun write(writer: JsonWriter, value: AnyMessage?)"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/-any-message-type-adapter/","title":"any message type adapter","text":"<p>//wire-gson-support/com.squareup.wire/AnyMessageTypeAdapter/AnyMessageTypeAdapter</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/-any-message-type-adapter/#anymessagetypeadapter","title":"AnyMessageTypeAdapter","text":"<p>[jvm]\\ fun AnyMessageTypeAdapter(gson: Gson, typeUrlToAdapter: Map&lt;String, ProtoAdapter&lt;*&gt;&gt;)</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/read/","title":"Read","text":"<p>//wire-gson-support/com.squareup.wire/AnyMessageTypeAdapter/read</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/read/#read","title":"read","text":"<p>[jvm]\\ open override fun read(reader: JsonReader): AnyMessage?</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/write/","title":"Write","text":"<p>//wire-gson-support/com.squareup.wire/AnyMessageTypeAdapter/write</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/write/#write","title":"write","text":"<p>[jvm]\\ open override fun write(writer: JsonWriter, value: AnyMessage?)</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/","title":"Index","text":"<p>//wire-gson-support/com.squareup.wire/WireTypeAdapterFactory</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/#wiretypeadapterfactory","title":"WireTypeAdapterFactory","text":"<p>[jvm]\\ class WireTypeAdapterFactory@JvmOverloadsconstructor(typeUrlToAdapter: Map&lt;String, ProtoAdapter&lt;*&gt;&gt;, writeIdentityValues: Boolean) : TypeAdapterFactory</p> <p>A TypeAdapterFactory that allows Wire messages to be serialized and deserialized using the GSON Json library. To create a Gson instance that works with Wire, use the com.google.gson.GsonBuilder interface:</p> <p>Gson gson = new GsonBuilder()\\     .registerTypeAdapterFactory(new WireTypeAdapterFactory())\\     .create();</p> <p>The resulting Gson instance will be able to serialize and deserialize any Wire Message type, including extensions and unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library. Note that version 1.2 of that API has a bug in the way it serializes unknown fields, so we use our own approach for this case.</p> <p>In Proto3, if a field is set to its default (or identity) value, it will be omitted in the JSON-encoded data. Set writeIdentityValues to true if you want Wire to always write values, including default ones.</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/#constructors","title":"Constructors","text":"WireTypeAdapterFactory [jvm]@JvmOverloadsfun WireTypeAdapterFactory(typeUrlToAdapter: Map&lt;String, ProtoAdapter&lt;*&gt;&gt; = mapOf(), writeIdentityValues: Boolean = false)"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/#functions","title":"Functions","text":"Name Summary create [jvm]open override fun &lt;T&gt; create(gson: Gson, type: TypeToken&lt;T&gt;): TypeAdapter&lt;T&gt;? plus [jvm]fun plus(adapter: ProtoAdapter&lt;&gt;): WireTypeAdapterFactoryReturns a new WireTypeAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage.[jvm]fun plus(adapters: List&lt;ProtoAdapter&lt;&gt;&gt;): WireTypeAdapterFactoryReturns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage."},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/-wire-type-adapter-factory/","title":"wire type adapter factory","text":"<p>//wire-gson-support/com.squareup.wire/WireTypeAdapterFactory/WireTypeAdapterFactory</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/-wire-type-adapter-factory/#wiretypeadapterfactory","title":"WireTypeAdapterFactory","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>fun WireTypeAdapterFactory(typeUrlToAdapter: Map&lt;String, ProtoAdapter&lt;*&gt;&gt; = mapOf(), writeIdentityValues: Boolean = false)</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/create/","title":"Create","text":"<p>//wire-gson-support/com.squareup.wire/WireTypeAdapterFactory/create</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/create/#create","title":"create","text":"<p>[jvm]\\ open override fun &lt;T&gt; create(gson: Gson, type: TypeToken&lt;T&gt;): TypeAdapter&lt;T&gt;?</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/plus/","title":"Plus","text":"<p>//wire-gson-support/com.squareup.wire/WireTypeAdapterFactory/plus</p>"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/plus/#plus","title":"plus","text":"<p>[jvm]\\ fun plus(adapters: List&lt;ProtoAdapter&lt;*&gt;&gt;): WireTypeAdapterFactory</p> <p>Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage.</p> <p>[jvm]\\ fun plus(adapter: ProtoAdapter&lt;*&gt;): WireTypeAdapterFactory</p> <p>Returns a new WireTypeAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage.</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/","title":"Index","text":"<p>//wire-java-generator/com.squareup.wire.java</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/#package-comsquareupwirejava","title":"Package com.squareup.wire.java","text":""},{"location":"3.x/wire-java-generator/com.squareup.wire.java/#types","title":"Types","text":"Name Summary JavaGenerator [jvm]class JavaGeneratorGenerates Java source code that matches proto definitions."},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/","title":"Index","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/#javagenerator","title":"JavaGenerator","text":"<p>[jvm]\\ class JavaGenerator</p> <p>Generates Java source code that matches proto definitions. </p> <p>This can map type names from protocol buffers (like uint32, string, or squareup.protos.person.Person to the corresponding Java names (like int, java.lang.String, or com.squareup.protos.person.Person).</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/#functions","title":"Functions","text":"Name Summary abstractAdapterName [jvm]@Nullableopen fun abstractAdapterName(protoType: ProtoType): ClassNameReturns the Java type of the abstract adapter class generated for a corresponding protoType. builtInType [jvm]open fun builtInType(protoType: ProtoType): Boolean generateAdapterForCustomType [jvm]open fun generateAdapterForCustomType(type: Type): TypeSpecReturns a standalone adapter for type. generatedTypeName [jvm]open fun generatedTypeName(member: ProtoMember): ClassNameReturns the full name of the class generated for member.[jvm]open fun generatedTypeName(type: Type): ClassNameReturns the full name of the class generated for type. generateOptionType [jvm]@Nullableopen fun generateOptionType(extend: Extend, field: Field): TypeSpec generateType [jvm]open fun generateType(type: Type): TypeSpecReturns the generated code for type, which may be a top-level or a nested type. get [jvm]open fun get(schema: Schema): JavaGenerator isEnum [jvm]open fun isEnum(type: ProtoType): Boolean schema [jvm]open fun schema(): Schema typeName [jvm]open fun typeName(protoType: ProtoType): TypeNameReturns the Java type for protoType. withAndroid [jvm]open fun withAndroid(emitAndroid: Boolean): JavaGenerator withAndroidAnnotations [jvm]open fun withAndroidAnnotations(emitAndroidAnnotations: Boolean): JavaGenerator withBuildersOnly [jvm]open fun withBuildersOnly(buildersOnly: Boolean): JavaGenerator withCompact [jvm]open fun withCompact(emitCompact: Boolean): JavaGenerator withOptions [jvm]open fun withOptions(emitDeclaredOptions: Boolean, emitAppliedOptions: Boolean): JavaGenerator withProfile [jvm]open fun withProfile(profile: Profile): JavaGenerator"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/abstract-adapter-name/","title":"Abstract adapter name","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/abstractAdapterName</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/abstract-adapter-name/#abstractadaptername","title":"abstractAdapterName","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun abstractAdapterName(protoType: ProtoType): ClassName</p> <p>Returns the Java type of the abstract adapter class generated for a corresponding protoType. Returns null if protoType is not using a custom proto adapter.</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/built-in-type/","title":"Built in type","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/builtInType</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/built-in-type/#builtintype","title":"builtInType","text":"<p>[jvm]\\ open fun builtInType(protoType: ProtoType): Boolean</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-adapter-for-custom-type/","title":"Generate adapter for custom type","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/generateAdapterForCustomType</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-adapter-for-custom-type/#generateadapterforcustomtype","title":"generateAdapterForCustomType","text":"<p>[jvm]\\ open fun generateAdapterForCustomType(type: Type): TypeSpec</p> <p>Returns a standalone adapter for type.</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-option-type/","title":"Generate option type","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/generateOptionType</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-option-type/#generateoptiontype","title":"generateOptionType","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun generateOptionType(extend: Extend, field: Field): TypeSpec</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-type/","title":"Generate type","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/generateType</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-type/#generatetype","title":"generateType","text":"<p>[jvm]\\ open fun generateType(type: Type): TypeSpec</p> <p>Returns the generated code for type, which may be a top-level or a nested type.</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generated-type-name/","title":"Generated type name","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/generatedTypeName</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generated-type-name/#generatedtypename","title":"generatedTypeName","text":"<p>[jvm]\\ open fun generatedTypeName(type: Type): ClassName</p> <p>Returns the full name of the class generated for type.</p> <p>[jvm]\\ open fun generatedTypeName(member: ProtoMember): ClassName</p> <p>Returns the full name of the class generated for member.</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/get/","title":"Get","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/get</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/get/#get","title":"get","text":"<p>[jvm]\\ open fun get(schema: Schema): JavaGenerator</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/is-enum/","title":"Is enum","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/isEnum</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/is-enum/#isenum","title":"isEnum","text":"<p>[jvm]\\ open fun isEnum(type: ProtoType): Boolean</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/schema/","title":"Schema","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/schema</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/schema/#schema","title":"schema","text":"<p>[jvm]\\ open fun schema(): Schema</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/type-name/","title":"Type name","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/typeName</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/type-name/#typename","title":"typeName","text":"<p>[jvm]\\ open fun typeName(protoType: ProtoType): TypeName</p> <p>Returns the Java type for protoType.</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/type-name/#throws","title":"Throws","text":"java.lang.IllegalArgumentException if there is no known Java type for protoType, such as if that type wasn\u2019t in this generator\u2019s schema."},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-android-annotations/","title":"With android annotations","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/withAndroidAnnotations</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-android-annotations/#withandroidannotations","title":"withAndroidAnnotations","text":"<p>[jvm]\\ open fun withAndroidAnnotations(emitAndroidAnnotations: Boolean): JavaGenerator</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-android/","title":"With android","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/withAndroid</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-android/#withandroid","title":"withAndroid","text":"<p>[jvm]\\ open fun withAndroid(emitAndroid: Boolean): JavaGenerator</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-builders-only/","title":"With builders only","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/withBuildersOnly</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-builders-only/#withbuildersonly","title":"withBuildersOnly","text":"<p>[jvm]\\ open fun withBuildersOnly(buildersOnly: Boolean): JavaGenerator</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-compact/","title":"With compact","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/withCompact</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-compact/#withcompact","title":"withCompact","text":"<p>[jvm]\\ open fun withCompact(emitCompact: Boolean): JavaGenerator</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-options/","title":"With options","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/withOptions</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-options/#withoptions","title":"withOptions","text":"<p>[jvm]\\ open fun withOptions(emitDeclaredOptions: Boolean, emitAppliedOptions: Boolean): JavaGenerator</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-profile/","title":"With profile","text":"<p>//wire-java-generator/com.squareup.wire.java/JavaGenerator/withProfile</p>"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-profile/#withprofile","title":"withProfile","text":"<p>[jvm]\\ open fun withProfile(profile: Profile): JavaGenerator</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/","title":"Index","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/#package-comsquareupwirekotlin","title":"Package com.squareup.wire.kotlin","text":""},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/#types","title":"Types","text":"Name Summary KotlinGenerator [jvm]class KotlinGenerator RpcCallStyle [jvm]enum RpcCallStyle : Enum&lt;RpcCallStyle&gt; RpcRole [jvm]enum RpcRole : Enum&lt;RpcRole&gt;"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/","title":"Index","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/KotlinGenerator</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/#kotlingenerator","title":"KotlinGenerator","text":"<p>[jvm]\\ class KotlinGenerator</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/#functions","title":"Functions","text":"Name Summary generatedServiceName [jvm]fun generatedServiceName(service: Service, rpc: Rpc? = null, isImplementation: Boolean = false): ClassNameReturns the full name of the class generated for service#rpc. This returns a name like RouteGuideClient or RouteGuideGetFeatureBlockingServer. generatedTypeName [jvm]fun generatedTypeName(member: ProtoMember): ClassNameReturns the full name of the class generated for member.[jvm]fun generatedTypeName(type: Type): ClassNameReturns the full name of the class generated for type. generateGrpcServerAdapter [jvm]fun generateGrpcServerAdapter(service: Service): Map&lt;ClassName, TypeSpec&gt;Generates TypeSpecs for gRPC adapter for the given service. generateOptionType [jvm]fun generateOptionType(extend: Extend, field: Field): TypeSpec?Example generateServiceTypeSpecs [jvm]fun generateServiceTypeSpecs(service: Service, onlyRpc: Rpc? = null): Map&lt;ClassName, TypeSpec&gt;Generates all TypeSpecs for the given Service. generateType [jvm]fun generateType(type: Type): TypeSpec"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/#properties","title":"Properties","text":"Name Summary schema [jvm]val schema: Schema"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-grpc-server-adapter/","title":"Generate grpc server adapter","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/KotlinGenerator/generateGrpcServerAdapter</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-grpc-server-adapter/#generategrpcserveradapter","title":"generateGrpcServerAdapter","text":"<p>[jvm]\\ fun generateGrpcServerAdapter(service: Service): Map&lt;ClassName, TypeSpec&gt;</p> <p>Generates TypeSpecs for gRPC adapter for the given service.</p> <p>These adapters allow us to use Wire based gRPC as io.grpc.BindableService</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-option-type/","title":"Generate option type","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/KotlinGenerator/generateOptionType</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-option-type/#generateoptiontype","title":"generateOptionType","text":"<p>[jvm]\\ fun generateOptionType(extend: Extend, field: Field): TypeSpec?</p> <p>Example</p> <p>@Retention(AnnotationRetention.RUNTIME)\\ @Target(AnnotationTarget.PROPERTY, AnnotationTarget.FIELD)\\ annotation class MyFieldOption(val value: String)</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-service-type-specs/","title":"Generate service type specs","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/KotlinGenerator/generateServiceTypeSpecs</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-service-type-specs/#generateservicetypespecs","title":"generateServiceTypeSpecs","text":"<p>[jvm]\\ fun generateServiceTypeSpecs(service: Service, onlyRpc: Rpc? = null): Map&lt;ClassName, TypeSpec&gt;</p> <p>Generates all TypeSpecs for the given Service.</p> <p>If onlyRpc isn\u2019t null, this will generate code only for this onlyRpc; otherwise, all RPCs of the service will be code generated.</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-type/","title":"Generate type","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/KotlinGenerator/generateType</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-type/#generatetype","title":"generateType","text":"<p>[jvm]\\ fun generateType(type: Type): TypeSpec</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generated-service-name/","title":"Generated service name","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/KotlinGenerator/generatedServiceName</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generated-service-name/#generatedservicename","title":"generatedServiceName","text":"<p>[jvm]\\ fun generatedServiceName(service: Service, rpc: Rpc? = null, isImplementation: Boolean = false): ClassName</p> <p>Returns the full name of the class generated for service#rpc. This returns a name like RouteGuideClient or RouteGuideGetFeatureBlockingServer.</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generated-type-name/","title":"Generated type name","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/KotlinGenerator/generatedTypeName</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generated-type-name/#generatedtypename","title":"generatedTypeName","text":"<p>[jvm]\\ fun generatedTypeName(type: Type): ClassName</p> <p>Returns the full name of the class generated for type.</p> <p>[jvm]\\ fun generatedTypeName(member: ProtoMember): ClassName</p> <p>Returns the full name of the class generated for member.</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/schema/","title":"Schema","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/KotlinGenerator/schema</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/schema/#schema","title":"schema","text":"<p>[jvm]\\ val schema: Schema</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/","title":"Index","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/KotlinGenerator/Companion</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/#functions","title":"Functions","text":"Name Summary builtInType [jvm]fun builtInType(protoType: ProtoType): Boolean invoke [jvm]@JvmStatic@JvmName(name = \u201cget\u201d)operator fun invoke(schema: Schema, profile: Profile = Profile(), emitAndroid: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String? = null, buildersOnly: Boolean = false, singleMethodServices: Boolean = false): KotlinGenerator"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/built-in-type/","title":"Built in type","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/KotlinGenerator/Companion/builtInType</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/built-in-type/#builtintype","title":"builtInType","text":"<p>[jvm]\\ fun builtInType(protoType: ProtoType): Boolean</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/invoke/","title":"Invoke","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/KotlinGenerator/Companion/invoke</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/invoke/#invoke","title":"invoke","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>@JvmName(name = \u201cget\u201d)</p> <p>operator fun invoke(schema: Schema, profile: Profile = Profile(), emitAndroid: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String? = null, buildersOnly: Boolean = false, singleMethodServices: Boolean = false): KotlinGenerator</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/","title":"Index","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/RpcCallStyle</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/#rpccallstyle","title":"RpcCallStyle","text":"<p>[jvm]\\ enum RpcCallStyle : Enum&lt;RpcCallStyle&gt;</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/#entries","title":"Entries","text":"BLOCKING [jvm]BLOCKING()Generate blocking APIs callable by Java and Kotlin. SUSPENDING [jvm]SUSPENDING()Generate coroutines APIs that require a Kotlin coroutines context."},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-b-l-o-c-k-i-n-g/","title":"Index","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/RpcCallStyle/BLOCKING</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-b-l-o-c-k-i-n-g/#blocking","title":"BLOCKING","text":"<p>[jvm]\\ BLOCKING()</p> <p>Generate blocking APIs callable by Java and Kotlin.</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-b-l-o-c-k-i-n-g/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-s-u-s-p-e-n-d-i-n-g/","title":"Index","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/RpcCallStyle/SUSPENDING</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-s-u-s-p-e-n-d-i-n-g/#suspending","title":"SUSPENDING","text":"<p>[jvm]\\ SUSPENDING()</p> <p>Generate coroutines APIs that require a Kotlin coroutines context.</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-s-u-s-p-e-n-d-i-n-g/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/","title":"Index","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/RpcRole</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/#rpcrole","title":"RpcRole","text":"<p>[jvm]\\ enum RpcRole : Enum&lt;RpcRole&gt;</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/#entries","title":"Entries","text":"NONE [jvm]NONE()Doesn\u2019t generate any interfaces. SERVER [jvm]SERVER()Generate interfaces best suited to receiving inbound calls. CLIENT [jvm]CLIENT()Generate interfaces best suited to sending outbound calls."},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-c-l-i-e-n-t/","title":"Index","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/RpcRole/CLIENT</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-c-l-i-e-n-t/#client","title":"CLIENT","text":"<p>[jvm]\\ CLIENT()</p> <p>Generate interfaces best suited to sending outbound calls.</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-c-l-i-e-n-t/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-n-o-n-e/","title":"Index","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/RpcRole/NONE</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-n-o-n-e/#none","title":"NONE","text":"<p>[jvm]\\ NONE()</p> <p>Doesn\u2019t generate any interfaces.</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-n-o-n-e/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-s-e-r-v-e-r/","title":"Index","text":"<p>//wire-kotlin-generator/com.squareup.wire.kotlin/RpcRole/SERVER</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-s-e-r-v-e-r/#server","title":"SERVER","text":"<p>[jvm]\\ SERVER()</p> <p>Generate interfaces best suited to receiving inbound calls.</p>"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-s-e-r-v-e-r/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/","title":"wire-moshi-adapter","text":"<p>//wire-moshi-adapter/com.squareup.wire</p>"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/#package-comsquareupwire","title":"Package com.squareup.wire","text":""},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/#types","title":"Types","text":"Name Summary WireJsonAdapterFactory [jvm]class WireJsonAdapterFactory@JvmOverloadsconstructor(typeUrlToAdapter: Map&lt;String, ProtoAdapter&lt;*&gt;&gt;, writeIdentityValues: Boolean) : JsonAdapter.FactoryA JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library."},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/#functions","title":"Functions","text":"Name Summary redacting [jvm]fun &lt;T&gt; JsonAdapter&lt;T&gt;.redacting(): JsonAdapter&lt;T&gt;"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/redacting/","title":"Redacting","text":"<p>//wire-moshi-adapter/com.squareup.wire/redacting</p>"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/redacting/#redacting","title":"redacting","text":"<p>[jvm]\\ fun &lt;T&gt; JsonAdapter&lt;T&gt;.redacting(): JsonAdapter&lt;T&gt;</p>"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/","title":"Index","text":"<p>//wire-moshi-adapter/com.squareup.wire/WireJsonAdapterFactory</p>"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#wirejsonadapterfactory","title":"WireJsonAdapterFactory","text":"<p>[jvm]\\ class WireJsonAdapterFactory@JvmOverloadsconstructor(typeUrlToAdapter: Map&lt;String, ProtoAdapter&lt;*&gt;&gt;, writeIdentityValues: Boolean) : JsonAdapter.Factory</p> <p>A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library.</p> <p>Moshi moshi = new Moshi.Builder()\\     .add(new WireJsonAdapterFactory())\\     .build();</p> <p>The resulting Moshi instance will be able to serialize and deserialize Wire Message types, including extensions. It ignores unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library.</p> <p>In Proto3, if a field is set to its default (or identity) value, it will be omitted in the JSON-encoded data. Set writeIdentityValues to true if you want Wire to always write values, including default ones.</p>"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#constructors","title":"Constructors","text":"WireJsonAdapterFactory [jvm]@JvmOverloadsfun WireJsonAdapterFactory(typeUrlToAdapter: Map&lt;String, ProtoAdapter&lt;*&gt;&gt; = mapOf(), writeIdentityValues: Boolean = false)"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#functions","title":"Functions","text":"Name Summary create [jvm]open override fun create(type: Type, annotations: Set&lt;Annotation&gt;, moshi: Moshi): JsonAdapter&lt;*&gt;? plus [jvm]fun plus(adapter: ProtoAdapter&lt;&gt;): WireJsonAdapterFactoryReturns a new WireJsonAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage.[jvm]fun plus(adapters: List&lt;ProtoAdapter&lt;&gt;&gt;): WireJsonAdapterFactoryReturns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage."},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/-wire-json-adapter-factory/","title":"wire json adapter factory","text":"<p>//wire-moshi-adapter/com.squareup.wire/WireJsonAdapterFactory/WireJsonAdapterFactory</p>"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/-wire-json-adapter-factory/#wirejsonadapterfactory","title":"WireJsonAdapterFactory","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>fun WireJsonAdapterFactory(typeUrlToAdapter: Map&lt;String, ProtoAdapter&lt;*&gt;&gt; = mapOf(), writeIdentityValues: Boolean = false)</p>"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/create/","title":"Create","text":"<p>//wire-moshi-adapter/com.squareup.wire/WireJsonAdapterFactory/create</p>"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/create/#create","title":"create","text":"<p>[jvm]\\ open override fun create(type: Type, annotations: Set&lt;Annotation&gt;, moshi: Moshi): JsonAdapter&lt;*&gt;?</p>"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/plus/","title":"Plus","text":"<p>//wire-moshi-adapter/com.squareup.wire/WireJsonAdapterFactory/plus</p>"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/plus/#plus","title":"plus","text":"<p>[jvm]\\ fun plus(adapters: List&lt;ProtoAdapter&lt;*&gt;&gt;): WireJsonAdapterFactory</p> <p>Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage.</p> <p>[jvm]\\ fun plus(adapter: ProtoAdapter&lt;*&gt;): WireJsonAdapterFactory</p> <p>Returns a new WireJsonAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage.</p>"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/","title":"Index","text":"<p>//wire-reflector/com.squareup.wire.reflector</p>"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/#package-comsquareupwirereflector","title":"Package com.squareup.wire.reflector","text":""},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/#types","title":"Types","text":"Name Summary SchemaReflector [jvm]class SchemaReflector(schema: Schema, includeDependencies: Boolean)This converts a Wire Schema model to a protobuf DescriptorProtos model and serves that."},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/","title":"Index","text":"<p>//wire-reflector/com.squareup.wire.reflector/SchemaReflector</p>"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/#schemareflector","title":"SchemaReflector","text":"<p>[jvm]\\ class SchemaReflector(schema: Schema, includeDependencies: Boolean)</p> <p>This converts a Wire Schema model to a protobuf DescriptorProtos model and serves that.</p>"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/#constructors","title":"Constructors","text":"SchemaReflector [jvm]fun SchemaReflector(schema: Schema, includeDependencies: Boolean = true)"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/#functions","title":"Functions","text":"Name Summary process [jvm]fun process(request: &lt;ERROR CLASS&gt;): &lt;ERROR CLASS&gt;"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/-schema-reflector/","title":"schema reflector","text":"<p>//wire-reflector/com.squareup.wire.reflector/SchemaReflector/SchemaReflector</p>"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/-schema-reflector/#schemareflector","title":"SchemaReflector","text":"<p>[jvm]\\ fun SchemaReflector(schema: Schema, includeDependencies: Boolean = true)</p>"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/process/","title":"Process","text":"<p>//wire-reflector/com.squareup.wire.reflector/SchemaReflector/process</p>"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/process/#process","title":"process","text":"<p>[jvm]\\ fun process(request: &lt;ERROR CLASS&gt;): &lt;ERROR CLASS&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/","title":"wire-runtime","text":"<p>//wire-runtime/com.squareup.wire</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/#package-comsquareupwire","title":"Package com.squareup.wire","text":""},{"location":"3.x/wire-runtime/com.squareup.wire/#types","title":"Types","text":"Name Summary AndroidMessage [jvm]abstract class AndroidMessage&lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt; : Message&lt;M, B&gt; , ParcelableAn Android-specific Message which adds support for Parcelable. AnyMessage [common]class AnyMessage(typeUrl: String, value: ByteString) : Message&lt;AnyMessage, Nothing&gt; Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage. typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Duration [common]class DurationA measurement of time. Durations may be positive, zero, or negative.[js, native, jvm][js, native]class Duration[jvm]typealias Duration = Duration EnumAdapter [common, js, jvm, native][common]abstract class EnumAdapter&lt;E : WireEnum&gt; : ProtoAdapter&lt;E&gt; [js, jvm, native]abstract class EnumAdapter&lt;E : WireEnum&gt; : ProtoAdapter&lt;E&gt; An abstract ProtoAdapter that converts values of an enum to and from integers. FieldEncoding [common]enum FieldEncoding : Enum&lt;FieldEncoding&gt; Instant [common]class InstantThis represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform.[js, native, jvm][js, native]class Instant[jvm]typealias Instant = Instant Message [common, js, jvm, native][common, js, native]abstract class Message&lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt;[jvm]abstract class Message&lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt; : SerializableA protocol buffer message. MessageSink [common]interface MessageSink&lt;in T : Any&gt;A writable stream of messages.[js, jvm, native][js, native]interface MessageSink&lt;in T : Any&gt;[jvm]interface MessageSink&lt;in T : Any&gt; : Closeable MessageSource [common]interface MessageSource&lt;out T : Any&gt;A readable stream of messages.[js, jvm, native][js, native]interface MessageSource&lt;out T : Any&gt;[jvm]interface MessageSource&lt;out T : Any&gt; : Closeable OneOf [common]data class OneOf&lt;out K : OneOf.Key&lt;T&gt;, T&gt;(key: K, value: T)A oneof\u2019s value and the key that identifies which field holds it. ProtoAdapter [common, js, jvm, native][common]abstract class ProtoAdapter&lt;E&gt;(fieldEncoding: FieldEncoding, type: KClass&lt;&gt;?, typeUrl: String?, syntax: Syntax, identity: E?, sourceFile: String?)[js, jvm, native]abstract class ProtoAdapter&lt;E&gt;(fieldEncoding: FieldEncoding, type: KClass&lt;&gt;?, typeUrl: String?, syntax: Syntax, identity: E?, sourceFile: String?) ProtoReader [common]class ProtoReader(source: BufferedSource)Reads and decodes protocol message fields. ProtoWriter [common]class ProtoWriter(sink: BufferedSink)Utilities for encoding and writing protocol message fields. ReverseProtoWriter [common]class ReverseProtoWriterEncodes protocol buffer message fields from back-to-front for efficiency. Callers should write data in the opposite order that the data will be read. RuntimeEnumAdapter [jvm]class RuntimeEnumAdapter&lt;E : WireEnum&gt; : EnumAdapter&lt;E&gt; Converts values of an enum to and from integers using reflection. Service [common]interface Service Syntax [common]enum Syntax : Enum&lt;Syntax&gt; Syntax version. WireEnum [common]interface WireEnumInterface for generated Enum values to help serialization and deserialization. WireEnumConstant [common]@Target(allowedTargets = [AnnotationTarget.FIELD])annotation class WireEnumConstant(declaredName: String)Annotates generated WireEnum fields with metadata for serialization and deserialization. WireField [common]@Target(allowedTargets = [AnnotationTarget.FIELD])annotation class WireField(tag: Int, keyAdapter: String, adapter: String, label: WireField.Label, redacted: Boolean, declaredName: String, jsonName: String, oneofName: String)Annotates generated Message fields with metadata for serialization and deserialization. WireRpc [common]@Target(allowedTargets = [AnnotationTarget.FUNCTION])annotation class WireRpc(path: String, requestAdapter: String, responseAdapter: String, sourceFile: String)For gRPC actions the path is formatted as /&lt;service name&gt;/&lt;method name&gt;. The path of the proto service below is /squareup.helloworld.Greeter/SayHello."},{"location":"3.x/wire-runtime/com.squareup.wire/#functions","title":"Functions","text":"Name Summary decode [darwin]fun &lt;E&gt; ProtoAdapter&lt;E&gt;.decode(data: &lt;ERROR CLASS&gt;): ERead an encoded message from data. durationOfSeconds [common, js, jvm, native][common, js, native]fun durationOfSeconds(seconds: Long, nano: Long): Duration[jvm]inline fun durationOfSeconds(seconds: Long, nano: Long): Duration get [jvm]fun &lt;T&gt; get(value: T?, defaultValue: T): TReturns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example, ofEpochSecond [common, js, jvm, native][common, js, native]fun ofEpochSecond(epochSecond: Long, nano: Long): Instant[jvm]inline fun ofEpochSecond(epochSecond: Long, nano: Long): Instant"},{"location":"3.x/wire-runtime/com.squareup.wire/decode/","title":"Decode","text":"<p>//wire-runtime/com.squareup.wire/decode</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/decode/#decode","title":"decode","text":"<p>[darwin]\\ fun &lt;E&gt; ProtoAdapter&lt;E&gt;.decode(data: &lt;ERROR CLASS&gt;): E</p> <p>Read an encoded message from data.</p> <p>Note: this method is marked with ExperimentalUnsignedTypes annotation and requires an opt-in (e.g. through @OptIn(ExperimentalUnsignedTypes::class) to be used.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/decode/#throws","title":"Throws","text":"IllegalArgumentException if data.length is larger than Int.MAX_VALUE."},{"location":"3.x/wire-runtime/com.squareup.wire/duration-of-seconds/","title":"Duration of seconds","text":"<p>//wire-runtime/com.squareup.wire/durationOfSeconds</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/duration-of-seconds/#durationofseconds","title":"durationOfSeconds","text":"<p>[common, js, jvm, native]\\ [common, js, native]\\ fun durationOfSeconds(seconds: Long, nano: Long): Duration</p> <p>[jvm]\\ inline fun durationOfSeconds(seconds: Long, nano: Long): Duration</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/get/","title":"Get","text":"<p>//wire-runtime/com.squareup.wire/get</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/get/#get","title":"get","text":"<p>[jvm]\\ fun &lt;T&gt; get(value: T?, defaultValue: T): T</p> <p>Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example,</p> <p>MyProto myProto = \u2026\\ MyField field = Wire.get(myProto.f, MyProto.f_default);</p> <p>will attempt to retrieve the value of the field \u2018f\u2019 defined by MyProto. If the field is null (i.e., unset), get will return its second argument, which in this case is the default value for the field \u2018f\u2019.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/of-epoch-second/","title":"Of epoch second","text":"<p>//wire-runtime/com.squareup.wire/ofEpochSecond</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/of-epoch-second/#ofepochsecond","title":"ofEpochSecond","text":"<p>[common, js, jvm, native]\\ [common, js, native]\\ fun ofEpochSecond(epochSecond: Long, nano: Long): Instant</p> <p>[jvm]\\ inline fun ofEpochSecond(epochSecond: Long, nano: Long): Instant</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/AndroidMessage</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#androidmessage","title":"AndroidMessage","text":"<p>[jvm]\\ abstract class AndroidMessage&lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt; : Message&lt;M, B&gt; , Parcelable</p> <p>An Android-specific Message which adds support for Parcelable.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#functions","title":"Functions","text":"Name Summary describeContents [jvm]open override fun describeContents(): Int encode [jvm]fun encode(): ByteArrayEncode this message as a byte[].[jvm]fun encode(stream: OutputStream)fun encode(sink: BufferedSink)Encode this message and write it to stream. encodeByteString [jvm]fun encodeByteString(): ByteStringEncode this message as a ByteString. newBuilder [jvm]abstract fun newBuilder(): BReturns a new builder initialized with the data in this message. toString [jvm]open override fun toString(): String withoutUnknownFields [jvm]fun withoutUnknownFields(): MReturns this message with any unknown fields removed. writeToParcel [jvm]open override fun writeToParcel(dest: Parcel, flags: Int)"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#properties","title":"Properties","text":"Name Summary adapter [jvm]@Transient@get:JvmName(name = \u201cadapter\u201d)val adapter: ProtoAdapter&lt;M&gt;The ProtoAdapter for encoding and decoding messages of this type. unknownFields [jvm]@Transient@get:JvmName(name = \u201cunknownFields\u201d)val unknownFields: ByteStringReturns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields."},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/describe-contents/","title":"Describe contents","text":"<p>//wire-runtime/com.squareup.wire/AndroidMessage/describeContents</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/describe-contents/#describecontents","title":"describeContents","text":"<p>[jvm]\\ open override fun describeContents(): Int</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/write-to-parcel/","title":"Write to parcel","text":"<p>//wire-runtime/com.squareup.wire/AndroidMessage/writeToParcel</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/write-to-parcel/#writetoparcel","title":"writeToParcel","text":"<p>[jvm]\\ open override fun writeToParcel(dest: Parcel, flags: Int)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-companion/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/AndroidMessage/Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-companion/#functions","title":"Functions","text":"Name Summary newCreator [jvm]@JvmStaticfun &lt;E&gt; newCreator(adapter: ProtoAdapter&lt;E&gt;): Parcelable.Creator&lt;E&gt;Creates a new Parcelable.Creator using adapter for serialization."},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-companion/new-creator/","title":"New creator","text":"<p>//wire-runtime/com.squareup.wire/AndroidMessage/Companion/newCreator</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-companion/new-creator/#newcreator","title":"newCreator","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun &lt;E&gt; newCreator(adapter: ProtoAdapter&lt;E&gt;): Parcelable.Creator&lt;E&gt;</p> <p>Creates a new Parcelable.Creator using adapter for serialization.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#anymessage","title":"AnyMessage","text":"<p>[common]\\ class AnyMessage(typeUrl: String, value: ByteString) : Message&lt;AnyMessage, Nothing&gt; </p> <p>Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage. typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message.</p> <p>Example</p> <p>val person: Person = anyMessage.unpack(Person.ADAPTER)\\ val anyMessage: AnyMessage = AnyMessage.ADAPTER.pack(person)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#constructors","title":"Constructors","text":"AnyMessage [common]fun AnyMessage(typeUrl: String, value: ByteString = ByteString.EMPTY)"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#functions","title":"Functions","text":"Name Summary copy [common]fun copy(typeUrl: String = this.typeUrl, value: ByteString = this.value): AnyMessage encode [common]fun encode(): ByteArrayEncode this message as a byte[].[common]fun encode(sink: BufferedSink)Encode this message and write it to stream. encodeByteString [common]fun encodeByteString(): ByteStringEncode this message as a ByteString. equals [common]open operator override fun equals(other: Any?): Boolean hashCode [common]open override fun hashCode(): Int toString [common]open override fun toString(): String unpack [common]fun &lt;T&gt; unpack(adapter: ProtoAdapter&lt;T&gt;): T unpackOrNull [common]fun &lt;T&gt; unpackOrNull(adapter: ProtoAdapter&lt;T&gt;): T?"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#properties","title":"Properties","text":"Name Summary adapter [common]val adapter: ProtoAdapter&lt;AnyMessage&gt;The ProtoAdapter for encoding and decoding messages of this type. typeUrl [common]val typeUrl: String unknownFields [common]val unknownFields: ByteStringReturns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. value [common]val value: ByteString"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-any-message/","title":"any message","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/AnyMessage</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-any-message/#anymessage","title":"AnyMessage","text":"<p>[common]\\ fun AnyMessage(typeUrl: String, value: ByteString = ByteString.EMPTY)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/copy/","title":"Copy","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/copy</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/copy/#copy","title":"copy","text":"<p>[common]\\ fun copy(typeUrl: String = this.typeUrl, value: ByteString = this.value): AnyMessage</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/equals/","title":"Equals","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/equals</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/equals/#equals","title":"equals","text":"<p>[common]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/hash-code/","title":"Hash code","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/hashCode</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/hash-code/#hashcode","title":"hashCode","text":"<p>[common]\\ open override fun hashCode(): Int</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/to-string/","title":"To string","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/toString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/to-string/#tostring","title":"toString","text":"<p>[common]\\ open override fun toString(): String</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/type-url/","title":"Type url","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/typeUrl</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/type-url/#typeurl","title":"typeUrl","text":"<p>[common]\\ val typeUrl: String</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack-or-null/","title":"Unpack or null","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/unpackOrNull</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack-or-null/#unpackornull","title":"unpackOrNull","text":"<p>[common]\\ fun &lt;T&gt; unpackOrNull(adapter: ProtoAdapter&lt;T&gt;): T?</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack/","title":"Unpack","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/unpack</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack/#unpack","title":"unpack","text":"<p>[common]\\ fun &lt;T&gt; unpack(adapter: ProtoAdapter&lt;T&gt;): T</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/value/","title":"Value","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/value</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/value/#value","title":"value","text":"<p>[common]\\ val value: ByteString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/#functions","title":"Functions","text":"Name Summary pack [common]fun pack(message: Message&lt;*, *&gt;): AnyMessage"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/#properties","title":"Properties","text":"Name Summary ADAPTER [common]@JvmFieldval ADAPTER: ProtoAdapter&lt;AnyMessage&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/-a-d-a-p-t-e-r/","title":"a d a p t e r","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/Companion/ADAPTER</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/-a-d-a-p-t-e-r/#adapter","title":"ADAPTER","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val ADAPTER: ProtoAdapter&lt;AnyMessage&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/pack/","title":"Pack","text":"<p>//wire-runtime/com.squareup.wire/AnyMessage/Companion/pack</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/pack/#pack","title":"pack","text":"<p>[common]\\ fun pack(message: Message&lt;*, *&gt;): AnyMessage</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/Duration</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/#duration","title":"Duration","text":"<p>[common]\\ class Duration</p> <p>A measurement of time. Durations may be positive, zero, or negative.</p> <p>Positive durations are measured in seconds, with both #getSeconds and #getNano parts with non-negative signs.</p> <p>Negative durations may be surprising. The #getSeconds property is negative, but the #getNano property is non-negative! To represent -1.3 seconds the seconds property is -2 and the nanos property is 700,000,000.</p> <p>[js, native]\\ class Duration</p> <p>[jvm]\\ typealias Duration = Duration</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/#functions","title":"Functions","text":"Name Summary getNano [common]fun getNano(): IntReturns a value in [0..1,000,000,000).[js, native][js, native]fun getNano(): Int getSeconds [common, js, native][common, js, native]fun getSeconds(): Long"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/get-nano/","title":"Get nano","text":"<p>//wire-runtime/com.squareup.wire/Duration/getNano</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/get-nano/#getnano","title":"getNano","text":"<p>[common]\\ fun getNano(): Int</p> <p>Returns a value in [0..1,000,000,000).</p> <p>[js, native]\\ [js, native]\\ fun getNano(): Int</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/get-seconds/","title":"Get seconds","text":"<p>//wire-runtime/com.squareup.wire/Duration/getSeconds</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/get-seconds/#getseconds","title":"getSeconds","text":"<p>[common, js, native]\\ [common, js, native]\\ fun getSeconds(): Long</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/EnumAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#enumadapter","title":"EnumAdapter","text":"<p>[common]\\ abstract class EnumAdapter&lt;E : WireEnum&gt; : ProtoAdapter&lt;E&gt; </p> <p>An abstract ProtoAdapter that converts values of an enum to and from integers.</p> <p>[js, jvm, native]\\ abstract class EnumAdapter&lt;E : WireEnum&gt; : ProtoAdapter&lt;E&gt; </p> <p>An abstract ProtoAdapter that converts values of an enum to and from integers.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#constructors","title":"Constructors","text":"EnumAdapter [jvm]fun &lt;E : WireEnum&gt; EnumAdapter(type: Class&lt;E&gt;, syntax: Syntax, identity: E?) EnumAdapter [jvm]fun &lt;E : WireEnum&gt; EnumAdapter(type: Class&lt;E&gt;) EnumAdapter [jvm]fun &lt;E : WireEnum&gt; EnumAdapter(type: Class&lt;E&gt;, syntax: Syntax) EnumAdapter [jvm]fun &lt;E : WireEnum&gt; EnumAdapter(type: KClass&lt;E&gt;) EnumAdapter [jvm]fun &lt;E : WireEnum&gt; EnumAdapter(type: KClass&lt;E&gt;, syntax: Syntax)"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#functions","title":"Functions","text":"Name Summary asPacked [common, js, native][common, js, native]fun asPacked(): ProtoAdapter&lt;List&lt;E&gt;&gt;Returns an adapter for E but as a packed, repeated value.[jvm]fun asPacked(): ProtoAdapter&lt;List&lt;E&gt;&gt; asRepeated [common, js, native][common, js, native]fun asRepeated(): ProtoAdapter&lt;List&lt;E&gt;&gt;Returns an adapter for E but as a repeated value.[jvm]fun asRepeated(): ProtoAdapter&lt;List&lt;E&gt;&gt; decode [common, js, native][common]open override fun decode(reader: ProtoReader): E[js, native]open override fun decode(reader: ProtoReader): ERead a non-null value from reader.[jvm]open override fun decode(reader: ProtoReader): Efun decode(stream: InputStream): Efun decode(bytes: ByteArray): Efun decode(source: BufferedSource): Efun decode(bytes: ByteString): E[common, js, native][common, js, native]fun decode(bytes: ByteArray): E[common, js]fun decode(bytes: ByteString): ERead an encoded message from bytes.[common, js][common, js]fun decode(source: BufferedSource): ERead an encoded message from source. encode [common, js, native][common]fun encode(value: E): ByteArray[js]fun encode(value: E): ByteArray[native]fun encode(value: E): ByteArrayEncode value as a byte[].[jvm]fun encode(value: E): ByteArrayopen override fun encode(writer: ProtoWriter, value: E)open override fun encode(writer: ReverseProtoWriter, value: E)fun encode(stream: OutputStream, value: E)fun encode(sink: BufferedSink, value: E)[common, js, native][common]open override fun encode(writer: ProtoWriter, value: E)[js, native]open override fun encode(writer: ProtoWriter, value: E)[common]open override fun encode(writer: ReverseProtoWriter, value: E)[js, native]open override fun encode(writer: ReverseProtoWriter, value: E)Write non-null value to writer.[common, js][common]fun encode(sink: BufferedSink, value: E)[js]fun encode(sink: BufferedSink, value: E)Encode value and write it to stream. encodeByteString [common, js, native][common]fun encodeByteString(value: E): ByteString[js]fun encodeByteString(value: E): ByteString[native]fun encodeByteString(value: E): ByteStringEncode value as a ByteString.[jvm]fun encodeByteString(value: E): ByteString encodedSize [common, js, native][common, js, native]open override fun encodedSize(value: E): IntThe size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one).[jvm]open override fun encodedSize(value: E): Int encodedSizeWithTag [common, js, native][common]open fun encodedSizeWithTag(tag: Int, value: E?): Int[js]open fun encodedSizeWithTag(tag: Int, value: E?): Int[native]open fun encodedSizeWithTag(tag: Int, value: E?): IntThe size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null.[jvm]open fun encodedSizeWithTag(tag: Int, value: E?): Int encodeWithTag [common, js, native][common]open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: E?)[js]open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: E?)[native]open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: E?)[common]open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: E?)[js]open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: E?)[native]open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: E?)Write tag and value to writer. If value is null this does nothing.[jvm]open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: E?)open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: E?) redact [common, js, native][common, js, native]open override fun redact(value: E): EReturns the redacted form of value.[jvm]open override fun redact(value: E): E toString [common, js, native][common]open fun toString(value: E): String[js]open fun toString(value: E): String[native]open fun toString(value: E): StringReturns a human-readable version of the given value.[jvm]open fun toString(value: E): String"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#properties","title":"Properties","text":"Name Summary identity [common]val identity: E?A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted.[js, jvm, native]val identity: E? sourceFile [common]val sourceFile: String?Path to the file containing the protobuf definition of this type.[js, jvm, native]val sourceFile: String? syntax [common]val syntax: SyntaxIdentifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d.[js, jvm, native]val syntax: Syntax type [common, js, jvm, native]val type: KClass&lt;*&gt;? typeUrl [common]val typeUrl: String?Identifies this type for inclusion in a google.protobuf.Any. This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS.[js, jvm, native]val typeUrl: String?"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#inheritors","title":"Inheritors","text":"Name RuntimeEnumAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/-enum-adapter/","title":"enum adapter","text":"<p>//wire-runtime/com.squareup.wire/EnumAdapter/EnumAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/-enum-adapter/#enumadapter","title":"EnumAdapter","text":"<p>[jvm]\\ fun &lt;E : WireEnum&gt; EnumAdapter(type: Class&lt;E&gt;, syntax: Syntax, identity: E?)</p> <p>fun &lt;E : WireEnum&gt; EnumAdapter(type: Class&lt;E&gt;)</p> <p>fun &lt;E : WireEnum&gt; EnumAdapter(type: Class&lt;E&gt;, syntax: Syntax)</p> <p>fun &lt;E : WireEnum&gt; EnumAdapter(type: KClass&lt;E&gt;)</p> <p>fun &lt;E : WireEnum&gt; EnumAdapter(type: KClass&lt;E&gt;, syntax: Syntax)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/decode/","title":"Decode","text":"<p>//wire-runtime/com.squareup.wire/EnumAdapter/decode</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/decode/#decode","title":"decode","text":"<p>[common, js, native]\\ [common]\\ open override fun decode(reader: ProtoReader): E</p> <p>[js, native]\\ open override fun decode(reader: ProtoReader): E</p> <p>Read a non-null value from reader.</p> <p>[jvm]\\ open override fun decode(reader: ProtoReader): E</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encode/","title":"Encode","text":"<p>//wire-runtime/com.squareup.wire/EnumAdapter/encode</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encode/#encode","title":"encode","text":"<p>[common, js, native]\\ [common]\\ open override fun encode(writer: ProtoWriter, value: E)</p> <p>[js, native]\\ open override fun encode(writer: ProtoWriter, value: E)</p> <p>[common]\\ open override fun encode(writer: ReverseProtoWriter, value: E)</p> <p>[js, native]\\ open override fun encode(writer: ReverseProtoWriter, value: E)</p> <p>Write non-null value to writer.</p> <p>[jvm]\\ open override fun encode(writer: ProtoWriter, value: E)</p> <p>open override fun encode(writer: ReverseProtoWriter, value: E)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encoded-size/","title":"Encoded size","text":"<p>//wire-runtime/com.squareup.wire/EnumAdapter/encodedSize</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encoded-size/#encodedsize","title":"encodedSize","text":"<p>[common, js, native]\\ [common, js, native]\\ open override fun encodedSize(value: E): Int</p> <p>The size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one).</p> <p>[jvm]\\ open override fun encodedSize(value: E): Int</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/redact/","title":"Redact","text":"<p>//wire-runtime/com.squareup.wire/EnumAdapter/redact</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/redact/#redact","title":"redact","text":"<p>[common, js, native]\\ [common, js, native]\\ open override fun redact(value: E): E</p> <p>Returns the redacted form of value.</p> <p>[jvm]\\ open override fun redact(value: E): E</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/FieldEncoding</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#fieldencoding","title":"FieldEncoding","text":"<p>[common]\\ enum FieldEncoding : Enum&lt;FieldEncoding&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#entries","title":"Entries","text":"FIXED32 [common]FIXED32(5) LENGTH_DELIMITED [common]LENGTH_DELIMITED(2) FIXED64 [common]FIXED64(1) VARINT [common]VARINT(0)"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#functions","title":"Functions","text":"Name Summary rawProtoAdapter [common]fun rawProtoAdapter(): ProtoAdapter&lt;*&gt;Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers."},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/raw-proto-adapter/","title":"Raw proto adapter","text":"<p>//wire-runtime/com.squareup.wire/FieldEncoding/rawProtoAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/raw-proto-adapter/#rawprotoadapter","title":"rawProtoAdapter","text":"<p>[common]\\ fun rawProtoAdapter(): ProtoAdapter&lt;*&gt;</p> <p>Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-companion/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/FieldEncoding/Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/FieldEncoding/FIXED32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/#fixed32","title":"FIXED32","text":"<p>[common]\\ FIXED32(5)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/#functions","title":"Functions","text":"Name Summary rawProtoAdapter [common]fun rawProtoAdapter(): ProtoAdapter&lt;*&gt;Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers."},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/FieldEncoding/FIXED64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/#fixed64","title":"FIXED64","text":"<p>[common]\\ FIXED64(1)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/#functions","title":"Functions","text":"Name Summary rawProtoAdapter [common]fun rawProtoAdapter(): ProtoAdapter&lt;*&gt;Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers."},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/FieldEncoding/LENGTH_DELIMITED</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/#length_delimited","title":"LENGTH_DELIMITED","text":"<p>[common]\\ LENGTH_DELIMITED(2)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/#functions","title":"Functions","text":"Name Summary rawProtoAdapter [common]fun rawProtoAdapter(): ProtoAdapter&lt;*&gt;Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers."},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/FieldEncoding/VARINT</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/#varint","title":"VARINT","text":"<p>[common]\\ VARINT(0)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/#functions","title":"Functions","text":"Name Summary rawProtoAdapter [common]fun rawProtoAdapter(): ProtoAdapter&lt;*&gt;Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers."},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/Instant</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/#instant","title":"Instant","text":"<p>[common]\\ class Instant</p> <p>This represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform.</p> <p>[js, native]\\ class Instant</p> <p>[jvm]\\ typealias Instant = Instant</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/#functions","title":"Functions","text":"Name Summary getEpochSecond [common]fun getEpochSecond(): LongReturns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative.[js, native][js, native]fun getEpochSecond(): Long getNano [common]fun getNano(): IntReturns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond.[js, native][js, native]fun getNano(): Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/get-epoch-second/","title":"Get epoch second","text":"<p>//wire-runtime/com.squareup.wire/Instant/getEpochSecond</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/get-epoch-second/#getepochsecond","title":"getEpochSecond","text":"<p>[common]\\ fun getEpochSecond(): Long</p> <p>Returns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative.</p> <p>For example, this value will be -1 for the instant 1969-12-31T23:59:59Z, and 1 for the instant 1970-01-01T00:00:01Z.</p> <p>[js, native]\\ [js, native]\\ fun getEpochSecond(): Long</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/get-nano/","title":"Get nano","text":"<p>//wire-runtime/com.squareup.wire/Instant/getNano</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/get-nano/#getnano","title":"getNano","text":"<p>[common]\\ fun getNano(): Int</p> <p>Returns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond.</p> <p>[js, native]\\ [js, native]\\ fun getNano(): Int</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/Message</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#message","title":"Message","text":"<p>[common, js, native]\\ abstract class Message&lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt;</p> <p>A protocol buffer message.</p> <p>[jvm]\\ abstract class Message&lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt; : Serializable</p> <p>A protocol buffer message.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#types","title":"Types","text":"Name Summary Builder [common, js, jvm, native][common, js, jvm, native]abstract class Builder&lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt;Superclass for protocol buffer message builders. Companion [jvm]object Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#functions","title":"Functions","text":"Name Summary encode [common, js, jvm, native][common, js, jvm, native]fun encode(): ByteArrayEncode this message as a byte[].[jvm, common, js][jvm]fun encode(stream: OutputStream)[common, js, jvm]fun encode(sink: BufferedSink)Encode this message and write it to stream. encodeByteString [common, js, jvm, native][common, js, jvm, native]fun encodeByteString(): ByteStringEncode this message as a ByteString. newBuilder [common, js, jvm, native][common, js, jvm, native]abstract fun newBuilder(): BReturns a new builder initialized with the data in this message. toString [jvm]open override fun toString(): String withoutUnknownFields [jvm]fun withoutUnknownFields(): MReturns this message with any unknown fields removed."},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#properties","title":"Properties","text":"Name Summary adapter [common, js, native]val adapter: ProtoAdapter&lt;M&gt;The ProtoAdapter for encoding and decoding messages of this type.[jvm]@Transient@get:JvmName(name = \u201cadapter\u201d)val adapter: ProtoAdapter&lt;M&gt;The ProtoAdapter for encoding and decoding messages of this type. unknownFields [common, js, native]val unknownFields: ByteStringReturns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.[jvm]@Transient@get:JvmName(name = \u201cunknownFields\u201d)val unknownFields: ByteStringReturns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields."},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#inheritors","title":"Inheritors","text":"Name AnyMessage AndroidMessage"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/adapter/","title":"Adapter","text":"<p>//wire-runtime/com.squareup.wire/Message/adapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/adapter/#adapter","title":"adapter","text":"<p>[common, js, jvm, native]\\ [common, js, native]\\ val adapter: ProtoAdapter&lt;M&gt;</p> <p>[jvm]\\</p> <p>@Transient</p> <p>@get:JvmName(name = \u201cadapter\u201d)</p> <p>val adapter: ProtoAdapter&lt;M&gt;</p> <p>The ProtoAdapter for encoding and decoding messages of this type.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode-byte-string/","title":"Encode byte string","text":"<p>//wire-runtime/com.squareup.wire/Message/encodeByteString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode-byte-string/#encodebytestring","title":"encodeByteString","text":"<p>[common, js, jvm, native]\\ [common, js, jvm, native]\\ fun encodeByteString(): ByteString</p> <p>Encode this message as a ByteString.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode/","title":"Encode","text":"<p>//wire-runtime/com.squareup.wire/Message/encode</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode/#encode","title":"encode","text":"<p>[jvm, common, js]\\ [jvm]\\ fun encode(stream: OutputStream)</p> <p>[common, js, jvm]\\ fun encode(sink: BufferedSink)</p> <p>Encode this message and write it to stream.</p> <p>[common, js, jvm, native]\\ [common, js, jvm, native]\\ fun encode(): ByteArray</p> <p>Encode this message as a byte[].</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/new-builder/","title":"New builder","text":"<p>//wire-runtime/com.squareup.wire/Message/newBuilder</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/new-builder/#newbuilder","title":"newBuilder","text":"<p>[common, js, jvm, native]\\ [common, js, jvm, native]\\ abstract fun newBuilder(): B</p> <p>Returns a new builder initialized with the data in this message.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/to-string/","title":"To string","text":"<p>//wire-runtime/com.squareup.wire/Message/toString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open override fun toString(): String</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/unknown-fields/","title":"Unknown fields","text":"<p>//wire-runtime/com.squareup.wire/Message/unknownFields</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/unknown-fields/#unknownfields","title":"unknownFields","text":"<p>[common, js, jvm, native]\\ [common, js, native]\\ val unknownFields: ByteString</p> <p>[jvm]\\</p> <p>@Transient</p> <p>@get:JvmName(name = \u201cunknownFields\u201d)</p> <p>val unknownFields: ByteString</p> <p>Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/without-unknown-fields/","title":"Without unknown fields","text":"<p>//wire-runtime/com.squareup.wire/Message/withoutUnknownFields</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/without-unknown-fields/#withoutunknownfields","title":"withoutUnknownFields","text":"<p>[jvm]\\ fun withoutUnknownFields(): M</p> <p>Returns this message with any unknown fields removed.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/Message/Builder</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#builder","title":"Builder","text":"<p>[common, js, jvm, native]\\ abstract class Builder&lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt;</p> <p>Superclass for protocol buffer message builders.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#constructors","title":"Constructors","text":"Builder [js]fun Builder() Builder [native]fun Builder()"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#functions","title":"Functions","text":"Name Summary addUnknownField [jvm]fun addUnknownField(tag: Int, fieldEncoding: FieldEncoding, value: Any?): Message.Builder&lt;M, B&gt; addUnknownFields [jvm]fun addUnknownFields(unknownFields: ByteString): Message.Builder&lt;M, B&gt; build [jvm]abstract fun build(): MReturns an immutable Message based on the fields that set in this builder. buildUnknownFields [jvm]fun buildUnknownFields(): ByteStringReturns a byte string with this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. clearUnknownFields [jvm]fun clearUnknownFields(): Message.Builder&lt;M, B&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/-builder/","title":"builder","text":"<p>//wire-runtime/com.squareup.wire/Message/Builder/Builder</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/-builder/#builder","title":"Builder","text":"<p>[js, native]\\ [js, native]\\ fun Builder()</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-field/","title":"Add unknown field","text":"<p>//wire-runtime/com.squareup.wire/Message/Builder/addUnknownField</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-field/#addunknownfield","title":"addUnknownField","text":"<p>[jvm]\\ fun addUnknownField(tag: Int, fieldEncoding: FieldEncoding, value: Any?): Message.Builder&lt;M, B&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-fields/","title":"Add unknown fields","text":"<p>//wire-runtime/com.squareup.wire/Message/Builder/addUnknownFields</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-fields/#addunknownfields","title":"addUnknownFields","text":"<p>[jvm]\\ fun addUnknownFields(unknownFields: ByteString): Message.Builder&lt;M, B&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build-unknown-fields/","title":"Build unknown fields","text":"<p>//wire-runtime/com.squareup.wire/Message/Builder/buildUnknownFields</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build-unknown-fields/#buildunknownfields","title":"buildUnknownFields","text":"<p>[jvm]\\ fun buildUnknownFields(): ByteString</p> <p>Returns a byte string with this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build/","title":"Build","text":"<p>//wire-runtime/com.squareup.wire/Message/Builder/build</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build/#build","title":"build","text":"<p>[jvm]\\ abstract fun build(): M</p> <p>Returns an immutable Message based on the fields that set in this builder.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/clear-unknown-fields/","title":"Clear unknown fields","text":"<p>//wire-runtime/com.squareup.wire/Message/Builder/clearUnknownFields</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/clear-unknown-fields/#clearunknownfields","title":"clearUnknownFields","text":"<p>[jvm]\\ fun clearUnknownFields(): Message.Builder&lt;M, B&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-companion/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/Message/Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/MessageSink</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/#messagesink","title":"MessageSink","text":"<p>[common]\\ interface MessageSink&lt;in T : Any&gt;</p> <p>A writable stream of messages.</p> <p>Typical implementations will immediately encode messages and enqueue them for transmission, such as for client-to-server or server-to-client networking. But this interface is not limited to 1-1 networking use cases and implementations may persist, broadcast, validate, or take any other action with the messages.</p> <p>There is no flushing mechanism. Messages are flushed one-by-one as they are written. This minimizes latency at a potential cost of throughput.</p> <p>On its own this offers no guarantees that messages are delivered. For example, a message may accepted by write could be lost due to a network partition or crash. It is the caller\u2019s responsibility to confirm delivery and to retransmit as necessary.</p> <p>It is possible for a writer to saturate the transmission channel, such as when a writer writes faster than the corresponding reader can read. In such cases calls to write will block until there is capacity in the outbound channel. You may use this as a basic backpressure mechanism. You should ensure that such backpressure propagates to the originator of outbound messages.</p> <p>Instances of this interface are not safe for concurrent use.</p> <p>[js, native]\\ interface MessageSink&lt;in T : Any&gt;</p> <p>[jvm]\\ interface MessageSink&lt;in T : Any&gt; : Closeable</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/#functions","title":"Functions","text":"Name Summary cancel [common]abstract fun cancel()Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use.[js, jvm, native][js, jvm, native]abstract fun cancel() close [common]abstract fun close()Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream.[js, native, jvm][js, native]abstract fun close()[jvm]abstract override fun close() write [common]abstract fun write(message: T)Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message.[js, jvm, native][js, jvm, native]abstract fun write(message: T)"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/","title":"Cancel","text":"<p>//wire-runtime/com.squareup.wire/MessageSink/cancel</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/#cancel","title":"cancel","text":"<p>[common]\\ abstract fun cancel()</p> <p>Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use.</p> <p>A stream must be closed after it is canceled.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/#throws","title":"Throws","text":"kotlin.IllegalStateException if this stream is closed. <p>[js, jvm, native]\\ [js, jvm, native]\\ abstract fun cancel()</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/#throws_1","title":"Throws","text":"kotlin.IllegalStateException if this stream is closed."},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/close/","title":"Close","text":"<p>//wire-runtime/com.squareup.wire/MessageSink/close</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/close/#close","title":"close","text":"<p>[common]\\ abstract fun close()</p> <p>Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream.</p> <p>[js, native]\\ [js, native]\\ abstract fun close()</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/","title":"Write","text":"<p>//wire-runtime/com.squareup.wire/MessageSink/write</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/#write","title":"write","text":"<p>[common]\\ abstract fun write(message: T)</p> <p>Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/#throws","title":"Throws","text":"kotlin.IllegalStateException if this stream is closed. <p>[js, jvm, native]\\ [js, jvm, native]\\ abstract fun write(message: T)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/#throws_1","title":"Throws","text":"kotlin.IllegalStateException if this stream is closed."},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/MessageSource</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/#messagesource","title":"MessageSource","text":"<p>[common]\\ interface MessageSource&lt;out T : Any&gt;</p> <p>A readable stream of messages.</p> <p>Typical implementations will receive messages recently transmitted from a peer, such as for server-to-client or client-to-server networking. But this implementation is not limited to such networking use cases and implementations may load messages from local storage or generate messages on demand.</p> <p>Calls to read will block until a message becomes available. There is no mechanism to limit how long a specific read will wait, though implementations may be configured to fail if they consider a source to be unhealthy.</p> <p>Readers should take care to keep up with the stream of messages. A reader that takes an excessive amount of time to process a message may cause their writer to back up and suffer queueing.</p> <p>Instances of this interface are not safe for concurrent use.</p> <p>[js, native]\\ interface MessageSource&lt;out T : Any&gt;</p> <p>[jvm]\\ interface MessageSource&lt;out T : Any&gt; : Closeable</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/#functions","title":"Functions","text":"Name Summary close [common, js, native, jvm][common, js, native]abstract fun close()[jvm]abstract override fun close() read [common]abstract fun read(): T?Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream.[js, jvm, native][js, jvm, native]abstract fun read(): T?"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/close/","title":"Close","text":"<p>//wire-runtime/com.squareup.wire/MessageSource/close</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/close/#close","title":"close","text":"<p>[common, js, native]\\ [common, js, native]\\ abstract fun close()</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/","title":"Read","text":"<p>//wire-runtime/com.squareup.wire/MessageSource/read</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/#read","title":"read","text":"<p>[common]\\ abstract fun read(): T?</p> <p>Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/#throws","title":"Throws","text":"okio.IOException if the next message cannot be read, or if the stream was abnormally     terminated by its producer. <p>[js, jvm, native]\\ [js, jvm, native]\\ abstract fun read(): T?</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/#throws_1","title":"Throws","text":"okio.IOException if the next message cannot be read, or if the stream was abnormally     terminated by its producer."},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/OneOf</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#oneof","title":"OneOf","text":"<p>[common]\\ data class OneOf&lt;out K : OneOf.Key&lt;T&gt;, T&gt;(key: K, value: T)</p> <p>A oneof\u2019s value and the key that identifies which field holds it.</p> <p>Wire has two different mechanisms for generating oneof code: \u201cboxed\u201d that uses this class, and \u201cflat\u201d where all oneof fields are defined inline in the declaring message.</p> <p>Flat oneofs</p> <p>This is Wire\u2019s default mechanism. Each oneof field in the schema yields a field in the generated Kotlin or Java class. At most one field has a non-null value, and callers need to manually probe each field until they find the non-null value.</p> <p>This is well-suited to oneofs with a small number of choices (less than 5).</p> <p>Boxed oneofs</p> <p>In this mechanism the generated class has one field that holds an instance of this. It has both a key that identifies which field is populated, and its value. If no field is set, then the OneOf box is null.</p> <p>This is well-suited to oneofs with a large number of choices (5 or more). This mechanism is necessary for oneofs with a very large number of options because in the other form the generated code may exceed the JVM\u2019s method size limits.</p> <p>Opt-in to boxed oneofs in your build by setting the boxOneOfsMinSize option. OneOfs with this many fields or more will be generated in this form.</p> <p>wire {\\   kotlin {\\     boxOneOfsMinSize = 10\\   }\\ }</p> <p>Using Boxed oneofs</p> <p>One challenge in using oneofs is coping with data from different schema versions that offer new unknown choices. For example, a client may receive a message from a server that sets a oneof field the client doesn\u2019t know about; or a server may read an archived message with a oneof field that has since been deleted.</p> <p>In either case, the oneof will be null! There is no way to differentiate between unset and set to an unknown field. Please keep this in mind when writing code to handle oneofs.</p> <p>In this example the address type may be absent (no value was ever set) or its type may be too new for the current code to understand. This code returns a default value:</p> <p>val buttonLabel = when (contact.address?.key) {\\   Contact.addressSmsNumber -&gt; \u201cSend SMS\u201d\\   Contact.addressEmailAddress -&gt; \u201cSend Email\u201d\\   else -&gt; \u201cAddress Type Unknown or Unset\u201d\\ }</p> <p>Another approach is to crash. In this case applications need to be careful to avoid receiving data with an incompatible schema.</p> <p>val buttonLabel = when (contact.address?.key) {\\   Contact.addressSmsNumber -&gt; \u201cSend SMS\u201d\\   Contact.addressEmailAddress -&gt; \u201cSend Email\u201d\\   else -&gt; throw IllegalStateException(\u201cunknown address!\u201d)\\ }</p> <p>Consider AnyMessage</p> <p>New schemas should consider google.protobuf.Any instead of oneof.</p> <p>Benefits of Any:</p> <ul><li>No build-time dependency from the referencing type on the referenced type.</li><li>Add new types without changing the schema</li></ul> <p>Benefits of OneOf:</p> <ul><li>More compact on-the-wire encoding. Approximately 1 byte of overhead for OneOf vs. 32 for     the message name in an Any.</li><li>All choices are cataloged a central place in the schema.</li></ul>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#constructors","title":"Constructors","text":"OneOf [common]fun &lt;out K : OneOf.Key&lt;T&gt;, T&gt; OneOf(key: K, value: T)"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#types","title":"Types","text":"Name Summary Key [common]abstract class Key&lt;T&gt;(tag: Int, adapter: ProtoAdapter&lt;T&gt;, declaredName: String, redacted: Boolean, jsonName: String)Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class."},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#functions","title":"Functions","text":"Name Summary encodedSizeWithTag [common]fun encodedSizeWithTag(): Int encodeWithTag [common]fun encodeWithTag(writer: ProtoWriter)fun encodeWithTag(writer: ReverseProtoWriter) getOrNull [common]fun &lt;X&gt; getOrNull(key: OneOf.Key&lt;X&gt;): X? toString [common]open override fun toString(): String"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#properties","title":"Properties","text":"Name Summary key [common]val key: K value [common]val value: T"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-one-of/","title":"one of","text":"<p>//wire-runtime/com.squareup.wire/OneOf/OneOf</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-one-of/#oneof","title":"OneOf","text":"<p>[common]\\ fun &lt;out K : OneOf.Key&lt;T&gt;, T&gt; OneOf(key: K, value: T)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encode-with-tag/","title":"Encode with tag","text":"<p>//wire-runtime/com.squareup.wire/OneOf/encodeWithTag</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encode-with-tag/#encodewithtag","title":"encodeWithTag","text":"<p>[common]\\ fun encodeWithTag(writer: ProtoWriter)</p> <p>fun encodeWithTag(writer: ReverseProtoWriter)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encoded-size-with-tag/","title":"Encoded size with tag","text":"<p>//wire-runtime/com.squareup.wire/OneOf/encodedSizeWithTag</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encoded-size-with-tag/#encodedsizewithtag","title":"encodedSizeWithTag","text":"<p>[common]\\ fun encodedSizeWithTag(): Int</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/get-or-null/","title":"Get or null","text":"<p>//wire-runtime/com.squareup.wire/OneOf/getOrNull</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/get-or-null/#getornull","title":"getOrNull","text":"<p>[common]\\ fun &lt;X&gt; getOrNull(key: OneOf.Key&lt;X&gt;): X?</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/key/","title":"Key","text":"<p>//wire-runtime/com.squareup.wire/OneOf/key</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/key/#key","title":"key","text":"<p>[common]\\ val key: K</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/to-string/","title":"To string","text":"<p>//wire-runtime/com.squareup.wire/OneOf/toString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/to-string/#tostring","title":"toString","text":"<p>[common]\\ open override fun toString(): String</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/value/","title":"Value","text":"<p>//wire-runtime/com.squareup.wire/OneOf/value</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/value/#value","title":"value","text":"<p>[common]\\ val value: T</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/OneOf/Key</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/#key","title":"Key","text":"<p>[common]\\ abstract class Key&lt;T&gt;(tag: Int, adapter: ProtoAdapter&lt;T&gt;, declaredName: String, redacted: Boolean, jsonName: String)</p> <p>Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class.</p> <p>Note that the field\u2019s type may not uniquely identify the field. For example:</p> <p>message ContactAddress {\\   string name = 1;\\ \\   oneof address {\\     string sms_number = 2;\\     string email_address = 3;\\   }\\ }</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/#constructors","title":"Constructors","text":"Key [common]fun &lt;T&gt; Key(tag: Int, adapter: ProtoAdapter&lt;T&gt;, declaredName: String, redacted: Boolean = false, jsonName: String = \u201c\u201d)"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/#properties","title":"Properties","text":"Name Summary adapter [common]val adapter: ProtoAdapter&lt;T&gt; declaredName [common]val declaredName: String jsonName [common]val jsonName: String redacted [common]val redacted: Boolean = false tag [common]val tag: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/-key/","title":"key","text":"<p>//wire-runtime/com.squareup.wire/OneOf/Key/Key</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/-key/#key","title":"Key","text":"<p>[common]\\ fun &lt;T&gt; Key(tag: Int, adapter: ProtoAdapter&lt;T&gt;, declaredName: String, redacted: Boolean = false, jsonName: String = \u201c\u201d)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/adapter/","title":"Adapter","text":"<p>//wire-runtime/com.squareup.wire/OneOf/Key/adapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/adapter/#adapter","title":"adapter","text":"<p>[common]\\ val adapter: ProtoAdapter&lt;T&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/declared-name/","title":"Declared name","text":"<p>//wire-runtime/com.squareup.wire/OneOf/Key/declaredName</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/declared-name/#declaredname","title":"declaredName","text":"<p>[common]\\ val declaredName: String</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/json-name/","title":"Json name","text":"<p>//wire-runtime/com.squareup.wire/OneOf/Key/jsonName</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/json-name/#jsonname","title":"jsonName","text":"<p>[common]\\ val jsonName: String</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/redacted/","title":"Redacted","text":"<p>//wire-runtime/com.squareup.wire/OneOf/Key/redacted</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/redacted/#redacted","title":"redacted","text":"<p>[common]\\ val redacted: Boolean = false</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/tag/","title":"Tag","text":"<p>//wire-runtime/com.squareup.wire/OneOf/Key/tag</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/tag/#tag","title":"tag","text":"<p>[common]\\ val tag: Int</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#protoadapter","title":"ProtoAdapter","text":"<p>[common]\\ abstract class ProtoAdapter&lt;E&gt;(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?, typeUrl: String?, syntax: Syntax, identity: E?, sourceFile: String?)</p> <p>[js, jvm, native]\\ abstract class ProtoAdapter&lt;E&gt;(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?, typeUrl: String?, syntax: Syntax, identity: E?, sourceFile: String?)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#constructors","title":"Constructors","text":"ProtoAdapter [jvm]fun ProtoAdapter(fieldEncoding: FieldEncoding, type: Class&lt;*&gt;) ProtoAdapter [jvm]fun ProtoAdapter(fieldEncoding: FieldEncoding, type: Class&lt;*&gt;, typeUrl: String?) ProtoAdapter [jvm]fun ProtoAdapter(fieldEncoding: FieldEncoding, type: Class&lt;*&gt;, typeUrl: String?, syntax: Syntax) ProtoAdapter [jvm]fun &lt;E&gt; ProtoAdapter(fieldEncoding: FieldEncoding, type: Class&lt;*&gt;, typeUrl: String?, syntax: Syntax, identity: E?) ProtoAdapter [jvm]fun ProtoAdapter(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?) ProtoAdapter [jvm]fun ProtoAdapter(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?, typeUrl: String?) ProtoAdapter [jvm]fun ProtoAdapter(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?, typeUrl: String?, syntax: Syntax) ProtoAdapter [jvm]fun &lt;E&gt; ProtoAdapter(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?, typeUrl: String?, syntax: Syntax, identity: E?) ProtoAdapter [jvm]fun &lt;E&gt; ProtoAdapter(fieldEncoding: FieldEncoding, type: Class&lt;*&gt;, typeUrl: String?, syntax: Syntax, identity: E?, sourceFile: String?)"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#types","title":"Types","text":"Name Summary Companion [common, js, jvm, native][common, js, jvm, native]object Companion EnumConstantNotFoundException [common, js, jvm, native][common, js]class EnumConstantNotFoundException(value: Int, type: KClass&lt;&gt;?) : IllegalArgumentException[jvm]class EnumConstantNotFoundException(value: Int, type: KClass&lt;&gt;?) : IllegalArgumentException[native]class EnumConstantNotFoundException(value: Int, type: KClass&lt;*&gt;?)"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#functions","title":"Functions","text":"Name Summary asPacked [common, js, native][common, js, native]fun asPacked(): ProtoAdapter&lt;List&lt;E&gt;&gt;Returns an adapter for E but as a packed, repeated value.[jvm]fun asPacked(): ProtoAdapter&lt;List&lt;E&gt;&gt; asRepeated [common, js, native][common, js, native]fun asRepeated(): ProtoAdapter&lt;List&lt;E&gt;&gt;Returns an adapter for E but as a repeated value.[jvm]fun asRepeated(): ProtoAdapter&lt;List&lt;E&gt;&gt; decode [common, js, native][common]abstract fun decode(reader: ProtoReader): E[js, native]abstract fun decode(reader: ProtoReader): ERead a non-null value from reader.[jvm]abstract fun decode(reader: ProtoReader): Efun decode(stream: InputStream): Efun decode(bytes: ByteArray): Efun decode(source: BufferedSource): Efun decode(bytes: ByteString): E[common, js, native][common, js, native]fun decode(bytes: ByteArray): E[common, js]fun decode(bytes: ByteString): ERead an encoded message from bytes.[common, js][common, js]fun decode(source: BufferedSource): ERead an encoded message from source. encode [common, js, native][common, js, native]fun encode(value: E): ByteArrayEncode value as a byte[].[jvm]fun encode(value: E): ByteArrayabstract fun encode(writer: ProtoWriter, value: E)open fun encode(writer: ReverseProtoWriter, value: E)fun encode(stream: OutputStream, value: E)fun encode(sink: BufferedSink, value: E)[common, js, native][common]abstract fun encode(writer: ProtoWriter, value: E)[js, native]abstract fun encode(writer: ProtoWriter, value: E)[common]open fun encode(writer: ReverseProtoWriter, value: E)[js, native]open fun encode(writer: ReverseProtoWriter, value: E)Write non-null value to writer.[common, js][common, js]fun encode(sink: BufferedSink, value: E)Encode value and write it to stream. encodeByteString [common, js, native][common, js, native]fun encodeByteString(value: E): ByteStringEncode value as a ByteString.[jvm]fun encodeByteString(value: E): ByteString encodedSize [common, js, native][common, js, native]abstract fun encodedSize(value: E): IntThe size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one).[jvm]abstract fun encodedSize(value: E): Int encodedSizeWithTag [common, js, native][common, js, native]open fun encodedSizeWithTag(tag: Int, value: E?): IntThe size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null.[jvm]open fun encodedSizeWithTag(tag: Int, value: E?): Int encodeWithTag [common, js, native][common]open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: E?)[js, native]open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: E?)[common]open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: E?)[js, native]open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: E?)Write tag and value to writer. If value is null this does nothing.[jvm]open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: E?)open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: E?) redact [common, js, native][common, js, native]abstract fun redact(value: E): EReturns the redacted form of value.[jvm]abstract fun redact(value: E): E toString [common, js, native][common, js, native]open fun toString(value: E): StringReturns a human-readable version of the given value.[jvm]open fun toString(value: E): String"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#properties","title":"Properties","text":"Name Summary identity [common]val identity: E?A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted.[js, jvm, native]val identity: E? sourceFile [common]val sourceFile: String?Path to the file containing the protobuf definition of this type.[js, jvm, native]val sourceFile: String? syntax [common]val syntax: SyntaxIdentifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d.[js, jvm, native]val syntax: Syntax type [common, js, jvm, native]val type: KClass&lt;*&gt;? typeUrl [common]val typeUrl: String?Identifies this type for inclusion in a google.protobuf.Any. This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS.[js, jvm, native]val typeUrl: String?"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#inheritors","title":"Inheritors","text":"Name EnumAdapter ProtoAdapter.Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#extensions","title":"Extensions","text":"Name Summary decode [darwin]fun &lt;E&gt; ProtoAdapter&lt;E&gt;.decode(data: &lt;ERROR CLASS&gt;): ERead an encoded message from data."},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-proto-adapter/","title":"proto adapter","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/ProtoAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-proto-adapter/#protoadapter","title":"ProtoAdapter","text":"<p>[jvm, common, js, native]\\ [jvm]\\ fun ProtoAdapter(fieldEncoding: FieldEncoding, type: Class&lt;*&gt;)</p> <p>[jvm]\\ fun ProtoAdapter(fieldEncoding: FieldEncoding, type: Class&lt;*&gt;, typeUrl: String?)</p> <p>[jvm]\\ fun ProtoAdapter(fieldEncoding: FieldEncoding, type: Class&lt;*&gt;, typeUrl: String?, syntax: Syntax)</p> <p>[jvm]\\ fun &lt;E&gt; ProtoAdapter(fieldEncoding: FieldEncoding, type: Class&lt;*&gt;, typeUrl: String?, syntax: Syntax, identity: E?)</p> <p>[jvm]\\ fun ProtoAdapter(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?)</p> <p>[jvm]\\ fun ProtoAdapter(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?, typeUrl: String?)</p> <p>[jvm]\\ fun ProtoAdapter(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?, typeUrl: String?, syntax: Syntax)</p> <p>[jvm]\\ fun &lt;E&gt; ProtoAdapter(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?, typeUrl: String?, syntax: Syntax, identity: E?)</p> <p>[jvm]\\ fun &lt;E&gt; ProtoAdapter(fieldEncoding: FieldEncoding, type: Class&lt;*&gt;, typeUrl: String?, syntax: Syntax, identity: E?, sourceFile: String?)</p> <p>[common]\\ fun &lt;E&gt; ProtoAdapter(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?, typeUrl: String?, syntax: Syntax, identity: E? = null, sourceFile: String? = null)</p> <p>[js, jvm, native]\\ fun &lt;E&gt; ProtoAdapter(fieldEncoding: FieldEncoding, type: KClass&lt;*&gt;?, typeUrl: String?, syntax: Syntax, identity: E? = null, sourceFile: String? = null)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-packed/","title":"As packed","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/asPacked</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-packed/#aspacked","title":"asPacked","text":"<p>[common, js, native]\\ [common, js, native]\\ fun asPacked(): ProtoAdapter&lt;List&lt;E&gt;&gt;</p> <p>Returns an adapter for E but as a packed, repeated value.</p> <p>[jvm]\\ fun asPacked(): ProtoAdapter&lt;List&lt;E&gt;&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-repeated/","title":"As repeated","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/asRepeated</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-repeated/#asrepeated","title":"asRepeated","text":"<p>[common, js, native]\\ [common, js, native]\\ fun asRepeated(): ProtoAdapter&lt;List&lt;E&gt;&gt;</p> <p>Returns an adapter for E but as a repeated value.</p> <p>Note: Repeated items are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element lists will be returned and it is the caller\u2019s responsibility to merge them into the final list.</p> <p>[jvm]\\ fun asRepeated(): ProtoAdapter&lt;List&lt;E&gt;&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/decode/","title":"Decode","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/decode</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/decode/#decode","title":"decode","text":"<p>[jvm]\\ fun decode(stream: InputStream): E</p> <p>abstract fun decode(reader: ProtoReader): E</p> <p>fun decode(bytes: ByteArray): E</p> <p>fun decode(bytes: ByteString): E</p> <p>fun decode(source: BufferedSource): E</p> <p>[common, js, native]\\ [common]\\ abstract fun decode(reader: ProtoReader): E</p> <p>[js, native]\\ abstract fun decode(reader: ProtoReader): E</p> <p>Read a non-null value from reader.</p> <p>[common, js, native]\\ [common, js, native]\\ fun decode(bytes: ByteArray): E</p> <p>[common, js]\\ fun decode(bytes: ByteString): E</p> <p>Read an encoded message from bytes.</p> <p>[common, js]\\ [common, js]\\ fun decode(source: BufferedSource): E</p> <p>Read an encoded message from source.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-byte-string/","title":"Encode byte string","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/encodeByteString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-byte-string/#encodebytestring","title":"encodeByteString","text":"<p>[common, js, native]\\ [common, js, native]\\ fun encodeByteString(value: E): ByteString</p> <p>Encode value as a ByteString.</p> <p>[jvm]\\ fun encodeByteString(value: E): ByteString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-with-tag/","title":"Encode with tag","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/encodeWithTag</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-with-tag/#encodewithtag","title":"encodeWithTag","text":"<p>[common, js, native]\\ [common]\\ open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: E?)</p> <p>[js, native]\\ open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: E?)</p> <p>[common]\\ open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: E?)</p> <p>[js, native]\\ open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: E?)</p> <p>Write tag and value to writer. If value is null this does nothing.</p> <p>[jvm]\\ open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: E?)</p> <p>open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: E?)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode/","title":"Encode","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/encode</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode/#encode","title":"encode","text":"<p>[jvm]\\ fun encode(stream: OutputStream, value: E)</p> <p>abstract fun encode(writer: ProtoWriter, value: E)</p> <p>open fun encode(writer: ReverseProtoWriter, value: E)</p> <p>fun encode(sink: BufferedSink, value: E)</p> <p>fun encode(value: E): ByteArray</p> <p>[common, js, native]\\ [common]\\ abstract fun encode(writer: ProtoWriter, value: E)</p> <p>[js, native]\\ abstract fun encode(writer: ProtoWriter, value: E)</p> <p>[common]\\ open fun encode(writer: ReverseProtoWriter, value: E)</p> <p>[js, native]\\ open fun encode(writer: ReverseProtoWriter, value: E)</p> <p>Write non-null value to writer.</p> <p>[common, js]\\ [common, js]\\ fun encode(sink: BufferedSink, value: E)</p> <p>Encode value and write it to stream.</p> <p>[common, js, native]\\ [common, js, native]\\ fun encode(value: E): ByteArray</p> <p>Encode value as a byte[].</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size-with-tag/","title":"Encoded size with tag","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/encodedSizeWithTag</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size-with-tag/#encodedsizewithtag","title":"encodedSizeWithTag","text":"<p>[common, js, native]\\ [common, js, native]\\ open fun encodedSizeWithTag(tag: Int, value: E?): Int</p> <p>The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null.</p> <p>[jvm]\\ open fun encodedSizeWithTag(tag: Int, value: E?): Int</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size/","title":"Encoded size","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/encodedSize</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size/#encodedsize","title":"encodedSize","text":"<p>[common, js, native]\\ [common, js, native]\\ abstract fun encodedSize(value: E): Int</p> <p>The size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one).</p> <p>[jvm]\\ abstract fun encodedSize(value: E): Int</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/identity/","title":"Identity","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/identity</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/identity/#identity","title":"identity","text":"<p>[common]\\ val identity: E?</p> <p>A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted.</p> <p>| TYPE                                           | IDENTITY                      |\\ | :--------------------------------------------- | :---------------------------- |\\ | All numeric types (int32, float, double, etc.) | 0                             |\\ | Boolean                                        | false                         |\\ | String                                         | empty string: \u201c\u201d              |\\ | Bytes                                          | empty bytes: ByteString.EMPTY |\\ | Enums                                          | enum constant with tag 0      |\\ | Lists (repeated types)                         | empty list: listOf()          |</p> <p>[js, jvm, native]\\ [js, jvm, native]\\ val identity: E?</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/redact/","title":"Redact","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/redact</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/redact/#redact","title":"redact","text":"<p>[common, js, native]\\ [common, js, native]\\ abstract fun redact(value: E): E</p> <p>Returns the redacted form of value.</p> <p>[jvm]\\ abstract fun redact(value: E): E</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/source-file/","title":"Source file","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/sourceFile</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/source-file/#sourcefile","title":"sourceFile","text":"<p>[common]\\ val sourceFile: String?</p> <p>Path to the file containing the protobuf definition of this type.</p> <p>[js, jvm, native]\\ [js, jvm, native]\\ val sourceFile: String?</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/syntax/","title":"Syntax","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/syntax</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/syntax/#syntax","title":"syntax","text":"<p>[common]\\ val syntax: Syntax</p> <p>Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d.</p> <p>[js, jvm, native]\\ [js, jvm, native]\\ val syntax: Syntax</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/to-string/","title":"To string","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/toString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/to-string/#tostring","title":"toString","text":"<p>[common, js, native]\\ [common, js, native]\\ open fun toString(value: E): String</p> <p>Returns a human-readable version of the given value.</p> <p>[jvm]\\ open fun toString(value: E): String</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type-url/","title":"Type url","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/typeUrl</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type-url/#typeurl","title":"typeUrl","text":"<p>[common]\\ val typeUrl: String?</p> <p>Identifies this type for inclusion in a google.protobuf.Any. This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS.</p> <p>[js, jvm, native]\\ [js, jvm, native]\\ val typeUrl: String?</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type/","title":"Type","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/type</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type/#type","title":"type","text":"<p>[common, js, jvm, native]\\ [common, js, jvm, native]\\ val type: KClass&lt;*&gt;?</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/#companion","title":"Companion","text":"<p>[common, js, jvm, native]\\ object Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/#types","title":"Types","text":"Name Summary UnsupportedTypeProtoAdapter [jvm]class UnsupportedTypeProtoAdapter : ProtoAdapter&lt;Nothing&gt; Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant. This proto adapter is used when the corresponding java.time type is missing from the JVM classpath."},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/#functions","title":"Functions","text":"Name Summary get [jvm]@JvmStaticfun &lt;M : Message&lt;, *&gt;&gt; get(message: M): ProtoAdapter&lt;M&gt;Returns the adapter for the type of Message.[jvm]@JvmStaticfun &lt;M&gt; get(type: Class&lt;M&gt;): ProtoAdapter&lt;M&gt;Returns the adapter for type.[jvm]@JvmStaticfun get(adapterString: String): ProtoAdapter&lt;&gt;Returns the adapter for a given adapterString. adapterString is specified on a proto message field\u2019s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER. newEnumAdapter [jvm]@JvmStaticfun &lt;E : WireEnum&gt; newEnumAdapter(type: Class&lt;E&gt;): EnumAdapter&lt;E&gt;Creates a new proto adapter for type. newMapAdapter [common, js, native][common]@JvmStaticfun &lt;K, V&gt; newMapAdapter(keyAdapter: ProtoAdapter&lt;K&gt;, valueAdapter: ProtoAdapter&lt;V&gt;): ProtoAdapter&lt;Map&lt;K, V&gt;&gt;[js, native]fun &lt;K, V&gt; newMapAdapter(keyAdapter: ProtoAdapter&lt;K&gt;, valueAdapter: ProtoAdapter&lt;V&gt;): ProtoAdapter&lt;Map&lt;K, V&gt;&gt;Creates a new proto adapter for a map using keyAdapter and valueAdapter.[jvm]@JvmStaticfun &lt;K, V&gt; newMapAdapter(keyAdapter: ProtoAdapter&lt;K&gt;, valueAdapter: ProtoAdapter&lt;V&gt;): ProtoAdapter&lt;Map&lt;K, V&gt;&gt; newMessageAdapter [jvm]@JvmStaticfun &lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt; newMessageAdapter(type: Class&lt;M&gt;): ProtoAdapter&lt;M&gt;@JvmStaticfun &lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt; newMessageAdapter(type: Class&lt;M&gt;, typeUrl: String): ProtoAdapter&lt;M&gt;[jvm]@JvmStaticfun &lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt; newMessageAdapter(type: Class&lt;M&gt;, typeUrl: String, syntax: Syntax): ProtoAdapter&lt;M&gt;Creates a new proto adapter for type."},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/#properties","title":"Properties","text":"Name Summary BOOL [common, jvm]@JvmFieldval BOOL: ProtoAdapter&lt;Boolean&gt;[js, native]val BOOL: ProtoAdapter&lt;Boolean&gt; BOOL_VALUE [common, jvm]@JvmFieldval BOOL_VALUE: ProtoAdapter&lt;Boolean?&gt;[js, native]val BOOL_VALUE: ProtoAdapter&lt;Boolean?&gt; BYTES [common, jvm]@JvmFieldval BYTES: ProtoAdapter&lt;ByteString&gt;[js, native]val BYTES: ProtoAdapter&lt;ByteString&gt; BYTES_VALUE [common, jvm]@JvmFieldval BYTES_VALUE: ProtoAdapter&lt;ByteString?&gt;[js, native]val BYTES_VALUE: ProtoAdapter&lt;ByteString?&gt; DOUBLE [common, jvm]@JvmFieldval DOUBLE: ProtoAdapter&lt;Double&gt;[js, native]val DOUBLE: ProtoAdapter&lt;Double&gt; DOUBLE_VALUE [common, jvm]@JvmFieldval DOUBLE_VALUE: ProtoAdapter&lt;Double?&gt;[js, native]val DOUBLE_VALUE: ProtoAdapter&lt;Double?&gt; DURATION [common, jvm]@JvmFieldval DURATION: ProtoAdapter&lt;Duration&gt;[js, native]val DURATION: ProtoAdapter&lt;Duration&gt; EMPTY [common, jvm]@JvmFieldval EMPTY: ProtoAdapter&lt;Unit&gt;[js, native]val EMPTY: ProtoAdapter&lt;Unit&gt; FIXED32 [common, jvm]@JvmFieldval FIXED32: ProtoAdapter&lt;Int&gt;[js, native]val FIXED32: ProtoAdapter&lt;Int&gt; FIXED64 [common, jvm]@JvmFieldval FIXED64: ProtoAdapter&lt;Long&gt;[js, native]val FIXED64: ProtoAdapter&lt;Long&gt; FLOAT [common, jvm]@JvmFieldval FLOAT: ProtoAdapter&lt;Float&gt;[js, native]val FLOAT: ProtoAdapter&lt;Float&gt; FLOAT_VALUE [common, jvm]@JvmFieldval FLOAT_VALUE: ProtoAdapter&lt;Float?&gt;[js, native]val FLOAT_VALUE: ProtoAdapter&lt;Float?&gt; INSTANT [common, jvm]@JvmFieldval INSTANT: ProtoAdapter&lt;Instant&gt;[js, native]val INSTANT: ProtoAdapter&lt;Instant&gt; INT32 [common, jvm]@JvmFieldval INT32: ProtoAdapter&lt;Int&gt;[js, native]val INT32: ProtoAdapter&lt;Int&gt; INT32_VALUE [common, jvm]@JvmFieldval INT32_VALUE: ProtoAdapter&lt;Int?&gt;[js, native]val INT32_VALUE: ProtoAdapter&lt;Int?&gt; INT64 [common, jvm]@JvmFieldval INT64: ProtoAdapter&lt;Long&gt;[js, native]val INT64: ProtoAdapter&lt;Long&gt; INT64_VALUE [common, jvm]@JvmFieldval INT64_VALUE: ProtoAdapter&lt;Long?&gt;[js, native]val INT64_VALUE: ProtoAdapter&lt;Long?&gt; SFIXED32 [common, jvm]@JvmFieldval SFIXED32: ProtoAdapter&lt;Int&gt;[js, native]val SFIXED32: ProtoAdapter&lt;Int&gt; SFIXED64 [common, jvm]@JvmFieldval SFIXED64: ProtoAdapter&lt;Long&gt;[js, native]val SFIXED64: ProtoAdapter&lt;Long&gt; SINT32 [common, jvm]@JvmFieldval SINT32: ProtoAdapter&lt;Int&gt;[js, native]val SINT32: ProtoAdapter&lt;Int&gt; SINT64 [common, jvm]@JvmFieldval SINT64: ProtoAdapter&lt;Long&gt;[js, native]val SINT64: ProtoAdapter&lt;Long&gt; STRING [common, jvm]@JvmFieldval STRING: ProtoAdapter&lt;String&gt;[js, native]val STRING: ProtoAdapter&lt;String&gt; STRING_VALUE [common, jvm]@JvmFieldval STRING_VALUE: ProtoAdapter&lt;String?&gt;[js, native]val STRING_VALUE: ProtoAdapter&lt;String?&gt; STRUCT_LIST [common, jvm]@JvmFieldval STRUCT_LIST: ProtoAdapter&lt;List&lt;&gt;?&gt;[js, native]val STRUCT_LIST: ProtoAdapter&lt;List&lt;&gt;?&gt; STRUCT_MAP [common, jvm]@JvmFieldval STRUCT_MAP: ProtoAdapter&lt;Map&lt;String, *&gt;?&gt;[js, native]val STRUCT_MAP: ProtoAdapter&lt;Map&lt;String, *&gt;?&gt; STRUCT_NULL [common, jvm]@JvmFieldval STRUCT_NULL: ProtoAdapter&lt;Nothing?&gt;[js, native]val STRUCT_NULL: ProtoAdapter&lt;Nothing?&gt; STRUCT_VALUE [common, jvm]@JvmFieldval STRUCT_VALUE: ProtoAdapter&lt;Any?&gt;[js, native]val STRUCT_VALUE: ProtoAdapter&lt;Any?&gt; UINT32 [common, jvm]@JvmFieldval UINT32: ProtoAdapter&lt;Int&gt;[js, native]val UINT32: ProtoAdapter&lt;Int&gt; UINT32_VALUE [common, jvm]@JvmFieldval UINT32_VALUE: ProtoAdapter&lt;Int?&gt;[js, native]val UINT32_VALUE: ProtoAdapter&lt;Int?&gt; UINT64 [common]@JvmFieldval UINT64: ProtoAdapter&lt;Long&gt;Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON.[js, native]val UINT64: ProtoAdapter&lt;Long&gt;Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON.[jvm]@JvmFieldval UINT64: ProtoAdapter&lt;Long&gt; UINT64_VALUE [common, jvm]@JvmFieldval UINT64_VALUE: ProtoAdapter&lt;Long?&gt;[js, native]val UINT64_VALUE: ProtoAdapter&lt;Long?&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-o-o-l/","title":"b o o l","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/BOOL</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-o-o-l/#bool","title":"BOOL","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val BOOL: ProtoAdapter&lt;Boolean&gt;</p> <p>[js, native]\\ val BOOL: ProtoAdapter&lt;Boolean&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-o-o-l_-v-a-l-u-e/","title":"b o o l  v a l u e","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/BOOL_VALUE</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-o-o-l_-v-a-l-u-e/#bool_value","title":"BOOL_VALUE","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val BOOL_VALUE: ProtoAdapter&lt;Boolean?&gt;</p> <p>[js, native]\\ val BOOL_VALUE: ProtoAdapter&lt;Boolean?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-y-t-e-s/","title":"b y t e s","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/BYTES</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-y-t-e-s/#bytes","title":"BYTES","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val BYTES: ProtoAdapter&lt;ByteString&gt;</p> <p>[js, native]\\ val BYTES: ProtoAdapter&lt;ByteString&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-y-t-e-s_-v-a-l-u-e/","title":"b y t e s  v a l u e","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/BYTES_VALUE</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-y-t-e-s_-v-a-l-u-e/#bytes_value","title":"BYTES_VALUE","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val BYTES_VALUE: ProtoAdapter&lt;ByteString?&gt;</p> <p>[js, native]\\ val BYTES_VALUE: ProtoAdapter&lt;ByteString?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-o-u-b-l-e/","title":"d o u b l e","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/DOUBLE</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-o-u-b-l-e/#double","title":"DOUBLE","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val DOUBLE: ProtoAdapter&lt;Double&gt;</p> <p>[js, native]\\ val DOUBLE: ProtoAdapter&lt;Double&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-o-u-b-l-e_-v-a-l-u-e/","title":"d o u b l e  v a l u e","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/DOUBLE_VALUE</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-o-u-b-l-e_-v-a-l-u-e/#double_value","title":"DOUBLE_VALUE","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val DOUBLE_VALUE: ProtoAdapter&lt;Double?&gt;</p> <p>[js, native]\\ val DOUBLE_VALUE: ProtoAdapter&lt;Double?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-u-r-a-t-i-o-n/","title":"d u r a t i o n","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/DURATION</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-u-r-a-t-i-o-n/#duration","title":"DURATION","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val DURATION: ProtoAdapter&lt;Duration&gt;</p> <p>[js, native]\\ val DURATION: ProtoAdapter&lt;Duration&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-e-m-p-t-y/","title":"e m p t y","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/EMPTY</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-e-m-p-t-y/#empty","title":"EMPTY","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val EMPTY: ProtoAdapter&lt;Unit&gt;</p> <p>[js, native]\\ val EMPTY: ProtoAdapter&lt;Unit&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-i-x-e-d32/","title":"f i x e d32","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/FIXED32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-i-x-e-d32/#fixed32","title":"FIXED32","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val FIXED32: ProtoAdapter&lt;Int&gt;</p> <p>[js, native]\\ val FIXED32: ProtoAdapter&lt;Int&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-i-x-e-d64/","title":"f i x e d64","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/FIXED64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-i-x-e-d64/#fixed64","title":"FIXED64","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val FIXED64: ProtoAdapter&lt;Long&gt;</p> <p>[js, native]\\ val FIXED64: ProtoAdapter&lt;Long&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-l-o-a-t/","title":"f l o a t","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/FLOAT</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-l-o-a-t/#float","title":"FLOAT","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val FLOAT: ProtoAdapter&lt;Float&gt;</p> <p>[js, native]\\ val FLOAT: ProtoAdapter&lt;Float&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-l-o-a-t_-v-a-l-u-e/","title":"f l o a t  v a l u e","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/FLOAT_VALUE</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-l-o-a-t_-v-a-l-u-e/#float_value","title":"FLOAT_VALUE","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val FLOAT_VALUE: ProtoAdapter&lt;Float?&gt;</p> <p>[js, native]\\ val FLOAT_VALUE: ProtoAdapter&lt;Float?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-s-t-a-n-t/","title":"i n s t a n t","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/INSTANT</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-s-t-a-n-t/#instant","title":"INSTANT","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val INSTANT: ProtoAdapter&lt;Instant&gt;</p> <p>[js, native]\\ val INSTANT: ProtoAdapter&lt;Instant&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t32/","title":"i n t32","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/INT32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t32/#int32","title":"INT32","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val INT32: ProtoAdapter&lt;Int&gt;</p> <p>[js, native]\\ val INT32: ProtoAdapter&lt;Int&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t32_-v-a-l-u-e/","title":"i n t32  v a l u e","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/INT32_VALUE</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t32_-v-a-l-u-e/#int32_value","title":"INT32_VALUE","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val INT32_VALUE: ProtoAdapter&lt;Int?&gt;</p> <p>[js, native]\\ val INT32_VALUE: ProtoAdapter&lt;Int?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t64/","title":"i n t64","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/INT64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t64/#int64","title":"INT64","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val INT64: ProtoAdapter&lt;Long&gt;</p> <p>[js, native]\\ val INT64: ProtoAdapter&lt;Long&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t64_-v-a-l-u-e/","title":"i n t64  v a l u e","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/INT64_VALUE</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t64_-v-a-l-u-e/#int64_value","title":"INT64_VALUE","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val INT64_VALUE: ProtoAdapter&lt;Long?&gt;</p> <p>[js, native]\\ val INT64_VALUE: ProtoAdapter&lt;Long?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-f-i-x-e-d32/","title":"s f i x e d32","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/SFIXED32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-f-i-x-e-d32/#sfixed32","title":"SFIXED32","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val SFIXED32: ProtoAdapter&lt;Int&gt;</p> <p>[js, native]\\ val SFIXED32: ProtoAdapter&lt;Int&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-f-i-x-e-d64/","title":"s f i x e d64","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/SFIXED64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-f-i-x-e-d64/#sfixed64","title":"SFIXED64","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val SFIXED64: ProtoAdapter&lt;Long&gt;</p> <p>[js, native]\\ val SFIXED64: ProtoAdapter&lt;Long&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-i-n-t32/","title":"s i n t32","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/SINT32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-i-n-t32/#sint32","title":"SINT32","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val SINT32: ProtoAdapter&lt;Int&gt;</p> <p>[js, native]\\ val SINT32: ProtoAdapter&lt;Int&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-i-n-t64/","title":"s i n t64","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/SINT64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-i-n-t64/#sint64","title":"SINT64","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val SINT64: ProtoAdapter&lt;Long&gt;</p> <p>[js, native]\\ val SINT64: ProtoAdapter&lt;Long&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-i-n-g/","title":"s t r i n g","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/STRING</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-i-n-g/#string","title":"STRING","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val STRING: ProtoAdapter&lt;String&gt;</p> <p>[js, native]\\ val STRING: ProtoAdapter&lt;String&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-i-n-g_-v-a-l-u-e/","title":"s t r i n g  v a l u e","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/STRING_VALUE</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-i-n-g_-v-a-l-u-e/#string_value","title":"STRING_VALUE","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val STRING_VALUE: ProtoAdapter&lt;String?&gt;</p> <p>[js, native]\\ val STRING_VALUE: ProtoAdapter&lt;String?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-l-i-s-t/","title":"s t r u c t  l i s t","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/STRUCT_LIST</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-l-i-s-t/#struct_list","title":"STRUCT_LIST","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val STRUCT_LIST: ProtoAdapter&lt;List&lt;*&gt;?&gt;</p> <p>[js, native]\\ val STRUCT_LIST: ProtoAdapter&lt;List&lt;*&gt;?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-m-a-p/","title":"s t r u c t  m a p","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/STRUCT_MAP</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-m-a-p/#struct_map","title":"STRUCT_MAP","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val STRUCT_MAP: ProtoAdapter&lt;Map&lt;String, *&gt;?&gt;</p> <p>[js, native]\\ val STRUCT_MAP: ProtoAdapter&lt;Map&lt;String, *&gt;?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-n-u-l-l/","title":"s t r u c t  n u l l","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/STRUCT_NULL</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-n-u-l-l/#struct_null","title":"STRUCT_NULL","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val STRUCT_NULL: ProtoAdapter&lt;Nothing?&gt;</p> <p>[js, native]\\ val STRUCT_NULL: ProtoAdapter&lt;Nothing?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-v-a-l-u-e/","title":"s t r u c t  v a l u e","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/STRUCT_VALUE</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-v-a-l-u-e/#struct_value","title":"STRUCT_VALUE","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val STRUCT_VALUE: ProtoAdapter&lt;Any?&gt;</p> <p>[js, native]\\ val STRUCT_VALUE: ProtoAdapter&lt;Any?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t32/","title":"u i n t32","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/UINT32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t32/#uint32","title":"UINT32","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val UINT32: ProtoAdapter&lt;Int&gt;</p> <p>[js, native]\\ val UINT32: ProtoAdapter&lt;Int&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t32_-v-a-l-u-e/","title":"u i n t32  v a l u e","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/UINT32_VALUE</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t32_-v-a-l-u-e/#uint32_value","title":"UINT32_VALUE","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val UINT32_VALUE: ProtoAdapter&lt;Int?&gt;</p> <p>[js, native]\\ val UINT32_VALUE: ProtoAdapter&lt;Int?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t64/","title":"u i n t64","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/UINT64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t64/#uint64","title":"UINT64","text":"<p>[common, js, native]\\ [common]\\</p> <p>@JvmField</p> <p>val UINT64: ProtoAdapter&lt;Long&gt;</p> <p>[js, native]\\ val UINT64: ProtoAdapter&lt;Long&gt;</p> <p>Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON.</p> <p>[jvm]\\</p> <p>@JvmField</p> <p>val UINT64: ProtoAdapter&lt;Long&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t64_-v-a-l-u-e/","title":"u i n t64  v a l u e","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/UINT64_VALUE</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t64_-v-a-l-u-e/#uint64_value","title":"UINT64_VALUE","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val UINT64_VALUE: ProtoAdapter&lt;Long?&gt;</p> <p>[js, native]\\ val UINT64_VALUE: ProtoAdapter&lt;Long?&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/get/","title":"Get","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/get</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/get/#get","title":"get","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun &lt;M : Message&lt;*, *&gt;&gt; get(message: M): ProtoAdapter&lt;M&gt;</p> <p>Returns the adapter for the type of Message.</p> <p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun &lt;M&gt; get(type: Class&lt;M&gt;): ProtoAdapter&lt;M&gt;</p> <p>Returns the adapter for type.</p> <p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun get(adapterString: String): ProtoAdapter&lt;*&gt;</p> <p>Returns the adapter for a given adapterString. adapterString is specified on a proto message field\u2019s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-enum-adapter/","title":"New enum adapter","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/newEnumAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-enum-adapter/#newenumadapter","title":"newEnumAdapter","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun &lt;E : WireEnum&gt; newEnumAdapter(type: Class&lt;E&gt;): EnumAdapter&lt;E&gt;</p> <p>Creates a new proto adapter for type.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-map-adapter/","title":"New map adapter","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/newMapAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-map-adapter/#newmapadapter","title":"newMapAdapter","text":"<p>[common, js, native]\\ [common]\\</p> <p>@JvmStatic</p> <p>fun &lt;K, V&gt; newMapAdapter(keyAdapter: ProtoAdapter&lt;K&gt;, valueAdapter: ProtoAdapter&lt;V&gt;): ProtoAdapter&lt;Map&lt;K, V&gt;&gt;</p> <p>[js, native]\\ fun &lt;K, V&gt; newMapAdapter(keyAdapter: ProtoAdapter&lt;K&gt;, valueAdapter: ProtoAdapter&lt;V&gt;): ProtoAdapter&lt;Map&lt;K, V&gt;&gt;</p> <p>Creates a new proto adapter for a map using keyAdapter and valueAdapter.</p> <p>Note: Map entries are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element maps will be returned and it is the caller\u2019s responsibility to merge them into the final map.</p> <p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun &lt;K, V&gt; newMapAdapter(keyAdapter: ProtoAdapter&lt;K&gt;, valueAdapter: ProtoAdapter&lt;V&gt;): ProtoAdapter&lt;Map&lt;K, V&gt;&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-message-adapter/","title":"New message adapter","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/newMessageAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-message-adapter/#newmessageadapter","title":"newMessageAdapter","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun &lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt; newMessageAdapter(type: Class&lt;M&gt;): ProtoAdapter&lt;M&gt;</p> <p>@JvmStatic</p> <p>fun &lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt; newMessageAdapter(type: Class&lt;M&gt;, typeUrl: String): ProtoAdapter&lt;M&gt;</p> <p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun &lt;M : Message&lt;M, B&gt;, B : Message.Builder&lt;M, B&gt;&gt; newMessageAdapter(type: Class&lt;M&gt;, typeUrl: String, syntax: Syntax): ProtoAdapter&lt;M&gt;</p> <p>Creates a new proto adapter for type.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/UnsupportedTypeProtoAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/#unsupportedtypeprotoadapter","title":"UnsupportedTypeProtoAdapter","text":"<p>[jvm]\\ class UnsupportedTypeProtoAdapter : ProtoAdapter&lt;Nothing&gt; </p> <p>Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant. This proto adapter is used when the corresponding java.time type is missing from the JVM classpath.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/#constructors","title":"Constructors","text":"UnsupportedTypeProtoAdapter [jvm]fun UnsupportedTypeProtoAdapter()"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/#functions","title":"Functions","text":"Name Summary asPacked [jvm]fun asPacked(): ProtoAdapter&lt;List&lt;Nothing&gt;&gt; asRepeated [jvm]fun asRepeated(): ProtoAdapter&lt;List&lt;Nothing&gt;&gt; decode [jvm]open override fun decode(reader: ProtoReader): Nothingfun decode(stream: InputStream): Nothingfun decode(bytes: ByteArray): Nothingfun decode(source: BufferedSource): Nothingfun decode(bytes: ByteString): Nothing encode [jvm]fun encode(value: Nothing): ByteArrayopen override fun encode(writer: ProtoWriter, value: Nothing): Nothingopen override fun encode(writer: ReverseProtoWriter, value: Nothing): Nothingfun encode(stream: OutputStream, value: Nothing)fun encode(sink: BufferedSink, value: Nothing) encodeByteString [jvm]fun encodeByteString(value: Nothing): ByteString encodedSize [jvm]open override fun encodedSize(value: Nothing): Nothing encodedSizeWithTag [jvm]open fun encodedSizeWithTag(tag: Int, value: Nothing?): Int encodeWithTag [jvm]open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: Nothing?)open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: Nothing?) redact [jvm]open override fun redact(value: Nothing): Nothing toString [jvm]open fun toString(value: Nothing): String"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/#properties","title":"Properties","text":"Name Summary identity [jvm]val identity: Nothing? sourceFile [jvm]val sourceFile: String? syntax [jvm]val syntax: Syntax type [jvm]val type: KClass&lt;*&gt;? typeUrl [jvm]val typeUrl: String?"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/-unsupported-type-proto-adapter/","title":"unsupported type proto adapter","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/UnsupportedTypeProtoAdapter/UnsupportedTypeProtoAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/-unsupported-type-proto-adapter/#unsupportedtypeprotoadapter","title":"UnsupportedTypeProtoAdapter","text":"<p>[jvm]\\ fun UnsupportedTypeProtoAdapter()</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/decode/","title":"Decode","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/UnsupportedTypeProtoAdapter/decode</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/decode/#decode","title":"decode","text":"<p>[jvm]\\ open override fun decode(reader: ProtoReader): Nothing</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/encode/","title":"Encode","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/UnsupportedTypeProtoAdapter/encode</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/encode/#encode","title":"encode","text":"<p>[jvm]\\ open override fun encode(writer: ProtoWriter, value: Nothing): Nothing</p> <p>open override fun encode(writer: ReverseProtoWriter, value: Nothing): Nothing</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/encoded-size/","title":"Encoded size","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/UnsupportedTypeProtoAdapter/encodedSize</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/encoded-size/#encodedsize","title":"encodedSize","text":"<p>[jvm]\\ open override fun encodedSize(value: Nothing): Nothing</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/redact/","title":"Redact","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/Companion/UnsupportedTypeProtoAdapter/redact</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/redact/#redact","title":"redact","text":"<p>[jvm]\\ open override fun redact(value: Nothing): Nothing</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/EnumConstantNotFoundException</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#enumconstantnotfoundexception","title":"EnumConstantNotFoundException","text":"<p>[common, js]\\ class EnumConstantNotFoundException(value: Int, type: KClass&lt;*&gt;?) : IllegalArgumentException</p> <p>[jvm]\\ class EnumConstantNotFoundException(value: Int, type: KClass&lt;*&gt;?) : IllegalArgumentException</p> <p>[native]\\ class EnumConstantNotFoundException(value: Int, type: KClass&lt;*&gt;?)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#constructors","title":"Constructors","text":"EnumConstantNotFoundException [jvm]fun EnumConstantNotFoundException(value: Int, type: Class&lt;*&gt;)"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#functions","title":"Functions","text":"Name Summary addSuppressed [jvm]fun addSuppressed(p0: Throwable) fillInStackTrace [jvm]open fun fillInStackTrace(): Throwable getLocalizedMessage [jvm]open fun getLocalizedMessage(): String getStackTrace [jvm]open fun getStackTrace(): Array&lt;StackTraceElement&gt; getSuppressed [jvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [jvm]open fun initCause(p0: Throwable): Throwable printStackTrace [jvm]open fun printStackTrace()open fun printStackTrace(p0: PrintStream)open fun printStackTrace(p0: PrintWriter) setStackTrace [jvm]open fun setStackTrace(p0: Array&lt;StackTraceElement&gt;)"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#properties","title":"Properties","text":"Name Summary cause [common]open val cause: Throwable? cause [js]open val cause: Throwable? cause [jvm]open val cause: Throwable? message [common]open val message: String? message [js]open val message: String? message [jvm]open val message: String? value [common, jvm]@JvmFieldval value: Int[js, native]val value: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/-enum-constant-not-found-exception/","title":"enum constant not found exception","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/EnumConstantNotFoundException/EnumConstantNotFoundException</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/-enum-constant-not-found-exception/#enumconstantnotfoundexception","title":"EnumConstantNotFoundException","text":"<p>[jvm, common, js, native]\\ [jvm]\\ fun EnumConstantNotFoundException(value: Int, type: Class&lt;*&gt;)</p> <p>[common, js, jvm, native]\\ fun EnumConstantNotFoundException(value: Int, type: KClass&lt;*&gt;?)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/value/","title":"Value","text":"<p>//wire-runtime/com.squareup.wire/ProtoAdapter/EnumConstantNotFoundException/value</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/value/#value","title":"value","text":"<p>[common, js, jvm, native]\\ [common, jvm]\\</p> <p>@JvmField</p> <p>val value: Int</p> <p>[js, native]\\ val value: Int</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#protoreader","title":"ProtoReader","text":"<p>[common]\\ class ProtoReader(source: BufferedSource)</p> <p>Reads and decodes protocol message fields.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#constructors","title":"Constructors","text":"ProtoReader [common]fun ProtoReader(source: BufferedSource)"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#functions","title":"Functions","text":"Name Summary addUnknownField [common]fun addUnknownField(tag: Int, fieldEncoding: FieldEncoding, value: Any?)Store an already read field temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. beginMessage [common]fun beginMessage(): LongBegin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method. endMessageAndGetUnknownFields [common]fun endMessageAndGetUnknownFields(token: Long): ByteStringEnd a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage. forEachTag [common]@JvmName(name = \u201c-forEachTag\u201d)inline fun forEachTag(tagHandler: (Int) -&gt; Any): ByteStringReads each tag, handles it, and returns a byte string with the unknown fields. nextTag [common]fun nextTag(): IntReads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups. peekFieldEncoding [common]fun peekFieldEncoding(): FieldEncoding?Returns the encoding of the next field value. nextTag must be called before this method. readBytes [common]fun readBytes(): ByteStringReads a bytes field value from the stream. The length is read from the stream prior to the actual data. readFixed32 [common]fun readFixed32(): IntReads a 32-bit little-endian integer from the stream. readFixed64 [common]fun readFixed64(): LongReads a 64-bit little-endian integer from the stream. readString [common]fun readString(): StringReads a string field value from the stream. readUnknownField [common]fun readUnknownField(tag: Int)Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. readVarint32 [common]fun readVarint32(): IntReads a raw varint from the stream. If larger than 32 bits, discard the upper bits. readVarint64 [common]fun readVarint64(): LongReads a raw varint up to 64 bits in length from the stream. skip [common]fun skip()Skips the current field\u2019s value. This is only safe to call immediately following a call to nextTag."},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-proto-reader/","title":"proto reader","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/ProtoReader</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-proto-reader/#protoreader","title":"ProtoReader","text":"<p>[common]\\ fun ProtoReader(source: BufferedSource)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/add-unknown-field/","title":"Add unknown field","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/addUnknownField</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/add-unknown-field/#addunknownfield","title":"addUnknownField","text":"<p>[common]\\ fun addUnknownField(tag: Int, fieldEncoding: FieldEncoding, value: Any?)</p> <p>Store an already read field temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/begin-message/","title":"Begin message","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/beginMessage</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/begin-message/#beginmessage","title":"beginMessage","text":"<p>[common]\\ fun beginMessage(): Long</p> <p>Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/","title":"End message and get unknown fields","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/endMessageAndGetUnknownFields</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/#endmessageandgetunknownfields","title":"endMessageAndGetUnknownFields","text":"<p>[common]\\ fun endMessageAndGetUnknownFields(token: Long): ByteString</p> <p>End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/#parameters","title":"Parameters","text":"<p>common</p> token value returned from the corresponding call to beginMessage."},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/for-each-tag/","title":"For each tag","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/forEachTag</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/for-each-tag/#foreachtag","title":"forEachTag","text":"<p>[common]\\</p> <p>@JvmName(name = \u201c-forEachTag\u201d)</p> <p>inline fun forEachTag(tagHandler: (Int) -&gt; Any): ByteString</p> <p>Reads each tag, handles it, and returns a byte string with the unknown fields.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/next-tag/","title":"Next tag","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/nextTag</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/next-tag/#nexttag","title":"nextTag","text":"<p>[common]\\ fun nextTag(): Int</p> <p>Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/peek-field-encoding/","title":"Peek field encoding","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/peekFieldEncoding</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/peek-field-encoding/#peekfieldencoding","title":"peekFieldEncoding","text":"<p>[common]\\ fun peekFieldEncoding(): FieldEncoding?</p> <p>Returns the encoding of the next field value. nextTag must be called before this method.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-bytes/","title":"Read bytes","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/readBytes</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-bytes/#readbytes","title":"readBytes","text":"<p>[common]\\ fun readBytes(): ByteString</p> <p>Reads a bytes field value from the stream. The length is read from the stream prior to the actual data.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed32/","title":"Read fixed32","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/readFixed32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed32/#readfixed32","title":"readFixed32","text":"<p>[common]\\ fun readFixed32(): Int</p> <p>Reads a 32-bit little-endian integer from the stream.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed64/","title":"Read fixed64","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/readFixed64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed64/#readfixed64","title":"readFixed64","text":"<p>[common]\\ fun readFixed64(): Long</p> <p>Reads a 64-bit little-endian integer from the stream.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-string/","title":"Read string","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/readString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-string/#readstring","title":"readString","text":"<p>[common]\\ fun readString(): String</p> <p>Reads a string field value from the stream.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-unknown-field/","title":"Read unknown field","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/readUnknownField</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-unknown-field/#readunknownfield","title":"readUnknownField","text":"<p>[common]\\ fun readUnknownField(tag: Int)</p> <p>Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint32/","title":"Read varint32","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/readVarint32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint32/#readvarint32","title":"readVarint32","text":"<p>[common]\\ fun readVarint32(): Int</p> <p>Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint64/","title":"Read varint64","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/readVarint64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint64/#readvarint64","title":"readVarint64","text":"<p>[common]\\ fun readVarint64(): Long</p> <p>Reads a raw varint up to 64 bits in length from the stream.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/skip/","title":"Skip","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/skip</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/skip/#skip","title":"skip","text":"<p>[common]\\ fun skip()</p> <p>Skips the current field\u2019s value. This is only safe to call immediately following a call to nextTag.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-companion/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/ProtoReader/Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/ProtoWriter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#protowriter","title":"ProtoWriter","text":"<p>[common]\\ class ProtoWriter(sink: BufferedSink)</p> <p>Utilities for encoding and writing protocol message fields.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#constructors","title":"Constructors","text":"ProtoWriter [common]fun ProtoWriter(sink: BufferedSink)"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#functions","title":"Functions","text":"Name Summary writeBytes [common]fun writeBytes(value: ByteString) writeFixed32 [common]fun writeFixed32(value: Int)Write a little-endian 32-bit integer. writeFixed64 [common]fun writeFixed64(value: Long)Write a little-endian 64-bit integer. writeString [common]fun writeString(value: String) writeTag [common]fun writeTag(fieldNumber: Int, fieldEncoding: FieldEncoding)Encode and write a tag. writeVarint32 [common]fun writeVarint32(value: Int)Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative. writeVarint64 [common]fun writeVarint64(value: Long)Encode and write a varint."},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-proto-writer/","title":"proto writer","text":"<p>//wire-runtime/com.squareup.wire/ProtoWriter/ProtoWriter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-proto-writer/#protowriter","title":"ProtoWriter","text":"<p>[common]\\ fun ProtoWriter(sink: BufferedSink)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-bytes/","title":"Write bytes","text":"<p>//wire-runtime/com.squareup.wire/ProtoWriter/writeBytes</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-bytes/#writebytes","title":"writeBytes","text":"<p>[common]\\ fun writeBytes(value: ByteString)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed32/","title":"Write fixed32","text":"<p>//wire-runtime/com.squareup.wire/ProtoWriter/writeFixed32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed32/#writefixed32","title":"writeFixed32","text":"<p>[common]\\ fun writeFixed32(value: Int)</p> <p>Write a little-endian 32-bit integer.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed64/","title":"Write fixed64","text":"<p>//wire-runtime/com.squareup.wire/ProtoWriter/writeFixed64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed64/#writefixed64","title":"writeFixed64","text":"<p>[common]\\ fun writeFixed64(value: Long)</p> <p>Write a little-endian 64-bit integer.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-string/","title":"Write string","text":"<p>//wire-runtime/com.squareup.wire/ProtoWriter/writeString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-string/#writestring","title":"writeString","text":"<p>[common]\\ fun writeString(value: String)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-tag/","title":"Write tag","text":"<p>//wire-runtime/com.squareup.wire/ProtoWriter/writeTag</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-tag/#writetag","title":"writeTag","text":"<p>[common]\\ fun writeTag(fieldNumber: Int, fieldEncoding: FieldEncoding)</p> <p>Encode and write a tag.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint32/","title":"Write varint32","text":"<p>//wire-runtime/com.squareup.wire/ProtoWriter/writeVarint32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint32/#writevarint32","title":"writeVarint32","text":"<p>[common]\\ fun writeVarint32(value: Int)</p> <p>Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint64/","title":"Write varint64","text":"<p>//wire-runtime/com.squareup.wire/ProtoWriter/writeVarint64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint64/#writevarint64","title":"writeVarint64","text":"<p>[common]\\ fun writeVarint64(value: Long)</p> <p>Encode and write a varint.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-companion/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/ProtoWriter/Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/ReverseProtoWriter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/#reverseprotowriter","title":"ReverseProtoWriter","text":"<p>[common]\\ class ReverseProtoWriter</p> <p>Encodes protocol buffer message fields from back-to-front for efficiency. Callers should write data in the opposite order that the data will be read.</p> <p>One significant benefit of writing messages in reverse order is that length prefixes can be computed in constant time. Get the length of a message by subtracting the byteCount before writing it from byteCount after writing it.</p> <p>Utilities for encoding and writing protocol message fields.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/#constructors","title":"Constructors","text":"ReverseProtoWriter [common]fun ReverseProtoWriter()"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/#functions","title":"Functions","text":"Name Summary writeBytes [common]fun writeBytes(value: ByteString) writeFixed32 [common]fun writeFixed32(value: Int)Write a little-endian 32-bit integer. writeFixed64 [common]fun writeFixed64(value: Long)Write a little-endian 64-bit integer. writeString [common]fun writeString(value: String) writeTag [common]fun writeTag(fieldNumber: Int, fieldEncoding: FieldEncoding)Encode and write a tag. writeTo [common]fun writeTo(sink: BufferedSink) writeVarint32 [common]fun writeVarint32(value: Int)Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative. writeVarint64 [common]fun writeVarint64(value: Long)Encode and write a varint."},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/#properties","title":"Properties","text":"Name Summary byteCount [common]val byteCount: IntThe total number of bytes emitted thus far."},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/-reverse-proto-writer/","title":"reverse proto writer","text":"<p>//wire-runtime/com.squareup.wire/ReverseProtoWriter/ReverseProtoWriter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/-reverse-proto-writer/#reverseprotowriter","title":"ReverseProtoWriter","text":"<p>[common]\\ fun ReverseProtoWriter()</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/byte-count/","title":"Byte count","text":"<p>//wire-runtime/com.squareup.wire/ReverseProtoWriter/byteCount</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/byte-count/#bytecount","title":"byteCount","text":"<p>[common]\\ val byteCount: Int</p> <p>The total number of bytes emitted thus far.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-bytes/","title":"Write bytes","text":"<p>//wire-runtime/com.squareup.wire/ReverseProtoWriter/writeBytes</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-bytes/#writebytes","title":"writeBytes","text":"<p>[common]\\ fun writeBytes(value: ByteString)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-fixed32/","title":"Write fixed32","text":"<p>//wire-runtime/com.squareup.wire/ReverseProtoWriter/writeFixed32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-fixed32/#writefixed32","title":"writeFixed32","text":"<p>[common]\\ fun writeFixed32(value: Int)</p> <p>Write a little-endian 32-bit integer.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-fixed64/","title":"Write fixed64","text":"<p>//wire-runtime/com.squareup.wire/ReverseProtoWriter/writeFixed64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-fixed64/#writefixed64","title":"writeFixed64","text":"<p>[common]\\ fun writeFixed64(value: Long)</p> <p>Write a little-endian 64-bit integer.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-string/","title":"Write string","text":"<p>//wire-runtime/com.squareup.wire/ReverseProtoWriter/writeString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-string/#writestring","title":"writeString","text":"<p>[common]\\ fun writeString(value: String)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-tag/","title":"Write tag","text":"<p>//wire-runtime/com.squareup.wire/ReverseProtoWriter/writeTag</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-tag/#writetag","title":"writeTag","text":"<p>[common]\\ fun writeTag(fieldNumber: Int, fieldEncoding: FieldEncoding)</p> <p>Encode and write a tag.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-to/","title":"Write to","text":"<p>//wire-runtime/com.squareup.wire/ReverseProtoWriter/writeTo</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-to/#writeto","title":"writeTo","text":"<p>[common]\\ fun writeTo(sink: BufferedSink)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-varint32/","title":"Write varint32","text":"<p>//wire-runtime/com.squareup.wire/ReverseProtoWriter/writeVarint32</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-varint32/#writevarint32","title":"writeVarint32","text":"<p>[common]\\ fun writeVarint32(value: Int)</p> <p>Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-varint64/","title":"Write varint64","text":"<p>//wire-runtime/com.squareup.wire/ReverseProtoWriter/writeVarint64</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-varint64/#writevarint64","title":"writeVarint64","text":"<p>[common]\\ fun writeVarint64(value: Long)</p> <p>Encode and write a varint.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/RuntimeEnumAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#runtimeenumadapter","title":"RuntimeEnumAdapter","text":"<p>[jvm]\\ class RuntimeEnumAdapter&lt;E : WireEnum&gt; : EnumAdapter&lt;E&gt; </p> <p>Converts values of an enum to and from integers using reflection.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#constructors","title":"Constructors","text":"RuntimeEnumAdapter [jvm]fun &lt;E : WireEnum&gt; RuntimeEnumAdapter(javaType: Class&lt;E&gt;)"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#functions","title":"Functions","text":"Name Summary asPacked [jvm]fun asPacked(): ProtoAdapter&lt;List&lt;E&gt;&gt; asRepeated [jvm]fun asRepeated(): ProtoAdapter&lt;List&lt;E&gt;&gt; decode [jvm]open override fun decode(reader: ProtoReader): Efun decode(stream: InputStream): Efun decode(bytes: ByteArray): Efun decode(source: BufferedSource): Efun decode(bytes: ByteString): E encode [jvm]fun encode(value: E): ByteArrayopen override fun encode(writer: ProtoWriter, value: E)open override fun encode(writer: ReverseProtoWriter, value: E)fun encode(stream: OutputStream, value: E)fun encode(sink: BufferedSink, value: E) encodeByteString [jvm]fun encodeByteString(value: E): ByteString encodedSize [jvm]open override fun encodedSize(value: E): Int encodedSizeWithTag [jvm]open fun encodedSizeWithTag(tag: Int, value: E?): Int encodeWithTag [jvm]open fun encodeWithTag(writer: ProtoWriter, tag: Int, value: E?)open fun encodeWithTag(writer: ReverseProtoWriter, tag: Int, value: E?) equals [jvm]open operator override fun equals(other: Any?): Boolean hashCode [jvm]open override fun hashCode(): Int redact [jvm]open override fun redact(value: E): E toString [jvm]open fun toString(value: E): String"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#properties","title":"Properties","text":"Name Summary identity [jvm]val identity: E? sourceFile [jvm]val sourceFile: String? syntax [jvm]val syntax: Syntax type [jvm]val type: KClass&lt;*&gt;? typeUrl [jvm]val typeUrl: String?"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-runtime-enum-adapter/","title":"runtime enum adapter","text":"<p>//wire-runtime/com.squareup.wire/RuntimeEnumAdapter/RuntimeEnumAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-runtime-enum-adapter/#runtimeenumadapter","title":"RuntimeEnumAdapter","text":"<p>[jvm]\\ fun &lt;E : WireEnum&gt; RuntimeEnumAdapter(javaType: Class&lt;E&gt;)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/equals/","title":"Equals","text":"<p>//wire-runtime/com.squareup.wire/RuntimeEnumAdapter/equals</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/hash-code/","title":"Hash code","text":"<p>//wire-runtime/com.squareup.wire/RuntimeEnumAdapter/hashCode</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/hash-code/#hashcode","title":"hashCode","text":"<p>[jvm]\\ open override fun hashCode(): Int</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-companion/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/RuntimeEnumAdapter/Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]@JvmStaticfun &lt;E : WireEnum&gt; create(enumType: Class&lt;E&gt;): RuntimeEnumAdapter&lt;E&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-companion/create/","title":"Create","text":"<p>//wire-runtime/com.squareup.wire/RuntimeEnumAdapter/Companion/create</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-companion/create/#create","title":"create","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun &lt;E : WireEnum&gt; create(enumType: Class&lt;E&gt;): RuntimeEnumAdapter&lt;E&gt;</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-service/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/Service</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-service/#service","title":"Service","text":"<p>[common]\\ interface Service</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/Syntax</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#syntax","title":"Syntax","text":"<p>[common]\\ enum Syntax : Enum&lt;Syntax&gt; </p> <p>Syntax version.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#entries","title":"Entries","text":"PROTO_3 [common]PROTO_3(\u201cproto3\u201d) PROTO_2 [common]PROTO_2(\u201cproto2\u201d)"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#functions","title":"Functions","text":"Name Summary toString [common]open override fun toString(): String"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/to-string/","title":"To string","text":"<p>//wire-runtime/com.squareup.wire/Syntax/toString</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/to-string/#tostring","title":"toString","text":"<p>[common]\\ open override fun toString(): String</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-companion/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/Syntax/Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-companion/#functions","title":"Functions","text":"Name Summary get [common]operator fun get(string: String): Syntax"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-companion/get/","title":"Get","text":"<p>//wire-runtime/com.squareup.wire/Syntax/Companion/get</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-companion/get/#get","title":"get","text":"<p>[common]\\ operator fun get(string: String): Syntax</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_2/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/Syntax/PROTO_2</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_2/#proto_2","title":"PROTO_2","text":"<p>[common]\\ PROTO_2(\u201cproto2\u201d)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_2/#functions","title":"Functions","text":"Name Summary toString [common]open override fun toString(): String"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_2/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_3/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/Syntax/PROTO_3</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_3/#proto_3","title":"PROTO_3","text":"<p>[common]\\ PROTO_3(\u201cproto3\u201d)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_3/#functions","title":"Functions","text":"Name Summary toString [common]open override fun toString(): String"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_3/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/WireEnum</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/#wireenum","title":"WireEnum","text":"<p>[common]\\ interface WireEnum</p> <p>Interface for generated Enum values to help serialization and deserialization.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/#properties","title":"Properties","text":"Name Summary value [common]abstract val value: IntThe tag value of an enum constant."},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/value/","title":"Value","text":"<p>//wire-runtime/com.squareup.wire/WireEnum/value</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/value/#value","title":"value","text":"<p>[common]\\ abstract val value: Int</p> <p>The tag value of an enum constant.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/WireEnumConstant</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/#wireenumconstant","title":"WireEnumConstant","text":"<p>[common]\\ @Target(allowedTargets = [AnnotationTarget.FIELD])</p> <p>annotation class WireEnumConstant(declaredName: String)</p> <p>Annotates generated WireEnum fields with metadata for serialization and deserialization.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/#constructors","title":"Constructors","text":"WireEnumConstant [common]fun WireEnumConstant(declaredName: String = \u201c\u201d)"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/#properties","title":"Properties","text":"Name Summary declaredName [common]val declaredName: StringName of this constant as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto constant named final generated in Java will be renamed to final_."},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/-wire-enum-constant/","title":"wire enum constant","text":"<p>//wire-runtime/com.squareup.wire/WireEnumConstant/WireEnumConstant</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/-wire-enum-constant/#wireenumconstant","title":"WireEnumConstant","text":"<p>[common]\\ fun WireEnumConstant(declaredName: String = \u201c\u201d)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/declared-name/","title":"Declared name","text":"<p>//wire-runtime/com.squareup.wire/WireEnumConstant/declaredName</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/declared-name/#declaredname","title":"declaredName","text":"<p>[common]\\ val declaredName: String</p> <p>Name of this constant as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto constant named final generated in Java will be renamed to final_.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/WireField</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#wirefield","title":"WireField","text":"<p>[common]\\ @Target(allowedTargets = [AnnotationTarget.FIELD])</p> <p>annotation class WireField(tag: Int, keyAdapter: String, adapter: String, label: WireField.Label, redacted: Boolean, declaredName: String, jsonName: String, oneofName: String)</p> <p>Annotates generated Message fields with metadata for serialization and deserialization.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#constructors","title":"Constructors","text":"WireField [common]fun WireField(tag: Int, keyAdapter: String = \u201c\u201d, adapter: String, label: WireField.Label = Label.OPTIONAL, redacted: Boolean = false, declaredName: String = \u201c\u201d, jsonName: String = \u201c\u201d, oneofName: String = \u201c\u201d)"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#types","title":"Types","text":"Name Summary Label [common]enum Label : Enum&lt;WireField.Label&gt; A protocol buffer label."},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#properties","title":"Properties","text":"Name Summary adapter [common]val adapter: StringReference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name. declaredName [common]val declaredName: StringName of this field as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto field named final generated in Java will be renamed to final_. jsonName [common]val jsonName: StringName representing this field as it should be used in JSON. This value is set to a non-empty string only when the json name differs from the name as declared in the proto schema. keyAdapter [common]val keyAdapter: StringReference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s keys. This only applies to maps. See adapter for a description of the value format. label [common]val label: WireField.LabelThe field\u2019s protocol buffer label, one of Label.OPTIONAL, Label.REQUIRED, Label.REPEATED, Label.PACKED, or Label.OMIT_IDENTITY. Defaults to Label.OPTIONAL. oneofName [common]val oneofName: StringName of the oneof this field belongs to. This value is set to a non-empty string only if the field is part of a oneof. redacted [common]val redacted: Boolean = falseRedacted fields are omitted from toString() to protect sensitive data. Defaults to false. tag [common]val tag: IntThe tag number used to store the field\u2019s value."},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-wire-field/","title":"wire field","text":"<p>//wire-runtime/com.squareup.wire/WireField/WireField</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-wire-field/#wirefield","title":"WireField","text":"<p>[common]\\ fun WireField(tag: Int, keyAdapter: String = \u201c\u201d, adapter: String, label: WireField.Label = Label.OPTIONAL, redacted: Boolean = false, declaredName: String = \u201c\u201d, jsonName: String = \u201c\u201d, oneofName: String = \u201c\u201d)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/adapter/","title":"Adapter","text":"<p>//wire-runtime/com.squareup.wire/WireField/adapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/adapter/#adapter","title":"adapter","text":"<p>[common]\\ val adapter: String</p> <p>Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/declared-name/","title":"Declared name","text":"<p>//wire-runtime/com.squareup.wire/WireField/declaredName</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/declared-name/#declaredname","title":"declaredName","text":"<p>[common]\\ val declaredName: String</p> <p>Name of this field as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto field named final generated in Java will be renamed to final_.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/json-name/","title":"Json name","text":"<p>//wire-runtime/com.squareup.wire/WireField/jsonName</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/json-name/#jsonname","title":"jsonName","text":"<p>[common]\\ val jsonName: String</p> <p>Name representing this field as it should be used in JSON. This value is set to a non-empty string only when the json name differs from the name as declared in the proto schema.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/key-adapter/","title":"Key adapter","text":"<p>//wire-runtime/com.squareup.wire/WireField/keyAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/key-adapter/#keyadapter","title":"keyAdapter","text":"<p>[common]\\ val keyAdapter: String</p> <p>Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s keys. This only applies to maps. See adapter for a description of the value format.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/label/","title":"Label","text":"<p>//wire-runtime/com.squareup.wire/WireField/label</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/label/#label","title":"label","text":"<p>[common]\\ val label: WireField.Label</p> <p>The field\u2019s protocol buffer label, one of Label.OPTIONAL, Label.REQUIRED, Label.REPEATED, Label.PACKED, or Label.OMIT_IDENTITY. Defaults to Label.OPTIONAL.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/oneof-name/","title":"Oneof name","text":"<p>//wire-runtime/com.squareup.wire/WireField/oneofName</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/oneof-name/#oneofname","title":"oneofName","text":"<p>[common]\\ val oneofName: String</p> <p>Name of the oneof this field belongs to. This value is set to a non-empty string only if the field is part of a oneof.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/redacted/","title":"Redacted","text":"<p>//wire-runtime/com.squareup.wire/WireField/redacted</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/redacted/#redacted","title":"redacted","text":"<p>[common]\\ val redacted: Boolean = false</p> <p>Redacted fields are omitted from toString() to protect sensitive data. Defaults to false.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/tag/","title":"Tag","text":"<p>//wire-runtime/com.squareup.wire/WireField/tag</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/tag/#tag","title":"tag","text":"<p>[common]\\ val tag: Int</p> <p>The tag number used to store the field\u2019s value.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/WireField/Label</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#label","title":"Label","text":"<p>[common]\\ enum Label : Enum&lt;WireField.Label&gt; </p> <p>A protocol buffer label.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#entries","title":"Entries","text":"OMIT_IDENTITY [common]OMIT_IDENTITY()Special label to define proto3 fields which should not be emitted if their value is equal to their type\u2019s respective identity value. E.g.: a field of type int32 will not get emitted if its value is 0. PACKED [common]PACKED()Implies REPEATED. ONE_OF [common]ONE_OF() REPEATED [common]REPEATED() OPTIONAL [common]OPTIONAL() REQUIRED [common]REQUIRED()"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#properties","title":"Properties","text":"Name Summary isOneOf [common]@get:JvmName(name = \u201cisOneOf\u201d)val isOneOf: Boolean isPacked [common]@get:JvmName(name = \u201cisPacked\u201d)val isPacked: Boolean isRepeated [common]@get:JvmName(name = \u201cisRepeated\u201d)val isRepeated: Boolean name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-one-of/","title":"Is one of","text":"<p>//wire-runtime/com.squareup.wire/WireField/Label/isOneOf</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-one-of/#isoneof","title":"isOneOf","text":"<p>[common]\\</p> <p>@get:JvmName(name = \u201cisOneOf\u201d)</p> <p>val isOneOf: Boolean</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-packed/","title":"Is packed","text":"<p>//wire-runtime/com.squareup.wire/WireField/Label/isPacked</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-packed/#ispacked","title":"isPacked","text":"<p>[common]\\</p> <p>@get:JvmName(name = \u201cisPacked\u201d)</p> <p>val isPacked: Boolean</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-repeated/","title":"Is repeated","text":"<p>//wire-runtime/com.squareup.wire/WireField/Label/isRepeated</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-repeated/#isrepeated","title":"isRepeated","text":"<p>[common]\\</p> <p>@get:JvmName(name = \u201cisRepeated\u201d)</p> <p>val isRepeated: Boolean</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-m-i-t_-i-d-e-n-t-i-t-y/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/WireField/Label/OMIT_IDENTITY</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-m-i-t_-i-d-e-n-t-i-t-y/#omit_identity","title":"OMIT_IDENTITY","text":"<p>[common]\\ OMIT_IDENTITY()</p> <p>Special label to define proto3 fields which should not be emitted if their value is equal to their type\u2019s respective identity value. E.g.: a field of type int32 will not get emitted if its value is 0.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-m-i-t_-i-d-e-n-t-i-t-y/#properties","title":"Properties","text":"Name Summary isOneOf [common]@get:JvmName(name = \u201cisOneOf\u201d)val isOneOf: Boolean isPacked [common]@get:JvmName(name = \u201cisPacked\u201d)val isPacked: Boolean isRepeated [common]@get:JvmName(name = \u201cisRepeated\u201d)val isRepeated: Boolean name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/WireField/Label/ONE_OF</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/#one_of","title":"ONE_OF","text":"<p>[common]\\ ONE_OF()</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/#properties","title":"Properties","text":"Name Summary isOneOf [common]@get:JvmName(name = \u201cisOneOf\u201d)val isOneOf: Boolean isPacked [common]@get:JvmName(name = \u201cisPacked\u201d)val isPacked: Boolean isRepeated [common]@get:JvmName(name = \u201cisRepeated\u201d)val isRepeated: Boolean name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/WireField/Label/OPTIONAL</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/#optional","title":"OPTIONAL","text":"<p>[common]\\ OPTIONAL()</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/#properties","title":"Properties","text":"Name Summary isOneOf [common]@get:JvmName(name = \u201cisOneOf\u201d)val isOneOf: Boolean isPacked [common]@get:JvmName(name = \u201cisPacked\u201d)val isPacked: Boolean isRepeated [common]@get:JvmName(name = \u201cisRepeated\u201d)val isRepeated: Boolean name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/WireField/Label/PACKED</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/#packed","title":"PACKED","text":"<p>[common]\\ PACKED()</p> <p>Implies REPEATED.</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/#properties","title":"Properties","text":"Name Summary isOneOf [common]@get:JvmName(name = \u201cisOneOf\u201d)val isOneOf: Boolean isPacked [common]@get:JvmName(name = \u201cisPacked\u201d)val isPacked: Boolean isRepeated [common]@get:JvmName(name = \u201cisRepeated\u201d)val isRepeated: Boolean name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/WireField/Label/REPEATED</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/#repeated","title":"REPEATED","text":"<p>[common]\\ REPEATED()</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/#properties","title":"Properties","text":"Name Summary isOneOf [common]@get:JvmName(name = \u201cisOneOf\u201d)val isOneOf: Boolean isPacked [common]@get:JvmName(name = \u201cisPacked\u201d)val isPacked: Boolean isRepeated [common]@get:JvmName(name = \u201cisRepeated\u201d)val isRepeated: Boolean name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/WireField/Label/REQUIRED</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/#required","title":"REQUIRED","text":"<p>[common]\\ REQUIRED()</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/#properties","title":"Properties","text":"Name Summary isOneOf [common]@get:JvmName(name = \u201cisOneOf\u201d)val isOneOf: Boolean isPacked [common]@get:JvmName(name = \u201cisPacked\u201d)val isPacked: Boolean isRepeated [common]@get:JvmName(name = \u201cisRepeated\u201d)val isRepeated: Boolean name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/","title":"Index","text":"<p>//wire-runtime/com.squareup.wire/WireRpc</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#wirerpc","title":"WireRpc","text":"<p>[common]\\ @Target(allowedTargets = [AnnotationTarget.FUNCTION])</p> <p>annotation class WireRpc(path: String, requestAdapter: String, responseAdapter: String, sourceFile: String)</p> <p>For gRPC actions the path is formatted as /&lt;service name&gt;/&lt;method name&gt;. The path of the proto service below is /squareup.helloworld.Greeter/SayHello.</p> <p>package squareup.helloworld;\\ \\ service Greeter {\\   rpc SayHello (HelloRequest) returns (HelloReply) {}\\ }</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#constructors","title":"Constructors","text":"WireRpc [common]fun WireRpc(path: String, requestAdapter: String, responseAdapter: String, sourceFile: String = \u201c\u201d)"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#properties","title":"Properties","text":"Name Summary path [common]val path: String requestAdapter [common]val requestAdapter: String responseAdapter [common]val responseAdapter: String sourceFile [common]val sourceFile: String"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/-wire-rpc/","title":"wire rpc","text":"<p>//wire-runtime/com.squareup.wire/WireRpc/WireRpc</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/-wire-rpc/#wirerpc","title":"WireRpc","text":"<p>[common]\\ fun WireRpc(path: String, requestAdapter: String, responseAdapter: String, sourceFile: String = \u201c\u201d)</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/path/","title":"Path","text":"<p>//wire-runtime/com.squareup.wire/WireRpc/path</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/path/#path","title":"path","text":"<p>[common]\\ val path: String</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/request-adapter/","title":"Request adapter","text":"<p>//wire-runtime/com.squareup.wire/WireRpc/requestAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/request-adapter/#requestadapter","title":"requestAdapter","text":"<p>[common]\\ val requestAdapter: String</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/response-adapter/","title":"Response adapter","text":"<p>//wire-runtime/com.squareup.wire/WireRpc/responseAdapter</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/response-adapter/#responseadapter","title":"responseAdapter","text":"<p>[common]\\ val responseAdapter: String</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/source-file/","title":"Source file","text":"<p>//wire-runtime/com.squareup.wire/WireRpc/sourceFile</p>"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/source-file/#sourcefile","title":"sourceFile","text":"<p>[common]\\ val sourceFile: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire/","title":"wire-schema","text":"<p>//wire-schema/com.squareup.wire</p>"},{"location":"3.x/wire-schema/com.squareup.wire/#package-comsquareupwire","title":"Package com.squareup.wire","text":""},{"location":"3.x/wire-schema/com.squareup.wire/#types","title":"Types","text":"Name Summary WireLogger [common]interface WireLoggerLogger class used by com.squareup.wire.schema.WireRun and com.squareup.wire.schema.Target.SchemaHandler to log information related to processing the protobuf Schema."},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/","title":"Index","text":"<p>//wire-schema/com.squareup.wire/WireLogger</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/#wirelogger","title":"WireLogger","text":"<p>[common]\\ interface WireLogger</p> <p>Logger class used by com.squareup.wire.schema.WireRun and com.squareup.wire.schema.Target.SchemaHandler to log information related to processing the protobuf Schema.</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/#functions","title":"Functions","text":"Name Summary artifactHandled [common]abstract fun artifactHandled(outputPath: Path, qualifiedName: String, targetName: String)This is called when an artifact is handled by a com.squareup.wire.schema.Target.SchemaHandler. artifactSkipped [common]abstract fun artifactSkipped(type: ProtoType, targetName: String)This is called when an artifact has been passed down to a com.squareup.wire.schema.Target.SchemaHandler but has been skipped. This is useful for dry-runs. unusedExcludesInTarget [common]abstract fun unusedExcludesInTarget(unusedExcludes: Set&lt;String&gt;)This is called if some excludes values have not been used by the target they were defined in. Note that excludes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused excludes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target. unusedIncludesInTarget [common]abstract fun unusedIncludesInTarget(unusedIncludes: Set&lt;String&gt;)This is called if some includes values have not been used by the target they were defined in. Note that includes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused includes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target. unusedPrunes [common]abstract fun unusedPrunes(unusedPrunes: Set&lt;String&gt;)This is called if some prune values have not been used when Wire pruned the schema model. Note that prune should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused prunes can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader prune value is already defined. unusedRoots [common]abstract fun unusedRoots(unusedRoots: Set&lt;String&gt;)This is called if some root values have not been used when Wire pruned the schema model. Note that root should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused roots can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader root value is already defined."},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-handled/","title":"Artifact handled","text":"<p>//wire-schema/com.squareup.wire/WireLogger/artifactHandled</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-handled/#artifacthandled","title":"artifactHandled","text":"<p>[common]\\ abstract fun artifactHandled(outputPath: Path, qualifiedName: String, targetName: String)</p> <p>This is called when an artifact is handled by a com.squareup.wire.schema.Target.SchemaHandler.</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-handled/#parameters","title":"Parameters","text":"<p>common</p> outputPath is the path where the artifact is written on disk. qualifiedName is the file path when generating a .proto file, the type or service name prefixed with its package name when generating a .java or .kt file, and the type name when generating a .swift file. targetName is used to identify the concerned target. For com.squareup.wire.schema.JavaTarget, the name will be \u201cJava\u201d. For com.squareup.wire.schema.KotlinTarget, the name will be \u201cKotlin\u201d. For com.squareup.wire.schema.SwiftTarget, the name will be \u201cSwift\u201d. For com.squareup.wire.schema.ProtoTarget, the name will be \u201cProto\u201d."},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-skipped/","title":"Artifact skipped","text":"<p>//wire-schema/com.squareup.wire/WireLogger/artifactSkipped</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-skipped/#artifactskipped","title":"artifactSkipped","text":"<p>[common]\\ abstract fun artifactSkipped(type: ProtoType, targetName: String)</p> <p>This is called when an artifact has been passed down to a com.squareup.wire.schema.Target.SchemaHandler but has been skipped. This is useful for dry-runs.</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-skipped/#parameters","title":"Parameters","text":"<p>common</p> type is the unique identifier for the skipped type. targetName is used to identify the concerned target. For com.squareup.wire.schema.JavaTarget, the name will be \u201cJava\u201d. For com.squareup.wire.schema.KotlinTarget, the name will be \u201cKotlin\u201d. For com.squareup.wire.schema.SwiftTarget, the name will be \u201cSwift\u201d. For com.squareup.wire.schema.ProtoTarget, the name will be \u201cProto\u201d."},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-excludes-in-target/","title":"Unused excludes in target","text":"<p>//wire-schema/com.squareup.wire/WireLogger/unusedExcludesInTarget</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-excludes-in-target/#unusedexcludesintarget","title":"unusedExcludesInTarget","text":"<p>[common]\\ abstract fun unusedExcludesInTarget(unusedExcludes: Set&lt;String&gt;)</p> <p>This is called if some excludes values have not been used by the target they were defined in. Note that excludes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused excludes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target.</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-includes-in-target/","title":"Unused includes in target","text":"<p>//wire-schema/com.squareup.wire/WireLogger/unusedIncludesInTarget</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-includes-in-target/#unusedincludesintarget","title":"unusedIncludesInTarget","text":"<p>[common]\\ abstract fun unusedIncludesInTarget(unusedIncludes: Set&lt;String&gt;)</p> <p>This is called if some includes values have not been used by the target they were defined in. Note that includes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused includes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target.</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-prunes/","title":"Unused prunes","text":"<p>//wire-schema/com.squareup.wire/WireLogger/unusedPrunes</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-prunes/#unusedprunes","title":"unusedPrunes","text":"<p>[common]\\ abstract fun unusedPrunes(unusedPrunes: Set&lt;String&gt;)</p> <p>This is called if some prune values have not been used when Wire pruned the schema model. Note that prune should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused prunes can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader prune value is already defined.</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-roots/","title":"Unused roots","text":"<p>//wire-schema/com.squareup.wire/WireLogger/unusedRoots</p>"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-roots/#unusedroots","title":"unusedRoots","text":"<p>[common]\\ abstract fun unusedRoots(unusedRoots: Set&lt;String&gt;)</p> <p>This is called if some root values have not been used when Wire pruned the schema model. Note that root should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused roots can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader root value is already defined.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/#package-comsquareupwireschema","title":"Package com.squareup.wire.schema","text":""},{"location":"3.x/wire-schema/com.squareup.wire.schema/#types","title":"Types","text":"Name Summary AdapterConstant [jvm]data class AdapterConstant(javaClassName: ClassName, kotlinClassName: ClassName, memberName: String)A constant field that identifies a ProtoAdapter. This should be a string like like com.squareup.dinosaurs.Dinosaur#ADAPTER with a fully qualified class name, a #, and a field name. ClaimedDefinitions [common]class ClaimedDefinitionsClaimedDefinitions tracks handled objects: Types, Services, and Fields. A SchemaHandler is to first check if an object has already been claimed; if yes, it is not to handle it. Otherwise, the SchemaHandler is to handle the object and claim it. It is an error for a SchemaHandler to handle an object which has already been claimed. ClaimedPaths [common]class ClaimedPathsClaimedPaths tracks generated files\u2019 Paths. Schema handlers who generate files are to claim each generated file\u2019s path. It is an error to generate different Types or Services to the same file and ClaimedPaths will throw when generation conflicts happen. CoreLoader [common, js][common]object CoreLoader : Loader[js]object CoreLoader : Loader[jvm]object CoreLoader : LoaderA loader that can only load built-in .proto files: EmittingRules [common]class EmittingRulesA set of rules that describes which types to generate. EnclosingType [common]data class EnclosingType(location: Location, type: ProtoType, name: String, documentation: String, nestedTypes: List&lt;Type&gt;, nestedExtendList: List&lt;Extend&gt;, syntax: Syntax) : TypeAn empty type which only holds nested types. EnumConstant [common]data class EnumConstant(location: Location, name: String, tag: Int, documentation: String, options: Options) EnumType [common]data class EnumType(type: ProtoType, location: Location, documentation: String, name: String, constants: List&lt;EnumConstant&gt;, reserveds: List&lt;Reserved&gt;, options: Options, syntax: Syntax) : Type ErrorCollector [common]class ErrorCollectorCollects errors to be reported as a batch. Errors include both a detail message plus context of where they occurred within the schema. Extend [common]data class Extend(location: Location, documentation: String, name: String, fields: List&lt;Field&gt;) Extensions [common]data class Extensions(location: Location, documentation: String, values: List&lt;Any&gt;) Field [common]data class Field(namespaces: List&lt;String&gt;, location: Location, label: Field.Label?, name: String, documentation: String, tag: Int, default: String?, elementType: String, options: Options, isExtension: Boolean, isOneOf: Boolean, declaredJsonName: String?) LinkedOptionEntry [common]data class LinkedOptionEntry(optionElement: OptionElement, protoMember: ProtoMember, value: Any?) Linker [common]class LinkerLinks local field types and option types to the corresponding declarations. Loader [common]interface LoaderLoads other files as needed by their import path. Location [common]data class Location(base: String, path: String, line: Int, column: Int)Locates a .proto file, or a position within a .proto file, on the file system. This includes a base directory or a .jar file, and a path relative to that base. MarkSet [common]class MarkSet(pruningRules: PruningRules)A mark set is used in three phases: MessageType [common]data class MessageType(type: ProtoType, location: Location, documentation: String, name: String, declaredFields: List&lt;Field&gt;, extensionFields: MutableList&lt;Field&gt;, oneOfs: List&lt;OneOf&gt;, nestedTypes: List&lt;Type&gt;, nestedExtendList: List&lt;Extend&gt;, extensionsList: List&lt;Extensions&gt;, reserveds: List&lt;Reserved&gt;, options: Options, syntax: Syntax) : Type Multimap [common, js, jvm][common, js]interface Multimap&lt;K, V&gt;[jvm]typealias Multimap = Multimap&lt;K, V&gt; OneOf [common]data class OneOf(name: String, documentation: String, fields: List&lt;Field&gt;) Options [common]class Options(optionType: ProtoType, optionElements: List&lt;OptionElement&gt;)A set of options declared on a message declaration, field declaration, enum declaration, enum constant declaration, service declaration, RPC method declaration, or proto file declaration. Options values may be arbitrary protocol buffer messages, but must be valid protocol buffer messages. Profile [common, js][common]class Profile(profileFiles: List&lt;ProfileFileElement&gt;)[js]class Profile(profileFiles: List&lt;ProfileFileElement&gt;)[jvm]class Profile(profileFiles: List&lt;ProfileFileElement&gt;)Describes how to map .proto to .java. A single repository of .proto files may have multiple profiles; for example a project may target both Android and Java. ProfileLoader [common]interface ProfileLoader ProtoFile [common]data class ProtoFile(location: Location, imports: List&lt;String&gt;, publicImports: List&lt;String&gt;, packageName: String?, types: List&lt;Type&gt;, services: List&lt;Service&gt;, extendList: List&lt;Extend&gt;, options: Options, syntax: Syntax?) ProtoMember [common]class ProtoMemberIdentifies a field, enum or RPC on a declaring type. Members are encoded as strings containing a type name, a hash, and a member name, like squareup.dinosaurs.Dinosaur#length_meters. ProtoType [common]class ProtoTypeNames a protocol buffer message, enumerated type, service, map, or a scalar. This class models a fully-qualified name using the protocol buffer package. Pruner [common]class Pruner(schema: Schema, pruningRules: PruningRules)Creates a new schema that contains only the types selected by the pruning rules, including their transitive dependencies. PruningRules [common]class PruningRulesA set of rules that describes which types and members to retain and which to remove. Reserved [common]data class Reserved(location: Location, documentation: String, values: List&lt;Any&gt;) Rpc [common]data class Rpc(location: Location, name: String, documentation: String, requestTypeElement: String, responseTypeElement: String, requestStreaming: Boolean, responseStreaming: Boolean, options: Options) Schema [common]class SchemaA collection of .proto files that describe a set of messages. A schema is linked: each field\u2019s type name is resolved to the corresponding type definition. SchemaException [common]class SchemaException(errors: List&lt;String&gt;) : RuntimeException SchemaHandler [common]abstract class SchemaHandlerA SchemaHandlers Schema! SchemaLoader [common]class SchemaLoader : Loader, ProfileLoaderLoad proto files and their transitive dependencies and parse them. Keep track of which files were loaded from where so that we can use that information later when deciding what to generate.[js, jvm][js, jvm]class SchemaLoader : Loader, ProfileLoader Service [common]data class Service(type: ProtoType, location: Location, documentation: String, name: String, rpcs: List&lt;Rpc&gt;, options: Options) SyntaxRules [common]interface SyntaxRulesA set of rules which defines schema requirements for a specific Syntax. Type [common]sealed class Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/#functions","title":"Functions","text":"Name Summary isWireRuntimeProto [common]fun isWireRuntimeProto(location: Location): Boolean[common]fun isWireRuntimeProto(path: String): BooleanReturns true if path is bundled in the wire runtime."},{"location":"3.x/wire-schema/com.squareup.wire.schema/#properties","title":"Properties","text":"Name Summary WIRE_RUNTIME_JAR [common]const val WIRE_RUNTIME_JAR: StringA special base directory used for Wire\u2019s built-in .proto files."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-w-i-r-e_-r-u-n-t-i-m-e_-j-a-r/","title":"w i r e  r u n t i m e  j a r","text":"<p>//wire-schema/com.squareup.wire.schema/WIRE_RUNTIME_JAR</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-w-i-r-e_-r-u-n-t-i-m-e_-j-a-r/#wire_runtime_jar","title":"WIRE_RUNTIME_JAR","text":"<p>[common]\\ const val WIRE_RUNTIME_JAR: String</p> <p>A special base directory used for Wire\u2019s built-in .proto files.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/is-wire-runtime-proto/","title":"Is wire runtime proto","text":"<p>//wire-schema/com.squareup.wire.schema/isWireRuntimeProto</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/is-wire-runtime-proto/#iswireruntimeproto","title":"isWireRuntimeProto","text":"<p>[common]\\ fun isWireRuntimeProto(location: Location): Boolean</p> <p>[common]\\ fun isWireRuntimeProto(path: String): Boolean</p> <p>Returns true if path is bundled in the wire runtime.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/AdapterConstant</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/#adapterconstant","title":"AdapterConstant","text":"<p>[jvm]\\ data class AdapterConstant(javaClassName: ClassName, kotlinClassName: ClassName, memberName: String)</p> <p>A constant field that identifies a ProtoAdapter. This should be a string like like com.squareup.dinosaurs.Dinosaur#ADAPTER with a fully qualified class name, a #, and a field name.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/#constructors","title":"Constructors","text":"AdapterConstant [jvm]fun AdapterConstant(javaClassName: ClassName, kotlinClassName: ClassName, memberName: String)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/#properties","title":"Properties","text":"Name Summary javaClassName [jvm]@JvmFieldval javaClassName: ClassName kotlinClassName [jvm]@JvmFieldval kotlinClassName: ClassName memberName [jvm]@JvmFieldval memberName: String"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-adapter-constant/","title":"adapter constant","text":"<p>//wire-schema/com.squareup.wire.schema/AdapterConstant/AdapterConstant</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-adapter-constant/#adapterconstant","title":"AdapterConstant","text":"<p>[jvm]\\ fun AdapterConstant(javaClassName: ClassName, kotlinClassName: ClassName, memberName: String)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/java-class-name/","title":"Java class name","text":"<p>//wire-schema/com.squareup.wire.schema/AdapterConstant/javaClassName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/java-class-name/#javaclassname","title":"javaClassName","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val javaClassName: ClassName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/kotlin-class-name/","title":"Kotlin class name","text":"<p>//wire-schema/com.squareup.wire.schema/AdapterConstant/kotlinClassName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/kotlin-class-name/#kotlinclassname","title":"kotlinClassName","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val kotlinClassName: ClassName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/member-name/","title":"Member name","text":"<p>//wire-schema/com.squareup.wire.schema/AdapterConstant/memberName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/member-name/#membername","title":"memberName","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val memberName: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/AdapterConstant/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-companion/#functions","title":"Functions","text":"Name Summary invoke [jvm]operator fun invoke(adapter: String): AdapterConstant"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-companion/invoke/","title":"Invoke","text":"<p>//wire-schema/com.squareup.wire.schema/AdapterConstant/Companion/invoke</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-companion/invoke/#invoke","title":"invoke","text":"<p>[jvm]\\ operator fun invoke(adapter: String): AdapterConstant</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/ClaimedDefinitions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/#claimeddefinitions","title":"ClaimedDefinitions","text":"<p>[common]\\ class ClaimedDefinitions</p> <p>ClaimedDefinitions tracks handled objects: Types, Services, and Fields. A SchemaHandler is to first check if an object has already been claimed; if yes, it is not to handle it. Otherwise, the SchemaHandler is to handle the object and claim it. It is an error for a SchemaHandler to handle an object which has already been claimed.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/#constructors","title":"Constructors","text":"ClaimedDefinitions [common]fun ClaimedDefinitions()"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/#functions","title":"Functions","text":"Name Summary claim [common]fun claim(member: ProtoMember)Tracks that member has been handled.[common]fun claim(type: ProtoType)fun claim(type: Type)Tracks that type has been handled.[common]fun claim(service: Service)Tracks that service has been handled. contains [common]operator fun contains(member: ProtoMember): BooleanReturns true if member has already been handled.[common]operator fun contains(type: ProtoType): Booleanoperator fun contains(type: Type): BooleanReturns true if type has already been handled.[common]operator fun contains(service: Service): BooleanReturns true if service has already been handled."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/-claimed-definitions/","title":"claimed definitions","text":"<p>//wire-schema/com.squareup.wire.schema/ClaimedDefinitions/ClaimedDefinitions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/-claimed-definitions/#claimeddefinitions","title":"ClaimedDefinitions","text":"<p>[common]\\ fun ClaimedDefinitions()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/claim/","title":"Claim","text":"<p>//wire-schema/com.squareup.wire.schema/ClaimedDefinitions/claim</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/claim/#claim","title":"claim","text":"<p>[common]\\ fun claim(type: ProtoType)</p> <p>fun claim(type: Type)</p> <p>Tracks that type has been handled.</p> <p>[common]\\ fun claim(member: ProtoMember)</p> <p>Tracks that member has been handled.</p> <p>[common]\\ fun claim(service: Service)</p> <p>Tracks that service has been handled.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/contains/","title":"Contains","text":"<p>//wire-schema/com.squareup.wire.schema/ClaimedDefinitions/contains</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/contains/#contains","title":"contains","text":"<p>[common]\\ operator fun contains(type: ProtoType): Boolean</p> <p>operator fun contains(type: Type): Boolean</p> <p>Returns true if type has already been handled.</p> <p>[common]\\ operator fun contains(member: ProtoMember): Boolean</p> <p>Returns true if member has already been handled.</p> <p>[common]\\ operator fun contains(service: Service): Boolean</p> <p>Returns true if service has already been handled.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/ClaimedPaths</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/#claimedpaths","title":"ClaimedPaths","text":"<p>[common]\\ class ClaimedPaths</p> <p>ClaimedPaths tracks generated files\u2019 Paths. Schema handlers who generate files are to claim each generated file\u2019s path. It is an error to generate different Types or Services to the same file and ClaimedPaths will throw when generation conflicts happen.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/#constructors","title":"Constructors","text":"ClaimedPaths [common]fun ClaimedPaths()"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/#functions","title":"Functions","text":"Name Summary claim [common]fun claim(path: Path, service: Service)Tracks that service has been generated to path.[common]fun claim(path: Path, type: Type)Tracks that type has been generated to path."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/-claimed-paths/","title":"claimed paths","text":"<p>//wire-schema/com.squareup.wire.schema/ClaimedPaths/ClaimedPaths</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/-claimed-paths/#claimedpaths","title":"ClaimedPaths","text":"<p>[common]\\ fun ClaimedPaths()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/claim/","title":"Claim","text":"<p>//wire-schema/com.squareup.wire.schema/ClaimedPaths/claim</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/claim/#claim","title":"claim","text":"<p>[common]\\ fun claim(path: Path, type: Type)</p> <p>Tracks that type has been generated to path.</p> <p>[common]\\ fun claim(path: Path, service: Service)</p> <p>Tracks that service has been generated to path.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/CoreLoader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/#coreloader","title":"CoreLoader","text":"<p>[common]\\ object CoreLoader : Loader</p> <p>[js]\\ object CoreLoader : Loader</p> <p>[jvm]\\ object CoreLoader : Loader</p> <p>A loader that can only load built-in .proto files:</p> <ul><li>Google's protobuf descriptor, which defines standard options like default, deprecated, and     java_package.</li><li>Wire's extensions, which defines since and until options.</li></ul> <p>If the user has provided their own version of these protos, those are preferred.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/#functions","title":"Functions","text":"Name Summary load [js, jvm, common][js]open override fun load(path: String): ProtoFile[jvm]open override fun load(path: String): ProtoFile[common]abstract fun load(path: String): ProtoFile withErrors [js]open override fun withErrors(errors: ErrorCollector): CoreLoaderReturns a new loader that reports failures to errors.[jvm]open override fun withErrors(errors: ErrorCollector): CoreLoaderReturns a new loader that reports failures to errors.[common]abstract fun withErrors(errors: ErrorCollector): LoaderReturns a new loader that reports failures to errors."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjs%5Dload/","title":"[js]load","text":"<p>//wire-schema/com.squareup.wire.schema/CoreLoader/[js]load</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjs%5Dload/#load","title":"load","text":"<p>[js]\\ open override fun load(path: String): ProtoFile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjs%5Dwith-errors/","title":"[js]with errors","text":"<p>//wire-schema/com.squareup.wire.schema/CoreLoader/[js]withErrors</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjs%5Dwith-errors/#witherrors","title":"withErrors","text":"<p>[js]\\ open override fun withErrors(errors: ErrorCollector): CoreLoader</p> <p>Returns a new loader that reports failures to errors.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjvm%5Dload/","title":"[jvm]load","text":"<p>//wire-schema/com.squareup.wire.schema/CoreLoader/[jvm]load</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjvm%5Dload/#load","title":"load","text":"<p>[jvm]\\ open override fun load(path: String): ProtoFile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjvm%5Dwith-errors/","title":"[jvm]with errors","text":"<p>//wire-schema/com.squareup.wire.schema/CoreLoader/[jvm]withErrors</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjvm%5Dwith-errors/#witherrors","title":"withErrors","text":"<p>[jvm]\\ open override fun withErrors(errors: ErrorCollector): CoreLoader</p> <p>Returns a new loader that reports failures to errors.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#emittingrules","title":"EmittingRules","text":"<p>[common]\\ class EmittingRules</p> <p>A set of rules that describes which types to generate.</p> <p>Despite the builder, instances of this class are not safe for concurrent use.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#identifier-matching","title":"Identifier Matching","text":"<p>Identifiers in this set may be in the following forms:</p> <ul><li>Package names, followed by .*, like squareup.protos.person.*. This matches types and     services defined in the package and its descendant packages.</li><li>Fully qualified type and service names, like squareup.protos.person.Person.</li></ul> <p>Identifiers should not contain member names.</p> <p>This set has included identifiers and excluded identifiers, with the most precise identifier taking precedence over the other ones. For instance, if there is one included identifier a.Movie along an excluded identifier a.*, the type a.Movie is considered included in the set.</p> <p>If the includes set is empty, that implies that all elements should be included. Use this to exclude unwanted types and members without also including everything else.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#constructors","title":"Constructors","text":"EmittingRules [common]fun EmittingRules()"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#types","title":"Types","text":"Name Summary Builder [common]class Builder Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#functions","title":"Functions","text":"Name Summary includes [common]fun includes(type: ProtoType): BooleanReturns true if type should be generated. unusedExcludes [common]fun unusedExcludes(): Set&lt;String&gt; unusedIncludes [common]fun unusedIncludes(): Set&lt;String&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#properties","title":"Properties","text":"Name Summary isEmpty [common]val isEmpty: Boolean"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-emitting-rules/","title":"emitting rules","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules/EmittingRules</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-emitting-rules/#emittingrules","title":"EmittingRules","text":"<p>[common]\\ fun EmittingRules()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/includes/","title":"Includes","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules/includes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/includes/#includes","title":"includes","text":"<p>[common]\\ fun includes(type: ProtoType): Boolean</p> <p>Returns true if type should be generated.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/is-empty/","title":"Is empty","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules/isEmpty</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/is-empty/#isempty","title":"isEmpty","text":"<p>[common]\\ val isEmpty: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/unused-excludes/","title":"Unused excludes","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules/unusedExcludes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/unused-excludes/#unusedexcludes","title":"unusedExcludes","text":"<p>[common]\\ fun unusedExcludes(): Set&lt;String&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/unused-includes/","title":"Unused includes","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules/unusedIncludes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/unused-includes/#unusedincludes","title":"unusedIncludes","text":"<p>[common]\\ fun unusedIncludes(): Set&lt;String&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules/Builder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/#builder","title":"Builder","text":"<p>[common]\\ class Builder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/#functions","title":"Functions","text":"Name Summary build [common]fun build(): EmittingRules exclude [common]fun exclude(identifier: String): EmittingRules.Builderfun exclude(identifiers: Iterable&lt;String&gt;): EmittingRules.Builder include [common]fun include(identifier: String): EmittingRules.Builderfun include(identifiers: Iterable&lt;String&gt;): EmittingRules.Builder"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/-builder/","title":"builder","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules/Builder/Builder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/-builder/#builder","title":"Builder","text":"<p>[common]\\ fun Builder()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/build/","title":"Build","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules/Builder/build</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/build/#build","title":"build","text":"<p>[common]\\ fun build(): EmittingRules</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/exclude/","title":"Exclude","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules/Builder/exclude</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/exclude/#exclude","title":"exclude","text":"<p>[common]\\ fun exclude(identifiers: Iterable&lt;String&gt;): EmittingRules.Builder</p> <p>fun exclude(identifier: String): EmittingRules.Builder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/include/","title":"Include","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules/Builder/include</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/include/#include","title":"include","text":"<p>[common]\\ fun include(identifier: String): EmittingRules.Builder</p> <p>fun include(identifiers: Iterable&lt;String&gt;): EmittingRules.Builder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/EmittingRules/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/#enclosingtype","title":"EnclosingType","text":"<p>[common]\\ data class EnclosingType(location: Location, type: ProtoType, name: String, documentation: String, nestedTypes: List&lt;Type&gt;, nestedExtendList: List&lt;Extend&gt;, syntax: Syntax) : Type</p> <p>An empty type which only holds nested types.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/#constructors","title":"Constructors","text":"EnclosingType [common]fun EnclosingType(location: Location, type: ProtoType, name: String, documentation: String, nestedTypes: List&lt;Type&gt;, nestedExtendList: List&lt;Extend&gt;, syntax: Syntax)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/#functions","title":"Functions","text":"Name Summary linkMembers [common]open override fun linkMembers(linker: Linker) linkOptions [common]open override fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean) retainAll [common]open override fun retainAll(schema: Schema, markSet: MarkSet): Type? retainLinked [common]open override fun retainLinked(linkedTypes: Set&lt;ProtoType&gt;, linkedFields: Set&lt;Field&gt;): Type?Returns a copy of this containing only the types in linkedTypes and extensions in linkedFields, or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. toElement [common]fun toElement(): MessageElement typesAndNestedTypes [common]fun typesAndNestedTypes(): List&lt;Type&gt;Returns all types and subtypes which are linked to the type. validate [common]open override fun validate(linker: Linker, syntaxRules: SyntaxRules)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/#properties","title":"Properties","text":"Name Summary documentation [common]open override val documentation: String location [common]open override val location: Location name [common]open override val name: String nestedExtendList [common]open override val nestedExtendList: List&lt;Extend&gt; nestedTypes [common]open override val nestedTypes: List&lt;Type&gt; options [common]open override val options: Options syntax [common]open override val syntax: Syntax type [common]open override val type: ProtoType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/-enclosing-type/","title":"enclosing type","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/EnclosingType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/-enclosing-type/#enclosingtype","title":"EnclosingType","text":"<p>[common]\\ fun EnclosingType(location: Location, type: ProtoType, name: String, documentation: String, nestedTypes: List&lt;Type&gt;, nestedExtendList: List&lt;Extend&gt;, syntax: Syntax)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/documentation/#documentation","title":"documentation","text":"<p>[common]\\ open override val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/link-members/","title":"Link members","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/linkMembers</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/link-members/#linkmembers","title":"linkMembers","text":"<p>[common]\\ open override fun linkMembers(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/link-options/","title":"Link options","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/linkOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/link-options/#linkoptions","title":"linkOptions","text":"<p>[common]\\ open override fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/location/#location","title":"location","text":"<p>[common]\\ open override val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/name/#name","title":"name","text":"<p>[common]\\ open override val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/nested-extend-list/","title":"Nested extend list","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/nestedExtendList</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/nested-extend-list/#nestedextendlist","title":"nestedExtendList","text":"<p>[common]\\ open override val nestedExtendList: List&lt;Extend&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/nested-types/","title":"Nested types","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/nestedTypes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/nested-types/#nestedtypes","title":"nestedTypes","text":"<p>[common]\\ open override val nestedTypes: List&lt;Type&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/options/#options","title":"options","text":"<p>[common]\\ open override val options: Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\ open override fun retainAll(schema: Schema, markSet: MarkSet): Type?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/retain-linked/","title":"Retain linked","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/retainLinked</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/retain-linked/#retainlinked","title":"retainLinked","text":"<p>[common]\\ open override fun retainLinked(linkedTypes: Set&lt;ProtoType&gt;, linkedFields: Set&lt;Field&gt;): Type?</p> <p>Returns a copy of this containing only the types in linkedTypes and extensions in linkedFields, or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked.</p> <p>The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/syntax/","title":"Syntax","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/syntax</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/syntax/#syntax","title":"syntax","text":"<p>[common]\\ open override val syntax: Syntax</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/to-element/","title":"To element","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/toElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/to-element/#toelement","title":"toElement","text":"<p>[common]\\ fun toElement(): MessageElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/type/","title":"Type","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/type/#type","title":"type","text":"<p>[common]\\ open override val type: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/validate/","title":"Validate","text":"<p>//wire-schema/com.squareup.wire.schema/EnclosingType/validate</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/validate/#validate","title":"validate","text":"<p>[common]\\ open override fun validate(linker: Linker, syntaxRules: SyntaxRules)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/EnumConstant</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/#enumconstant","title":"EnumConstant","text":"<p>[common]\\ data class EnumConstant(location: Location, name: String, tag: Int, documentation: String, options: Options)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String isDeprecated [common]val isDeprecated: Boolean location [common]val location: Location name [common]val name: String options [common]val options: Options tag [common]val tag: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/-enum-constant/","title":"enum constant","text":"<p>//wire-schema/com.squareup.wire.schema/EnumConstant/EnumConstant</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/-enum-constant/#enumconstant","title":"EnumConstant","text":"<p>[common]\\ fun EnumConstant(location: Location, name: String, tag: Int, documentation: String, options: Options)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/EnumConstant/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/is-deprecated/","title":"Is deprecated","text":"<p>//wire-schema/com.squareup.wire.schema/EnumConstant/isDeprecated</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/is-deprecated/#isdeprecated","title":"isDeprecated","text":"<p>[common]\\ val isDeprecated: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/EnumConstant/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/EnumConstant/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema/EnumConstant/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/options/#options","title":"options","text":"<p>[common]\\ val options: Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/tag/","title":"Tag","text":"<p>//wire-schema/com.squareup.wire.schema/EnumConstant/tag</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/tag/#tag","title":"tag","text":"<p>[common]\\ val tag: Int</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/EnumConstant/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/#enumtype","title":"EnumType","text":"<p>[common]\\ data class EnumType(type: ProtoType, location: Location, documentation: String, name: String, constants: List&lt;EnumConstant&gt;, reserveds: List&lt;Reserved&gt;, options: Options, syntax: Syntax) : Type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/#functions","title":"Functions","text":"Name Summary allowAlias [common]fun allowAlias(): Boolean constant [common]fun constant(tag: Int): EnumConstant?Returns the constant tagged tag, or null if this enum has no such constant.[common]fun constant(name: String): EnumConstant?Returns the constant named name, or null if this enum has no such constant. linkMembers [common]open override fun linkMembers(linker: Linker) linkOptions [common]open override fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean) retainAll [common]open override fun retainAll(schema: Schema, markSet: MarkSet): Type? retainLinked [common]open override fun retainLinked(linkedTypes: Set&lt;ProtoType&gt;, linkedFields: Set&lt;Field&gt;): Type?Returns a copy of this containing only the types in linkedTypes and extensions in linkedFields, or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. toElement [common]fun toElement(): EnumElement typesAndNestedTypes [common]fun typesAndNestedTypes(): List&lt;Type&gt;Returns all types and subtypes which are linked to the type. validate [common]open override fun validate(linker: Linker, syntaxRules: SyntaxRules)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/#properties","title":"Properties","text":"Name Summary constants [common]val constants: List&lt;EnumConstant&gt; documentation [common]open override val documentation: String isDeprecated [common]val isDeprecated: Boolean location [common]open override val location: Location name [common]open override val name: String nestedExtendList [common]open override val nestedExtendList: List&lt;Extend&gt; nestedTypes [common]open override val nestedTypes: List&lt;Type&gt; options [common]open override val options: Options syntax [common]open override val syntax: Syntax type [common]open override val type: ProtoType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-enum-type/","title":"enum type","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/EnumType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-enum-type/#enumtype","title":"EnumType","text":"<p>[common]\\ fun EnumType(type: ProtoType, location: Location, documentation: String, name: String, constants: List&lt;EnumConstant&gt;, reserveds: List&lt;Reserved&gt;, options: Options, syntax: Syntax)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/allow-alias/","title":"Allow alias","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/allowAlias</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/allow-alias/#allowalias","title":"allowAlias","text":"<p>[common]\\ fun allowAlias(): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/constant/","title":"Constant","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/constant</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/constant/#constant","title":"constant","text":"<p>[common]\\ fun constant(name: String): EnumConstant?</p> <p>Returns the constant named name, or null if this enum has no such constant.</p> <p>[common]\\ fun constant(tag: Int): EnumConstant?</p> <p>Returns the constant tagged tag, or null if this enum has no such constant.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/constants/","title":"Constants","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/constants</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/constants/#constants","title":"constants","text":"<p>[common]\\ val constants: List&lt;EnumConstant&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/documentation/#documentation","title":"documentation","text":"<p>[common]\\ open override val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/is-deprecated/","title":"Is deprecated","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/isDeprecated</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/is-deprecated/#isdeprecated","title":"isDeprecated","text":"<p>[common]\\ val isDeprecated: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/link-members/","title":"Link members","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/linkMembers</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/link-members/#linkmembers","title":"linkMembers","text":"<p>[common]\\ open override fun linkMembers(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/link-options/","title":"Link options","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/linkOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/link-options/#linkoptions","title":"linkOptions","text":"<p>[common]\\ open override fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/location/#location","title":"location","text":"<p>[common]\\ open override val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/name/#name","title":"name","text":"<p>[common]\\ open override val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/nested-extend-list/","title":"Nested extend list","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/nestedExtendList</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/nested-extend-list/#nestedextendlist","title":"nestedExtendList","text":"<p>[common]\\ open override val nestedExtendList: List&lt;Extend&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/nested-types/","title":"Nested types","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/nestedTypes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/nested-types/#nestedtypes","title":"nestedTypes","text":"<p>[common]\\ open override val nestedTypes: List&lt;Type&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/options/#options","title":"options","text":"<p>[common]\\ open override val options: Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\ open override fun retainAll(schema: Schema, markSet: MarkSet): Type?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/retain-linked/","title":"Retain linked","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/retainLinked</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/retain-linked/#retainlinked","title":"retainLinked","text":"<p>[common]\\ open override fun retainLinked(linkedTypes: Set&lt;ProtoType&gt;, linkedFields: Set&lt;Field&gt;): Type?</p> <p>Returns a copy of this containing only the types in linkedTypes and extensions in linkedFields, or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked.</p> <p>The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/syntax/","title":"Syntax","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/syntax</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/syntax/#syntax","title":"syntax","text":"<p>[common]\\ open override val syntax: Syntax</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/to-element/","title":"To element","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/toElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/to-element/#toelement","title":"toElement","text":"<p>[common]\\ fun toElement(): EnumElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/type/","title":"Type","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/type/#type","title":"type","text":"<p>[common]\\ open override val type: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/validate/","title":"Validate","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/validate</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/validate/#validate","title":"validate","text":"<p>[common]\\ open override fun validate(linker: Linker, syntaxRules: SyntaxRules)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-companion/#functions","title":"Functions","text":"Name Summary fromElement [common]@JvmStaticfun fromElement(protoType: ProtoType, enumElement: EnumElement, syntax: Syntax): EnumType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-companion/from-element/","title":"From element","text":"<p>//wire-schema/com.squareup.wire.schema/EnumType/Companion/fromElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-companion/from-element/#fromelement","title":"fromElement","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun fromElement(protoType: ProtoType, enumElement: EnumElement, syntax: Syntax): EnumType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/ErrorCollector</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/#errorcollector","title":"ErrorCollector","text":"<p>[common]\\ class ErrorCollector</p> <p>Collects errors to be reported as a batch. Errors include both a detail message plus context of where they occurred within the schema.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/#constructors","title":"Constructors","text":"ErrorCollector [common]fun ErrorCollector()"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/#functions","title":"Functions","text":"Name Summary at [common]fun at(additionalContext: Any): ErrorCollectorReturns a copy of this error collector that includes additionalContext in error messages reported to it. The current and returned instance both contribute errors to the same list. plusAssign [common]operator fun plusAssign(message: String)Add message as an error to this collector. throwIfNonEmpty [common]fun throwIfNonEmpty()"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/-error-collector/","title":"error collector","text":"<p>//wire-schema/com.squareup.wire.schema/ErrorCollector/ErrorCollector</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/-error-collector/#errorcollector","title":"ErrorCollector","text":"<p>[common]\\ fun ErrorCollector()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/at/","title":"At","text":"<p>//wire-schema/com.squareup.wire.schema/ErrorCollector/at</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/at/#at","title":"at","text":"<p>[common]\\ fun at(additionalContext: Any): ErrorCollector</p> <p>Returns a copy of this error collector that includes additionalContext in error messages reported to it. The current and returned instance both contribute errors to the same list.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/plus-assign/","title":"Plus assign","text":"<p>//wire-schema/com.squareup.wire.schema/ErrorCollector/plusAssign</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/plus-assign/#plusassign","title":"plusAssign","text":"<p>[common]\\ operator fun plusAssign(message: String)</p> <p>Add message as an error to this collector.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/throw-if-non-empty/","title":"Throw if non empty","text":"<p>//wire-schema/com.squareup.wire.schema/ErrorCollector/throwIfNonEmpty</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/throw-if-non-empty/#throwifnonempty","title":"throwIfNonEmpty","text":"<p>[common]\\ fun throwIfNonEmpty()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Extend</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/#extend","title":"Extend","text":"<p>[common]\\ data class Extend(location: Location, documentation: String, name: String, fields: List&lt;Field&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/#functions","title":"Functions","text":"Name Summary link [common]fun link(linker: Linker) linkOptions [common]fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean) member [common]fun member(field: Field): ProtoMember retainAll [common]fun retainAll(schema: Schema, markSet: MarkSet): Extend? retainLinked [common]fun retainLinked(linkedFields: Set&lt;Field&gt;): Extend? validate [common]fun validate(linker: Linker, syntaxRules: SyntaxRules)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String fields [common]val fields: List&lt;Field&gt; location [common]val location: Location name [common]val name: String type [common]var type: ProtoType? = null"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-extend/","title":"extend","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/Extend</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-extend/#extend","title":"Extend","text":"<p>[common]\\ fun Extend(location: Location, documentation: String, name: String, fields: List&lt;Field&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/fields/","title":"Fields","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/fields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/fields/#fields","title":"fields","text":"<p>[common]\\ val fields: List&lt;Field&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/link-options/","title":"Link options","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/linkOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/link-options/#linkoptions","title":"linkOptions","text":"<p>[common]\\ fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/link/","title":"Link","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/link</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/link/#link","title":"link","text":"<p>[common]\\ fun link(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/member/","title":"Member","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/member</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/member/#member","title":"member","text":"<p>[common]\\ fun member(field: Field): ProtoMember</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\ fun retainAll(schema: Schema, markSet: MarkSet): Extend?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/retain-linked/","title":"Retain linked","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/retainLinked</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/retain-linked/#retainlinked","title":"retainLinked","text":"<p>[common]\\ fun retainLinked(linkedFields: Set&lt;Field&gt;): Extend?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/type/","title":"Type","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/type/#type","title":"type","text":"<p>[common]\\ var type: ProtoType? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/validate/","title":"Validate","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/validate</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/validate/#validate","title":"validate","text":"<p>[common]\\ fun validate(linker: Linker, syntaxRules: SyntaxRules)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/#functions","title":"Functions","text":"Name Summary fromElements [common]@JvmStaticfun fromElements(namespaces: List&lt;String&gt;, extendElements: List&lt;ExtendElement&gt;): List&lt;Extend&gt; toElements [common]@JvmStaticfun toElements(extendList: List&lt;Extend&gt;): List&lt;ExtendElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/from-elements/","title":"From elements","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/Companion/fromElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/from-elements/#fromelements","title":"fromElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun fromElements(namespaces: List&lt;String&gt;, extendElements: List&lt;ExtendElement&gt;): List&lt;Extend&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/to-elements/","title":"To elements","text":"<p>//wire-schema/com.squareup.wire.schema/Extend/Companion/toElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/to-elements/#toelements","title":"toElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun toElements(extendList: List&lt;Extend&gt;): List&lt;ExtendElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Extensions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/#extensions","title":"Extensions","text":"<p>[common]\\ data class Extensions(location: Location, documentation: String, values: List&lt;Any&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/#functions","title":"Functions","text":"Name Summary validate [common]fun validate(linker: Linker)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String location [common]val location: Location values [common]val values: List&lt;Any&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-extensions/","title":"extensions","text":"<p>//wire-schema/com.squareup.wire.schema/Extensions/Extensions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-extensions/#extensions","title":"Extensions","text":"<p>[common]\\ fun Extensions(location: Location, documentation: String, values: List&lt;Any&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/Extensions/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/Extensions/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/validate/","title":"Validate","text":"<p>//wire-schema/com.squareup.wire.schema/Extensions/validate</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/validate/#validate","title":"validate","text":"<p>[common]\\ fun validate(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/values/","title":"Values","text":"<p>//wire-schema/com.squareup.wire.schema/Extensions/values</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/values/#values","title":"values","text":"<p>[common]\\ val values: List&lt;Any&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Extensions/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/#functions","title":"Functions","text":"Name Summary fromElements [common]@JvmStaticfun fromElements(elements: List&lt;ExtensionsElement&gt;): List&lt;Extensions&gt; toElements [common]@JvmStaticfun toElements(extensions: List&lt;Extensions&gt;): List&lt;ExtensionsElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/from-elements/","title":"From elements","text":"<p>//wire-schema/com.squareup.wire.schema/Extensions/Companion/fromElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/from-elements/#fromelements","title":"fromElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun fromElements(elements: List&lt;ExtensionsElement&gt;): List&lt;Extensions&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/to-elements/","title":"To elements","text":"<p>//wire-schema/com.squareup.wire.schema/Extensions/Companion/toElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/to-elements/#toelements","title":"toElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun toElements(extensions: List&lt;Extensions&gt;): List&lt;ExtensionsElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/#field","title":"Field","text":"<p>[common]\\ data class Field(namespaces: List&lt;String&gt;, location: Location, label: Field.Label?, name: String, documentation: String, tag: Int, default: String?, elementType: String, options: Options, isExtension: Boolean, isOneOf: Boolean, declaredJsonName: String?)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/#types","title":"Types","text":"Name Summary Companion [common]object Companion EncodeMode [common]enum EncodeMode : Enum&lt;Field.EncodeMode&gt; Label [common]enum Label : Enum&lt;Field.Label&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/#functions","title":"Functions","text":"Name Summary link [common]fun link(linker: Linker) linkOptions [common]fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean) retainAll [common]fun retainAll(schema: Schema, markSet: MarkSet, enclosingType: ProtoType): Field? toString [common]open override fun toString(): String validate [common]fun validate(linker: Linker, syntaxRules: SyntaxRules)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/#properties","title":"Properties","text":"Name Summary declaredJsonName [common]val declaredJsonName: String? default [common]val default: String? documentation [common]val documentation: String encodeMode [common]var encodeMode: Field.EncodeMode? = null isDeprecated [common]val isDeprecated: Boolean isExtension [common]val isExtension: Boolean isOneOf [common]val isOneOf: Boolean isPacked [common]val isPacked: Boolean isRedacted [common]var isRedacted: Boolean = false isRepeated [common]val isRepeated: Boolean isRequired [common]val isRequired: Boolean jsonName [common]var jsonName: String? = null label [common]val label: Field.Label?May be null for proto3 fields, one-of\u2019s, or maps. location [common]val location: Location name [common]val name: String namespaces [common]val namespaces: List&lt;String&gt;The namespaces in which the field is defined. For top-level extensions in a file that has no package declaration, this may be empty. For normal fields and extensions nested inside a message, the first entry will always be the package name, which might be the empty string if defined in a file that has no package declaration. Subsequent entries will be the names of enclosing messages, outer-most to inner-most. options [common]val options: Options packageName [common]val packageName: StringReturns the package in which this field is defined. If the file that defined this field has no package declaration, returns the empty string. qualifiedName [common]val qualifiedName: StringReturns this field\u2019s name, prefixed with its namespaces. Uniquely identifies extension fields, such as in options. tag [common]val tag: Int type [common]var type: ProtoType? = null"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-field/","title":"field","text":"<p>//wire-schema/com.squareup.wire.schema/Field/Field</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-field/#field","title":"Field","text":"<p>[common]\\ fun Field(namespaces: List&lt;String&gt;, location: Location, label: Field.Label?, name: String, documentation: String, tag: Int, default: String?, elementType: String, options: Options, isExtension: Boolean, isOneOf: Boolean, declaredJsonName: String?)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/declared-json-name/","title":"Declared json name","text":"<p>//wire-schema/com.squareup.wire.schema/Field/declaredJsonName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/declared-json-name/#declaredjsonname","title":"declaredJsonName","text":"<p>[common]\\ val declaredJsonName: String?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/default/","title":"Default","text":"<p>//wire-schema/com.squareup.wire.schema/Field/default</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/default/#default","title":"default","text":"<p>[common]\\ val default: String?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/Field/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/encode-mode/","title":"Encode mode","text":"<p>//wire-schema/com.squareup.wire.schema/Field/encodeMode</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/encode-mode/#encodemode","title":"encodeMode","text":"<p>[common]\\ var encodeMode: Field.EncodeMode? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-deprecated/","title":"Is deprecated","text":"<p>//wire-schema/com.squareup.wire.schema/Field/isDeprecated</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-deprecated/#isdeprecated","title":"isDeprecated","text":"<p>[common]\\ val isDeprecated: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-extension/","title":"Is extension","text":"<p>//wire-schema/com.squareup.wire.schema/Field/isExtension</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-extension/#isextension","title":"isExtension","text":"<p>[common]\\ val isExtension: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-one-of/","title":"Is one of","text":"<p>//wire-schema/com.squareup.wire.schema/Field/isOneOf</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-one-of/#isoneof","title":"isOneOf","text":"<p>[common]\\ val isOneOf: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-packed/","title":"Is packed","text":"<p>//wire-schema/com.squareup.wire.schema/Field/isPacked</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-packed/#ispacked","title":"isPacked","text":"<p>[common]\\ val isPacked: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-redacted/","title":"Is redacted","text":"<p>//wire-schema/com.squareup.wire.schema/Field/isRedacted</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-redacted/#isredacted","title":"isRedacted","text":"<p>[common]\\ var isRedacted: Boolean = false</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-repeated/","title":"Is repeated","text":"<p>//wire-schema/com.squareup.wire.schema/Field/isRepeated</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-repeated/#isrepeated","title":"isRepeated","text":"<p>[common]\\ val isRepeated: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-required/","title":"Is required","text":"<p>//wire-schema/com.squareup.wire.schema/Field/isRequired</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-required/#isrequired","title":"isRequired","text":"<p>[common]\\ val isRequired: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/json-name/","title":"Json name","text":"<p>//wire-schema/com.squareup.wire.schema/Field/jsonName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/json-name/#jsonname","title":"jsonName","text":"<p>[common]\\ var jsonName: String? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/label/","title":"Label","text":"<p>//wire-schema/com.squareup.wire.schema/Field/label</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/label/#label","title":"label","text":"<p>[common]\\ val label: Field.Label?</p> <p>May be null for proto3 fields, one-of\u2019s, or maps.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/link-options/","title":"Link options","text":"<p>//wire-schema/com.squareup.wire.schema/Field/linkOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/link-options/#linkoptions","title":"linkOptions","text":"<p>[common]\\ fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/link/","title":"Link","text":"<p>//wire-schema/com.squareup.wire.schema/Field/link</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/link/#link","title":"link","text":"<p>[common]\\ fun link(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/Field/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/Field/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/namespaces/","title":"Namespaces","text":"<p>//wire-schema/com.squareup.wire.schema/Field/namespaces</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/namespaces/#namespaces","title":"namespaces","text":"<p>[common]\\ val namespaces: List&lt;String&gt;</p> <p>The namespaces in which the field is defined. For top-level extensions in a file that has no package declaration, this may be empty. For normal fields and extensions nested inside a message, the first entry will always be the package name, which might be the empty string if defined in a file that has no package declaration. Subsequent entries will be the names of enclosing messages, outer-most to inner-most.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema/Field/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/options/#options","title":"options","text":"<p>[common]\\ val options: Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/package-name/","title":"Package name","text":"<p>//wire-schema/com.squareup.wire.schema/Field/packageName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/package-name/#packagename","title":"packageName","text":"<p>[common]\\ val packageName: String</p> <p>Returns the package in which this field is defined. If the file that defined this field has no package declaration, returns the empty string.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/qualified-name/","title":"Qualified name","text":"<p>//wire-schema/com.squareup.wire.schema/Field/qualifiedName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/qualified-name/#qualifiedname","title":"qualifiedName","text":"<p>[common]\\ val qualifiedName: String</p> <p>Returns this field\u2019s name, prefixed with its namespaces. Uniquely identifies extension fields, such as in options.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/Field/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\ fun retainAll(schema: Schema, markSet: MarkSet, enclosingType: ProtoType): Field?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/tag/","title":"Tag","text":"<p>//wire-schema/com.squareup.wire.schema/Field/tag</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/tag/#tag","title":"tag","text":"<p>[common]\\ val tag: Int</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/to-string/","title":"To string","text":"<p>//wire-schema/com.squareup.wire.schema/Field/toString</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/to-string/#tostring","title":"toString","text":"<p>[common]\\ open override fun toString(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/type/","title":"Type","text":"<p>//wire-schema/com.squareup.wire.schema/Field/type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/type/#type","title":"type","text":"<p>[common]\\ var type: ProtoType? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/validate/","title":"Validate","text":"<p>//wire-schema/com.squareup.wire.schema/Field/validate</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/validate/#validate","title":"validate","text":"<p>[common]\\ fun validate(linker: Linker, syntaxRules: SyntaxRules)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/#functions","title":"Functions","text":"Name Summary fromElements [common]@JvmStaticfun fromElements(namespaces: List&lt;String&gt;, fieldElements: List&lt;FieldElement&gt;, extension: Boolean, oneOf: Boolean): List&lt;Field&gt; retainAll [common]@JvmStaticfun retainAll(schema: Schema, markSet: MarkSet, enclosingType: ProtoType, fields: Collection&lt;Field&gt;): List&lt;Field&gt; retainLinked [common]@JvmStaticfun retainLinked(fields: List&lt;Field&gt;): List&lt;Field&gt; toElements [common]@JvmStaticfun toElements(fields: List&lt;Field&gt;): List&lt;FieldElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/from-elements/","title":"From elements","text":"<p>//wire-schema/com.squareup.wire.schema/Field/Companion/fromElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/from-elements/#fromelements","title":"fromElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun fromElements(namespaces: List&lt;String&gt;, fieldElements: List&lt;FieldElement&gt;, extension: Boolean, oneOf: Boolean): List&lt;Field&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/Field/Companion/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun retainAll(schema: Schema, markSet: MarkSet, enclosingType: ProtoType, fields: Collection&lt;Field&gt;): List&lt;Field&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/retain-linked/","title":"Retain linked","text":"<p>//wire-schema/com.squareup.wire.schema/Field/Companion/retainLinked</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/retain-linked/#retainlinked","title":"retainLinked","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun retainLinked(fields: List&lt;Field&gt;): List&lt;Field&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/to-elements/","title":"To elements","text":"<p>//wire-schema/com.squareup.wire.schema/Field/Companion/toElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/to-elements/#toelements","title":"toElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun toElements(fields: List&lt;Field&gt;): List&lt;FieldElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/EncodeMode</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/#encodemode","title":"EncodeMode","text":"<p>[common]\\ enum EncodeMode : Enum&lt;Field.EncodeMode&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/#entries","title":"Entries","text":"MAP [common]MAP()Map. PACKED [common]PACKED()Packed encoded list. REPEATED [common]REPEATED()List. OMIT_IDENTITY [common]OMIT_IDENTITY()Non-repeated fields in proto3. Identity can be 0, false, \u201c\u201d, or null. REQUIRED [common]REQUIRED()Required from proto2. NULL_IF_ABSENT [common]NULL_IF_ABSENT()Optional, or OneOf from proto2."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-m-a-p/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/EncodeMode/MAP</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-m-a-p/#map","title":"MAP","text":"<p>[common]\\ MAP()</p> <p>Map.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-m-a-p/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-n-u-l-l_-i-f_-a-b-s-e-n-t/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/EncodeMode/NULL_IF_ABSENT</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-n-u-l-l_-i-f_-a-b-s-e-n-t/#null_if_absent","title":"NULL_IF_ABSENT","text":"<p>[common]\\ NULL_IF_ABSENT()</p> <p>Optional, or OneOf from proto2.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-n-u-l-l_-i-f_-a-b-s-e-n-t/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-o-m-i-t_-i-d-e-n-t-i-t-y/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/EncodeMode/OMIT_IDENTITY</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-o-m-i-t_-i-d-e-n-t-i-t-y/#omit_identity","title":"OMIT_IDENTITY","text":"<p>[common]\\ OMIT_IDENTITY()</p> <p>Non-repeated fields in proto3. Identity can be 0, false, \u201c\u201d, or null.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-o-m-i-t_-i-d-e-n-t-i-t-y/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-p-a-c-k-e-d/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/EncodeMode/PACKED</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-p-a-c-k-e-d/#packed","title":"PACKED","text":"<p>[common]\\ PACKED()</p> <p>Packed encoded list.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-p-a-c-k-e-d/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-p-e-a-t-e-d/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/EncodeMode/REPEATED</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-p-e-a-t-e-d/#repeated","title":"REPEATED","text":"<p>[common]\\ REPEATED()</p> <p>List.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-p-e-a-t-e-d/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-q-u-i-r-e-d/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/EncodeMode/REQUIRED</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-q-u-i-r-e-d/#required","title":"REQUIRED","text":"<p>[common]\\ REQUIRED()</p> <p>Required from proto2.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-q-u-i-r-e-d/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/Label</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/#label","title":"Label","text":"<p>[common]\\ enum Label : Enum&lt;Field.Label&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/#entries","title":"Entries","text":"ONE_OF [common]ONE_OF()Indicates the field is a member of a oneof block. REPEATED [common]REPEATED() REQUIRED [common]REQUIRED() OPTIONAL [common]OPTIONAL()"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-n-e_-o-f/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/Label/ONE_OF</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-n-e_-o-f/#one_of","title":"ONE_OF","text":"<p>[common]\\ ONE_OF()</p> <p>Indicates the field is a member of a oneof block.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-n-e_-o-f/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-p-t-i-o-n-a-l/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/Label/OPTIONAL</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-p-t-i-o-n-a-l/#optional","title":"OPTIONAL","text":"<p>[common]\\ OPTIONAL()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-p-t-i-o-n-a-l/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-p-e-a-t-e-d/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/Label/REPEATED</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-p-e-a-t-e-d/#repeated","title":"REPEATED","text":"<p>[common]\\ REPEATED()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-p-e-a-t-e-d/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-q-u-i-r-e-d/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Field/Label/REQUIRED</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-q-u-i-r-e-d/#required","title":"REQUIRED","text":"<p>[common]\\ REQUIRED()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-q-u-i-r-e-d/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/LinkedOptionEntry</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/#linkedoptionentry","title":"LinkedOptionEntry","text":"<p>[common]\\ data class LinkedOptionEntry(optionElement: OptionElement, protoMember: ProtoMember, value: Any?)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/#properties","title":"Properties","text":"Name Summary optionElement [common]val optionElement: OptionElement protoMember [common]val protoMember: ProtoMember value [common]val value: Any?"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/-linked-option-entry/","title":"linked option entry","text":"<p>//wire-schema/com.squareup.wire.schema/LinkedOptionEntry/LinkedOptionEntry</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/-linked-option-entry/#linkedoptionentry","title":"LinkedOptionEntry","text":"<p>[common]\\ fun LinkedOptionEntry(optionElement: OptionElement, protoMember: ProtoMember, value: Any?)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/option-element/","title":"Option element","text":"<p>//wire-schema/com.squareup.wire.schema/LinkedOptionEntry/optionElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/option-element/#optionelement","title":"optionElement","text":"<p>[common]\\ val optionElement: OptionElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/proto-member/","title":"Proto member","text":"<p>//wire-schema/com.squareup.wire.schema/LinkedOptionEntry/protoMember</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/proto-member/#protomember","title":"protoMember","text":"<p>[common]\\ val protoMember: ProtoMember</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/value/","title":"Value","text":"<p>//wire-schema/com.squareup.wire.schema/LinkedOptionEntry/value</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/value/#value","title":"value","text":"<p>[common]\\ val value: Any?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Linker</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/#linker","title":"Linker","text":"<p>[common]\\ class Linker</p> <p>Links local field types and option types to the corresponding declarations.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/#constructors","title":"Constructors","text":"Linker [common]fun Linker(loader: Loader, errors: ErrorCollector, permitPackageCycles: Boolean, loadExhaustively: Boolean)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/#functions","title":"Functions","text":"Name Summary addType [common]fun addType(protoType: ProtoType, type: Type)Adds type. dereference [common]fun dereference(protoType: ProtoType, field: String): Field?Returns the field named field on the message type of protoType. get [common]fun get(protoType: ProtoType): Type?Returns the type or null if it doesn\u2019t exist. getForOptions [common]fun getForOptions(protoType: ProtoType): Type?Returns the type or null if it doesn\u2019t exist. Before this returns it ensures members are linked so that options may dereference them. link [common]fun link(sourceProtoFiles: Iterable&lt;ProtoFile&gt;): SchemaLink all features of all files in sourceProtoFiles to create a schema. This will also partially link any imported files necessary. request [common]fun request(field: Field)Mark a field as used in an option so its file is retained in the schema. resolve [common]fun &lt;T&gt; resolve(name: String, map: Map&lt;String, T&gt;): T? resolveContext [common]fun resolveContext(): String resolveMessageType [common]fun resolveMessageType(name: String): ProtoTypeReturns the type name for the relative or fully-qualified name name. resolveType [common]fun resolveType(name: String): ProtoTypeReturns the type name for the scalar, relative or fully-qualified name name. validateEnumConstantNameUniqueness [common]fun validateEnumConstantNameUniqueness(nestedTypes: Iterable&lt;Type&gt;) validateFields [common]fun validateFields(fields: Iterable&lt;Field&gt;, reserveds: List&lt;Reserved&gt;, syntaxRules: SyntaxRules)Validate that the tags of fields are unique and in range, that proto3 message cannot reference proto2 enums. validateImportForPath [common]fun validateImportForPath(location: Location, requiredImport: String) validateImportForType [common]fun validateImportForType(location: Location, type: ProtoType) withContext [common]fun withContext(context: Any): LinkerReturns a new linker that uses context to resolve type names and report errors."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/#properties","title":"Properties","text":"Name Summary errors [common]val errors: ErrorCollectorErrors accumulated by this load. loadExhaustively [common]val loadExhaustively: Boolean"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/-linker/","title":"linker","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/Linker</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/-linker/#linker","title":"Linker","text":"<p>[common]\\ fun Linker(loader: Loader, errors: ErrorCollector, permitPackageCycles: Boolean, loadExhaustively: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/add-type/","title":"Add type","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/addType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/add-type/#addtype","title":"addType","text":"<p>[common]\\ fun addType(protoType: ProtoType, type: Type)</p> <p>Adds type.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/dereference/","title":"Dereference","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/dereference</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/dereference/#dereference","title":"dereference","text":"<p>[common]\\ fun dereference(protoType: ProtoType, field: String): Field?</p> <p>Returns the field named field on the message type of protoType.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/errors/","title":"Errors","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/errors</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/errors/#errors","title":"errors","text":"<p>[common]\\ val errors: ErrorCollector</p> <p>Errors accumulated by this load.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/get-for-options/","title":"Get for options","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/getForOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/get-for-options/#getforoptions","title":"getForOptions","text":"<p>[common]\\ fun getForOptions(protoType: ProtoType): Type?</p> <p>Returns the type or null if it doesn\u2019t exist. Before this returns it ensures members are linked so that options may dereference them.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/get/","title":"Get","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/get</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/get/#get","title":"get","text":"<p>[common]\\ fun get(protoType: ProtoType): Type?</p> <p>Returns the type or null if it doesn\u2019t exist.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/link/","title":"Link","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/link</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/link/#link","title":"link","text":"<p>[common]\\ fun link(sourceProtoFiles: Iterable&lt;ProtoFile&gt;): Schema</p> <p>Link all features of all files in sourceProtoFiles to create a schema. This will also partially link any imported files necessary.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/load-exhaustively/","title":"Load exhaustively","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/loadExhaustively</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/load-exhaustively/#loadexhaustively","title":"loadExhaustively","text":"<p>[common]\\ val loadExhaustively: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/request/","title":"Request","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/request</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/request/#request","title":"request","text":"<p>[common]\\ fun request(field: Field)</p> <p>Mark a field as used in an option so its file is retained in the schema.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve-context/","title":"Resolve context","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/resolveContext</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve-context/#resolvecontext","title":"resolveContext","text":"<p>[common]\\ fun resolveContext(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve-message-type/","title":"Resolve message type","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/resolveMessageType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve-message-type/#resolvemessagetype","title":"resolveMessageType","text":"<p>[common]\\ fun resolveMessageType(name: String): ProtoType</p> <p>Returns the type name for the relative or fully-qualified name name.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve-type/","title":"Resolve type","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/resolveType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve-type/#resolvetype","title":"resolveType","text":"<p>[common]\\ fun resolveType(name: String): ProtoType</p> <p>Returns the type name for the scalar, relative or fully-qualified name name.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve/","title":"Resolve","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/resolve</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve/#resolve","title":"resolve","text":"<p>[common]\\ fun &lt;T&gt; resolve(name: String, map: Map&lt;String, T&gt;): T?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-enum-constant-name-uniqueness/","title":"Validate enum constant name uniqueness","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/validateEnumConstantNameUniqueness</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-enum-constant-name-uniqueness/#validateenumconstantnameuniqueness","title":"validateEnumConstantNameUniqueness","text":"<p>[common]\\ fun validateEnumConstantNameUniqueness(nestedTypes: Iterable&lt;Type&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-fields/","title":"Validate fields","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/validateFields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-fields/#validatefields","title":"validateFields","text":"<p>[common]\\ fun validateFields(fields: Iterable&lt;Field&gt;, reserveds: List&lt;Reserved&gt;, syntaxRules: SyntaxRules)</p> <p>Validate that the tags of fields are unique and in range, that proto3 message cannot reference proto2 enums.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-import-for-path/","title":"Validate import for path","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/validateImportForPath</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-import-for-path/#validateimportforpath","title":"validateImportForPath","text":"<p>[common]\\ fun validateImportForPath(location: Location, requiredImport: String)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-import-for-type/","title":"Validate import for type","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/validateImportForType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-import-for-type/#validateimportfortype","title":"validateImportForType","text":"<p>[common]\\ fun validateImportForType(location: Location, type: ProtoType)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/with-context/","title":"With context","text":"<p>//wire-schema/com.squareup.wire.schema/Linker/withContext</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/with-context/#withcontext","title":"withContext","text":"<p>[common]\\ fun withContext(context: Any): Linker</p> <p>Returns a new linker that uses context to resolve type names and report errors.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Loader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/#loader","title":"Loader","text":"<p>[common]\\ interface Loader</p> <p>Loads other files as needed by their import path.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/#functions","title":"Functions","text":"Name Summary load [common]abstract fun load(path: String): ProtoFile withErrors [common]abstract fun withErrors(errors: ErrorCollector): LoaderReturns a new loader that reports failures to errors."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/#inheritors","title":"Inheritors","text":"Name CoreLoader SchemaLoader"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/load/","title":"Load","text":"<p>//wire-schema/com.squareup.wire.schema/Loader/load</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/load/#load","title":"load","text":"<p>[common]\\ abstract fun load(path: String): ProtoFile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/with-errors/","title":"With errors","text":"<p>//wire-schema/com.squareup.wire.schema/Loader/withErrors</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/with-errors/#witherrors","title":"withErrors","text":"<p>[common]\\ abstract fun withErrors(errors: ErrorCollector): Loader</p> <p>Returns a new loader that reports failures to errors.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/#location","title":"Location","text":"<p>[common]\\ data class Location(base: String, path: String, line: Int, column: Int)</p> <p>Locates a .proto file, or a position within a .proto file, on the file system. This includes a base directory or a .jar file, and a path relative to that base.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/#constructors","title":"Constructors","text":"Location [common]fun Location(base: String, path: String, line: Int = -1, column: Int = -1)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/#functions","title":"Functions","text":"Name Summary at [common]fun at(line: Int, column: Int): Location toString [common]open override fun toString(): String withoutBase [common]fun withoutBase(): LocationReturns a copy of this location with an empty base. withPathOnly [common]fun withPathOnly(): LocationReturns a copy of this location including only its path."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/#properties","title":"Properties","text":"Name Summary base [common]val base: StringThe base of this location; typically a directory or .jar file. column [common]val column: IntThe column on the line of this location, or -1 for no specific column. line [common]val line: IntThe line number of this location, or -1 for no specific line number. path [common]val path: StringThe path to this location relative to base."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-location/","title":"location","text":"<p>//wire-schema/com.squareup.wire.schema/Location/Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-location/#location","title":"Location","text":"<p>[common]\\ fun Location(base: String, path: String, line: Int = -1, column: Int = -1)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/at/","title":"At","text":"<p>//wire-schema/com.squareup.wire.schema/Location/at</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/at/#at","title":"at","text":"<p>[common]\\ fun at(line: Int, column: Int): Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/base/","title":"Base","text":"<p>//wire-schema/com.squareup.wire.schema/Location/base</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/base/#base","title":"base","text":"<p>[common]\\ val base: String</p> <p>The base of this location; typically a directory or .jar file.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/column/","title":"Column","text":"<p>//wire-schema/com.squareup.wire.schema/Location/column</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/column/#column","title":"column","text":"<p>[common]\\ val column: Int</p> <p>The column on the line of this location, or -1 for no specific column.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/line/","title":"Line","text":"<p>//wire-schema/com.squareup.wire.schema/Location/line</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/line/#line","title":"line","text":"<p>[common]\\ val line: Int</p> <p>The line number of this location, or -1 for no specific line number.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/path/","title":"Path","text":"<p>//wire-schema/com.squareup.wire.schema/Location/path</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/path/#path","title":"path","text":"<p>[common]\\ val path: String</p> <p>The path to this location relative to base.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/to-string/","title":"To string","text":"<p>//wire-schema/com.squareup.wire.schema/Location/toString</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/to-string/#tostring","title":"toString","text":"<p>[common]\\ open override fun toString(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/with-path-only/","title":"With path only","text":"<p>//wire-schema/com.squareup.wire.schema/Location/withPathOnly</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/with-path-only/#withpathonly","title":"withPathOnly","text":"<p>[common]\\ fun withPathOnly(): Location</p> <p>Returns a copy of this location including only its path.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/without-base/","title":"Without base","text":"<p>//wire-schema/com.squareup.wire.schema/Location/withoutBase</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/without-base/#withoutbase","title":"withoutBase","text":"<p>[common]\\ fun withoutBase(): Location</p> <p>Returns a copy of this location with an empty base.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Location/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-companion/#functions","title":"Functions","text":"Name Summary get [common]@JvmStaticfun get(path: String): Location@JvmStaticfun get(base: String, path: String): Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-companion/get/","title":"Get","text":"<p>//wire-schema/com.squareup.wire.schema/Location/Companion/get</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-companion/get/#get","title":"get","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun get(path: String): Location</p> <p>@JvmStatic</p> <p>fun get(base: String, path: String): Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/MarkSet</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/#markset","title":"MarkSet","text":"<p>[common]\\ class MarkSet(pruningRules: PruningRules)</p> <p>A mark set is used in three phases:</p> <ol><li>Marking root types and root members. These are the identifiers specifically identified by     the user in the includes set. In this phase it is an error to mark a type that is excluded,     or to mark both a type and one of its members.</li><li>Marking members transitively reachable by those roots. In this phase if a member is visited,     the member's enclosing type is marked instead, unless it is of a type that has a specific     member already marked.</li><li>Retaining which members and types have been marked.</li></ol>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/#constructors","title":"Constructors","text":"MarkSet [common]fun MarkSet(pruningRules: PruningRules)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/#functions","title":"Functions","text":"Name Summary contains [common]operator fun contains(protoMember: ProtoMember): BooleanReturns true if member is marked and should be retained.[common]operator fun contains(type: ProtoType): BooleanReturns true if type is marked and should be retained. mark [common]fun mark(protoMember: ProtoMember): BooleanMarks a member as transitively reachable by the includes set. Returns true if the mark is new, the member will be retained, and reachable objects should be traversed.[common]fun mark(type: ProtoType): Booleanfun mark(type: ProtoType, reference: ProtoMember): BooleanMarks a type as transitively reachable by the includes set. Returns true if the mark is new, the type will be retained, and reachable objects should be traversed. root [common]fun root(protoMember: ProtoMember)Marks protoMember, throwing if it is explicitly excluded. This implicitly excludes other members of the same type.[common]fun root(type: ProtoType)Marks type, throwing if it is explicitly excluded."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/#properties","title":"Properties","text":"Name Summary members [common]val members: MutableMap&lt;ProtoType, MutableSet&lt;ProtoMember&gt;&gt;The members to retain. Any member not in here should be pruned! pruningRules [common]val pruningRules: PruningRules types [common]val types: MutableSet&lt;ProtoType&gt;The types to retain. We may retain a type but not all of its members."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/-mark-set/","title":"mark set","text":"<p>//wire-schema/com.squareup.wire.schema/MarkSet/MarkSet</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/-mark-set/#markset","title":"MarkSet","text":"<p>[common]\\ fun MarkSet(pruningRules: PruningRules)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/contains/","title":"Contains","text":"<p>//wire-schema/com.squareup.wire.schema/MarkSet/contains</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/contains/#contains","title":"contains","text":"<p>[common]\\ operator fun contains(type: ProtoType): Boolean</p> <p>Returns true if type is marked and should be retained.</p> <p>[common]\\ operator fun contains(protoMember: ProtoMember): Boolean</p> <p>Returns true if member is marked and should be retained.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/mark/","title":"Mark","text":"<p>//wire-schema/com.squareup.wire.schema/MarkSet/mark</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/mark/#mark","title":"mark","text":"<p>[common]\\ fun mark(type: ProtoType, reference: ProtoMember): Boolean</p> <p>Marks a type as transitively reachable by the includes set. Returns true if the mark is new, the type will be retained, and reachable objects should be traversed.</p> <p>If there is an exclude for type, non-root members referencing it will be pruned. The type itself will also be pruned unless it is referenced by a root member.</p> <p>[common]\\ fun mark(type: ProtoType): Boolean</p> <p>Marks a type as transitively reachable by the includes set. Returns true if the mark is new, the type will be retained, and reachable objects should be traversed.</p> <p>[common]\\ fun mark(protoMember: ProtoMember): Boolean</p> <p>Marks a member as transitively reachable by the includes set. Returns true if the mark is new, the member will be retained, and reachable objects should be traversed.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/members/","title":"Members","text":"<p>//wire-schema/com.squareup.wire.schema/MarkSet/members</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/members/#members","title":"members","text":"<p>[common]\\ val members: MutableMap&lt;ProtoType, MutableSet&lt;ProtoMember&gt;&gt;</p> <p>The members to retain. Any member not in here should be pruned!</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/pruning-rules/","title":"Pruning rules","text":"<p>//wire-schema/com.squareup.wire.schema/MarkSet/pruningRules</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/pruning-rules/#pruningrules","title":"pruningRules","text":"<p>[common]\\ val pruningRules: PruningRules</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/root/","title":"Root","text":"<p>//wire-schema/com.squareup.wire.schema/MarkSet/root</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/root/#root","title":"root","text":"<p>[common]\\ fun root(protoMember: ProtoMember)</p> <p>Marks protoMember, throwing if it is explicitly excluded. This implicitly excludes other members of the same type.</p> <p>[common]\\ fun root(type: ProtoType)</p> <p>Marks type, throwing if it is explicitly excluded.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/types/","title":"Types","text":"<p>//wire-schema/com.squareup.wire.schema/MarkSet/types</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/types/#types","title":"types","text":"<p>[common]\\ val types: MutableSet&lt;ProtoType&gt;</p> <p>The types to retain. We may retain a type but not all of its members.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/MarkSet/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/#messagetype","title":"MessageType","text":"<p>[common]\\ data class MessageType(type: ProtoType, location: Location, documentation: String, name: String, declaredFields: List&lt;Field&gt;, extensionFields: MutableList&lt;Field&gt;, oneOfs: List&lt;OneOf&gt;, nestedTypes: List&lt;Type&gt;, nestedExtendList: List&lt;Extend&gt;, extensionsList: List&lt;Extensions&gt;, reserveds: List&lt;Reserved&gt;, options: Options, syntax: Syntax) : Type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/#functions","title":"Functions","text":"Name Summary addExtensionFields [common]fun addExtensionFields(fields: List&lt;Field&gt;) extensionField [common]fun extensionField(qualifiedName: String): Field?Returns the field with the qualified name qualifiedName, or null if this type has no such field. extensionFieldsMap [common]fun extensionFieldsMap(): Map&lt;String, Field&gt; field [common]fun field(tag: Int): Field?Returns the field tagged tag, or null if this type has no such field.[common]fun field(name: String): Field?Returns the field named name, or null if this type has no such field. linkMembers [common]open override fun linkMembers(linker: Linker) linkOptions [common]open override fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean) retainAll [common]open override fun retainAll(schema: Schema, markSet: MarkSet): Type? retainLinked [common]open override fun retainLinked(linkedTypes: Set&lt;ProtoType&gt;, linkedFields: Set&lt;Field&gt;): Type?Returns a copy of this containing only the types in linkedTypes and extensions in linkedFields, or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. toElement [common]fun toElement(): MessageElement typesAndNestedTypes [common]fun typesAndNestedTypes(): List&lt;Type&gt;Returns all types and subtypes which are linked to the type. validate [common]open override fun validate(linker: Linker, syntaxRules: SyntaxRules)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/#properties","title":"Properties","text":"Name Summary declaredFields [common]val declaredFields: List&lt;Field&gt; documentation [common]open override val documentation: String extensionFields [common]val extensionFields: MutableList&lt;Field&gt; extensionsList [common]val extensionsList: List&lt;Extensions&gt; fields [common]@get:JvmName(name = \u201cfields\u201d)val fields: List&lt;Field&gt; fieldsAndOneOfFields [common]val fieldsAndOneOfFields: List&lt;Field&gt; isDeprecated [common]val isDeprecated: Boolean location [common]open override val location: Location name [common]open override val name: String nestedExtendList [common]open override val nestedExtendList: List&lt;Extend&gt; nestedTypes [common]open override val nestedTypes: List&lt;Type&gt; oneOfs [common]val oneOfs: List&lt;OneOf&gt; options [common]open override val options: Options requiredFields [common]val requiredFields: List&lt;Field&gt; syntax [common]open override val syntax: Syntax type [common]open override val type: ProtoType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-message-type/","title":"message type","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/MessageType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-message-type/#messagetype","title":"MessageType","text":"<p>[common]\\ fun MessageType(type: ProtoType, location: Location, documentation: String, name: String, declaredFields: List&lt;Field&gt;, extensionFields: MutableList&lt;Field&gt;, oneOfs: List&lt;OneOf&gt;, nestedTypes: List&lt;Type&gt;, nestedExtendList: List&lt;Extend&gt;, extensionsList: List&lt;Extensions&gt;, reserveds: List&lt;Reserved&gt;, options: Options, syntax: Syntax)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/add-extension-fields/","title":"Add extension fields","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/addExtensionFields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/add-extension-fields/#addextensionfields","title":"addExtensionFields","text":"<p>[common]\\ fun addExtensionFields(fields: List&lt;Field&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/declared-fields/","title":"Declared fields","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/declaredFields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/declared-fields/#declaredfields","title":"declaredFields","text":"<p>[common]\\ val declaredFields: List&lt;Field&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/documentation/#documentation","title":"documentation","text":"<p>[common]\\ open override val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-field/","title":"Extension field","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/extensionField</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-field/#extensionfield","title":"extensionField","text":"<p>[common]\\ fun extensionField(qualifiedName: String): Field?</p> <p>Returns the field with the qualified name qualifiedName, or null if this type has no such field.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-fields-map/","title":"Extension fields map","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/extensionFieldsMap</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-fields-map/#extensionfieldsmap","title":"extensionFieldsMap","text":"<p>[common]\\ fun extensionFieldsMap(): Map&lt;String, Field&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-fields/","title":"Extension fields","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/extensionFields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-fields/#extensionfields","title":"extensionFields","text":"<p>[common]\\ val extensionFields: MutableList&lt;Field&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extensions-list/","title":"Extensions list","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/extensionsList</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extensions-list/#extensionslist","title":"extensionsList","text":"<p>[common]\\ val extensionsList: List&lt;Extensions&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/field/","title":"Field","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/field</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/field/#field","title":"field","text":"<p>[common]\\ fun field(name: String): Field?</p> <p>Returns the field named name, or null if this type has no such field.</p> <p>[common]\\ fun field(tag: Int): Field?</p> <p>Returns the field tagged tag, or null if this type has no such field.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/fields-and-one-of-fields/","title":"Fields and one of fields","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/fieldsAndOneOfFields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/fields-and-one-of-fields/#fieldsandoneoffields","title":"fieldsAndOneOfFields","text":"<p>[common]\\ val fieldsAndOneOfFields: List&lt;Field&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/fields/","title":"Fields","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/fields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/fields/#fields","title":"fields","text":"<p>[common]\\</p> <p>@get:JvmName(name = \u201cfields\u201d)</p> <p>val fields: List&lt;Field&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/is-deprecated/","title":"Is deprecated","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/isDeprecated</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/is-deprecated/#isdeprecated","title":"isDeprecated","text":"<p>[common]\\ val isDeprecated: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/link-members/","title":"Link members","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/linkMembers</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/link-members/#linkmembers","title":"linkMembers","text":"<p>[common]\\ open override fun linkMembers(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/link-options/","title":"Link options","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/linkOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/link-options/#linkoptions","title":"linkOptions","text":"<p>[common]\\ open override fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/location/#location","title":"location","text":"<p>[common]\\ open override val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/name/#name","title":"name","text":"<p>[common]\\ open override val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/nested-extend-list/","title":"Nested extend list","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/nestedExtendList</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/nested-extend-list/#nestedextendlist","title":"nestedExtendList","text":"<p>[common]\\ open override val nestedExtendList: List&lt;Extend&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/nested-types/","title":"Nested types","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/nestedTypes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/nested-types/#nestedtypes","title":"nestedTypes","text":"<p>[common]\\ open override val nestedTypes: List&lt;Type&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/one-ofs/","title":"One ofs","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/oneOfs</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/one-ofs/#oneofs","title":"oneOfs","text":"<p>[common]\\ val oneOfs: List&lt;OneOf&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/options/#options","title":"options","text":"<p>[common]\\ open override val options: Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/required-fields/","title":"Required fields","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/requiredFields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/required-fields/#requiredfields","title":"requiredFields","text":"<p>[common]\\ val requiredFields: List&lt;Field&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\ open override fun retainAll(schema: Schema, markSet: MarkSet): Type?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/retain-linked/","title":"Retain linked","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/retainLinked</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/retain-linked/#retainlinked","title":"retainLinked","text":"<p>[common]\\ open override fun retainLinked(linkedTypes: Set&lt;ProtoType&gt;, linkedFields: Set&lt;Field&gt;): Type?</p> <p>Returns a copy of this containing only the types in linkedTypes and extensions in linkedFields, or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked.</p> <p>The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/syntax/","title":"Syntax","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/syntax</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/syntax/#syntax","title":"syntax","text":"<p>[common]\\ open override val syntax: Syntax</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/to-element/","title":"To element","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/toElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/to-element/#toelement","title":"toElement","text":"<p>[common]\\ fun toElement(): MessageElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/type/","title":"Type","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/type/#type","title":"type","text":"<p>[common]\\ open override val type: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/validate/","title":"Validate","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/validate</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/validate/#validate","title":"validate","text":"<p>[common]\\ open override fun validate(linker: Linker, syntaxRules: SyntaxRules)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-companion/#functions","title":"Functions","text":"Name Summary fromElement [common]@JvmStaticfun fromElement(namespaces: List&lt;String&gt;, protoType: ProtoType, messageElement: MessageElement, syntax: Syntax): MessageType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-companion/from-element/","title":"From element","text":"<p>//wire-schema/com.squareup.wire.schema/MessageType/Companion/fromElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-companion/from-element/#fromelement","title":"fromElement","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun fromElement(namespaces: List&lt;String&gt;, protoType: ProtoType, messageElement: MessageElement, syntax: Syntax): MessageType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Multimap</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/#multimap","title":"Multimap","text":"<p>[common, js]\\ interface Multimap&lt;K, V&gt;</p> <p>[jvm]\\ typealias Multimap = Multimap&lt;K, V&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/#functions","title":"Functions","text":"Name Summary asMap [common, js][common, js]abstract fun asMap(): Map&lt;K, Collection&lt;V&gt;&gt; containsKey [common, js][common, js]abstract fun containsKey(key: Any?): Boolean containsValue [common, js][common, js]abstract fun containsValue(value: Any?): Boolean get [common, js][common, js]abstract operator fun get(key: K?): Collection&lt;V&gt; isEmpty [common, js][common, js]abstract fun isEmpty(): Boolean size [common, js][common, js]abstract fun size(): Int values [common, js][common, js]abstract fun values(): Collection&lt;V&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/as-map/","title":"As map","text":"<p>//wire-schema/com.squareup.wire.schema/Multimap/asMap</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/as-map/#asmap","title":"asMap","text":"<p>[common, js]\\ [common, js]\\ abstract fun asMap(): Map&lt;K, Collection&lt;V&gt;&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/contains-key/","title":"Contains key","text":"<p>//wire-schema/com.squareup.wire.schema/Multimap/containsKey</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/contains-key/#containskey","title":"containsKey","text":"<p>[common, js]\\ [common, js]\\ abstract fun containsKey(key: Any?): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/contains-value/","title":"Contains value","text":"<p>//wire-schema/com.squareup.wire.schema/Multimap/containsValue</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/contains-value/#containsvalue","title":"containsValue","text":"<p>[common, js]\\ [common, js]\\ abstract fun containsValue(value: Any?): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/get/","title":"Get","text":"<p>//wire-schema/com.squareup.wire.schema/Multimap/get</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/get/#get","title":"get","text":"<p>[common, js]\\ [common, js]\\ abstract operator fun get(key: K?): Collection&lt;V&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/is-empty/","title":"Is empty","text":"<p>//wire-schema/com.squareup.wire.schema/Multimap/isEmpty</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/is-empty/#isempty","title":"isEmpty","text":"<p>[common, js]\\ [common, js]\\ abstract fun isEmpty(): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/size/","title":"Size","text":"<p>//wire-schema/com.squareup.wire.schema/Multimap/size</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/size/#size","title":"size","text":"<p>[common, js]\\ [common, js]\\ abstract fun size(): Int</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/values/","title":"Values","text":"<p>//wire-schema/com.squareup.wire.schema/Multimap/values</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/values/#values","title":"values","text":"<p>[common, js]\\ [common, js]\\ abstract fun values(): Collection&lt;V&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/#oneof","title":"OneOf","text":"<p>[common]\\ data class OneOf(name: String, documentation: String, fields: List&lt;Field&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/#functions","title":"Functions","text":"Name Summary link [common]fun link(linker: Linker) linkOptions [common]fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean) retainAll [common]fun retainAll(schema: Schema, markSet: MarkSet, enclosingType: ProtoType): OneOf? retainLinked [common]fun retainLinked(): OneOf?"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String fields [common]val fields: List&lt;Field&gt; name [common]val name: String"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-one-of/","title":"one of","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf/OneOf</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-one-of/#oneof","title":"OneOf","text":"<p>[common]\\ fun OneOf(name: String, documentation: String, fields: List&lt;Field&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/fields/","title":"Fields","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf/fields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/fields/#fields","title":"fields","text":"<p>[common]\\ val fields: List&lt;Field&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/link-options/","title":"Link options","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf/linkOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/link-options/#linkoptions","title":"linkOptions","text":"<p>[common]\\ fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/link/","title":"Link","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf/link</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/link/#link","title":"link","text":"<p>[common]\\ fun link(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\ fun retainAll(schema: Schema, markSet: MarkSet, enclosingType: ProtoType): OneOf?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/retain-linked/","title":"Retain linked","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf/retainLinked</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/retain-linked/#retainlinked","title":"retainLinked","text":"<p>[common]\\ fun retainLinked(): OneOf?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/#functions","title":"Functions","text":"Name Summary fromElements [common]@JvmStaticfun fromElements(namespaces: List&lt;String&gt;, elements: List&lt;OneOfElement&gt;): List&lt;OneOf&gt; toElements [common]@JvmStaticfun toElements(oneOfs: List&lt;OneOf&gt;): List&lt;OneOfElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/from-elements/","title":"From elements","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf/Companion/fromElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/from-elements/#fromelements","title":"fromElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun fromElements(namespaces: List&lt;String&gt;, elements: List&lt;OneOfElement&gt;): List&lt;OneOf&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/to-elements/","title":"To elements","text":"<p>//wire-schema/com.squareup.wire.schema/OneOf/Companion/toElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/to-elements/#toelements","title":"toElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun toElements(oneOfs: List&lt;OneOf&gt;): List&lt;OneOfElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/#options","title":"Options","text":"<p>[common]\\ class Options(optionType: ProtoType, optionElements: List&lt;OptionElement&gt;)</p> <p>A set of options declared on a message declaration, field declaration, enum declaration, enum constant declaration, service declaration, RPC method declaration, or proto file declaration. Options values may be arbitrary protocol buffer messages, but must be valid protocol buffer messages.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/#constructors","title":"Constructors","text":"Options [common]fun Options(optionType: ProtoType, optionElements: List&lt;OptionElement&gt;)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/#functions","title":"Functions","text":"Name Summary fields [common]fun fields(): Multimap&lt;ProtoType, ProtoMember&gt;fun fields(pruningRules: PruningRules): Multimap&lt;ProtoType, ProtoMember&gt; get [common]fun get(protoMember: ProtoMember): Any? link [common]fun link(linker: Linker, location: Location, validate: Boolean) optionMatches [common]fun optionMatches(namePattern: String, valuePattern: String): BooleanReturns true if any of the options in entries matches both of the regular expressions provided: its name matches the option\u2019s name and its value matches the option\u2019s value. retainAll [common]fun retainAll(schema: Schema, markSet: MarkSet): Options retainLinked [common]fun retainLinked(): Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/#properties","title":"Properties","text":"Name Summary elements [common]val elements: List&lt;OptionElement&gt; map [common]val map: Map&lt;ProtoMember, Any?&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-options/","title":"options","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-options/#options","title":"Options","text":"<p>[common]\\ fun Options(optionType: ProtoType, optionElements: List&lt;OptionElement&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/elements/","title":"Elements","text":"<p>//wire-schema/com.squareup.wire.schema/Options/elements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/elements/#elements","title":"elements","text":"<p>[common]\\ val elements: List&lt;OptionElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/fields/","title":"Fields","text":"<p>//wire-schema/com.squareup.wire.schema/Options/fields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/fields/#fields","title":"fields","text":"<p>[common]\\ fun fields(): Multimap&lt;ProtoType, ProtoMember&gt;</p> <p>fun fields(pruningRules: PruningRules): Multimap&lt;ProtoType, ProtoMember&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/get/","title":"Get","text":"<p>//wire-schema/com.squareup.wire.schema/Options/get</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/get/#get","title":"get","text":"<p>[common]\\ fun get(protoMember: ProtoMember): Any?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/link/","title":"Link","text":"<p>//wire-schema/com.squareup.wire.schema/Options/link</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/link/#link","title":"link","text":"<p>[common]\\ fun link(linker: Linker, location: Location, validate: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/map/","title":"Map","text":"<p>//wire-schema/com.squareup.wire.schema/Options/map</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/map/#map","title":"map","text":"<p>[common]\\ val map: Map&lt;ProtoMember, Any?&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/option-matches/","title":"Option matches","text":"<p>//wire-schema/com.squareup.wire.schema/Options/optionMatches</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/option-matches/#optionmatches","title":"optionMatches","text":"<p>[common]\\ fun optionMatches(namePattern: String, valuePattern: String): Boolean</p> <p>Returns true if any of the options in entries matches both of the regular expressions provided: its name matches the option\u2019s name and its value matches the option\u2019s value.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/Options/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\ fun retainAll(schema: Schema, markSet: MarkSet): Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/retain-linked/","title":"Retain linked","text":"<p>//wire-schema/com.squareup.wire.schema/Options/retainLinked</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/retain-linked/#retainlinked","title":"retainLinked","text":"<p>[common]\\ fun retainLinked(): Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/#functions","title":"Functions","text":"Name Summary resolveFieldPath [common]fun resolveFieldPath(name: String, fullyQualifiedNames: Set&lt;String?&gt;): Array&lt;String&gt;?Given a path like a.b.c.d and a set of paths like {a.b.c, a.f.g, h.j}, this returns the original path split on dots such that the first element is in the set. For the above example it would return the array [a.b.c, d]."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/#properties","title":"Properties","text":"Name Summary ENUM_OPTIONS [common]@JvmFieldval ENUM_OPTIONS: ProtoType ENUM_VALUE_OPTIONS [common]@JvmFieldval ENUM_VALUE_OPTIONS: ProtoType FIELD_OPTIONS [common]@JvmFieldval FIELD_OPTIONS: ProtoType FILE_OPTIONS [common]@JvmFieldval FILE_OPTIONS: ProtoType GOOGLE_PROTOBUF_OPTION_TYPES [common]val GOOGLE_PROTOBUF_OPTION_TYPES: Array&lt;ProtoType&gt; MESSAGE_OPTIONS [common]@JvmFieldval MESSAGE_OPTIONS: ProtoType METHOD_OPTIONS [common]@JvmFieldval METHOD_OPTIONS: ProtoType ONEOF_OPTIONS [common]@JvmFieldval ONEOF_OPTIONS: ProtoType SERVICE_OPTIONS [common]@JvmFieldval SERVICE_OPTIONS: ProtoType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-e-n-u-m_-o-p-t-i-o-n-s/","title":"e n u m  o p t i o n s","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Companion/ENUM_OPTIONS</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-e-n-u-m_-o-p-t-i-o-n-s/#enum_options","title":"ENUM_OPTIONS","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val ENUM_OPTIONS: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-e-n-u-m_-v-a-l-u-e_-o-p-t-i-o-n-s/","title":"e n u m  v a l u e  o p t i o n s","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Companion/ENUM_VALUE_OPTIONS</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-e-n-u-m_-v-a-l-u-e_-o-p-t-i-o-n-s/#enum_value_options","title":"ENUM_VALUE_OPTIONS","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val ENUM_VALUE_OPTIONS: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-f-i-e-l-d_-o-p-t-i-o-n-s/","title":"f i e l d  o p t i o n s","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Companion/FIELD_OPTIONS</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-f-i-e-l-d_-o-p-t-i-o-n-s/#field_options","title":"FIELD_OPTIONS","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val FIELD_OPTIONS: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-f-i-l-e_-o-p-t-i-o-n-s/","title":"f i l e  o p t i o n s","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Companion/FILE_OPTIONS</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-f-i-l-e_-o-p-t-i-o-n-s/#file_options","title":"FILE_OPTIONS","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val FILE_OPTIONS: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-g-o-o-g-l-e_-p-r-o-t-o-b-u-f_-o-p-t-i-o-n_-t-y-p-e-s/","title":"g o o g l e  p r o t o b u f  o p t i o n  t y p e s","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Companion/GOOGLE_PROTOBUF_OPTION_TYPES</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-g-o-o-g-l-e_-p-r-o-t-o-b-u-f_-o-p-t-i-o-n_-t-y-p-e-s/#google_protobuf_option_types","title":"GOOGLE_PROTOBUF_OPTION_TYPES","text":"<p>[common]\\ val GOOGLE_PROTOBUF_OPTION_TYPES: Array&lt;ProtoType&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-m-e-s-s-a-g-e_-o-p-t-i-o-n-s/","title":"m e s s a g e  o p t i o n s","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Companion/MESSAGE_OPTIONS</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-m-e-s-s-a-g-e_-o-p-t-i-o-n-s/#message_options","title":"MESSAGE_OPTIONS","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val MESSAGE_OPTIONS: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-m-e-t-h-o-d_-o-p-t-i-o-n-s/","title":"m e t h o d  o p t i o n s","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Companion/METHOD_OPTIONS</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-m-e-t-h-o-d_-o-p-t-i-o-n-s/#method_options","title":"METHOD_OPTIONS","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val METHOD_OPTIONS: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-o-n-e-o-f_-o-p-t-i-o-n-s/","title":"o n e o f  o p t i o n s","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Companion/ONEOF_OPTIONS</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-o-n-e-o-f_-o-p-t-i-o-n-s/#oneof_options","title":"ONEOF_OPTIONS","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val ONEOF_OPTIONS: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-s-e-r-v-i-c-e_-o-p-t-i-o-n-s/","title":"s e r v i c e  o p t i o n s","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Companion/SERVICE_OPTIONS</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-s-e-r-v-i-c-e_-o-p-t-i-o-n-s/#service_options","title":"SERVICE_OPTIONS","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val SERVICE_OPTIONS: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/resolve-field-path/","title":"Resolve field path","text":"<p>//wire-schema/com.squareup.wire.schema/Options/Companion/resolveFieldPath</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/resolve-field-path/#resolvefieldpath","title":"resolveFieldPath","text":"<p>[common]\\ fun resolveFieldPath(name: String, fullyQualifiedNames: Set&lt;String?&gt;): Array&lt;String&gt;?</p> <p>Given a path like a.b.c.d and a set of paths like {a.b.c, a.f.g, h.j}, this returns the original path split on dots such that the first element is in the set. For the above example it would return the array [a.b.c, d].</p> <p>Typically the input path is a package name like a.b, followed by a dot and a sequence of field names. The first field name is an extension field; subsequent field names make a path within that extension.</p> <p>https://developers.google.com/protocol-buffers/docs/overview?hl=en#packages_and_name_resolution Names can be prefixed with a . when the search should start from the outermost scope.</p> <p>Note that a single input may yield multiple possible answers, such as when package names and field names collide. This method prefers shorter package names though that is an implementation detail.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Profile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/#profile","title":"Profile","text":"<p>[common]\\ class Profile(profileFiles: List&lt;ProfileFileElement&gt;)</p> <p>[js]\\ class Profile(profileFiles: List&lt;ProfileFileElement&gt;)</p> <p>[jvm]\\ class Profile(profileFiles: List&lt;ProfileFileElement&gt;)</p> <p>Describes how to map .proto to .java. A single repository of .proto files may have multiple profiles; for example a project may target both Android and Java.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/#constructors","title":"Constructors","text":"Profile [common]fun Profile(profileFiles: List&lt;ProfileFileElement&gt; = emptyList())[js, jvm]fun Profile(profileFiles: List&lt;ProfileFileElement&gt; = emptyList())"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/#functions","title":"Functions","text":"Name Summary getAdapter [jvm]fun getAdapter(type: ProtoType): AdapterConstant? javaTarget [jvm]fun javaTarget(type: ProtoType): TypeName? kotlinTarget [jvm]fun kotlinTarget(type: ProtoType): TypeName?"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/-profile/","title":"profile","text":"<p>//wire-schema/com.squareup.wire.schema/Profile/Profile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/-profile/#profile","title":"Profile","text":"<p>[common, js, jvm]\\ [common]\\ fun Profile(profileFiles: List&lt;ProfileFileElement&gt; = emptyList())</p> <p>[js, jvm]\\ fun Profile(profileFiles: List&lt;ProfileFileElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/get-adapter/","title":"Get adapter","text":"<p>//wire-schema/com.squareup.wire.schema/Profile/getAdapter</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/get-adapter/#getadapter","title":"getAdapter","text":"<p>[jvm]\\ fun getAdapter(type: ProtoType): AdapterConstant?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/java-target/","title":"Java target","text":"<p>//wire-schema/com.squareup.wire.schema/Profile/javaTarget</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/java-target/#javatarget","title":"javaTarget","text":"<p>[jvm]\\ fun javaTarget(type: ProtoType): TypeName?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/kotlin-target/","title":"Kotlin target","text":"<p>//wire-schema/com.squareup.wire.schema/Profile/kotlinTarget</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/kotlin-target/#kotlintarget","title":"kotlinTarget","text":"<p>[jvm]\\ fun kotlinTarget(type: ProtoType): TypeName?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/ProfileLoader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/#profileloader","title":"ProfileLoader","text":"<p>[common]\\ interface ProfileLoader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/#functions","title":"Functions","text":"Name Summary loadProfile [common]abstract fun loadProfile(name: String, schema: Schema): Profile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/#inheritors","title":"Inheritors","text":"Name SchemaLoader"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/load-profile/","title":"Load profile","text":"<p>//wire-schema/com.squareup.wire.schema/ProfileLoader/loadProfile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/load-profile/#loadprofile","title":"loadProfile","text":"<p>[common]\\ abstract fun loadProfile(name: String, schema: Schema): Profile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/#protofile","title":"ProtoFile","text":"<p>[common]\\ data class ProtoFile(location: Location, imports: List&lt;String&gt;, publicImports: List&lt;String&gt;, packageName: String?, types: List&lt;Type&gt;, services: List&lt;Service&gt;, extendList: List&lt;Extend&gt;, options: Options, syntax: Syntax?)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/#functions","title":"Functions","text":"Name Summary javaPackage [common]fun javaPackage(): String? linkOptions [common]fun linkOptions(linker: Linker, validate: Boolean) name [common]fun name(): StringReturns the name of this proto file, like simple_message for squareup/protos/person/simple_message.proto. retainAll [common]fun retainAll(schema: Schema, markSet: MarkSet): ProtoFileReturns a new proto file that omits types, services, extensions, and options not in pruningRules. retainImports [common]fun retainImports(retained: List&lt;ProtoFile&gt;): ProtoFileReturns a new proto file that omits unnecessary imports. retainLinked [common]fun retainLinked(linkedTypes: Set&lt;ProtoType&gt;, linkedFields: Set&lt;Field&gt;): ProtoFileReturn a copy of this file with only the marked types. toElement [common]fun toElement(): ProtoFileElement toSchema [common]fun toSchema(): String toString [common]open override fun toString(): String typesAndNestedTypes [common]fun typesAndNestedTypes(): List&lt;Type&gt;Returns all types and subtypes which are found in the proto file. wirePackage [common]fun wirePackage(): String?"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/#properties","title":"Properties","text":"Name Summary extendList [common]val extendList: List&lt;Extend&gt; imports [common]val imports: List&lt;String&gt; location [common]val location: Location options [common]val options: Options packageName [common]val packageName: String? publicImports [common]val publicImports: List&lt;String&gt; services [common]val services: List&lt;Service&gt; syntax [common]val syntax: Syntax? types [common]val types: List&lt;Type&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-proto-file/","title":"proto file","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/ProtoFile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-proto-file/#protofile","title":"ProtoFile","text":"<p>[common]\\ fun ProtoFile(location: Location, imports: List&lt;String&gt;, publicImports: List&lt;String&gt;, packageName: String?, types: List&lt;Type&gt;, services: List&lt;Service&gt;, extendList: List&lt;Extend&gt;, options: Options, syntax: Syntax?)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/extend-list/","title":"Extend list","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/extendList</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/extend-list/#extendlist","title":"extendList","text":"<p>[common]\\ val extendList: List&lt;Extend&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/imports/","title":"Imports","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/imports</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/imports/#imports","title":"imports","text":"<p>[common]\\ val imports: List&lt;String&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/java-package/","title":"Java package","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/javaPackage</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/java-package/#javapackage","title":"javaPackage","text":"<p>[common]\\ fun javaPackage(): String?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/link-options/","title":"Link options","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/linkOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/link-options/#linkoptions","title":"linkOptions","text":"<p>[common]\\ fun linkOptions(linker: Linker, validate: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/name/#name","title":"name","text":"<p>[common]\\ fun name(): String</p> <p>Returns the name of this proto file, like simple_message for squareup/protos/person/simple_message.proto.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/options/#options","title":"options","text":"<p>[common]\\ val options: Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/package-name/","title":"Package name","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/packageName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/package-name/#packagename","title":"packageName","text":"<p>[common]\\ val packageName: String?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/public-imports/","title":"Public imports","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/publicImports</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/public-imports/#publicimports","title":"publicImports","text":"<p>[common]\\ val publicImports: List&lt;String&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\ fun retainAll(schema: Schema, markSet: MarkSet): ProtoFile</p> <p>Returns a new proto file that omits types, services, extensions, and options not in pruningRules.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-imports/","title":"Retain imports","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/retainImports</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-imports/#retainimports","title":"retainImports","text":"<p>[common]\\ fun retainImports(retained: List&lt;ProtoFile&gt;): ProtoFile</p> <p>Returns a new proto file that omits unnecessary imports.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-linked/","title":"Retain linked","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/retainLinked</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-linked/#retainlinked","title":"retainLinked","text":"<p>[common]\\ fun retainLinked(linkedTypes: Set&lt;ProtoType&gt;, linkedFields: Set&lt;Field&gt;): ProtoFile</p> <p>Return a copy of this file with only the marked types.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/services/","title":"Services","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/services</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/services/#services","title":"services","text":"<p>[common]\\ val services: List&lt;Service&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/syntax/","title":"Syntax","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/syntax</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/syntax/#syntax","title":"syntax","text":"<p>[common]\\ val syntax: Syntax?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-element/","title":"To element","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/toElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-element/#toelement","title":"toElement","text":"<p>[common]\\ fun toElement(): ProtoFileElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-string/","title":"To string","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/toString</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-string/#tostring","title":"toString","text":"<p>[common]\\ open override fun toString(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/types-and-nested-types/","title":"Types and nested types","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/typesAndNestedTypes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/types-and-nested-types/#typesandnestedtypes","title":"typesAndNestedTypes","text":"<p>[common]\\ fun typesAndNestedTypes(): List&lt;Type&gt;</p> <p>Returns all types and subtypes which are found in the proto file.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/types/","title":"Types","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/types</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/types/#types","title":"types","text":"<p>[common]\\ val types: List&lt;Type&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/wire-package/","title":"Wire package","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/wirePackage</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/wire-package/#wirepackage","title":"wirePackage","text":"<p>[common]\\ fun wirePackage(): String?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/#functions","title":"Functions","text":"Name Summary get [common]fun get(protoFileElement: ProtoFileElement): ProtoFile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/#properties","title":"Properties","text":"Name Summary JAVA_PACKAGE [common]val JAVA_PACKAGE: ProtoMember WIRE_PACKAGE [common]val WIRE_PACKAGE: ProtoMember"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/-j-a-v-a_-p-a-c-k-a-g-e/","title":"j a v a  p a c k a g e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/Companion/JAVA_PACKAGE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/-j-a-v-a_-p-a-c-k-a-g-e/#java_package","title":"JAVA_PACKAGE","text":"<p>[common]\\ val JAVA_PACKAGE: ProtoMember</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/-w-i-r-e_-p-a-c-k-a-g-e/","title":"w i r e  p a c k a g e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/Companion/WIRE_PACKAGE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/-w-i-r-e_-p-a-c-k-a-g-e/#wire_package","title":"WIRE_PACKAGE","text":"<p>[common]\\ val WIRE_PACKAGE: ProtoMember</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/get/","title":"Get","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoFile/Companion/get</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/get/#get","title":"get","text":"<p>[common]\\ fun get(protoFileElement: ProtoFileElement): ProtoFile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoMember</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/#protomember","title":"ProtoMember","text":"<p>[common]\\ class ProtoMember</p> <p>Identifies a field, enum or RPC on a declaring type. Members are encoded as strings containing a type name, a hash, and a member name, like squareup.dinosaurs.Dinosaur#length_meters.</p> <p>A member\u2019s name is typically a simple name like \u201clength_meters\u201d or \u201cpacked\u201d. If the member field is an extension to its type, that name is prefixed with its enclosing package. This yields a member name with two packages, like google.protobuf.FieldOptions#squareup.units.unit.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/#functions","title":"Functions","text":"Name Summary equals [common]open operator override fun equals(other: Any?): Boolean hashCode [common]open override fun hashCode(): Int toString [common]open override fun toString(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/#properties","title":"Properties","text":"Name Summary member [common]val member: String simpleName [common]val simpleName: String type [common]val type: ProtoType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/equals/","title":"Equals","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoMember/equals</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/equals/#equals","title":"equals","text":"<p>[common]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/hash-code/","title":"Hash code","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoMember/hashCode</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/hash-code/#hashcode","title":"hashCode","text":"<p>[common]\\ open override fun hashCode(): Int</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/member/","title":"Member","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoMember/member</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/member/#member","title":"member","text":"<p>[common]\\ val member: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/simple-name/","title":"Simple name","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoMember/simpleName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/simple-name/#simplename","title":"simpleName","text":"<p>[common]\\ val simpleName: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/to-string/","title":"To string","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoMember/toString</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/to-string/#tostring","title":"toString","text":"<p>[common]\\ open override fun toString(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/type/","title":"Type","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoMember/type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/type/#type","title":"type","text":"<p>[common]\\ val type: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoMember/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/-companion/#functions","title":"Functions","text":"Name Summary get [common]@JvmStaticfun get(typeAndMember: String): ProtoMember@JvmStaticfun get(type: ProtoType, field: Field): ProtoMember@JvmStaticfun get(type: ProtoType, member: String): ProtoMember"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/-companion/get/","title":"Get","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoMember/Companion/get</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/-companion/get/#get","title":"get","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun get(typeAndMember: String): ProtoMember</p> <p>@JvmStatic</p> <p>fun get(type: ProtoType, member: String): ProtoMember</p> <p>@JvmStatic</p> <p>fun get(type: ProtoType, field: Field): ProtoMember</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/#prototype","title":"ProtoType","text":"<p>[common]\\ class ProtoType</p> <p>Names a protocol buffer message, enumerated type, service, map, or a scalar. This class models a fully-qualified name using the protocol buffer package.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/#functions","title":"Functions","text":"Name Summary equals [common]open operator override fun equals(other: Any?): Boolean hashCode [common]open override fun hashCode(): Int nestedType [common]fun nestedType(name: String?): ProtoType toString [common]open override fun toString(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/#properties","title":"Properties","text":"Name Summary enclosingTypeOrPackage [common]val enclosingTypeOrPackage: String?Returns the enclosing type, or null if this type is not nested in another type. isMap [common]val isMap: Boolean isScalar [common]val isScalar: Boolean isWrapper [common]val isWrapper: BooleanTrue if this type is defined in google/protobuf/wrappers.proto. keyType [common]val keyType: ProtoType?The type of the map\u2019s keys. Only present when isMap is true. simpleName [common]val simpleName: String typeUrl [common]val typeUrl: String?Returns a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is a scalar or a map. Note that this returns a non-null string for enums because it doesn\u2019t know if the named type is a message or an enum. valueType [common]val valueType: ProtoType?The type of the map\u2019s values. Only present when isMap is true."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/enclosing-type-or-package/","title":"Enclosing type or package","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/enclosingTypeOrPackage</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/enclosing-type-or-package/#enclosingtypeorpackage","title":"enclosingTypeOrPackage","text":"<p>[common]\\ val enclosingTypeOrPackage: String?</p> <p>Returns the enclosing type, or null if this type is not nested in another type.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/equals/","title":"Equals","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/equals</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/equals/#equals","title":"equals","text":"<p>[common]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/hash-code/","title":"Hash code","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/hashCode</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/hash-code/#hashcode","title":"hashCode","text":"<p>[common]\\ open override fun hashCode(): Int</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-map/","title":"Is map","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/isMap</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-map/#ismap","title":"isMap","text":"<p>[common]\\ val isMap: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-scalar/","title":"Is scalar","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/isScalar</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-scalar/#isscalar","title":"isScalar","text":"<p>[common]\\ val isScalar: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-wrapper/","title":"Is wrapper","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/isWrapper</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-wrapper/#iswrapper","title":"isWrapper","text":"<p>[common]\\ val isWrapper: Boolean</p> <p>True if this type is defined in google/protobuf/wrappers.proto.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/key-type/","title":"Key type","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/keyType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/key-type/#keytype","title":"keyType","text":"<p>[common]\\ val keyType: ProtoType?</p> <p>The type of the map\u2019s keys. Only present when isMap is true.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/nested-type/","title":"Nested type","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/nestedType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/nested-type/#nestedtype","title":"nestedType","text":"<p>[common]\\ fun nestedType(name: String?): ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/simple-name/","title":"Simple name","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/simpleName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/simple-name/#simplename","title":"simpleName","text":"<p>[common]\\ val simpleName: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/to-string/","title":"To string","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/toString</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/to-string/#tostring","title":"toString","text":"<p>[common]\\ open override fun toString(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/type-url/","title":"Type url","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/typeUrl</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/type-url/#typeurl","title":"typeUrl","text":"<p>[common]\\ val typeUrl: String?</p> <p>Returns a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is a scalar or a map. Note that this returns a non-null string for enums because it doesn\u2019t know if the named type is a message or an enum.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/value-type/","title":"Value type","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/valueType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/value-type/#valuetype","title":"valueType","text":"<p>[common]\\ val valueType: ProtoType?</p> <p>The type of the map\u2019s values. Only present when isMap is true.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/#functions","title":"Functions","text":"Name Summary get [common]@JvmStaticfun get(name: String?): ProtoType@JvmStaticfun get(enclosingTypeOrPackage: String?, typeName: String): ProtoType@JvmStaticfun get(keyType: ProtoType, valueType: ProtoType, name: String): ProtoType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/#properties","title":"Properties","text":"Name Summary ANY [common]@JvmFieldval ANY: ProtoType BOOL [common]@JvmFieldval BOOL: ProtoType BOOL_VALUE [common]@JvmFieldval BOOL_VALUE: ProtoType BYTES [common]@JvmFieldval BYTES: ProtoType BYTES_VALUE [common]@JvmFieldval BYTES_VALUE: ProtoType DOUBLE [common]@JvmFieldval DOUBLE: ProtoType DOUBLE_VALUE [common]@JvmFieldval DOUBLE_VALUE: ProtoType DURATION [common]@JvmFieldval DURATION: ProtoType EMPTY [common]@JvmFieldval EMPTY: ProtoType FIXED32 [common]@JvmFieldval FIXED32: ProtoType FIXED64 [common]@JvmFieldval FIXED64: ProtoType FLOAT [common]@JvmFieldval FLOAT: ProtoType FLOAT_VALUE [common]@JvmFieldval FLOAT_VALUE: ProtoType INT32 [common]@JvmFieldval INT32: ProtoType INT32_VALUE [common]@JvmFieldval INT32_VALUE: ProtoType INT64 [common]@JvmFieldval INT64: ProtoType INT64_VALUE [common]@JvmFieldval INT64_VALUE: ProtoType SFIXED32 [common]@JvmFieldval SFIXED32: ProtoType SFIXED64 [common]@JvmFieldval SFIXED64: ProtoType SINT32 [common]@JvmFieldval SINT32: ProtoType SINT64 [common]@JvmFieldval SINT64: ProtoType STRING [common]@JvmFieldval STRING: ProtoType STRING_VALUE [common]@JvmFieldval STRING_VALUE: ProtoType STRUCT_LIST [common]@JvmFieldval STRUCT_LIST: ProtoType STRUCT_MAP [common]@JvmFieldval STRUCT_MAP: ProtoType STRUCT_NULL [common]@JvmFieldval STRUCT_NULL: ProtoType STRUCT_VALUE [common]@JvmFieldval STRUCT_VALUE: ProtoType TIMESTAMP [common]@JvmFieldval TIMESTAMP: ProtoType UINT32 [common]@JvmFieldval UINT32: ProtoType UINT32_VALUE [common]@JvmFieldval UINT32_VALUE: ProtoType UINT64 [common]@JvmFieldval UINT64: ProtoType UINT64_VALUE [common]@JvmFieldval UINT64_VALUE: ProtoType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-a-n-y/","title":"a n y","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/ANY</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-a-n-y/#any","title":"ANY","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val ANY: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-o-o-l/","title":"b o o l","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/BOOL</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-o-o-l/#bool","title":"BOOL","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val BOOL: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-o-o-l_-v-a-l-u-e/","title":"b o o l  v a l u e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/BOOL_VALUE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-o-o-l_-v-a-l-u-e/#bool_value","title":"BOOL_VALUE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val BOOL_VALUE: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-y-t-e-s/","title":"b y t e s","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/BYTES</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-y-t-e-s/#bytes","title":"BYTES","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val BYTES: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-y-t-e-s_-v-a-l-u-e/","title":"b y t e s  v a l u e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/BYTES_VALUE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-y-t-e-s_-v-a-l-u-e/#bytes_value","title":"BYTES_VALUE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val BYTES_VALUE: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-o-u-b-l-e/","title":"d o u b l e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/DOUBLE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-o-u-b-l-e/#double","title":"DOUBLE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val DOUBLE: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-o-u-b-l-e_-v-a-l-u-e/","title":"d o u b l e  v a l u e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/DOUBLE_VALUE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-o-u-b-l-e_-v-a-l-u-e/#double_value","title":"DOUBLE_VALUE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val DOUBLE_VALUE: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-u-r-a-t-i-o-n/","title":"d u r a t i o n","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/DURATION</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-u-r-a-t-i-o-n/#duration","title":"DURATION","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val DURATION: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-e-m-p-t-y/","title":"e m p t y","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/EMPTY</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-e-m-p-t-y/#empty","title":"EMPTY","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val EMPTY: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-i-x-e-d32/","title":"f i x e d32","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/FIXED32</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-i-x-e-d32/#fixed32","title":"FIXED32","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val FIXED32: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-i-x-e-d64/","title":"f i x e d64","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/FIXED64</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-i-x-e-d64/#fixed64","title":"FIXED64","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val FIXED64: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-l-o-a-t/","title":"f l o a t","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/FLOAT</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-l-o-a-t/#float","title":"FLOAT","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val FLOAT: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-l-o-a-t_-v-a-l-u-e/","title":"f l o a t  v a l u e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/FLOAT_VALUE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-l-o-a-t_-v-a-l-u-e/#float_value","title":"FLOAT_VALUE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val FLOAT_VALUE: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t32/","title":"i n t32","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/INT32</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t32/#int32","title":"INT32","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val INT32: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t32_-v-a-l-u-e/","title":"i n t32  v a l u e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/INT32_VALUE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t32_-v-a-l-u-e/#int32_value","title":"INT32_VALUE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val INT32_VALUE: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t64/","title":"i n t64","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/INT64</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t64/#int64","title":"INT64","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val INT64: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t64_-v-a-l-u-e/","title":"i n t64  v a l u e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/INT64_VALUE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t64_-v-a-l-u-e/#int64_value","title":"INT64_VALUE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val INT64_VALUE: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-f-i-x-e-d32/","title":"s f i x e d32","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/SFIXED32</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-f-i-x-e-d32/#sfixed32","title":"SFIXED32","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val SFIXED32: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-f-i-x-e-d64/","title":"s f i x e d64","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/SFIXED64</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-f-i-x-e-d64/#sfixed64","title":"SFIXED64","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val SFIXED64: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-i-n-t32/","title":"s i n t32","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/SINT32</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-i-n-t32/#sint32","title":"SINT32","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val SINT32: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-i-n-t64/","title":"s i n t64","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/SINT64</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-i-n-t64/#sint64","title":"SINT64","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val SINT64: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-i-n-g/","title":"s t r i n g","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/STRING</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-i-n-g/#string","title":"STRING","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val STRING: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-i-n-g_-v-a-l-u-e/","title":"s t r i n g  v a l u e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/STRING_VALUE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-i-n-g_-v-a-l-u-e/#string_value","title":"STRING_VALUE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val STRING_VALUE: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-l-i-s-t/","title":"s t r u c t  l i s t","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/STRUCT_LIST</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-l-i-s-t/#struct_list","title":"STRUCT_LIST","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val STRUCT_LIST: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-m-a-p/","title":"s t r u c t  m a p","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/STRUCT_MAP</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-m-a-p/#struct_map","title":"STRUCT_MAP","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val STRUCT_MAP: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-n-u-l-l/","title":"s t r u c t  n u l l","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/STRUCT_NULL</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-n-u-l-l/#struct_null","title":"STRUCT_NULL","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val STRUCT_NULL: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-v-a-l-u-e/","title":"s t r u c t  v a l u e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/STRUCT_VALUE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-v-a-l-u-e/#struct_value","title":"STRUCT_VALUE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val STRUCT_VALUE: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-t-i-m-e-s-t-a-m-p/","title":"t i m e s t a m p","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/TIMESTAMP</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-t-i-m-e-s-t-a-m-p/#timestamp","title":"TIMESTAMP","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val TIMESTAMP: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t32/","title":"u i n t32","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/UINT32</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t32/#uint32","title":"UINT32","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val UINT32: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t32_-v-a-l-u-e/","title":"u i n t32  v a l u e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/UINT32_VALUE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t32_-v-a-l-u-e/#uint32_value","title":"UINT32_VALUE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val UINT32_VALUE: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t64/","title":"u i n t64","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/UINT64</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t64/#uint64","title":"UINT64","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val UINT64: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t64_-v-a-l-u-e/","title":"u i n t64  v a l u e","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/UINT64_VALUE</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t64_-v-a-l-u-e/#uint64_value","title":"UINT64_VALUE","text":"<p>[common]\\</p> <p>@JvmField</p> <p>val UINT64_VALUE: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/get/","title":"Get","text":"<p>//wire-schema/com.squareup.wire.schema/ProtoType/Companion/get</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/get/#get","title":"get","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun get(enclosingTypeOrPackage: String?, typeName: String): ProtoType</p> <p>@JvmStatic</p> <p>fun get(name: String?): ProtoType</p> <p>@JvmStatic</p> <p>fun get(keyType: ProtoType, valueType: ProtoType, name: String): ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Pruner</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/#pruner","title":"Pruner","text":"<p>[common]\\ class Pruner(schema: Schema, pruningRules: PruningRules)</p> <p>Creates a new schema that contains only the types selected by the pruning rules, including their transitive dependencies.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/#constructors","title":"Constructors","text":"Pruner [common]fun Pruner(schema: Schema, pruningRules: PruningRules)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/#functions","title":"Functions","text":"Name Summary prune [common]fun prune(): Schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/-pruner/","title":"pruner","text":"<p>//wire-schema/com.squareup.wire.schema/Pruner/Pruner</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/-pruner/#pruner","title":"Pruner","text":"<p>[common]\\ fun Pruner(schema: Schema, pruningRules: PruningRules)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/prune/","title":"Prune","text":"<p>//wire-schema/com.squareup.wire.schema/Pruner/prune</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/prune/#prune","title":"prune","text":"<p>[common]\\ fun prune(): Schema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#pruningrules","title":"PruningRules","text":"<p>[common]\\ class PruningRules</p> <p>A set of rules that describes which types and members to retain and which to remove.</p> <p>Members may be pruned using either their identifier (package, type name, member name) or their version (since and until options).</p> <p>Despite the builder, instances of this class are not safe for concurrent use.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#identifier-matching","title":"Identifier Matching","text":"<p>If a member is a root in the set, its type is implicitly also considered a root. A type that is a root without a specific member implicitly set all of that type\u2019s members as roots, but not its nested types.</p> <p>Identifiers in this set may be in the following forms:</p> <ul><li>Package names, followed by .*, like squareup.protos.person.*. This matches types and     services defined in the package and its descendant packages.</li><li>Fully qualified type and service names, like squareup.protos.person.Person.</li><li>Fully qualified member names, which are type names followed by a '#', followed by a member     name, like squareup.protos.person.Person#address. Members may be fields, enum constants or     RPCs.</li></ul> <p>An identifier set populated with Movie and Actor#name contains all members of Movie (such as Movie#name and Movie#release_date). It contains the type Actor and one member Actor#name, but not Actor#birth_date or Actor#oscar_count.</p> <p>This set has root identifiers and prune identifiers, with the most precise identifier taking precedence over the other ones. For instance, if there is one root identifier a.Movie along a pruning identifier a.*, the type a.Movie is considered a root.</p> <p>If the roots set is empty, that implies that all elements are considered roots. Use this to prune unwanted types and members without also marking everything else as roots.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#version-matching","title":"Version Matching","text":"<p>Members may be declared with wire.since and wire.until options. For example, these options declare a field age that was replaced with birth_date in version \u201c5.0\u201d:</p> <p>optional int32 age = 3 [(wire.until) = \u201c5.0\u201d];\\ optional Date birth_date = 4 [(wire.since) = \u201c5.0\u201d];</p> <p>Client code should typically target a single version. In this example, versions &lt;= \u201c4.0\u201d will have the age field only and versions &gt;= \u201c5.0\u201d will have the birth_date field only. One can target a single version using only.</p> <p>Service code that supports many clients should support the union of versions of all supported clients. Such code will have both the age and birth_date fields.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#types","title":"Types","text":"Name Summary Builder [common]class Builder Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#functions","title":"Functions","text":"Name Summary isEnumConstantRetainedVersion [common]fun isEnumConstantRetainedVersion(options: Options): BooleanReturns true unless options specifies a version that is outside of the configured range. isFieldRetainedVersion [common]fun isFieldRetainedVersion(options: Options): BooleanReturns true unless options specifies a version that is outside of the configured range. isRoot [common]fun isRoot(protoMember: ProtoMember): BooleanReturns true if protoMember is a root.[common]fun isRoot(type: ProtoType): BooleanReturns true if type is a root. prunes [common]fun prunes(protoMember: ProtoMember): BooleanReturns true if protoMember should be pruned.[common]fun prunes(type: ProtoType): BooleanReturns true if type should be pruned, even if it is a transitive dependency of a root. In that case, the referring member is also pruned. unusedPrunes [common]fun unusedPrunes(): Set&lt;String&gt; unusedRoots [common]fun unusedRoots(): Set&lt;String&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#properties","title":"Properties","text":"Name Summary isEmpty [common]val isEmpty: Boolean only [common]val only: String? prunes [common]val prunes: Set&lt;String&gt; roots [common]val roots: Set&lt;String&gt; since [common]val since: String? until [common]val until: String?"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-empty/","title":"Is empty","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/isEmpty</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-empty/#isempty","title":"isEmpty","text":"<p>[common]\\ val isEmpty: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-enum-constant-retained-version/","title":"Is enum constant retained version","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/isEnumConstantRetainedVersion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-enum-constant-retained-version/#isenumconstantretainedversion","title":"isEnumConstantRetainedVersion","text":"<p>[common]\\ fun isEnumConstantRetainedVersion(options: Options): Boolean</p> <p>Returns true unless options specifies a version that is outside of the configured range.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-field-retained-version/","title":"Is field retained version","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/isFieldRetainedVersion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-field-retained-version/#isfieldretainedversion","title":"isFieldRetainedVersion","text":"<p>[common]\\ fun isFieldRetainedVersion(options: Options): Boolean</p> <p>Returns true unless options specifies a version that is outside of the configured range.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-root/","title":"Is root","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/isRoot</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-root/#isroot","title":"isRoot","text":"<p>[common]\\ fun isRoot(type: ProtoType): Boolean</p> <p>Returns true if type is a root.</p> <p>[common]\\ fun isRoot(protoMember: ProtoMember): Boolean</p> <p>Returns true if protoMember is a root.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/only/","title":"Only","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/only</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/only/#only","title":"only","text":"<p>[common]\\ val only: String?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/prunes/","title":"Prunes","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/prunes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/prunes/#prunes","title":"prunes","text":"<p>[common]\\ fun prunes(type: ProtoType): Boolean</p> <p>Returns true if type should be pruned, even if it is a transitive dependency of a root. In that case, the referring member is also pruned.</p> <p>[common]\\ fun prunes(protoMember: ProtoMember): Boolean</p> <p>Returns true if protoMember should be pruned.</p> <p>[common]\\ val prunes: Set&lt;String&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/roots/","title":"Roots","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/roots</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/roots/#roots","title":"roots","text":"<p>[common]\\ val roots: Set&lt;String&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/since/","title":"Since","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/since</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/since/#since","title":"since","text":"<p>[common]\\ val since: String?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/until/","title":"Until","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/until</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/until/#until","title":"until","text":"<p>[common]\\ val until: String?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/unused-prunes/","title":"Unused prunes","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/unusedPrunes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/unused-prunes/#unusedprunes","title":"unusedPrunes","text":"<p>[common]\\ fun unusedPrunes(): Set&lt;String&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/unused-roots/","title":"Unused roots","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/unusedRoots</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/unused-roots/#unusedroots","title":"unusedRoots","text":"<p>[common]\\ fun unusedRoots(): Set&lt;String&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/Builder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/#builder","title":"Builder","text":"<p>[common]\\ class Builder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/#functions","title":"Functions","text":"Name Summary addRoot [common]fun addRoot(identifier: String): PruningRules.Builderfun addRoot(identifiers: Iterable&lt;String&gt;): PruningRules.Builder build [common]fun build(): PruningRules only [common]fun only(only: String?): PruningRules.BuilderThe only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained. prune [common]fun prune(identifier: String): PruningRules.Builderfun prune(identifiers: Iterable&lt;String&gt;): PruningRules.Builder since [common]fun since(since: String?): PruningRules.BuilderThe exclusive lower bound of the version range. Fields with until values greater than this are retained. until [common]fun until(until: String?): PruningRules.BuilderThe inclusive upper bound of the version range. Fields with since values less than or equal to this are retained."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/-builder/","title":"builder","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/Builder/Builder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/-builder/#builder","title":"Builder","text":"<p>[common]\\ fun Builder()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/add-root/","title":"Add root","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/Builder/addRoot</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/add-root/#addroot","title":"addRoot","text":"<p>[common]\\ fun addRoot(identifier: String): PruningRules.Builder</p> <p>fun addRoot(identifiers: Iterable&lt;String&gt;): PruningRules.Builder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/build/","title":"Build","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/Builder/build</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/build/#build","title":"build","text":"<p>[common]\\ fun build(): PruningRules</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/only/","title":"Only","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/Builder/only</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/only/#only","title":"only","text":"<p>[common]\\ fun only(only: String?): PruningRules.Builder</p> <p>The only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/prune/","title":"Prune","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/Builder/prune</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/prune/#prune","title":"prune","text":"<p>[common]\\ fun prune(identifier: String): PruningRules.Builder</p> <p>fun prune(identifiers: Iterable&lt;String&gt;): PruningRules.Builder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/since/","title":"Since","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/Builder/since</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/since/#since","title":"since","text":"<p>[common]\\ fun since(since: String?): PruningRules.Builder</p> <p>The exclusive lower bound of the version range. Fields with until values greater than this are retained.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/until/","title":"Until","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/Builder/until</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/until/#until","title":"until","text":"<p>[common]\\ fun until(until: String?): PruningRules.Builder</p> <p>The inclusive upper bound of the version range. Fields with since values less than or equal to this are retained.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/PruningRules/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Reserved</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/#reserved","title":"Reserved","text":"<p>[common]\\ data class Reserved(location: Location, documentation: String, values: List&lt;Any&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/#functions","title":"Functions","text":"Name Summary matchesName [common]fun matchesName(name: String): Boolean matchesTag [common]fun matchesTag(tag: Int): Boolean"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String location [common]val location: Location values [common]val values: List&lt;Any&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-reserved/","title":"reserved","text":"<p>//wire-schema/com.squareup.wire.schema/Reserved/Reserved</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-reserved/#reserved","title":"Reserved","text":"<p>[common]\\ fun Reserved(location: Location, documentation: String, values: List&lt;Any&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/Reserved/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/Reserved/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/matches-name/","title":"Matches name","text":"<p>//wire-schema/com.squareup.wire.schema/Reserved/matchesName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/matches-name/#matchesname","title":"matchesName","text":"<p>[common]\\ fun matchesName(name: String): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/matches-tag/","title":"Matches tag","text":"<p>//wire-schema/com.squareup.wire.schema/Reserved/matchesTag</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/matches-tag/#matchestag","title":"matchesTag","text":"<p>[common]\\ fun matchesTag(tag: Int): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/values/","title":"Values","text":"<p>//wire-schema/com.squareup.wire.schema/Reserved/values</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/values/#values","title":"values","text":"<p>[common]\\ val values: List&lt;Any&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Reserved/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/#functions","title":"Functions","text":"Name Summary fromElements [common]@JvmStaticfun fromElements(elements: List&lt;ReservedElement&gt;): List&lt;Reserved&gt; toElements [common]@JvmStaticfun toElements(reserveds: List&lt;Reserved&gt;): List&lt;ReservedElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/from-elements/","title":"From elements","text":"<p>//wire-schema/com.squareup.wire.schema/Reserved/Companion/fromElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/from-elements/#fromelements","title":"fromElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun fromElements(elements: List&lt;ReservedElement&gt;): List&lt;Reserved&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/to-elements/","title":"To elements","text":"<p>//wire-schema/com.squareup.wire.schema/Reserved/Companion/toElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/to-elements/#toelements","title":"toElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun toElements(reserveds: List&lt;Reserved&gt;): List&lt;ReservedElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/#rpc","title":"Rpc","text":"<p>[common]\\ data class Rpc(location: Location, name: String, documentation: String, requestTypeElement: String, responseTypeElement: String, requestStreaming: Boolean, responseStreaming: Boolean, options: Options)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/#functions","title":"Functions","text":"Name Summary link [common]fun link(linker: Linker) linkOptions [common]fun linkOptions(linker: Linker, validate: Boolean) retainAll [common]fun retainAll(schema: Schema, markSet: MarkSet): Rpc? validate [common]fun validate(linker: Linker)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String location [common]val location: Location name [common]val name: String options [common]val options: Options requestStreaming [common]val requestStreaming: Boolean requestType [common]var requestType: ProtoType? = null responseStreaming [common]val responseStreaming: Boolean responseType [common]var responseType: ProtoType? = null"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-rpc/","title":"rpc","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/Rpc</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-rpc/#rpc","title":"Rpc","text":"<p>[common]\\ fun Rpc(location: Location, name: String, documentation: String, requestTypeElement: String, responseTypeElement: String, requestStreaming: Boolean, responseStreaming: Boolean, options: Options)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/link-options/","title":"Link options","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/linkOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/link-options/#linkoptions","title":"linkOptions","text":"<p>[common]\\ fun linkOptions(linker: Linker, validate: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/link/","title":"Link","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/link</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/link/#link","title":"link","text":"<p>[common]\\ fun link(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/options/#options","title":"options","text":"<p>[common]\\ val options: Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/request-streaming/","title":"Request streaming","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/requestStreaming</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/request-streaming/#requeststreaming","title":"requestStreaming","text":"<p>[common]\\ val requestStreaming: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/request-type/","title":"Request type","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/requestType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/request-type/#requesttype","title":"requestType","text":"<p>[common]\\ var requestType: ProtoType? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/response-streaming/","title":"Response streaming","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/responseStreaming</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/response-streaming/#responsestreaming","title":"responseStreaming","text":"<p>[common]\\ val responseStreaming: Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/response-type/","title":"Response type","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/responseType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/response-type/#responsetype","title":"responseType","text":"<p>[common]\\ var responseType: ProtoType? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\ fun retainAll(schema: Schema, markSet: MarkSet): Rpc?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/validate/","title":"Validate","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/validate</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/validate/#validate","title":"validate","text":"<p>[common]\\ fun validate(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/#functions","title":"Functions","text":"Name Summary fromElements [common]@JvmStaticfun fromElements(elements: List&lt;RpcElement&gt;): List&lt;Rpc&gt; toElements [common]@JvmStaticfun toElements(rpcs: List&lt;Rpc&gt;): List&lt;RpcElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/from-elements/","title":"From elements","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/Companion/fromElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/from-elements/#fromelements","title":"fromElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun fromElements(elements: List&lt;RpcElement&gt;): List&lt;Rpc&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/to-elements/","title":"To elements","text":"<p>//wire-schema/com.squareup.wire.schema/Rpc/Companion/toElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/to-elements/#toelements","title":"toElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun toElements(rpcs: List&lt;Rpc&gt;): List&lt;RpcElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Schema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/#schema","title":"Schema","text":"<p>[common]\\ class Schema</p> <p>A collection of .proto files that describe a set of messages. A schema is linked: each field\u2019s type name is resolved to the corresponding type definition.</p> <p>Use SchemaLoader to load a schema from source files.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/#functions","title":"Functions","text":"Name Summary getField [common]fun getField(protoMember: ProtoMember): Field?Returns the field for protoMember, or null if this schema defines no such field.[common]fun getField(protoType: ProtoType, memberName: String): Field?Returns the field for protoType and memberName, or null if this schema defines no such field.[common]fun getField(typeName: String, memberName: String): Field?Returns the field with the fully qualified typeName and memberName, or null if this schema defines no such field. getService [common]fun getService(protoType: ProtoType): Service?Returns the service for protoType, or null if this schema defines no such service.[common]fun getService(name: String): Service?Returns the service with the fully qualified name name, or null if this schema defines no such service. getType [common]fun getType(protoType: ProtoType): Type?Returns the type for protoType, or null if this schema defines no such type.[common]fun getType(name: String): Type?Returns the type with the fully qualified name name, or null if this schema defines no such type. isExtensionField [common]fun isExtensionField(protoMember: ProtoMember): Boolean protoAdapter [common]fun protoAdapter(typeName: String, includeUnknown: Boolean): ProtoAdapter&lt;Any&gt;Returns a wire adapter for the message or enum type named typeName. The returned type adapter doesn\u2019t have model classes to encode and decode from, so instead it uses scalar types (String, ByteString, Integer, etc.), maps, and lists. It can both encode and decode these objects. Map keys are field names. protoFile [common]fun protoFile(protoType: ProtoType): ProtoFile?Returns the proto file containing this protoType, or null if there isn\u2019t such file.[common]fun protoFile(path: String): ProtoFile?fun protoFile(path: Path): ProtoFile?Returns the proto file at path, or null if this schema has no such file. prune [common]fun prune(pruningRules: PruningRules): SchemaReturns a copy of this schema that retains only the types and services selected by pruningRules, plus their transitive dependencies."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/#properties","title":"Properties","text":"Name Summary protoFiles [common]val protoFiles: List&lt;ProtoFile&gt; types [common]val types: Set&lt;ProtoType&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/#extensions","title":"Extensions","text":"Name Summary withStubs [common]fun Schema.withStubs(typesToStub: Set&lt;ProtoType&gt;): SchemaReplace types in this schema which are present in typesToStub with empty shells that have no outward references. This has to be done in this module so that we can access the internal constructor to avoid re-linking."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-field/","title":"Get field","text":"<p>//wire-schema/com.squareup.wire.schema/Schema/getField</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-field/#getfield","title":"getField","text":"<p>[common]\\ fun getField(protoMember: ProtoMember): Field?</p> <p>Returns the field for protoMember, or null if this schema defines no such field.</p> <p>[common]\\ fun getField(typeName: String, memberName: String): Field?</p> <p>Returns the field with the fully qualified typeName and memberName, or null if this schema defines no such field.</p> <p>[common]\\ fun getField(protoType: ProtoType, memberName: String): Field?</p> <p>Returns the field for protoType and memberName, or null if this schema defines no such field.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-service/","title":"Get service","text":"<p>//wire-schema/com.squareup.wire.schema/Schema/getService</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-service/#getservice","title":"getService","text":"<p>[common]\\ fun getService(name: String): Service?</p> <p>Returns the service with the fully qualified name name, or null if this schema defines no such service.</p> <p>[common]\\ fun getService(protoType: ProtoType): Service?</p> <p>Returns the service for protoType, or null if this schema defines no such service.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-type/","title":"Get type","text":"<p>//wire-schema/com.squareup.wire.schema/Schema/getType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-type/#gettype","title":"getType","text":"<p>[common]\\ fun getType(name: String): Type?</p> <p>Returns the type with the fully qualified name name, or null if this schema defines no such type.</p> <p>[common]\\ fun getType(protoType: ProtoType): Type?</p> <p>Returns the type for protoType, or null if this schema defines no such type.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/is-extension-field/","title":"Is extension field","text":"<p>//wire-schema/com.squareup.wire.schema/Schema/isExtensionField</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/is-extension-field/#isextensionfield","title":"isExtensionField","text":"<p>[common]\\ fun isExtensionField(protoMember: ProtoMember): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-adapter/","title":"Proto adapter","text":"<p>//wire-schema/com.squareup.wire.schema/Schema/protoAdapter</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-adapter/#protoadapter","title":"protoAdapter","text":"<p>[common]\\ fun protoAdapter(typeName: String, includeUnknown: Boolean): ProtoAdapter&lt;Any&gt;</p> <p>Returns a wire adapter for the message or enum type named typeName. The returned type adapter doesn\u2019t have model classes to encode and decode from, so instead it uses scalar types (String, ByteString, Integer, etc.), maps, and lists. It can both encode and decode these objects. Map keys are field names.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-adapter/#parameters","title":"Parameters","text":"<p>common</p> includeUnknown true to include values for unknown tags in the returned model. Map keys for such values is the unknown value\u2019s tag name as a string. Unknown values are decoded to Long, Long, Integer, or ByteString for VARINT, FIXED64, FIXED32, or LENGTH_DELIMITED, respectively."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-file/","title":"Proto file","text":"<p>//wire-schema/com.squareup.wire.schema/Schema/protoFile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-file/#protofile","title":"protoFile","text":"<p>[common]\\ fun protoFile(path: String): ProtoFile?</p> <p>fun protoFile(path: Path): ProtoFile?</p> <p>Returns the proto file at path, or null if this schema has no such file.</p> <p>[common]\\ fun protoFile(protoType: ProtoType): ProtoFile?</p> <p>Returns the proto file containing this protoType, or null if there isn\u2019t such file.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-files/","title":"Proto files","text":"<p>//wire-schema/com.squareup.wire.schema/Schema/protoFiles</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-files/#protofiles","title":"protoFiles","text":"<p>[common]\\ val protoFiles: List&lt;ProtoFile&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/prune/","title":"Prune","text":"<p>//wire-schema/com.squareup.wire.schema/Schema/prune</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/prune/#prune","title":"prune","text":"<p>[common]\\ fun prune(pruningRules: PruningRules): Schema</p> <p>Returns a copy of this schema that retains only the types and services selected by pruningRules, plus their transitive dependencies.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/types/","title":"Types","text":"<p>//wire-schema/com.squareup.wire.schema/Schema/types</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/types/#types","title":"types","text":"<p>[common]\\ val types: Set&lt;ProtoType&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Schema/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-exception/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaException</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-exception/#schemaexception","title":"SchemaException","text":"<p>[common]\\ class SchemaException(errors: List&lt;String&gt;) : RuntimeException</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-exception/#properties","title":"Properties","text":"Name Summary cause [common]open val cause: Throwable? message [common]open val message: String?"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-exception/-schema-exception/","title":"schema exception","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaException/SchemaException</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-exception/-schema-exception/#schemaexception","title":"SchemaException","text":"<p>[common]\\ fun SchemaException(errors: List&lt;String&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/#schemahandler","title":"SchemaHandler","text":"<p>[common]\\ abstract class SchemaHandler</p> <p>A SchemaHandlers Schema!</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/#constructors","title":"Constructors","text":"SchemaHandler [common]fun SchemaHandler()"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/#types","title":"Types","text":"Name Summary Context [common]data class Context(fileSystem: FileSystem, outDirectory: Path, logger: WireLogger, errorCollector: ErrorCollector, emittingRules: EmittingRules, claimedDefinitions: ClaimedDefinitions?, claimedPaths: ClaimedPaths, module: SchemaHandler.Module?, sourcePathPaths: Set&lt;String&gt;?, profileLoader: ProfileLoader?)A Context holds the information necessary for a SchemaHandler to do its job. It contains both helping objects such as logger, and constraining objects such as emittingRules. Factory [common]interface Factory : SerializableImplementations of this interface must have a no-arguments public constructor. Module [common]data class Module(name: String, types: Set&lt;ProtoType&gt;, upstreamTypes: Map&lt;ProtoType, String&gt;)A Module dictates how the loaded types are to be partitioned and handled."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/#functions","title":"Functions","text":"Name Summary handle [common]open fun handle(schema: Schema, context: SchemaHandler.Context)This will handle all ProtoFiles which are part of the sourcePath. If a Module is set in the context, it will handle only Types and Services the module defines respecting the context rules. Override this method if you have specific needs the default implementation doesn\u2019t address.[common]abstract fun handle(service: Service, context: SchemaHandler.Context): List&lt;Path&gt;Returns the Paths of the files which service will have been generated into. Null if nothing has been generated.[common]abstract fun handle(type: Type, context: SchemaHandler.Context): Path?Returns the Path of the file which type will have been generated into. Null if nothing has been generated.[common]abstract fun handle(extend: Extend, field: Field, context: SchemaHandler.Context): Path?Returns the Path of the files which field will have been generated into. Null if nothing has been generated."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-schema-handler/","title":"schema handler","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/SchemaHandler</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-schema-handler/#schemahandler","title":"SchemaHandler","text":"<p>[common]\\ fun SchemaHandler()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/handle/","title":"Handle","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/handle</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/handle/#handle","title":"handle","text":"<p>[common]\\ open fun handle(schema: Schema, context: SchemaHandler.Context)</p> <p>This will handle all ProtoFiles which are part of the sourcePath. If a Module is set in the context, it will handle only Types and Services the module defines respecting the context rules. Override this method if you have specific needs the default implementation doesn\u2019t address.</p> <p>[common]\\ abstract fun handle(type: Type, context: SchemaHandler.Context): Path?</p> <p>Returns the Path of the file which type will have been generated into. Null if nothing has been generated.</p> <p>[common]\\ abstract fun handle(service: Service, context: SchemaHandler.Context): List&lt;Path&gt;</p> <p>Returns the Paths of the files which service will have been generated into. Null if nothing has been generated.</p> <p>[common]\\ abstract fun handle(extend: Extend, field: Field, context: SchemaHandler.Context): Path?</p> <p>Returns the Path of the files which field will have been generated into. Null if nothing has been generated.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/#context","title":"Context","text":"<p>[common]\\ data class Context(fileSystem: FileSystem, outDirectory: Path, logger: WireLogger, errorCollector: ErrorCollector, emittingRules: EmittingRules, claimedDefinitions: ClaimedDefinitions?, claimedPaths: ClaimedPaths, module: SchemaHandler.Module?, sourcePathPaths: Set&lt;String&gt;?, profileLoader: ProfileLoader?)</p> <p>A Context holds the information necessary for a SchemaHandler to do its job. It contains both helping objects such as logger, and constraining objects such as emittingRules.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/#constructors","title":"Constructors","text":"Context [common]fun Context(fileSystem: FileSystem, outDirectory: Path, logger: WireLogger, errorCollector: ErrorCollector = ErrorCollector(), emittingRules: EmittingRules = EmittingRules(), claimedDefinitions: ClaimedDefinitions? = null, claimedPaths: ClaimedPaths = ClaimedPaths(), module: SchemaHandler.Module? = null, sourcePathPaths: Set&lt;String&gt;? = null, profileLoader: ProfileLoader? = null)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/#functions","title":"Functions","text":"Name Summary inSourcePath [common]fun inSourcePath(location: Location): BooleanTrue if this location ia part of a sourcePath root.[common]fun inSourcePath(protoFile: ProtoFile): BooleanTrue if this protoFile ia part of a sourcePath root."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/#properties","title":"Properties","text":"Name Summary claimedDefinitions [common]val claimedDefinitions: ClaimedDefinitions? = nullIf set, the SchemaHandler is to handle only types which are not claimed yet, and claim itself types it has handled. If null, the SchemaHandler is to handle all types. claimedPaths [common]val claimedPaths: ClaimedPathsIf the SchemaHandler writes files, it is to claim Paths of files it created. emittingRules [common]val emittingRules: EmittingRulesSet of rules letting the SchemaHandler know what ProtoType to include or exclude in its logic. This object represents the includes and excludes values which were associated with its Target. errorCollector [common]val errorCollector: ErrorCollectorObject to be used by the SchemaHandler to store errors. After all SchemaHandlers are finished, Wire will throw an exception if any error are present inside the collector. fileSystem [common]val fileSystem: FileSystemTo be used by the SchemaHandler for reading/writing operations on disk. logger [common]val logger: WireLoggerEvent-listener like logger with which SchemaHandler can notify handled artifacts. module [common]val module: SchemaHandler.Module? = nullA Module dictates how the loaded types are partitioned and how they are to be handled. If null, there are no partition and all types are to be handled. outDirectory [common]val outDirectory: PathLocation on fileSystem where the SchemaHandler is to write files, if it needs to. profileLoader [common]val profileLoader: ProfileLoader? = nullTo be used by the SchemaHandler if it supports Profile files. Please note that this API is unstable and can change at anytime. sourcePathPaths [common]val sourcePathPaths: Set&lt;String&gt;? = nullContains Location.path values of all sourcePath roots. The SchemaHandler is to ignore ProtoFiles not part of this set; this verification can be executed via the inSourcePath method."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/-context/","title":"context","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/Context</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/-context/#context","title":"Context","text":"<p>[common]\\ fun Context(fileSystem: FileSystem, outDirectory: Path, logger: WireLogger, errorCollector: ErrorCollector = ErrorCollector(), emittingRules: EmittingRules = EmittingRules(), claimedDefinitions: ClaimedDefinitions? = null, claimedPaths: ClaimedPaths = ClaimedPaths(), module: SchemaHandler.Module? = null, sourcePathPaths: Set&lt;String&gt;? = null, profileLoader: ProfileLoader? = null)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/claimed-definitions/","title":"Claimed definitions","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/claimedDefinitions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/claimed-definitions/#claimeddefinitions","title":"claimedDefinitions","text":"<p>[common]\\ val claimedDefinitions: ClaimedDefinitions? = null</p> <p>If set, the SchemaHandler is to handle only types which are not claimed yet, and claim itself types it has handled. If null, the SchemaHandler is to handle all types.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/claimed-paths/","title":"Claimed paths","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/claimedPaths</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/claimed-paths/#claimedpaths","title":"claimedPaths","text":"<p>[common]\\ val claimedPaths: ClaimedPaths</p> <p>If the SchemaHandler writes files, it is to claim Paths of files it created.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/emitting-rules/","title":"Emitting rules","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/emittingRules</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/emitting-rules/#emittingrules","title":"emittingRules","text":"<p>[common]\\ val emittingRules: EmittingRules</p> <p>Set of rules letting the SchemaHandler know what ProtoType to include or exclude in its logic. This object represents the includes and excludes values which were associated with its Target.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/error-collector/","title":"Error collector","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/errorCollector</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/error-collector/#errorcollector","title":"errorCollector","text":"<p>[common]\\ val errorCollector: ErrorCollector</p> <p>Object to be used by the SchemaHandler to store errors. After all SchemaHandlers are finished, Wire will throw an exception if any error are present inside the collector.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/file-system/","title":"File system","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/fileSystem</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/file-system/#filesystem","title":"fileSystem","text":"<p>[common]\\ val fileSystem: FileSystem</p> <p>To be used by the SchemaHandler for reading/writing operations on disk.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/in-source-path/","title":"In source path","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/inSourcePath</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/in-source-path/#insourcepath","title":"inSourcePath","text":"<p>[common]\\ fun inSourcePath(protoFile: ProtoFile): Boolean</p> <p>True if this protoFile ia part of a sourcePath root.</p> <p>[common]\\ fun inSourcePath(location: Location): Boolean</p> <p>True if this location ia part of a sourcePath root.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/logger/","title":"Logger","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/logger</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/logger/#logger","title":"logger","text":"<p>[common]\\ val logger: WireLogger</p> <p>Event-listener like logger with which SchemaHandler can notify handled artifacts.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/module/","title":"Module","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/module</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/module/#module","title":"module","text":"<p>[common]\\ val module: SchemaHandler.Module? = null</p> <p>A Module dictates how the loaded types are partitioned and how they are to be handled. If null, there are no partition and all types are to be handled.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/out-directory/","title":"Out directory","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/outDirectory</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/out-directory/#outdirectory","title":"outDirectory","text":"<p>[common]\\ val outDirectory: Path</p> <p>Location on fileSystem where the SchemaHandler is to write files, if it needs to.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/profile-loader/","title":"Profile loader","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/profileLoader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/profile-loader/#profileloader","title":"profileLoader","text":"<p>[common]\\ val profileLoader: ProfileLoader? = null</p> <p>To be used by the SchemaHandler if it supports Profile files. Please note that this API is unstable and can change at anytime.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/source-path-paths/","title":"Source path paths","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Context/sourcePathPaths</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/source-path-paths/#sourcepathpaths","title":"sourcePathPaths","text":"<p>[common]\\ val sourcePathPaths: Set&lt;String&gt;? = null</p> <p>Contains Location.path values of all sourcePath roots. The SchemaHandler is to ignore ProtoFiles not part of this set; this verification can be executed via the inSourcePath method.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-factory/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Factory</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-factory/#factory","title":"Factory","text":"<p>[common]\\ interface Factory : Serializable</p> <p>Implementations of this interface must have a no-arguments public constructor.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-factory/#functions","title":"Functions","text":"Name Summary create [common]abstract fun create(): SchemaHandler"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-factory/create/","title":"Create","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Factory/create</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-factory/create/#create","title":"create","text":"<p>[common]\\ abstract fun create(): SchemaHandler</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Module</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/#module","title":"Module","text":"<p>[common]\\ data class Module(name: String, types: Set&lt;ProtoType&gt;, upstreamTypes: Map&lt;ProtoType, String&gt;)</p> <p>A Module dictates how the loaded types are to be partitioned and handled.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/#constructors","title":"Constructors","text":"Module [common]fun Module(name: String, types: Set&lt;ProtoType&gt;, upstreamTypes: Map&lt;ProtoType, String&gt; = mapOf())"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/#properties","title":"Properties","text":"Name Summary name [common]val name: StringThe name of the Module. types [common]val types: Set&lt;ProtoType&gt;The types that this module is to handle. upstreamTypes [common]val upstreamTypes: Map&lt;ProtoType, String&gt;These are the types depended upon by types associated with their module name."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/-module/","title":"module","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Module/Module</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/-module/#module","title":"Module","text":"<p>[common]\\ fun Module(name: String, types: Set&lt;ProtoType&gt;, upstreamTypes: Map&lt;ProtoType, String&gt; = mapOf())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Module/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/name/#name","title":"name","text":"<p>[common]\\ val name: String</p> <p>The name of the Module.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/types/","title":"Types","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Module/types</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/types/#types","title":"types","text":"<p>[common]\\ val types: Set&lt;ProtoType&gt;</p> <p>The types that this module is to handle.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/upstream-types/","title":"Upstream types","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaHandler/Module/upstreamTypes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/upstream-types/#upstreamtypes","title":"upstreamTypes","text":"<p>[common]\\ val upstreamTypes: Map&lt;ProtoType, String&gt;</p> <p>These are the types depended upon by types associated with their module name.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/#schemaloader","title":"SchemaLoader","text":"<p>[common]\\ class SchemaLoader : Loader, ProfileLoader</p> <p>Load proto files and their transitive dependencies and parse them. Keep track of which files were loaded from where so that we can use that information later when deciding what to generate.</p> <p>[js, jvm]\\ class SchemaLoader : Loader, ProfileLoader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/#constructors","title":"Constructors","text":"SchemaLoader [js]fun SchemaLoader(fileSystem: FileSystem) SchemaLoader [jvm]fun SchemaLoader(fileSystem: FileSystem) SchemaLoader [jvm]fun SchemaLoader(fileSystem: FileSystem)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/#functions","title":"Functions","text":"Name Summary initRoots [common, js, jvm][common]fun initRoots(sourcePath: List&lt;Location&gt;, protoPath: List&lt;Location&gt; = listOf())[js, jvm]fun initRoots(sourcePath: List&lt;Location&gt;, protoPath: List&lt;Location&gt; = listOf())Initialize the WireRun.sourcePath and WireRun.protoPath from which files are loaded. load [common, js, jvm][common]abstract fun load(path: String): ProtoFile[js]open override fun load(path: String): ProtoFile[jvm]open override fun load(path: String): ProtoFile loadProfile [common, js, jvm][common]abstract fun loadProfile(name: String, schema: Schema): Profile[js]open override fun loadProfile(name: String, schema: Schema): Profile[jvm]open override fun loadProfile(name: String, schema: Schema): Profile loadSchema [common, js, jvm][common]fun loadSchema(): Schema[js, jvm]fun loadSchema(): Schema withErrors [common]abstract fun withErrors(errors: ErrorCollector): LoaderReturns a new loader that reports failures to errors.[js]open override fun withErrors(errors: ErrorCollector): SchemaLoaderReturns a new loader that reports failures to errors.[jvm]open override fun withErrors(errors: ErrorCollector): SchemaLoaderReturns a new loader that reports failures to errors."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/#properties","title":"Properties","text":"Name Summary loadExhaustively [common, js, jvm]var loadExhaustively: BooleanIf true, the schema loader will load the whole graph, including files and types not used by anything in the source path. permitPackageCycles [common, js, jvm]var permitPackageCycles: BooleanStrict by default. Note that golang cannot build protos with package cycles. sourcePathFiles [common]val sourcePathFiles: List&lt;ProtoFile&gt;Subset of the schema that was loaded from the source path.[js, jvm]val sourcePathFiles: List&lt;ProtoFile&gt;Subset of the schema that was loaded from the source path."},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/-schema-loader/","title":"schema loader","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/SchemaLoader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/-schema-loader/#schemaloader","title":"SchemaLoader","text":"<p>[js, jvm]\\ [js, jvm]\\ fun SchemaLoader(fileSystem: FileSystem)</p> <p>[jvm]\\ fun SchemaLoader(fileSystem: FileSystem)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dload-profile/","title":"[js]load profile","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/[js]loadProfile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dload-profile/#loadprofile","title":"loadProfile","text":"<p>[js]\\ open override fun loadProfile(name: String, schema: Schema): Profile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dload/","title":"[js]load","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/[js]load</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dload/#load","title":"load","text":"<p>[js]\\ open override fun load(path: String): ProtoFile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dwith-errors/","title":"[js]with errors","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/[js]withErrors</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dwith-errors/#witherrors","title":"withErrors","text":"<p>[js]\\ open override fun withErrors(errors: ErrorCollector): SchemaLoader</p> <p>Returns a new loader that reports failures to errors.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dload-profile/","title":"[jvm]load profile","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/[jvm]loadProfile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dload-profile/#loadprofile","title":"loadProfile","text":"<p>[jvm]\\ open override fun loadProfile(name: String, schema: Schema): Profile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dload/","title":"[jvm]load","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/[jvm]load</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dload/#load","title":"load","text":"<p>[jvm]\\ open override fun load(path: String): ProtoFile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dwith-errors/","title":"[jvm]with errors","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/[jvm]withErrors</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dwith-errors/#witherrors","title":"withErrors","text":"<p>[jvm]\\ open override fun withErrors(errors: ErrorCollector): SchemaLoader</p> <p>Returns a new loader that reports failures to errors.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/init-roots/","title":"Init roots","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/initRoots</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/init-roots/#initroots","title":"initRoots","text":"<p>[common, js, jvm]\\ [common]\\ fun initRoots(sourcePath: List&lt;Location&gt;, protoPath: List&lt;Location&gt; = listOf())</p> <p>[js, jvm]\\ fun initRoots(sourcePath: List&lt;Location&gt;, protoPath: List&lt;Location&gt; = listOf())</p> <p>Initialize the WireRun.sourcePath and WireRun.protoPath from which files are loaded.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/load-exhaustively/","title":"Load exhaustively","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/loadExhaustively</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/load-exhaustively/#loadexhaustively","title":"loadExhaustively","text":"<p>[common, js, jvm]\\ [common, js, jvm]\\ var loadExhaustively: Boolean</p> <p>If true, the schema loader will load the whole graph, including files and types not used by anything in the source path.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/load-schema/","title":"Load schema","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/loadSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/load-schema/#loadschema","title":"loadSchema","text":"<p>[common, js, jvm]\\ [common]\\ fun loadSchema(): Schema</p> <p>[js, jvm]\\ fun loadSchema(): Schema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/permit-package-cycles/","title":"Permit package cycles","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/permitPackageCycles</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/permit-package-cycles/#permitpackagecycles","title":"permitPackageCycles","text":"<p>[common, js, jvm]\\ [common, js, jvm]\\ var permitPackageCycles: Boolean</p> <p>Strict by default. Note that golang cannot build protos with package cycles.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/source-path-files/","title":"Source path files","text":"<p>//wire-schema/com.squareup.wire.schema/SchemaLoader/sourcePathFiles</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/source-path-files/#sourcepathfiles","title":"sourcePathFiles","text":"<p>[common, js, jvm]\\ [common]\\ val sourcePathFiles: List&lt;ProtoFile&gt;</p> <p>[js, jvm]\\ val sourcePathFiles: List&lt;ProtoFile&gt;</p> <p>Subset of the schema that was loaded from the source path.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Service</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/#service","title":"Service","text":"<p>[common]\\ data class Service(type: ProtoType, location: Location, documentation: String, name: String, rpcs: List&lt;Rpc&gt;, options: Options)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/#functions","title":"Functions","text":"Name Summary link [common]fun link(linker: Linker) linkOptions [common]fun linkOptions(linker: Linker, validate: Boolean) retainAll [common]fun retainAll(schema: Schema, markSet: MarkSet): Service? rpc [common]fun rpc(name: String): Rpc?Returns the RPC named name, or null if this service has no such method. validate [common]fun validate(linker: Linker)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/#properties","title":"Properties","text":"Name Summary documentation [common]@get:JvmName(name = \u201cdocumentation\u201d)val documentation: String location [common]@get:JvmName(name = \u201clocation\u201d)val location: Location name [common]@get:JvmName(name = \u201cname\u201d)val name: String options [common]@get:JvmName(name = \u201coptions\u201d)val options: Options rpcs [common]@get:JvmName(name = \u201crpcs\u201d)val rpcs: List&lt;Rpc&gt; type [common]@get:JvmName(name = \u201ctype\u201d)val type: ProtoType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/-service/","title":"service","text":"<p>//wire-schema/com.squareup.wire.schema/Service/Service</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/-service/#service","title":"Service","text":"<p>[common]\\ fun Service(type: ProtoType, location: Location, documentation: String, name: String, rpcs: List&lt;Rpc&gt;, options: Options)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/Service/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/documentation/#documentation","title":"documentation","text":"<p>[common]\\</p> <p>@get:JvmName(name = \u201cdocumentation\u201d)</p> <p>val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/link-options/","title":"Link options","text":"<p>//wire-schema/com.squareup.wire.schema/Service/linkOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/link-options/#linkoptions","title":"linkOptions","text":"<p>[common]\\ fun linkOptions(linker: Linker, validate: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/link/","title":"Link","text":"<p>//wire-schema/com.squareup.wire.schema/Service/link</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/link/#link","title":"link","text":"<p>[common]\\ fun link(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/Service/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/location/#location","title":"location","text":"<p>[common]\\</p> <p>@get:JvmName(name = \u201clocation\u201d)</p> <p>val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/Service/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/name/#name","title":"name","text":"<p>[common]\\</p> <p>@get:JvmName(name = \u201cname\u201d)</p> <p>val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema/Service/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/options/#options","title":"options","text":"<p>[common]\\</p> <p>@get:JvmName(name = \u201coptions\u201d)</p> <p>val options: Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/Service/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\ fun retainAll(schema: Schema, markSet: MarkSet): Service?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/rpc/","title":"Rpc","text":"<p>//wire-schema/com.squareup.wire.schema/Service/rpc</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/rpc/#rpc","title":"rpc","text":"<p>[common]\\ fun rpc(name: String): Rpc?</p> <p>Returns the RPC named name, or null if this service has no such method.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/rpcs/","title":"Rpcs","text":"<p>//wire-schema/com.squareup.wire.schema/Service/rpcs</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/rpcs/#rpcs","title":"rpcs","text":"<p>[common]\\</p> <p>@get:JvmName(name = \u201crpcs\u201d)</p> <p>val rpcs: List&lt;Rpc&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/type/","title":"Type","text":"<p>//wire-schema/com.squareup.wire.schema/Service/type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/type/#type","title":"type","text":"<p>[common]\\</p> <p>@get:JvmName(name = \u201ctype\u201d)</p> <p>val type: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/validate/","title":"Validate","text":"<p>//wire-schema/com.squareup.wire.schema/Service/validate</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/validate/#validate","title":"validate","text":"<p>[common]\\ fun validate(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Service/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/SyntaxRules</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/#syntaxrules","title":"SyntaxRules","text":"<p>[common]\\ interface SyntaxRules</p> <p>A set of rules which defines schema requirements for a specific Syntax.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/#functions","title":"Functions","text":"Name Summary getEncodeMode [common]abstract fun getEncodeMode(protoType: ProtoType, label: Field.Label?, isPacked: Boolean, isOneOf: Boolean): Field.EncodeMode isPackedByDefault [common]abstract fun isPackedByDefault(type: ProtoType, label: Field.Label?): Boolean jsonName [common]abstract fun jsonName(name: String, declaredJsonName: String?): String validateDefaultValue [common]abstract fun validateDefaultValue(hasDefaultValue: Boolean, errors: ErrorCollector) validateEnumConstants [common]abstract fun validateEnumConstants(constants: List&lt;EnumConstant&gt;, errors: ErrorCollector) validateExtension [common]abstract fun validateExtension(protoType: ProtoType, errors: ErrorCollector) validateTypeReference [common]abstract fun validateTypeReference(type: Type?, errors: ErrorCollector)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/get-encode-mode/","title":"Get encode mode","text":"<p>//wire-schema/com.squareup.wire.schema/SyntaxRules/getEncodeMode</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/get-encode-mode/#getencodemode","title":"getEncodeMode","text":"<p>[common]\\ abstract fun getEncodeMode(protoType: ProtoType, label: Field.Label?, isPacked: Boolean, isOneOf: Boolean): Field.EncodeMode</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/is-packed-by-default/","title":"Is packed by default","text":"<p>//wire-schema/com.squareup.wire.schema/SyntaxRules/isPackedByDefault</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/is-packed-by-default/#ispackedbydefault","title":"isPackedByDefault","text":"<p>[common]\\ abstract fun isPackedByDefault(type: ProtoType, label: Field.Label?): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/json-name/","title":"Json name","text":"<p>//wire-schema/com.squareup.wire.schema/SyntaxRules/jsonName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/json-name/#jsonname","title":"jsonName","text":"<p>[common]\\ abstract fun jsonName(name: String, declaredJsonName: String?): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-default-value/","title":"Validate default value","text":"<p>//wire-schema/com.squareup.wire.schema/SyntaxRules/validateDefaultValue</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-default-value/#validatedefaultvalue","title":"validateDefaultValue","text":"<p>[common]\\ abstract fun validateDefaultValue(hasDefaultValue: Boolean, errors: ErrorCollector)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-enum-constants/","title":"Validate enum constants","text":"<p>//wire-schema/com.squareup.wire.schema/SyntaxRules/validateEnumConstants</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-enum-constants/#validateenumconstants","title":"validateEnumConstants","text":"<p>[common]\\ abstract fun validateEnumConstants(constants: List&lt;EnumConstant&gt;, errors: ErrorCollector)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-extension/","title":"Validate extension","text":"<p>//wire-schema/com.squareup.wire.schema/SyntaxRules/validateExtension</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-extension/#validateextension","title":"validateExtension","text":"<p>[common]\\ abstract fun validateExtension(protoType: ProtoType, errors: ErrorCollector)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-type-reference/","title":"Validate type reference","text":"<p>//wire-schema/com.squareup.wire.schema/SyntaxRules/validateTypeReference</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-type-reference/#validatetypereference","title":"validateTypeReference","text":"<p>[common]\\ abstract fun validateTypeReference(type: Type?, errors: ErrorCollector)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/SyntaxRules/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/-companion/#functions","title":"Functions","text":"Name Summary get [common]fun get(syntax: Syntax?): SyntaxRules"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/-companion/get/","title":"Get","text":"<p>//wire-schema/com.squareup.wire.schema/SyntaxRules/Companion/get</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/-companion/get/#get","title":"get","text":"<p>[common]\\ fun get(syntax: Syntax?): SyntaxRules</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/#type","title":"Type","text":"<p>[common]\\ sealed class Type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/#functions","title":"Functions","text":"Name Summary linkMembers [common]abstract fun linkMembers(linker: Linker) linkOptions [common]abstract fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean) retainAll [common]abstract fun retainAll(schema: Schema, markSet: MarkSet): Type? retainLinked [common]abstract fun retainLinked(linkedTypes: Set&lt;ProtoType&gt;, linkedFields: Set&lt;Field&gt;): Type?Returns a copy of this containing only the types in linkedTypes and extensions in linkedFields, or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. typesAndNestedTypes [common]fun typesAndNestedTypes(): List&lt;Type&gt;Returns all types and subtypes which are linked to the type. validate [common]abstract fun validate(linker: Linker, syntaxRules: SyntaxRules)"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/#properties","title":"Properties","text":"Name Summary documentation [common]abstract val documentation: String location [common]abstract val location: Location name [common]abstract val name: String nestedExtendList [common]abstract val nestedExtendList: List&lt;Extend&gt; nestedTypes [common]abstract val nestedTypes: List&lt;Type&gt; options [common]abstract val options: Options syntax [common]abstract val syntax: Syntax type [common]abstract val type: ProtoType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/#inheritors","title":"Inheritors","text":"Name EnclosingType EnumType MessageType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema/Type/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/documentation/#documentation","title":"documentation","text":"<p>[common]\\ abstract val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/link-members/","title":"Link members","text":"<p>//wire-schema/com.squareup.wire.schema/Type/linkMembers</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/link-members/#linkmembers","title":"linkMembers","text":"<p>[common]\\ abstract fun linkMembers(linker: Linker)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/link-options/","title":"Link options","text":"<p>//wire-schema/com.squareup.wire.schema/Type/linkOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/link-options/#linkoptions","title":"linkOptions","text":"<p>[common]\\ abstract fun linkOptions(linker: Linker, syntaxRules: SyntaxRules, validate: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema/Type/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/location/#location","title":"location","text":"<p>[common]\\ abstract val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema/Type/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/name/#name","title":"name","text":"<p>[common]\\ abstract val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/nested-extend-list/","title":"Nested extend list","text":"<p>//wire-schema/com.squareup.wire.schema/Type/nestedExtendList</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/nested-extend-list/#nestedextendlist","title":"nestedExtendList","text":"<p>[common]\\ abstract val nestedExtendList: List&lt;Extend&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/nested-types/","title":"Nested types","text":"<p>//wire-schema/com.squareup.wire.schema/Type/nestedTypes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/nested-types/#nestedtypes","title":"nestedTypes","text":"<p>[common]\\ abstract val nestedTypes: List&lt;Type&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema/Type/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/options/#options","title":"options","text":"<p>[common]\\ abstract val options: Options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/retain-all/","title":"Retain all","text":"<p>//wire-schema/com.squareup.wire.schema/Type/retainAll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/retain-all/#retainall","title":"retainAll","text":"<p>[common]\\ abstract fun retainAll(schema: Schema, markSet: MarkSet): Type?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/retain-linked/","title":"Retain linked","text":"<p>//wire-schema/com.squareup.wire.schema/Type/retainLinked</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/retain-linked/#retainlinked","title":"retainLinked","text":"<p>[common]\\ abstract fun retainLinked(linkedTypes: Set&lt;ProtoType&gt;, linkedFields: Set&lt;Field&gt;): Type?</p> <p>Returns a copy of this containing only the types in linkedTypes and extensions in linkedFields, or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked.</p> <p>The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/syntax/","title":"Syntax","text":"<p>//wire-schema/com.squareup.wire.schema/Type/syntax</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/syntax/#syntax","title":"syntax","text":"<p>[common]\\ abstract val syntax: Syntax</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/type/","title":"Type","text":"<p>//wire-schema/com.squareup.wire.schema/Type/type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/type/#type","title":"type","text":"<p>[common]\\ abstract val type: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/types-and-nested-types/","title":"Types and nested types","text":"<p>//wire-schema/com.squareup.wire.schema/Type/typesAndNestedTypes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/types-and-nested-types/#typesandnestedtypes","title":"typesAndNestedTypes","text":"<p>[common]\\ fun typesAndNestedTypes(): List&lt;Type&gt;</p> <p>Returns all types and subtypes which are linked to the type.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/validate/","title":"Validate","text":"<p>//wire-schema/com.squareup.wire.schema/Type/validate</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/validate/#validate","title":"validate","text":"<p>[common]\\ abstract fun validate(linker: Linker, syntaxRules: SyntaxRules)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema/Type/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/#functions","title":"Functions","text":"Name Summary fromElements [common]@JvmStaticfun fromElements(packageName: String?, elements: List&lt;TypeElement&gt;, syntax: Syntax): List&lt;Type&gt; get [common]fun get(namespaces: List&lt;String&gt;, protoType: ProtoType, type: TypeElement, syntax: Syntax): Type toElements [common]@JvmStaticfun toElements(types: List&lt;Type&gt;): List&lt;TypeElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/from-elements/","title":"From elements","text":"<p>//wire-schema/com.squareup.wire.schema/Type/Companion/fromElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/from-elements/#fromelements","title":"fromElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun fromElements(packageName: String?, elements: List&lt;TypeElement&gt;, syntax: Syntax): List&lt;Type&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/get/","title":"Get","text":"<p>//wire-schema/com.squareup.wire.schema/Type/Companion/get</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/get/#get","title":"get","text":"<p>[common]\\ fun get(namespaces: List&lt;String&gt;, protoType: ProtoType, type: TypeElement, syntax: Syntax): Type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/to-elements/","title":"To elements","text":"<p>//wire-schema/com.squareup.wire.schema/Type/Companion/toElements</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/to-elements/#toelements","title":"toElements","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun toElements(types: List&lt;Type&gt;): List&lt;TypeElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/#package-comsquareupwireschemainternal","title":"Package com.squareup.wire.schema.internal","text":""},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/#types","title":"Types","text":"Name Summary DagChecker [common]class DagChecker&lt;N&gt;(nodes: Iterable&lt;N&gt;, edges: (N) -&gt; Iterable&lt;N&gt;)Checks whether a graph is a directed acyclic graph using Tarjan\u2019s algorithm. MutableQueue [common, js, jvm][common, js]interface MutableQueue&lt;T : Any&gt; : MutableCollection&lt;T&gt; [jvm]typealias MutableQueue = Queue&lt;T&gt; NameFactory [jvm]interface NameFactory&lt;T&gt;NameFactory is an abstraction for creating language-specific (Java vs Kotlin) type names. ProfileFileElement [common]data class ProfileFileElement(location: Location, packageName: String?, imports: List&lt;String&gt;, typeConfigs: List&lt;TypeConfigElement&gt;)A single .wire file. This file is structured similarly to a .proto file, but with different elements. ProfileParser [common]class ProfileParser(location: Location, data: String)Parses .wire files. SchemaEncoder [common]class SchemaEncoder(schema: Schema)This class encodes files from a Wire schema using the types in protobuf\u2019s descriptor.proto. Unfortunately, the two models don\u2019t line up directly: TypeConfigElement [common]data class TypeConfigElement(location: Location, type: String?, documentation: String, with: List&lt;OptionElement&gt;, target: String?, adapter: String?)Configures how Wire will generate code for a specific type. This configuration belongs in a build.wire file that is in the same directory as the configured type. TypeMover [common]class TypeMover(oldSchema: Schema, moves: List&lt;TypeMover.Move&gt;)Refactor a schema by moving a proto type declaration."},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/#functions","title":"Functions","text":"Name Summary annotationName [jvm]fun &lt;T&gt; annotationName(protoFile: ProtoFile, extension: Field, factory: NameFactory&lt;T&gt;): T annotationTargetType [jvm]fun annotationTargetType(extend: Extend): ElementType? appendDocumentation [common]fun StringBuilder.appendDocumentation(documentation: String) appendIndented [common]fun StringBuilder.appendIndented(value: String) builtInAdapterString [jvm]fun builtInAdapterString(type: ProtoType): String? eligibleAsAnnotationMember [jvm]fun eligibleAsAnnotationMember(schema: Schema, field: Field): Boolean hasEponymousType [jvm]fun hasEponymousType(schema: Schema, field: Field): Boolean javaPackage [jvm]fun javaPackage(protoFile: ProtoFile): String legacyQualifiedFieldName [jvm]fun legacyQualifiedFieldName(field: Field): String optionValueToInt [jvm]fun optionValueToInt(value: Any?): Int optionValueToLong [jvm]fun optionValueToLong(value: Any?): Long withStubs [common]fun Schema.withStubs(typesToStub: Set&lt;ProtoType&gt;): SchemaReplace types in this schema which are present in typesToStub with empty shells that have no outward references. This has to be done in this module so that we can access the internal constructor to avoid re-linking. withUnixSlashes [common]fun Path.withUnixSlashes(): Path"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/annotation-name/","title":"Annotation name","text":"<p>//wire-schema/com.squareup.wire.schema.internal/annotationName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/annotation-name/#annotationname","title":"annotationName","text":"<p>[jvm]\\ fun &lt;T&gt; annotationName(protoFile: ProtoFile, extension: Field, factory: NameFactory&lt;T&gt;): T</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/annotation-target-type/","title":"Annotation target type","text":"<p>//wire-schema/com.squareup.wire.schema.internal/annotationTargetType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/annotation-target-type/#annotationtargettype","title":"annotationTargetType","text":"<p>[jvm]\\ fun annotationTargetType(extend: Extend): ElementType?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/append-documentation/","title":"Append documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal/appendDocumentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/append-documentation/#appenddocumentation","title":"appendDocumentation","text":"<p>[common]\\ fun StringBuilder.appendDocumentation(documentation: String)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/append-indented/","title":"Append indented","text":"<p>//wire-schema/com.squareup.wire.schema.internal/appendIndented</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/append-indented/#appendindented","title":"appendIndented","text":"<p>[common]\\ fun StringBuilder.appendIndented(value: String)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/built-in-adapter-string/","title":"Built in adapter string","text":"<p>//wire-schema/com.squareup.wire.schema.internal/builtInAdapterString</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/built-in-adapter-string/#builtinadapterstring","title":"builtInAdapterString","text":"<p>[jvm]\\ fun builtInAdapterString(type: ProtoType): String?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/eligible-as-annotation-member/","title":"Eligible as annotation member","text":"<p>//wire-schema/com.squareup.wire.schema.internal/eligibleAsAnnotationMember</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/eligible-as-annotation-member/#eligibleasannotationmember","title":"eligibleAsAnnotationMember","text":"<p>[jvm]\\ fun eligibleAsAnnotationMember(schema: Schema, field: Field): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/has-eponymous-type/","title":"Has eponymous type","text":"<p>//wire-schema/com.squareup.wire.schema.internal/hasEponymousType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/has-eponymous-type/#haseponymoustype","title":"hasEponymousType","text":"<p>[jvm]\\ fun hasEponymousType(schema: Schema, field: Field): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/java-package/","title":"Java package","text":"<p>//wire-schema/com.squareup.wire.schema.internal/javaPackage</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/java-package/#javapackage","title":"javaPackage","text":"<p>[jvm]\\ fun javaPackage(protoFile: ProtoFile): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/legacy-qualified-field-name/","title":"Legacy qualified field name","text":"<p>//wire-schema/com.squareup.wire.schema.internal/legacyQualifiedFieldName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/legacy-qualified-field-name/#legacyqualifiedfieldname","title":"legacyQualifiedFieldName","text":"<p>[jvm]\\ fun legacyQualifiedFieldName(field: Field): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/option-value-to-int/","title":"Option value to int","text":"<p>//wire-schema/com.squareup.wire.schema.internal/optionValueToInt</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/option-value-to-int/#optionvaluetoint","title":"optionValueToInt","text":"<p>[jvm]\\ fun optionValueToInt(value: Any?): Int</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/option-value-to-long/","title":"Option value to long","text":"<p>//wire-schema/com.squareup.wire.schema.internal/optionValueToLong</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/option-value-to-long/#optionvaluetolong","title":"optionValueToLong","text":"<p>[jvm]\\ fun optionValueToLong(value: Any?): Long</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/with-stubs/","title":"With stubs","text":"<p>//wire-schema/com.squareup.wire.schema.internal/withStubs</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/with-stubs/#withstubs","title":"withStubs","text":"<p>[common]\\ fun Schema.withStubs(typesToStub: Set&lt;ProtoType&gt;): Schema</p> <p>Replace types in this schema which are present in typesToStub with empty shells that have no outward references. This has to be done in this module so that we can access the internal constructor to avoid re-linking.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/with-unix-slashes/","title":"With unix slashes","text":"<p>//wire-schema/com.squareup.wire.schema.internal/withUnixSlashes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/with-unix-slashes/#withunixslashes","title":"withUnixSlashes","text":"<p>[common]\\ fun Path.withUnixSlashes(): Path</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal/DagChecker</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/#dagchecker","title":"DagChecker","text":"<p>[common]\\ class DagChecker&lt;N&gt;(nodes: Iterable&lt;N&gt;, edges: (N) -&gt; Iterable&lt;N&gt;)</p> <p>Checks whether a graph is a directed acyclic graph using Tarjan\u2019s algorithm.</p> <p>Note that all cycles are strongly connected components, but a strongly connected component is not strictly a cycle. In particular it may contain nodes that are mutually reachable from each other through multiple paths.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/#constructors","title":"Constructors","text":"DagChecker [common]fun &lt;N&gt; DagChecker(nodes: Iterable&lt;N&gt;, edges: (N) -&gt; Iterable&lt;N&gt;)"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/#functions","title":"Functions","text":"Name Summary check [common]fun check(): Set&lt;List&lt;N&gt;&gt;Returns a set of strongly connected components. Each strongly connected component is a list of nodes that are mutually reachable to each other."},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/-dag-checker/","title":"dag checker","text":"<p>//wire-schema/com.squareup.wire.schema.internal/DagChecker/DagChecker</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/-dag-checker/#dagchecker","title":"DagChecker","text":"<p>[common]\\ fun &lt;N&gt; DagChecker(nodes: Iterable&lt;N&gt;, edges: (N) -&gt; Iterable&lt;N&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/check/","title":"Check","text":"<p>//wire-schema/com.squareup.wire.schema.internal/DagChecker/check</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/check/#check","title":"check","text":"<p>[common]\\ fun check(): Set&lt;List&lt;N&gt;&gt;</p> <p>Returns a set of strongly connected components. Each strongly connected component is a list of nodes that are mutually reachable to each other.</p> <p>If the graph contains nodes that have self edges but are not strongly connected to any other nodes, those nodes will be single-element lists in the result.</p> <p>If the result is empty the graph is acyclic.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal/MutableQueue</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/#mutablequeue","title":"MutableQueue","text":"<p>[common, js]\\ interface MutableQueue&lt;T : Any&gt; : MutableCollection&lt;T&gt;</p> <p>[jvm]\\ typealias MutableQueue = Queue&lt;T&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/#functions","title":"Functions","text":"Name Summary add [common, js][common]abstract fun add(element: T): Boolean[js]abstract fun add(element: T): Boolean addAll [common, js][common]abstract fun addAll(elements: Collection&lt;T&gt;): Boolean[js]abstract fun addAll(elements: Collection&lt;T&gt;): Boolean clear [common, js][common]abstract fun clear()[js]abstract fun clear() contains [common, js][common]abstract operator fun contains(element: T): Boolean[js]abstract operator fun contains(element: T): Boolean containsAll [common, js][common]abstract fun containsAll(elements: Collection&lt;T&gt;): Boolean[js]abstract fun containsAll(elements: Collection&lt;T&gt;): Boolean isEmpty [common, js][common]abstract fun isEmpty(): Boolean[js]abstract fun isEmpty(): Boolean iterator [common, js][common]abstract operator override fun iterator(): MutableIterator&lt;T&gt;[js]abstract operator override fun iterator(): MutableIterator&lt;T&gt; poll [common, js][common, js]abstract fun poll(): T? remove [common, js][common]abstract fun remove(element: T): Boolean[js]abstract fun remove(element: T): Boolean removeAll [common, js][common]abstract fun removeAll(elements: Collection&lt;T&gt;): Boolean[js]abstract fun removeAll(elements: Collection&lt;T&gt;): Boolean retainAll [common, js][common]abstract fun retainAll(elements: Collection&lt;T&gt;): Boolean[js]abstract fun retainAll(elements: Collection&lt;T&gt;): Boolean"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/#properties","title":"Properties","text":"Name Summary size [common]abstract val size: Int size [js]abstract val size: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/poll/","title":"Poll","text":"<p>//wire-schema/com.squareup.wire.schema.internal/MutableQueue/poll</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/poll/#poll","title":"poll","text":"<p>[common, js]\\ [common, js]\\ abstract fun poll(): T?</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-name-factory/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal/NameFactory</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-name-factory/#namefactory","title":"NameFactory","text":"<p>[jvm]\\ interface NameFactory&lt;T&gt;</p> <p>NameFactory is an abstraction for creating language-specific (Java vs Kotlin) type names.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-name-factory/#functions","title":"Functions","text":"Name Summary nestedName [jvm]abstract fun nestedName(enclosing: T, simpleName: String): T newName [jvm]abstract fun newName(packageName: String, simpleName: String): T"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-name-factory/nested-name/","title":"Nested name","text":"<p>//wire-schema/com.squareup.wire.schema.internal/NameFactory/nestedName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-name-factory/nested-name/#nestedname","title":"nestedName","text":"<p>[jvm]\\ abstract fun nestedName(enclosing: T, simpleName: String): T</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-name-factory/new-name/","title":"New name","text":"<p>//wire-schema/com.squareup.wire.schema.internal/NameFactory/newName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-name-factory/new-name/#newname","title":"newName","text":"<p>[jvm]\\ abstract fun newName(packageName: String, simpleName: String): T</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal/ProfileFileElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/#profilefileelement","title":"ProfileFileElement","text":"<p>[common]\\ data class ProfileFileElement(location: Location, packageName: String?, imports: List&lt;String&gt;, typeConfigs: List&lt;TypeConfigElement&gt;)</p> <p>A single .wire file. This file is structured similarly to a .proto file, but with different elements.</p> <p>File Structure</p> <p>A project may have 0 or more .wire files. These files should be in the same directory as the .proto files so they may be automatically discovered by Wire.</p> <p>Each file starts with a syntax declaration. The syntax must be \u201cwire2\u201d. This is followed by an optional package declaration, which should match to the package declarations of the .proto files in the directory.</p> <p>Profiles may import any number of proto files. Note that it is an error to import .wire files. These imports are used to resolve types specified later in the file.</p> <p>Profiles may specify any number of type configurations. These specify a fully qualified type, its target Java type, and an adapter to do the encoding and decoding.</p> <p>syntax = \u201cwire2\u201d;\\ package squareup.dinosaurs;\\ \\ import \u201csquareup/geology/period.proto\u201d;\\ \\ // Roar!\\ type squareup.dinosaurs.Dinosaur {\\ target com.squareup.dino.Dinosaur using com.squareup.dino.Dinosaurs#DINO_ADAPTER;\\ }</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/#constructors","title":"Constructors","text":"ProfileFileElement [common]fun ProfileFileElement(location: Location, packageName: String? = null, imports: List&lt;String&gt; = emptyList(), typeConfigs: List&lt;TypeConfigElement&gt; = emptyList())"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/#properties","title":"Properties","text":"Name Summary imports [common]val imports: List&lt;String&gt; location [common]val location: Location packageName [common]val packageName: String? = null typeConfigs [common]val typeConfigs: List&lt;TypeConfigElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/-profile-file-element/","title":"profile file element","text":"<p>//wire-schema/com.squareup.wire.schema.internal/ProfileFileElement/ProfileFileElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/-profile-file-element/#profilefileelement","title":"ProfileFileElement","text":"<p>[common]\\ fun ProfileFileElement(location: Location, packageName: String? = null, imports: List&lt;String&gt; = emptyList(), typeConfigs: List&lt;TypeConfigElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/imports/","title":"Imports","text":"<p>//wire-schema/com.squareup.wire.schema.internal/ProfileFileElement/imports</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/imports/#imports","title":"imports","text":"<p>[common]\\ val imports: List&lt;String&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal/ProfileFileElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/package-name/","title":"Package name","text":"<p>//wire-schema/com.squareup.wire.schema.internal/ProfileFileElement/packageName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/package-name/#packagename","title":"packageName","text":"<p>[common]\\ val packageName: String? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal/ProfileFileElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/type-configs/","title":"Type configs","text":"<p>//wire-schema/com.squareup.wire.schema.internal/ProfileFileElement/typeConfigs</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/type-configs/#typeconfigs","title":"typeConfigs","text":"<p>[common]\\ val typeConfigs: List&lt;TypeConfigElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal/ProfileParser</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/#profileparser","title":"ProfileParser","text":"<p>[common]\\ class ProfileParser(location: Location, data: String)</p> <p>Parses .wire files.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/#constructors","title":"Constructors","text":"ProfileParser [common]fun ProfileParser(location: Location, data: String)"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/#functions","title":"Functions","text":"Name Summary read [common]fun read(): ProfileFileElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/-profile-parser/","title":"profile parser","text":"<p>//wire-schema/com.squareup.wire.schema.internal/ProfileParser/ProfileParser</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/-profile-parser/#profileparser","title":"ProfileParser","text":"<p>[common]\\ fun ProfileParser(location: Location, data: String)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/read/","title":"Read","text":"<p>//wire-schema/com.squareup.wire.schema.internal/ProfileParser/read</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/read/#read","title":"read","text":"<p>[common]\\ fun read(): ProfileFileElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal/SchemaEncoder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/#schemaencoder","title":"SchemaEncoder","text":"<p>[common]\\ class SchemaEncoder(schema: Schema)</p> <p>This class encodes files from a Wire schema using the types in protobuf\u2019s descriptor.proto. Unfortunately, the two models don\u2019t line up directly:</p> <ul><li>Wire keeps a heterogeneous list of messages and enums; descriptor.proto keeps each in its     own list.</li><li>Descriptors don't have first class support for [Field.EncodeMode.OMIT_IDENTITY](../../com.squareup.wire.schema/-field/-encode-mode/-o-m-i-t_-i-d-e-n-t-i-t-y/index.md), which is the     default in proto3. Instead these are synthesized with oneofs.</li><li>Descriptors don't support maps. Instead these are synthesized with entry classes.</li></ul> <p>This file requires we manually keep tags and types in sync with descriptor.proto.</p> <p>TODO(jwilson): this class doesn\u2019t yet extension ranges and several other fields that are     commented out below.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/#constructors","title":"Constructors","text":"SchemaEncoder [common]fun SchemaEncoder(schema: Schema)"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/#functions","title":"Functions","text":"Name Summary encode [common]fun encode(protoFile: ProtoFile): ByteString"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/-schema-encoder/","title":"schema encoder","text":"<p>//wire-schema/com.squareup.wire.schema.internal/SchemaEncoder/SchemaEncoder</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/-schema-encoder/#schemaencoder","title":"SchemaEncoder","text":"<p>[common]\\ fun SchemaEncoder(schema: Schema)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/encode/","title":"Encode","text":"<p>//wire-schema/com.squareup.wire.schema.internal/SchemaEncoder/encode</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/encode/#encode","title":"encode","text":"<p>[common]\\ fun encode(protoFile: ProtoFile): ByteString</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeConfigElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/#typeconfigelement","title":"TypeConfigElement","text":"<p>[common]\\ data class TypeConfigElement(location: Location, type: String?, documentation: String, with: List&lt;OptionElement&gt;, target: String?, adapter: String?)</p> <p>Configures how Wire will generate code for a specific type. This configuration belongs in a build.wire file that is in the same directory as the configured type.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/#constructors","title":"Constructors","text":"TypeConfigElement [common]fun TypeConfigElement(location: Location, type: String? = null, documentation: String = \u201c\u201d, with: List&lt;OptionElement&gt; = emptyList(), target: String? = null, adapter: String? = null)"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/#properties","title":"Properties","text":"Name Summary adapter [common]val adapter: String? = null documentation [common]val documentation: String location [common]val location: Location target [common]val target: String? = null type [common]val type: String? = null with [common]val with: List&lt;OptionElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/-type-config-element/","title":"type config element","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeConfigElement/TypeConfigElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/-type-config-element/#typeconfigelement","title":"TypeConfigElement","text":"<p>[common]\\ fun TypeConfigElement(location: Location, type: String? = null, documentation: String = \u201c\u201d, with: List&lt;OptionElement&gt; = emptyList(), target: String? = null, adapter: String? = null)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/adapter/","title":"Adapter","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeConfigElement/adapter</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/adapter/#adapter","title":"adapter","text":"<p>[common]\\ val adapter: String? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeConfigElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeConfigElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/target/","title":"Target","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeConfigElement/target</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/target/#target","title":"target","text":"<p>[common]\\ val target: String? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeConfigElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/type/","title":"Type","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeConfigElement/type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/type/#type","title":"type","text":"<p>[common]\\ val type: String? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/with/","title":"With","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeConfigElement/with</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/with/#with","title":"with","text":"<p>[common]\\ val with: List&lt;OptionElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeMover</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/#typemover","title":"TypeMover","text":"<p>[common]\\ class TypeMover(oldSchema: Schema, moves: List&lt;TypeMover.Move&gt;)</p> <p>Refactor a schema by moving a proto type declaration.</p> <p>This class attempts to avoid making unnecessary changes to the target schema. For example, it won\u2019t remove unused imports if they are unrelated to the types being moved.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/#constructors","title":"Constructors","text":"TypeMover [common]fun TypeMover(oldSchema: Schema, moves: List&lt;TypeMover.Move&gt;)"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/#types","title":"Types","text":"Name Summary Move [common]data class Move(type: ProtoType, targetPath: String)"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/#functions","title":"Functions","text":"Name Summary move [common]fun move(): Schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-type-mover/","title":"type mover","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeMover/TypeMover</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-type-mover/#typemover","title":"TypeMover","text":"<p>[common]\\ fun TypeMover(oldSchema: Schema, moves: List&lt;TypeMover.Move&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/move/","title":"Move","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeMover/move</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/move/#move","title":"move","text":"<p>[common]\\ fun move(): Schema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeMover/Move</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/#move","title":"Move","text":"<p>[common]\\ data class Move(type: ProtoType, targetPath: String)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/#properties","title":"Properties","text":"Name Summary targetPath [common]val targetPath: String type [common]val type: ProtoType"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/-move/","title":"move","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeMover/Move/Move</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/-move/#move","title":"Move","text":"<p>[common]\\ fun Move(type: ProtoType, targetPath: String)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/target-path/","title":"Target path","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeMover/Move/targetPath</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/target-path/#targetpath","title":"targetPath","text":"<p>[common]\\ val targetPath: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/type/","title":"Type","text":"<p>//wire-schema/com.squareup.wire.schema.internal/TypeMover/Move/type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/type/#type","title":"type","text":"<p>[common]\\ val type: ProtoType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/#package-comsquareupwireschemainternalparser","title":"Package com.squareup.wire.schema.internal.parser","text":""},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/#types","title":"Types","text":"Name Summary EnumConstantElement [common]data class EnumConstantElement(location: Location, name: String, tag: Int, documentation: String, options: List&lt;OptionElement&gt;) EnumElement [common]data class EnumElement(location: Location, name: String, documentation: String, options: List&lt;OptionElement&gt;, constants: List&lt;EnumConstantElement&gt;, reserveds: List&lt;ReservedElement&gt;) : TypeElement ExtendElement [common]data class ExtendElement(location: Location, name: String, documentation: String, fields: List&lt;FieldElement&gt;) ExtensionsElement [common]data class ExtensionsElement(location: Location, documentation: String, values: List&lt;Any&gt;) FieldElement [common]data class FieldElement(location: Location, label: Field.Label?, type: String, name: String, defaultValue: String?, jsonName: String?, tag: Int, documentation: String, options: List&lt;OptionElement&gt;) GroupElement [common]data class GroupElement(label: Field.Label?, location: Location, name: String, tag: Int, documentation: String, fields: List&lt;FieldElement&gt;) MessageElement [common]data class MessageElement(location: Location, name: String, documentation: String, nestedTypes: List&lt;TypeElement&gt;, options: List&lt;OptionElement&gt;, reserveds: List&lt;ReservedElement&gt;, fields: List&lt;FieldElement&gt;, oneOfs: List&lt;OneOfElement&gt;, extensions: List&lt;ExtensionsElement&gt;, groups: List&lt;GroupElement&gt;, extendDeclarations: List&lt;ExtendElement&gt;) : TypeElement OneOfElement [common]data class OneOfElement(name: String, documentation: String, fields: List&lt;FieldElement&gt;, groups: List&lt;GroupElement&gt;, options: List&lt;OptionElement&gt;) OptionElement [common]data class OptionElement(name: String, kind: OptionElement.Kind, value: Any, isParenthesized: Boolean) OptionReader [common]class OptionReader(reader: SyntaxReader) ProtoFileElement [common]data class ProtoFileElement(location: Location, packageName: String?, syntax: Syntax?, imports: List&lt;String&gt;, publicImports: List&lt;String&gt;, types: List&lt;TypeElement&gt;, services: List&lt;ServiceElement&gt;, extendDeclarations: List&lt;ExtendElement&gt;, options: List&lt;OptionElement&gt;)A single .proto file. ProtoParser [common]class ProtoParserBasic parser for .proto schema declarations. ReservedElement [common]data class ReservedElement(location: Location, documentation: String, values: List&lt;Any&gt;) RpcElement [common]data class RpcElement(location: Location, name: String, documentation: String, requestType: String, responseType: String, requestStreaming: Boolean, responseStreaming: Boolean, options: List&lt;OptionElement&gt;) ServiceElement [common]data class ServiceElement(location: Location, name: String, documentation: String, rpcs: List&lt;RpcElement&gt;, options: List&lt;OptionElement&gt;) SyntaxReader [common]class SyntaxReader(data: CharArray, location: Location)A general purpose reader for formats like .proto. TypeElement [common]interface TypeElementA message type or enum type declaration."},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumConstantElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/#enumconstantelement","title":"EnumConstantElement","text":"<p>[common]\\ data class EnumConstantElement(location: Location, name: String, tag: Int, documentation: String, options: List&lt;OptionElement&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String location [common]val location: Location name [common]val name: String options [common]val options: List&lt;OptionElement&gt; tag [common]val tag: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/-enum-constant-element/","title":"enum constant element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumConstantElement/EnumConstantElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/-enum-constant-element/#enumconstantelement","title":"EnumConstantElement","text":"<p>[common]\\ fun EnumConstantElement(location: Location, name: String, tag: Int, documentation: String = \u201c\u201d, options: List&lt;OptionElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumConstantElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumConstantElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumConstantElement/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumConstantElement/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/options/#options","title":"options","text":"<p>[common]\\ val options: List&lt;OptionElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/tag/","title":"Tag","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumConstantElement/tag</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/tag/#tag","title":"tag","text":"<p>[common]\\ val tag: Int</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumConstantElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/#enumelement","title":"EnumElement","text":"<p>[common]\\ data class EnumElement(location: Location, name: String, documentation: String, options: List&lt;OptionElement&gt;, constants: List&lt;EnumConstantElement&gt;, reserveds: List&lt;ReservedElement&gt;) : TypeElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/#functions","title":"Functions","text":"Name Summary toSchema [common]open override fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/#properties","title":"Properties","text":"Name Summary constants [common]val constants: List&lt;EnumConstantElement&gt; documentation [common]open override val documentation: String location [common]open override val location: Location name [common]open override val name: String nestedTypes [common]open override val nestedTypes: List&lt;TypeElement&gt; options [common]open override val options: List&lt;OptionElement&gt; reserveds [common]val reserveds: List&lt;ReservedElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/-enum-element/","title":"enum element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumElement/EnumElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/-enum-element/#enumelement","title":"EnumElement","text":"<p>[common]\\ fun EnumElement(location: Location, name: String, documentation: String = \u201c\u201d, options: List&lt;OptionElement&gt; = emptyList(), constants: List&lt;EnumConstantElement&gt; = emptyList(), reserveds: List&lt;ReservedElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/constants/","title":"Constants","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumElement/constants</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/constants/#constants","title":"constants","text":"<p>[common]\\ val constants: List&lt;EnumConstantElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ open override val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/location/#location","title":"location","text":"<p>[common]\\ open override val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumElement/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/name/#name","title":"name","text":"<p>[common]\\ open override val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/nested-types/","title":"Nested types","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumElement/nestedTypes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/nested-types/#nestedtypes","title":"nestedTypes","text":"<p>[common]\\ open override val nestedTypes: List&lt;TypeElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumElement/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/options/#options","title":"options","text":"<p>[common]\\ open override val options: List&lt;OptionElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/reserveds/","title":"Reserveds","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumElement/reserveds</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/reserveds/#reserveds","title":"reserveds","text":"<p>[common]\\ val reserveds: List&lt;ReservedElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/EnumElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ open override fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtendElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/#extendelement","title":"ExtendElement","text":"<p>[common]\\ data class ExtendElement(location: Location, name: String, documentation: String, fields: List&lt;FieldElement&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String fields [common]val fields: List&lt;FieldElement&gt; location [common]val location: Location name [common]val name: String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/-extend-element/","title":"extend element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtendElement/ExtendElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/-extend-element/#extendelement","title":"ExtendElement","text":"<p>[common]\\ fun ExtendElement(location: Location, name: String, documentation: String = \u201c\u201d, fields: List&lt;FieldElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtendElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/fields/","title":"Fields","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtendElement/fields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/fields/#fields","title":"fields","text":"<p>[common]\\ val fields: List&lt;FieldElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtendElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtendElement/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtendElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtensionsElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/#extensionselement","title":"ExtensionsElement","text":"<p>[common]\\ data class ExtensionsElement(location: Location, documentation: String, values: List&lt;Any&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String location [common]val location: Location values [common]val values: List&lt;Any&gt;An Int or IntRange tag."},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/-extensions-element/","title":"extensions element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtensionsElement/ExtensionsElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/-extensions-element/#extensionselement","title":"ExtensionsElement","text":"<p>[common]\\ fun ExtensionsElement(location: Location, documentation: String = \u201c\u201d, values: List&lt;Any&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtensionsElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtensionsElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtensionsElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/values/","title":"Values","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ExtensionsElement/values</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/values/#values","title":"values","text":"<p>[common]\\ val values: List&lt;Any&gt;</p> <p>An Int or IntRange tag.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/#fieldelement","title":"FieldElement","text":"<p>[common]\\ data class FieldElement(location: Location, label: Field.Label?, type: String, name: String, defaultValue: String?, jsonName: String?, tag: Int, documentation: String, options: List&lt;OptionElement&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/#properties","title":"Properties","text":"Name Summary defaultValue [common]val defaultValue: String? = null documentation [common]val documentation: String jsonName [common]val jsonName: String? = null label [common]val label: Field.Label? = null location [common]val location: Location name [common]val name: String options [common]val options: List&lt;OptionElement&gt; tag [common]val tag: Int = 0 type [common]val type: String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/-field-element/","title":"field element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement/FieldElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/-field-element/#fieldelement","title":"FieldElement","text":"<p>[common]\\ fun FieldElement(location: Location, label: Field.Label? = null, type: String, name: String, defaultValue: String? = null, jsonName: String? = null, tag: Int = 0, documentation: String = \u201c\u201d, options: List&lt;OptionElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/default-value/","title":"Default value","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement/defaultValue</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/default-value/#defaultvalue","title":"defaultValue","text":"<p>[common]\\ val defaultValue: String? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/json-name/","title":"Json name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement/jsonName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/json-name/#jsonname","title":"jsonName","text":"<p>[common]\\ val jsonName: String? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/label/","title":"Label","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement/label</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/label/#label","title":"label","text":"<p>[common]\\ val label: Field.Label? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/options/#options","title":"options","text":"<p>[common]\\ val options: List&lt;OptionElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/tag/","title":"Tag","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement/tag</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/tag/#tag","title":"tag","text":"<p>[common]\\ val tag: Int = 0</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/type/","title":"Type","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/FieldElement/type</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/type/#type","title":"type","text":"<p>[common]\\ val type: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/GroupElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/#groupelement","title":"GroupElement","text":"<p>[common]\\ data class GroupElement(label: Field.Label?, location: Location, name: String, tag: Int, documentation: String, fields: List&lt;FieldElement&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String fields [common]val fields: List&lt;FieldElement&gt; label [common]val label: Field.Label? = null location [common]val location: Location name [common]val name: String tag [common]val tag: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/-group-element/","title":"group element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/GroupElement/GroupElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/-group-element/#groupelement","title":"GroupElement","text":"<p>[common]\\ fun GroupElement(label: Field.Label? = null, location: Location, name: String, tag: Int, documentation: String = \u201c\u201d, fields: List&lt;FieldElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/GroupElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/fields/","title":"Fields","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/GroupElement/fields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/fields/#fields","title":"fields","text":"<p>[common]\\ val fields: List&lt;FieldElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/label/","title":"Label","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/GroupElement/label</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/label/#label","title":"label","text":"<p>[common]\\ val label: Field.Label? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/GroupElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/GroupElement/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/tag/","title":"Tag","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/GroupElement/tag</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/tag/#tag","title":"tag","text":"<p>[common]\\ val tag: Int</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/GroupElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/#messageelement","title":"MessageElement","text":"<p>[common]\\ data class MessageElement(location: Location, name: String, documentation: String, nestedTypes: List&lt;TypeElement&gt;, options: List&lt;OptionElement&gt;, reserveds: List&lt;ReservedElement&gt;, fields: List&lt;FieldElement&gt;, oneOfs: List&lt;OneOfElement&gt;, extensions: List&lt;ExtensionsElement&gt;, groups: List&lt;GroupElement&gt;, extendDeclarations: List&lt;ExtendElement&gt;) : TypeElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/#functions","title":"Functions","text":"Name Summary toSchema [common]open override fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/#properties","title":"Properties","text":"Name Summary documentation [common]open override val documentation: String extendDeclarations [common]val extendDeclarations: List&lt;ExtendElement&gt; extensions [common]val extensions: List&lt;ExtensionsElement&gt; fields [common]val fields: List&lt;FieldElement&gt; groups [common]val groups: List&lt;GroupElement&gt; location [common]open override val location: Location name [common]open override val name: String nestedTypes [common]open override val nestedTypes: List&lt;TypeElement&gt; oneOfs [common]val oneOfs: List&lt;OneOfElement&gt; options [common]open override val options: List&lt;OptionElement&gt; reserveds [common]val reserveds: List&lt;ReservedElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/-message-element/","title":"message element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/MessageElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/-message-element/#messageelement","title":"MessageElement","text":"<p>[common]\\ fun MessageElement(location: Location, name: String, documentation: String = \u201c\u201d, nestedTypes: List&lt;TypeElement&gt; = emptyList(), options: List&lt;OptionElement&gt; = emptyList(), reserveds: List&lt;ReservedElement&gt; = emptyList(), fields: List&lt;FieldElement&gt; = emptyList(), oneOfs: List&lt;OneOfElement&gt; = emptyList(), extensions: List&lt;ExtensionsElement&gt; = emptyList(), groups: List&lt;GroupElement&gt; = emptyList(), extendDeclarations: List&lt;ExtendElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ open override val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/extend-declarations/","title":"Extend declarations","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/extendDeclarations</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/extend-declarations/#extenddeclarations","title":"extendDeclarations","text":"<p>[common]\\ val extendDeclarations: List&lt;ExtendElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/extensions/","title":"Extensions","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/extensions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/extensions/#extensions","title":"extensions","text":"<p>[common]\\ val extensions: List&lt;ExtensionsElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/fields/","title":"Fields","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/fields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/fields/#fields","title":"fields","text":"<p>[common]\\ val fields: List&lt;FieldElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/groups/","title":"Groups","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/groups</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/groups/#groups","title":"groups","text":"<p>[common]\\ val groups: List&lt;GroupElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/location/#location","title":"location","text":"<p>[common]\\ open override val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/name/#name","title":"name","text":"<p>[common]\\ open override val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/nested-types/","title":"Nested types","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/nestedTypes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/nested-types/#nestedtypes","title":"nestedTypes","text":"<p>[common]\\ open override val nestedTypes: List&lt;TypeElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/one-ofs/","title":"One ofs","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/oneOfs</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/one-ofs/#oneofs","title":"oneOfs","text":"<p>[common]\\ val oneOfs: List&lt;OneOfElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/options/#options","title":"options","text":"<p>[common]\\ open override val options: List&lt;OptionElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/reserveds/","title":"Reserveds","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/reserveds</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/reserveds/#reserveds","title":"reserveds","text":"<p>[common]\\ val reserveds: List&lt;ReservedElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/MessageElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ open override fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OneOfElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/#oneofelement","title":"OneOfElement","text":"<p>[common]\\ data class OneOfElement(name: String, documentation: String, fields: List&lt;FieldElement&gt;, groups: List&lt;GroupElement&gt;, options: List&lt;OptionElement&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String fields [common]val fields: List&lt;FieldElement&gt; groups [common]val groups: List&lt;GroupElement&gt; name [common]val name: String options [common]val options: List&lt;OptionElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/-one-of-element/","title":"one of element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OneOfElement/OneOfElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/-one-of-element/#oneofelement","title":"OneOfElement","text":"<p>[common]\\ fun OneOfElement(name: String, documentation: String = \u201c\u201d, fields: List&lt;FieldElement&gt; = emptyList(), groups: List&lt;GroupElement&gt; = emptyList(), options: List&lt;OptionElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OneOfElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/fields/","title":"Fields","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OneOfElement/fields</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/fields/#fields","title":"fields","text":"<p>[common]\\ val fields: List&lt;FieldElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/groups/","title":"Groups","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OneOfElement/groups</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/groups/#groups","title":"groups","text":"<p>[common]\\ val groups: List&lt;GroupElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OneOfElement/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OneOfElement/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/options/#options","title":"options","text":"<p>[common]\\ val options: List&lt;OptionElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OneOfElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/#optionelement","title":"OptionElement","text":"<p>[common]\\ data class OptionElement(name: String, kind: OptionElement.Kind, value: Any, isParenthesized: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/#types","title":"Types","text":"Name Summary Companion [common]object Companion Kind [common]enum Kind : Enum&lt;OptionElement.Kind&gt; OptionPrimitive [common]data class OptionPrimitive(kind: OptionElement.Kind, value: Any)An internal representation of the Option primitive types."},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String toSchemaDeclaration [common]fun toSchemaDeclaration(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/#properties","title":"Properties","text":"Name Summary isParenthesized [common]val isParenthesized: BooleanIf true, this OptionElement is a custom option. kind [common]val kind: OptionElement.Kind name [common]val name: String value [common]val value: Any"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-element/","title":"option element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/OptionElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-element/#optionelement","title":"OptionElement","text":"<p>[common]\\ fun OptionElement(name: String, kind: OptionElement.Kind, value: Any, isParenthesized: Boolean)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/is-parenthesized/","title":"Is parenthesized","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/isParenthesized</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/is-parenthesized/#isparenthesized","title":"isParenthesized","text":"<p>[common]\\ val isParenthesized: Boolean</p> <p>If true, this OptionElement is a custom option.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/kind/","title":"Kind","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/kind</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/kind/#kind","title":"kind","text":"<p>[common]\\ val kind: OptionElement.Kind</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/to-schema-declaration/","title":"To schema declaration","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/toSchemaDeclaration</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/to-schema-declaration/#toschemadeclaration","title":"toSchemaDeclaration","text":"<p>[common]\\ fun toSchemaDeclaration(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/value/","title":"Value","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/value</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/value/#value","title":"value","text":"<p>[common]\\ val value: Any</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-companion/#functions","title":"Functions","text":"Name Summary create [common]@JvmOverloadsfun create(name: String, kind: OptionElement.Kind, value: Any, isParenthesized: Boolean = false): OptionElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-companion/create/","title":"Create","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/Companion/create</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-companion/create/#create","title":"create","text":"<p>[common]\\</p> <p>@JvmOverloads</p> <p>fun create(name: String, kind: OptionElement.Kind, value: Any, isParenthesized: Boolean = false): OptionElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/Kind</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/#kind","title":"Kind","text":"<p>[common]\\ enum Kind : Enum&lt;OptionElement.Kind&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/#entries","title":"Entries","text":"OPTION [common]OPTION() LIST [common]LIST() MAP [common]MAP() ENUM [common]ENUM() NUMBER [common]NUMBER() BOOLEAN [common]BOOLEAN() STRING [common]STRING()"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-b-o-o-l-e-a-n/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/Kind/BOOLEAN</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-b-o-o-l-e-a-n/#boolean","title":"BOOLEAN","text":"<p>[common]\\ BOOLEAN()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-b-o-o-l-e-a-n/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-e-n-u-m/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/Kind/ENUM</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-e-n-u-m/#enum","title":"ENUM","text":"<p>[common]\\ ENUM()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-e-n-u-m/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-l-i-s-t/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/Kind/LIST</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-l-i-s-t/#list","title":"LIST","text":"<p>[common]\\ LIST()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-l-i-s-t/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-m-a-p/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/Kind/MAP</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-m-a-p/#map","title":"MAP","text":"<p>[common]\\ MAP()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-m-a-p/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-n-u-m-b-e-r/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/Kind/NUMBER</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-n-u-m-b-e-r/#number","title":"NUMBER","text":"<p>[common]\\ NUMBER()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-n-u-m-b-e-r/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-o-p-t-i-o-n/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/Kind/OPTION</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-o-p-t-i-o-n/#option","title":"OPTION","text":"<p>[common]\\ OPTION()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-o-p-t-i-o-n/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-s-t-r-i-n-g/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/Kind/STRING</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-s-t-r-i-n-g/#string","title":"STRING","text":"<p>[common]\\ STRING()</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-s-t-r-i-n-g/#properties","title":"Properties","text":"Name Summary name [common]val name: String ordinal [common]val ordinal: Int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/OptionPrimitive</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/#optionprimitive","title":"OptionPrimitive","text":"<p>[common]\\ data class OptionPrimitive(kind: OptionElement.Kind, value: Any)</p> <p>An internal representation of the Option primitive types.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/#constructors","title":"Constructors","text":"OptionPrimitive [common]fun OptionPrimitive(kind: OptionElement.Kind, value: Any)"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/#properties","title":"Properties","text":"Name Summary kind [common]val kind: OptionElement.Kind value [common]val value: Any"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/-option-primitive/","title":"option primitive","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/OptionPrimitive/OptionPrimitive</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/-option-primitive/#optionprimitive","title":"OptionPrimitive","text":"<p>[common]\\ fun OptionPrimitive(kind: OptionElement.Kind, value: Any)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/kind/","title":"Kind","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/OptionPrimitive/kind</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/kind/#kind","title":"kind","text":"<p>[common]\\ val kind: OptionElement.Kind</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/value/","title":"Value","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionElement/OptionPrimitive/value</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/value/#value","title":"value","text":"<p>[common]\\ val value: Any</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionReader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/#optionreader","title":"OptionReader","text":"<p>[common]\\ class OptionReader(reader: SyntaxReader)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/#functions","title":"Functions","text":"Name Summary readOption [common]fun readOption(keyValueSeparator: Char): OptionElementReads a option containing a name, an \u2018=\u2019 or \u2018:\u2019, and a value. readOptions [common]fun readOptions(): List&lt;OptionElement&gt;Reads options enclosed in \u2018\u2019 and \u2018\u2019 if they are present and returns them. Returns an empty list if no options are present."},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/-option-reader/","title":"option reader","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionReader/OptionReader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/-option-reader/#optionreader","title":"OptionReader","text":"<p>[common]\\ fun OptionReader(reader: SyntaxReader)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/read-option/","title":"Read option","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionReader/readOption</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/read-option/#readoption","title":"readOption","text":"<p>[common]\\ fun readOption(keyValueSeparator: Char): OptionElement</p> <p>Reads a option containing a name, an \u2018=\u2019 or \u2018:\u2019, and a value.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/read-options/","title":"Read options","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/OptionReader/readOptions</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/read-options/#readoptions","title":"readOptions","text":"<p>[common]\\ fun readOptions(): List&lt;OptionElement&gt;</p> <p>Reads options enclosed in \u2018\u2019 and \u2018\u2019 if they are present and returns them. Returns an empty list if no options are present.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/#protofileelement","title":"ProtoFileElement","text":"<p>[common]\\ data class ProtoFileElement(location: Location, packageName: String?, syntax: Syntax?, imports: List&lt;String&gt;, publicImports: List&lt;String&gt;, types: List&lt;TypeElement&gt;, services: List&lt;ServiceElement&gt;, extendDeclarations: List&lt;ExtendElement&gt;, options: List&lt;OptionElement&gt;)</p> <p>A single .proto file.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/#constructors","title":"Constructors","text":"ProtoFileElement [common]fun ProtoFileElement(location: Location, packageName: String? = null, syntax: Syntax? = null, imports: List&lt;String&gt; = emptyList(), publicImports: List&lt;String&gt; = emptyList(), types: List&lt;TypeElement&gt; = emptyList(), services: List&lt;ServiceElement&gt; = emptyList(), extendDeclarations: List&lt;ExtendElement&gt; = emptyList(), options: List&lt;OptionElement&gt; = emptyList())"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/#properties","title":"Properties","text":"Name Summary extendDeclarations [common]val extendDeclarations: List&lt;ExtendElement&gt; imports [common]val imports: List&lt;String&gt; location [common]val location: Location options [common]val options: List&lt;OptionElement&gt; packageName [common]val packageName: String? = null publicImports [common]val publicImports: List&lt;String&gt; services [common]val services: List&lt;ServiceElement&gt; syntax [common]val syntax: Syntax? = null types [common]val types: List&lt;TypeElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-proto-file-element/","title":"proto file element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/ProtoFileElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-proto-file-element/#protofileelement","title":"ProtoFileElement","text":"<p>[common]\\ fun ProtoFileElement(location: Location, packageName: String? = null, syntax: Syntax? = null, imports: List&lt;String&gt; = emptyList(), publicImports: List&lt;String&gt; = emptyList(), types: List&lt;TypeElement&gt; = emptyList(), services: List&lt;ServiceElement&gt; = emptyList(), extendDeclarations: List&lt;ExtendElement&gt; = emptyList(), options: List&lt;OptionElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/extend-declarations/","title":"Extend declarations","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/extendDeclarations</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/extend-declarations/#extenddeclarations","title":"extendDeclarations","text":"<p>[common]\\ val extendDeclarations: List&lt;ExtendElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/imports/","title":"Imports","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/imports</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/imports/#imports","title":"imports","text":"<p>[common]\\ val imports: List&lt;String&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/options/#options","title":"options","text":"<p>[common]\\ val options: List&lt;OptionElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/package-name/","title":"Package name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/packageName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/package-name/#packagename","title":"packageName","text":"<p>[common]\\ val packageName: String? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/public-imports/","title":"Public imports","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/publicImports</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/public-imports/#publicimports","title":"publicImports","text":"<p>[common]\\ val publicImports: List&lt;String&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/services/","title":"Services","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/services</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/services/#services","title":"services","text":"<p>[common]\\ val services: List&lt;ServiceElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/syntax/","title":"Syntax","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/syntax</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/syntax/#syntax","title":"syntax","text":"<p>[common]\\ val syntax: Syntax? = null</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/types/","title":"Types","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/types</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/types/#types","title":"types","text":"<p>[common]\\ val types: List&lt;TypeElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-companion/#functions","title":"Functions","text":"Name Summary empty [common]@JvmStaticfun empty(path: String): ProtoFileElementReturns an empty proto file to serve as a null object when a file cannot be found."},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-companion/empty/","title":"Empty","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoFileElement/Companion/empty</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-companion/empty/#empty","title":"empty","text":"<p>[common]\\</p> <p>@JvmStatic</p> <p>fun empty(path: String): ProtoFileElement</p> <p>Returns an empty proto file to serve as a null object when a file cannot be found.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoParser</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/#protoparser","title":"ProtoParser","text":"<p>[common]\\ class ProtoParser</p> <p>Basic parser for .proto schema declarations.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/#functions","title":"Functions","text":"Name Summary readProtoFile [common]fun readProtoFile(): ProtoFileElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/read-proto-file/","title":"Read proto file","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoParser/readProtoFile</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/read-proto-file/#readprotofile","title":"readProtoFile","text":"<p>[common]\\ fun readProtoFile(): ProtoFileElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/-companion/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoParser/Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/-companion/#functions","title":"Functions","text":"Name Summary parse [common]fun parse(location: Location, data: String): ProtoFileElementParse a named .proto schema."},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/-companion/parse/","title":"Parse","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ProtoParser/Companion/parse</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/-companion/parse/#parse","title":"parse","text":"<p>[common]\\ fun parse(location: Location, data: String): ProtoFileElement</p> <p>Parse a named .proto schema.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ReservedElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/#reservedelement","title":"ReservedElement","text":"<p>[common]\\ data class ReservedElement(location: Location, documentation: String, values: List&lt;Any&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String location [common]val location: Location values [common]val values: List&lt;Any&gt;A String name or Int or IntRange tag."},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/-reserved-element/","title":"reserved element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ReservedElement/ReservedElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/-reserved-element/#reservedelement","title":"ReservedElement","text":"<p>[common]\\ fun ReservedElement(location: Location, documentation: String = \u201c\u201d, values: List&lt;Any&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ReservedElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ReservedElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ReservedElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/values/","title":"Values","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ReservedElement/values</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/values/#values","title":"values","text":"<p>[common]\\ val values: List&lt;Any&gt;</p> <p>A String name or Int or IntRange tag.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/RpcElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/#rpcelement","title":"RpcElement","text":"<p>[common]\\ data class RpcElement(location: Location, name: String, documentation: String, requestType: String, responseType: String, requestStreaming: Boolean, responseStreaming: Boolean, options: List&lt;OptionElement&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String location [common]val location: Location name [common]val name: String options [common]val options: List&lt;OptionElement&gt; requestStreaming [common]val requestStreaming: Boolean = false requestType [common]val requestType: String responseStreaming [common]val responseStreaming: Boolean = false responseType [common]val responseType: String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/-rpc-element/","title":"rpc element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/RpcElement/RpcElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/-rpc-element/#rpcelement","title":"RpcElement","text":"<p>[common]\\ fun RpcElement(location: Location, name: String, documentation: String = \u201c\u201d, requestType: String, responseType: String, requestStreaming: Boolean = false, responseStreaming: Boolean = false, options: List&lt;OptionElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/RpcElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/RpcElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/RpcElement/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/RpcElement/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/options/#options","title":"options","text":"<p>[common]\\ val options: List&lt;OptionElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/request-streaming/","title":"Request streaming","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/RpcElement/requestStreaming</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/request-streaming/#requeststreaming","title":"requestStreaming","text":"<p>[common]\\ val requestStreaming: Boolean = false</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/request-type/","title":"Request type","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/RpcElement/requestType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/request-type/#requesttype","title":"requestType","text":"<p>[common]\\ val requestType: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/response-streaming/","title":"Response streaming","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/RpcElement/responseStreaming</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/response-streaming/#responsestreaming","title":"responseStreaming","text":"<p>[common]\\ val responseStreaming: Boolean = false</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/response-type/","title":"Response type","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/RpcElement/responseType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/response-type/#responsetype","title":"responseType","text":"<p>[common]\\ val responseType: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/RpcElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ServiceElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/#serviceelement","title":"ServiceElement","text":"<p>[common]\\ data class ServiceElement(location: Location, name: String, documentation: String, rpcs: List&lt;RpcElement&gt;, options: List&lt;OptionElement&gt;)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/#functions","title":"Functions","text":"Name Summary toSchema [common]fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/#properties","title":"Properties","text":"Name Summary documentation [common]val documentation: String location [common]val location: Location name [common]val name: String options [common]val options: List&lt;OptionElement&gt; rpcs [common]val rpcs: List&lt;RpcElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/-service-element/","title":"service element","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ServiceElement/ServiceElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/-service-element/#serviceelement","title":"ServiceElement","text":"<p>[common]\\ fun ServiceElement(location: Location, name: String, documentation: String = \u201c\u201d, rpcs: List&lt;RpcElement&gt; = emptyList(), options: List&lt;OptionElement&gt; = emptyList())</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ServiceElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ServiceElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/location/#location","title":"location","text":"<p>[common]\\ val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ServiceElement/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ServiceElement/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/options/#options","title":"options","text":"<p>[common]\\ val options: List&lt;OptionElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/rpcs/","title":"Rpcs","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ServiceElement/rpcs</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/rpcs/#rpcs","title":"rpcs","text":"<p>[common]\\ val rpcs: List&lt;RpcElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/ServiceElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ fun toSchema(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/#syntaxreader","title":"SyntaxReader","text":"<p>[common]\\ class SyntaxReader(data: CharArray, location: Location)</p> <p>A general purpose reader for formats like .proto.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/#constructors","title":"Constructors","text":"SyntaxReader [common]fun SyntaxReader(data: CharArray, location: Location)"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/#functions","title":"Functions","text":"Name Summary exhausted [common]fun exhausted(): Boolean expect [common]inline fun expect(condition: Boolean, location: Location = location(), message: () -&gt; String) location [common]fun location(): Location peekChar [common]fun peekChar(): CharPeeks a non-whitespace character and returns it. The only difference between this and readChar is that this doesn\u2019t consume the char.[common]fun peekChar(c: Char): Boolean pushBack [common]fun pushBack(c: Char)Push back the most recently read character. readChar [common]fun readChar(): CharReads a non-whitespace character and returns it. readDataType [common]fun readDataType(): StringReads a scalar, map, or type name.[common]fun readDataType(name: String): StringReads a scalar, map, or type name with name as a prefix word. readDocumentation [common]fun readDocumentation(): StringLike skipWhitespace, but this returns a string containing all comment text. By convention, comments before a declaration document that declaration. readInt [common]fun readInt(): IntReads an integer and returns it. readName [common]fun readName(allowLeadingDigit: Boolean = true, retainWrap: Boolean = false): StringReads a (paren-wrapped), square-wrapped or naked symbol name. If {@code retainWrap} is true and the symbol was wrapped in parens or square brackets, the returned string retains the wrapping punctuation. Otherwise, just the symbol is returned. readQuotedString [common]fun readQuotedString(): String readString [common]fun readString(): StringReads a quoted or unquoted string and returns it. readWord [common]fun readWord(allowLeadingDigit: Boolean = true): StringReads a non-empty word and returns it. require [common]fun require(c: Char)Reads a non-whitespace character \u2018c\u2019, or throws an exception. tryAppendTrailingDocumentation [common]fun tryAppendTrailingDocumentation(documentation: String): String unexpected [common]fun unexpected(message: String, location: Location? = location()): RuntimeException"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/-syntax-reader/","title":"syntax reader","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/SyntaxReader</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/-syntax-reader/#syntaxreader","title":"SyntaxReader","text":"<p>[common]\\ fun SyntaxReader(data: CharArray, location: Location)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/exhausted/","title":"Exhausted","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/exhausted</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/exhausted/#exhausted","title":"exhausted","text":"<p>[common]\\ fun exhausted(): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/expect/","title":"Expect","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/expect</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/expect/#expect","title":"expect","text":"<p>[common]\\ inline fun expect(condition: Boolean, location: Location = location(), message: () -&gt; String)</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/location/#location","title":"location","text":"<p>[common]\\ fun location(): Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/peek-char/","title":"Peek char","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/peekChar</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/peek-char/#peekchar","title":"peekChar","text":"<p>[common]\\ fun peekChar(): Char</p> <p>Peeks a non-whitespace character and returns it. The only difference between this and readChar is that this doesn\u2019t consume the char.</p> <p>[common]\\ fun peekChar(c: Char): Boolean</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/push-back/","title":"Push back","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/pushBack</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/push-back/#pushback","title":"pushBack","text":"<p>[common]\\ fun pushBack(c: Char)</p> <p>Push back the most recently read character.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-char/","title":"Read char","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/readChar</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-char/#readchar","title":"readChar","text":"<p>[common]\\ fun readChar(): Char</p> <p>Reads a non-whitespace character and returns it.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-data-type/","title":"Read data type","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/readDataType</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-data-type/#readdatatype","title":"readDataType","text":"<p>[common]\\ fun readDataType(): String</p> <p>Reads a scalar, map, or type name.</p> <p>[common]\\ fun readDataType(name: String): String</p> <p>Reads a scalar, map, or type name with name as a prefix word.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-documentation/","title":"Read documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/readDocumentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-documentation/#readdocumentation","title":"readDocumentation","text":"<p>[common]\\ fun readDocumentation(): String</p> <p>Like skipWhitespace, but this returns a string containing all comment text. By convention, comments before a declaration document that declaration.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-int/","title":"Read int","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/readInt</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-int/#readint","title":"readInt","text":"<p>[common]\\ fun readInt(): Int</p> <p>Reads an integer and returns it.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-name/","title":"Read name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/readName</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-name/#readname","title":"readName","text":"<p>[common]\\ fun readName(allowLeadingDigit: Boolean = true, retainWrap: Boolean = false): String</p> <p>Reads a (paren-wrapped), square-wrapped or naked symbol name. If {@code retainWrap} is true and the symbol was wrapped in parens or square brackets, the returned string retains the wrapping punctuation. Otherwise, just the symbol is returned.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-quoted-string/","title":"Read quoted string","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/readQuotedString</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-quoted-string/#readquotedstring","title":"readQuotedString","text":"<p>[common]\\ fun readQuotedString(): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-string/","title":"Read string","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/readString</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-string/#readstring","title":"readString","text":"<p>[common]\\ fun readString(): String</p> <p>Reads a quoted or unquoted string and returns it.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-word/","title":"Read word","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/readWord</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-word/#readword","title":"readWord","text":"<p>[common]\\ fun readWord(allowLeadingDigit: Boolean = true): String</p> <p>Reads a non-empty word and returns it.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/require/","title":"Require","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/require</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/require/#require","title":"require","text":"<p>[common]\\ fun require(c: Char)</p> <p>Reads a non-whitespace character \u2018c\u2019, or throws an exception.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/try-append-trailing-documentation/","title":"Try append trailing documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/tryAppendTrailingDocumentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/try-append-trailing-documentation/#tryappendtrailingdocumentation","title":"tryAppendTrailingDocumentation","text":"<p>[common]\\ fun tryAppendTrailingDocumentation(documentation: String): String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/unexpected/","title":"Unexpected","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/SyntaxReader/unexpected</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/unexpected/#unexpected","title":"unexpected","text":"<p>[common]\\ fun unexpected(message: String, location: Location? = location()): RuntimeException</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/","title":"Index","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/TypeElement</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/#typeelement","title":"TypeElement","text":"<p>[common]\\ interface TypeElement</p> <p>A message type or enum type declaration.</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/#functions","title":"Functions","text":"Name Summary toSchema [common]abstract fun toSchema(): String"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/#properties","title":"Properties","text":"Name Summary documentation [common]abstract val documentation: String location [common]abstract val location: Location name [common]abstract val name: String nestedTypes [common]abstract val nestedTypes: List&lt;TypeElement&gt; options [common]abstract val options: List&lt;OptionElement&gt;"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/#inheritors","title":"Inheritors","text":"Name EnumElement MessageElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/documentation/","title":"Documentation","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/TypeElement/documentation</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/documentation/#documentation","title":"documentation","text":"<p>[common]\\ abstract val documentation: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/location/","title":"Location","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/TypeElement/location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/location/#location","title":"location","text":"<p>[common]\\ abstract val location: Location</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/name/","title":"Name","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/TypeElement/name</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/name/#name","title":"name","text":"<p>[common]\\ abstract val name: String</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/nested-types/","title":"Nested types","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/TypeElement/nestedTypes</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/nested-types/#nestedtypes","title":"nestedTypes","text":"<p>[common]\\ abstract val nestedTypes: List&lt;TypeElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/options/","title":"Options","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/TypeElement/options</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/options/#options","title":"options","text":"<p>[common]\\ abstract val options: List&lt;OptionElement&gt;</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/to-schema/","title":"To schema","text":"<p>//wire-schema/com.squareup.wire.schema.internal.parser/TypeElement/toSchema</p>"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/to-schema/#toschema","title":"toSchema","text":"<p>[common]\\ abstract fun toSchema(): String</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/","title":"Index","text":"<p>//wire-swift-generator/com.squareup.wire.swift</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/#package-comsquareupwireswift","title":"Package com.squareup.wire.swift","text":""},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/#types","title":"Types","text":"Name Summary SwiftGenerator [jvm]class SwiftGenerator"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/","title":"Index","text":"<p>//wire-swift-generator/com.squareup.wire.swift/SwiftGenerator</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/#swiftgenerator","title":"SwiftGenerator","text":"<p>[jvm]\\ class SwiftGenerator</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/#functions","title":"Functions","text":"Name Summary generatedTypeName [jvm]fun generatedTypeName(type: Type): &lt;ERROR CLASS&gt; generateTypeTo [jvm]fun generateTypeTo(type: Type, builder: FileSpec.Builder)"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/#properties","title":"Properties","text":"Name Summary schema [jvm]val schema: Schema"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/generate-type-to/","title":"Generate type to","text":"<p>//wire-swift-generator/com.squareup.wire.swift/SwiftGenerator/generateTypeTo</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/generate-type-to/#generatetypeto","title":"generateTypeTo","text":"<p>[jvm]\\ fun generateTypeTo(type: Type, builder: FileSpec.Builder)</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/generated-type-name/","title":"Generated type name","text":"<p>//wire-swift-generator/com.squareup.wire.swift/SwiftGenerator/generatedTypeName</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/generated-type-name/#generatedtypename","title":"generatedTypeName","text":"<p>[jvm]\\ fun generatedTypeName(type: Type): &lt;ERROR CLASS&gt;</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/schema/","title":"Schema","text":"<p>//wire-swift-generator/com.squareup.wire.swift/SwiftGenerator/schema</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/schema/#schema","title":"schema","text":"<p>[jvm]\\ val schema: Schema</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/","title":"Index","text":"<p>//wire-swift-generator/com.squareup.wire.swift/SwiftGenerator/Companion</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/#functions","title":"Functions","text":"Name Summary builtInType [jvm]fun builtInType(protoType: ProtoType): Boolean invoke [jvm]@JvmStatic@JvmName(name = \u201cget\u201d)operator fun invoke(schema: Schema, existingTypeModuleName: Map&lt;ProtoType, String&gt; = emptyMap()): SwiftGenerator"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/built-in-type/","title":"Built in type","text":"<p>//wire-swift-generator/com.squareup.wire.swift/SwiftGenerator/Companion/builtInType</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/built-in-type/#builtintype","title":"builtInType","text":"<p>[jvm]\\ fun builtInType(protoType: ProtoType): Boolean</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/invoke/","title":"Invoke","text":"<p>//wire-swift-generator/com.squareup.wire.swift/SwiftGenerator/Companion/invoke</p>"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/invoke/#invoke","title":"invoke","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>@JvmName(name = \u201cget\u201d)</p> <p>operator fun invoke(schema: Schema, existingTypeModuleName: Map&lt;ProtoType, String&gt; = emptyMap()): SwiftGenerator</p>"}]}