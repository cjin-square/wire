{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wire \u00b6 \u201cA man got to have a code!\u201d - Omar Little As our teams and programs grow, the variety and volume of data also grows. Success will turn your simple data models into complex ones! Whether your application is storing data to disk or transmitting it over a network, the structure and interpretation of that data should be clear. Consumers work best with data they understand! Schemas describe and document data models. If you have data, you should have a schema. Protocol Buffers \u00b6 Google\u2019s Protocol Buffers are built around a great schema language: It\u2019s cross platform and language independent. Whatever programming language you use, you\u2019ll be able to use proto schemas with your application. Proto schemas are backwards-compatible and future-proof. You can evolve your schema as your application loses old features and gains new ones. It\u2019s focused. Proto schemas describe your data models. That\u2019s it. Here\u2019s a sample message definition: syntax = \"proto3\" ; package squareup . dinosaurs ; option java_package = \"com.squareup.dinosaurs\" ; import \"squareup/geology/period.proto\" ; message Dinosaur { // Common name of this dinosaur, like \"Stegosaurus\". string name = 1 ; // URLs with images of this dinosaur. repeated string picture_urls = 2 ; squareup.geology.Period period = 5 ; } And here\u2019s an enum definition: syntax = \"proto3\" ; package squareup . geology ; option java_package = \"com.squareup.geology\" ; enum Period { // 145.5 million years ago \u2014 66.0 million years ago. CRETACEOUS = 0 ; // 201.3 million years ago \u2014 145.0 million years ago. JURASSIC = 1 ; // 252.17 million years ago \u2014 201.3 million years ago. TRIASSIC = 2 ; } This schema language is Protocol Buffers\u2019 best feature. You might even use it purely for documentation purposes, such as to describe a JSON API. Protocol Buffers also defines a compact binary encoding of messages that conform to the schema. This encoding is fast to encode, fast to decode, small to transmit, and small to store. The binary encoding uses numeric tags from the schema, like the 5 for period above. For example, let\u2019s encode this dinosaur: { name: \"Stegosaurus\", period: JURASSIC } The encoded value is just 15 bytes: Hex Description 0a tag: name(1), field encoding: LENGTH_DELIMITED(2). 1 << 3 | 2 0b \"Stegosaurus\".length() 53 'S' 74 't' 65 'e' 67 'g' 6f 'o' 73 's' 61 'a' 75 'u' 72 'r' 75 'u' 73 's' 28 tag: period(5), field encoding: VARINT(0). 5 << 3 | 0 02 JURASSIC(2) Why Wire? \u00b6 The Protocol Buffers schema language and binary encoding are both defined by Google. Wire is an independent implementation from Square that\u2019s specifically designed for Android and Java. For each message type defined in the schema, Wire generates an immutable model class and its builder. The generated code looks like code you\u2019d write by hand: it\u2019s documented, formatted, and simple. Wire\u2019s APIs should feel at home to programmers who like Effective Java . That said, there are some interesting design decisions in Wire: Wire messages declare public final fields instead of the usual getter methods. This cuts down on both code generated and code executed. Less code is particularly beneficial for Android programs. Wire avoids case mapping. A field declared as picture_urls in a schema yields a Java field picture_urls and not the conventional pictureUrls camel case. Though the name feels awkward at first, it\u2019s fantastic whenever you use grep or more sophisticated search tools. No more mapping when navigating between schema, Java source code, and data. It also provides a gentle reminder to calling code that proto messages are a bit special. Primitive types are always boxed. If a field is absent, its value is null . This is used for naturally optional fields, such as a dinosaur whose period is unknown. A field may also be null due to schema evolution: if tomorrow we add a carnivore boolean to our message definition, today\u2019s data won\u2019t have a value for that field. Here\u2019s the compact generated code for the Dinosaur message defined above: // Code generated by Wire protocol buffer compiler, do not edit. // Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto package com.squareup.dinosaurs ; import com.squareup.geology.Period ; import com.squareup.wire.Message ; import com.squareup.wire.ProtoAdapter ; import com.squareup.wire.Syntax ; import com.squareup.wire.WireField ; import com.squareup.wire.internal.Internal ; import java.lang.Object ; import java.lang.Override ; import java.lang.String ; import java.util.List ; import okio.ByteString ; public final class Dinosaur extends Message < Dinosaur , Dinosaur . Builder > { public static final ProtoAdapter < Dinosaur > ADAPTER = ProtoAdapter . newMessageAdapter ( Dinosaur . class , \"type.googleapis.com/squareup.dinosaurs.Dinosaur\" , Syntax . PROTO_3 ); private static final long serialVersionUID = 0 L ; /** * Common name of this dinosaur, like \"Stegosaurus\". */ @WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . OMIT_IDENTITY ) public final String name ; /** * URLs with images of this dinosaur. */ @WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . REPEATED , jsonName = \"pictureUrls\" ) public final List < String > picture_urls ; @WireField ( tag = 5 , adapter = \"com.squareup.geology.Period#ADAPTER\" , label = WireField . Label . OMIT_IDENTITY ) public final Period period ; public Dinosaur ( String name , List < String > picture_urls , Period period ) { this ( name , picture_urls , period , ByteString . EMPTY ); } public Dinosaur ( String name , List < String > picture_urls , Period period , ByteString unknownFields ) { super ( ADAPTER , unknownFields ); if ( name == null ) { throw new IllegalArgumentException ( \"name == null\" ); } this . name = name ; this . picture_urls = Internal . immutableCopyOf ( \"picture_urls\" , picture_urls ); if ( period == null ) { throw new IllegalArgumentException ( \"period == null\" ); } this . period = period ; } @Override public Builder newBuilder () { Builder builder = new Builder (); builder . name = name ; builder . picture_urls = Internal . copyOf ( picture_urls ); builder . period = period ; builder . addUnknownFields ( unknownFields ()); return builder ; } @Override public boolean equals ( Object other ) { if ( other == this ) return true ; if ( ! ( other instanceof Dinosaur )) return false ; Dinosaur o = ( Dinosaur ) other ; return unknownFields (). equals ( o . unknownFields ()) && Internal . equals ( name , o . name ) && picture_urls . equals ( o . picture_urls ) && Internal . equals ( period , o . period ); } @Override public int hashCode () { int result = super . hashCode ; if ( result == 0 ) { result = unknownFields (). hashCode (); result = result * 37 + ( name != null ? name . hashCode () : 0 ); result = result * 37 + picture_urls . hashCode (); result = result * 37 + ( period != null ? period . hashCode () : 0 ); super . hashCode = result ; } return result ; } public static final class Builder extends Message . Builder < Dinosaur , Builder > { public String name ; public List < String > picture_urls ; public Period period ; public Builder () { name = \"\" ; picture_urls = Internal . newMutableList (); period = Period . CRETACEOUS ; } /** * Common name of this dinosaur, like \"Stegosaurus\". */ public Builder name ( String name ) { this . name = name ; return this ; } /** * URLs with images of this dinosaur. */ public Builder picture_urls ( List < String > picture_urls ) { Internal . checkElementsNotNull ( picture_urls ); this . picture_urls = picture_urls ; return this ; } public Builder period ( Period period ) { this . period = period ; return this ; } @Override public Dinosaur build () { return new Dinosaur ( name , picture_urls , period , super . buildUnknownFields ()); } } } The Java code to create and access proto models is compact and readable: Dinosaur stegosaurus = new Dinosaur . Builder () . name ( \"Stegosaurus\" ) . period ( Period . JURASSIC ) . build (); System . out . println ( \"My favorite dinosaur existed in the \" + stegosaurus . period + \" period.\" ); Each type has a corresponding ProtoAdapter that can encode a message to bytes and decode bytes back into a message. Dinosaur stegosaurus = ... byte [] stegosaurusBytes = Dinosaur . ADAPTER . encode ( stegosaurus ); byte [] tyrannosaurusBytes = ... Dinosaur tyrannosaurus = Dinosaur . ADAPTER . decode ( tyrannosaurusBytes ); When accessing a field, use Wire.get() to replace null values with the corresponding default: Period period = Wire . get ( stegosaurus . period , Dinosaur . DEFAULT_PERIOD ); This is equivalent to the following: Period period = stegosaurus.period != null ? stegosaurus.period : Dinosaur.DEFAULT_PERIOD; Wire Kotlin \u00b6 Since version 3.0.0, Wire can generate Kotlin code. See Wire Compiler & Gradle Plugin to learn how to configure your build. Kotlin is a pragmatic and expressive programming language that makes it easy to model data. Here\u2019s how we used Kotlin to model Protocol Buffers messages: Messages feel like data classes, but in fact they\u2019re not. Compiler still generates equals() , hashCode() , toString() and copy() for you. Wire does not generate componentN() functions though, we believe that destructuring declarations are not a good fit for Protocol Buffers: a change in the schema that removes or adds a field might lead to a situation when your destructuring declaration still compiles but now describes a completely different subset of fields, rendering your code incorrect. copy() is a substitute for the Builder , which is not used anymore. If your program relies on the Builder to be present, you may generate code in Java interoperability mode - Wire Compiler & Gradle Plugin explains how that works. Fields are generated as properties. While this is idiomatic in Kotlin, Java code will now have to access fields using getters. If your program relies on accessing fields directly, use Java interoperability mode - the compiler will generate @JvmField annotations for each field. The nullability of each field\u2019s type depends on its label: required , repeated and map fields get non-nullable types, whereas optional fields are of nullable types. With the exception of required fields, each field has a default value: null for optional fields, emptyList() for repeated fields, emptyMap() for map fields. Here\u2019s the same Dinosaur message in Kotlin: // Code generated by Wire protocol buffer compiler, do not edit. // Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto package com.squareup.dinosaurs import com.squareup.geology.Period import com.squareup.wire.FieldEncoding import com.squareup.wire.Message import com.squareup.wire.ProtoAdapter import com.squareup.wire.ProtoReader import com.squareup.wire.ProtoWriter import com.squareup.wire.Syntax.PROTO_3 import com.squareup.wire.WireField import com.squareup.wire.internal.immutableCopyOf import com.squareup.wire.internal.sanitize import kotlin.Any import kotlin.AssertionError import kotlin.Boolean import kotlin.Deprecated import kotlin.DeprecationLevel import kotlin.Int import kotlin.Long import kotlin.Nothing import kotlin.String import kotlin.collections.List import kotlin.hashCode import kotlin.jvm.JvmField import okio.ByteString class Dinosaur ( /** * Common name of this dinosaur, like \"Stegosaurus\". */ @field : WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . OMIT_IDENTITY ) val name : String = \"\" , picture_urls : List < String > = emptyList (), @field : WireField ( tag = 5 , adapter = \"com.squareup.geology.Period#ADAPTER\" , label = WireField . Label . OMIT_IDENTITY ) val period : Period = Period . CRETACEOUS , unknownFields : ByteString = ByteString . EMPTY ) : Message < Dinosaur , Nothing > ( ADAPTER , unknownFields ) { /** * URLs with images of this dinosaur. */ @field : WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . REPEATED , jsonName = \"pictureUrls\" ) val picture_urls : List < String > = immutableCopyOf ( \"picture_urls\" , picture_urls ) @Deprecated ( message = \"Shouldn't be used in Kotlin\" , level = DeprecationLevel . HIDDEN ) override fun newBuilder (): Nothing = throw AssertionError () override fun equals ( other : Any? ): Boolean { if ( other === this ) return true if ( other !is Dinosaur ) return false if ( unknownFields != other . unknownFields ) return false if ( name != other . name ) return false if ( picture_urls != other . picture_urls ) return false if ( period != other . period ) return false return true } override fun hashCode (): Int { var result = super . hashCode if ( result == 0 ) { result = unknownFields . hashCode () result = result * 37 + name . hashCode () result = result * 37 + picture_urls . hashCode () result = result * 37 + period . hashCode () super . hashCode = result } return result } override fun toString (): String { val result = mutableListOf < String > () result += \"\"\"name= ${ sanitize ( name ) } \"\"\" if ( picture_urls . isNotEmpty ()) result += \"\"\"picture_urls= ${ sanitize ( picture_urls ) } \"\"\" result += \"\"\"period= $ period \"\"\" return result . joinToString ( prefix = \"Dinosaur{\" , separator = \", \" , postfix = \"}\" ) } fun copy ( name : String = this . name , picture_urls : List < String > = this . picture_urls , period : Period = this . period , unknownFields : ByteString = this . unknownFields ): Dinosaur = Dinosaur ( name , picture_urls , period , unknownFields ) companion object { @JvmField val ADAPTER : ProtoAdapter < Dinosaur > = object : ProtoAdapter < Dinosaur > ( FieldEncoding . LENGTH_DELIMITED , Dinosaur :: class , \"type.googleapis.com/squareup.dinosaurs.Dinosaur\" , PROTO_3 , null ) { override fun encodedSize ( value : Dinosaur ): Int { var size = value . unknownFields . size if ( value . name != \"\" ) size += ProtoAdapter . STRING . encodedSizeWithTag ( 1 , value . name ) size += ProtoAdapter . STRING . asRepeated (). encodedSizeWithTag ( 2 , value . picture_urls ) if ( value . period != Period . CRETACEOUS ) size += Period . ADAPTER . encodedSizeWithTag ( 5 , value . period ) return size } override fun encode ( writer : ProtoWriter , value : Dinosaur ) { if ( value . name != \"\" ) ProtoAdapter . STRING . encodeWithTag ( writer , 1 , value . name ) ProtoAdapter . STRING . asRepeated (). encodeWithTag ( writer , 2 , value . picture_urls ) if ( value . period != Period . CRETACEOUS ) Period . ADAPTER . encodeWithTag ( writer , 5 , value . period ) writer . writeBytes ( value . unknownFields ) } override fun decode ( reader : ProtoReader ): Dinosaur { var name : String = \"\" val picture_urls = mutableListOf < String > () var period : Period = Period . CRETACEOUS val unknownFields = reader . forEachTag { tag -> when ( tag ) { 1 -> name = ProtoAdapter . STRING . decode ( reader ) 2 -> picture_urls . add ( ProtoAdapter . STRING . decode ( reader )) 5 -> try { period = Period . ADAPTER . decode ( reader ) } catch ( e : ProtoAdapter . EnumConstantNotFoundException ) { reader . addUnknownField ( tag , FieldEncoding . VARINT , e . value . toLong ()) } else -> reader . readUnknownField ( tag ) } } return Dinosaur ( name = name , picture_urls = picture_urls , period = period , unknownFields = unknownFields ) } override fun redact ( value : Dinosaur ): Dinosaur = value . copy ( unknownFields = ByteString . EMPTY ) } private const val serialVersionUID : Long = 0L } } Creating and accessing proto models is easy: val stegosaurus = Dinosaur ( name = \"Stegosaurus\" , period = Period . JURASSIC ) println ( \"My favorite dinosaur existed in the ${ stegosaurus . period } period.\" ) Here\u2019s how you can modify the object to add extra fields: val stegosaurus = stegosaurus . copy ( picture_urls = listOf ( \"https://www.flickr.com/photos/tags/Stegosaurus/\" ) ) println ( \"Here are some photos of ${ stegosaurus . name } : ${ stegosaurus . picture_urls } \" ) Wire gRPC \u00b6 Since version 3.0.0, Wire supports gRPC . Generating Code With Wire \u00b6 Wire can read .proto files from the local file system and from within .jar files. The compiler can optionally prune your schema to a subset of root types and their transitive dependencies. This is useful when sharing a schema between projects: a Java service and Android app may each use a subset of a larger shared schema. For more info on how to get started, see Wire Compiler & Gradle Plugin . If you don\u2019t use Gradle, the compiler also has a command line interface. Just substitute wire-compiler-VERSION-jar-with-dependencies.jar with the path to your jar. Download the latest precompiled jar. % java -jar wire-compiler-VERSION-jar-with-dependencies.jar \\ --proto_path=src/main/proto \\ --java_out=out \\ squareup/dinosaurs/dinosaur.proto \\ squareup/geology/period.proto Writing com.squareup.dinosaurs.Dinosaur to out Writing com.squareup.geology.Period to out Supplying the --android flag to the compiler causes Wire messages to implement Parcelable . If you use Proguard, then you need to add keep rules. The simplest option is to tell Proguard not to touch the Wire runtime library and your generated protocol buffers (of course these simple rules will miss opportunities to shrink and optimize the code): -keep class com.squareup.wire.** { *; } -keep class com.yourcompany.yourgeneratedcode.** { *; } Get Wire \u00b6 The wire-runtime package contains runtime support libraries that must be included in applications that use Wire-generated code. With Maven: <dependency> <groupId> com.squareup.wire </groupId> <artifactId> wire-runtime-jvm </artifactId> <version> 4.4.1 </version> </dependency> With Gradle: api \"com.squareup.wire:wire-runtime:4.4.1\" Snapshots of the development version are available in Sonatype\u2019s snapshots repository . Unsupported \u00b6 Wire does not support: Groups - they are skipped when parsing binary input data Wire supports custom options on messages and fields. Other custom options are ignored. Pass --excludes=google.protobuf.* to the compiler to omit options from the generated code. Further Documentation \u00b6 See Google\u2019s excellent documentation on the structure and syntax of proto schemas.","title":"Overview"},{"location":"#wire","text":"\u201cA man got to have a code!\u201d - Omar Little As our teams and programs grow, the variety and volume of data also grows. Success will turn your simple data models into complex ones! Whether your application is storing data to disk or transmitting it over a network, the structure and interpretation of that data should be clear. Consumers work best with data they understand! Schemas describe and document data models. If you have data, you should have a schema.","title":"Wire"},{"location":"#protocol-buffers","text":"Google\u2019s Protocol Buffers are built around a great schema language: It\u2019s cross platform and language independent. Whatever programming language you use, you\u2019ll be able to use proto schemas with your application. Proto schemas are backwards-compatible and future-proof. You can evolve your schema as your application loses old features and gains new ones. It\u2019s focused. Proto schemas describe your data models. That\u2019s it. Here\u2019s a sample message definition: syntax = \"proto3\" ; package squareup . dinosaurs ; option java_package = \"com.squareup.dinosaurs\" ; import \"squareup/geology/period.proto\" ; message Dinosaur { // Common name of this dinosaur, like \"Stegosaurus\". string name = 1 ; // URLs with images of this dinosaur. repeated string picture_urls = 2 ; squareup.geology.Period period = 5 ; } And here\u2019s an enum definition: syntax = \"proto3\" ; package squareup . geology ; option java_package = \"com.squareup.geology\" ; enum Period { // 145.5 million years ago \u2014 66.0 million years ago. CRETACEOUS = 0 ; // 201.3 million years ago \u2014 145.0 million years ago. JURASSIC = 1 ; // 252.17 million years ago \u2014 201.3 million years ago. TRIASSIC = 2 ; } This schema language is Protocol Buffers\u2019 best feature. You might even use it purely for documentation purposes, such as to describe a JSON API. Protocol Buffers also defines a compact binary encoding of messages that conform to the schema. This encoding is fast to encode, fast to decode, small to transmit, and small to store. The binary encoding uses numeric tags from the schema, like the 5 for period above. For example, let\u2019s encode this dinosaur: { name: \"Stegosaurus\", period: JURASSIC } The encoded value is just 15 bytes: Hex Description 0a tag: name(1), field encoding: LENGTH_DELIMITED(2). 1 << 3 | 2 0b \"Stegosaurus\".length() 53 'S' 74 't' 65 'e' 67 'g' 6f 'o' 73 's' 61 'a' 75 'u' 72 'r' 75 'u' 73 's' 28 tag: period(5), field encoding: VARINT(0). 5 << 3 | 0 02 JURASSIC(2)","title":"Protocol Buffers"},{"location":"#why-wire","text":"The Protocol Buffers schema language and binary encoding are both defined by Google. Wire is an independent implementation from Square that\u2019s specifically designed for Android and Java. For each message type defined in the schema, Wire generates an immutable model class and its builder. The generated code looks like code you\u2019d write by hand: it\u2019s documented, formatted, and simple. Wire\u2019s APIs should feel at home to programmers who like Effective Java . That said, there are some interesting design decisions in Wire: Wire messages declare public final fields instead of the usual getter methods. This cuts down on both code generated and code executed. Less code is particularly beneficial for Android programs. Wire avoids case mapping. A field declared as picture_urls in a schema yields a Java field picture_urls and not the conventional pictureUrls camel case. Though the name feels awkward at first, it\u2019s fantastic whenever you use grep or more sophisticated search tools. No more mapping when navigating between schema, Java source code, and data. It also provides a gentle reminder to calling code that proto messages are a bit special. Primitive types are always boxed. If a field is absent, its value is null . This is used for naturally optional fields, such as a dinosaur whose period is unknown. A field may also be null due to schema evolution: if tomorrow we add a carnivore boolean to our message definition, today\u2019s data won\u2019t have a value for that field. Here\u2019s the compact generated code for the Dinosaur message defined above: // Code generated by Wire protocol buffer compiler, do not edit. // Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto package com.squareup.dinosaurs ; import com.squareup.geology.Period ; import com.squareup.wire.Message ; import com.squareup.wire.ProtoAdapter ; import com.squareup.wire.Syntax ; import com.squareup.wire.WireField ; import com.squareup.wire.internal.Internal ; import java.lang.Object ; import java.lang.Override ; import java.lang.String ; import java.util.List ; import okio.ByteString ; public final class Dinosaur extends Message < Dinosaur , Dinosaur . Builder > { public static final ProtoAdapter < Dinosaur > ADAPTER = ProtoAdapter . newMessageAdapter ( Dinosaur . class , \"type.googleapis.com/squareup.dinosaurs.Dinosaur\" , Syntax . PROTO_3 ); private static final long serialVersionUID = 0 L ; /** * Common name of this dinosaur, like \"Stegosaurus\". */ @WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . OMIT_IDENTITY ) public final String name ; /** * URLs with images of this dinosaur. */ @WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . REPEATED , jsonName = \"pictureUrls\" ) public final List < String > picture_urls ; @WireField ( tag = 5 , adapter = \"com.squareup.geology.Period#ADAPTER\" , label = WireField . Label . OMIT_IDENTITY ) public final Period period ; public Dinosaur ( String name , List < String > picture_urls , Period period ) { this ( name , picture_urls , period , ByteString . EMPTY ); } public Dinosaur ( String name , List < String > picture_urls , Period period , ByteString unknownFields ) { super ( ADAPTER , unknownFields ); if ( name == null ) { throw new IllegalArgumentException ( \"name == null\" ); } this . name = name ; this . picture_urls = Internal . immutableCopyOf ( \"picture_urls\" , picture_urls ); if ( period == null ) { throw new IllegalArgumentException ( \"period == null\" ); } this . period = period ; } @Override public Builder newBuilder () { Builder builder = new Builder (); builder . name = name ; builder . picture_urls = Internal . copyOf ( picture_urls ); builder . period = period ; builder . addUnknownFields ( unknownFields ()); return builder ; } @Override public boolean equals ( Object other ) { if ( other == this ) return true ; if ( ! ( other instanceof Dinosaur )) return false ; Dinosaur o = ( Dinosaur ) other ; return unknownFields (). equals ( o . unknownFields ()) && Internal . equals ( name , o . name ) && picture_urls . equals ( o . picture_urls ) && Internal . equals ( period , o . period ); } @Override public int hashCode () { int result = super . hashCode ; if ( result == 0 ) { result = unknownFields (). hashCode (); result = result * 37 + ( name != null ? name . hashCode () : 0 ); result = result * 37 + picture_urls . hashCode (); result = result * 37 + ( period != null ? period . hashCode () : 0 ); super . hashCode = result ; } return result ; } public static final class Builder extends Message . Builder < Dinosaur , Builder > { public String name ; public List < String > picture_urls ; public Period period ; public Builder () { name = \"\" ; picture_urls = Internal . newMutableList (); period = Period . CRETACEOUS ; } /** * Common name of this dinosaur, like \"Stegosaurus\". */ public Builder name ( String name ) { this . name = name ; return this ; } /** * URLs with images of this dinosaur. */ public Builder picture_urls ( List < String > picture_urls ) { Internal . checkElementsNotNull ( picture_urls ); this . picture_urls = picture_urls ; return this ; } public Builder period ( Period period ) { this . period = period ; return this ; } @Override public Dinosaur build () { return new Dinosaur ( name , picture_urls , period , super . buildUnknownFields ()); } } } The Java code to create and access proto models is compact and readable: Dinosaur stegosaurus = new Dinosaur . Builder () . name ( \"Stegosaurus\" ) . period ( Period . JURASSIC ) . build (); System . out . println ( \"My favorite dinosaur existed in the \" + stegosaurus . period + \" period.\" ); Each type has a corresponding ProtoAdapter that can encode a message to bytes and decode bytes back into a message. Dinosaur stegosaurus = ... byte [] stegosaurusBytes = Dinosaur . ADAPTER . encode ( stegosaurus ); byte [] tyrannosaurusBytes = ... Dinosaur tyrannosaurus = Dinosaur . ADAPTER . decode ( tyrannosaurusBytes ); When accessing a field, use Wire.get() to replace null values with the corresponding default: Period period = Wire . get ( stegosaurus . period , Dinosaur . DEFAULT_PERIOD ); This is equivalent to the following: Period period = stegosaurus.period != null ? stegosaurus.period : Dinosaur.DEFAULT_PERIOD;","title":"Why Wire?"},{"location":"#wire-kotlin","text":"Since version 3.0.0, Wire can generate Kotlin code. See Wire Compiler & Gradle Plugin to learn how to configure your build. Kotlin is a pragmatic and expressive programming language that makes it easy to model data. Here\u2019s how we used Kotlin to model Protocol Buffers messages: Messages feel like data classes, but in fact they\u2019re not. Compiler still generates equals() , hashCode() , toString() and copy() for you. Wire does not generate componentN() functions though, we believe that destructuring declarations are not a good fit for Protocol Buffers: a change in the schema that removes or adds a field might lead to a situation when your destructuring declaration still compiles but now describes a completely different subset of fields, rendering your code incorrect. copy() is a substitute for the Builder , which is not used anymore. If your program relies on the Builder to be present, you may generate code in Java interoperability mode - Wire Compiler & Gradle Plugin explains how that works. Fields are generated as properties. While this is idiomatic in Kotlin, Java code will now have to access fields using getters. If your program relies on accessing fields directly, use Java interoperability mode - the compiler will generate @JvmField annotations for each field. The nullability of each field\u2019s type depends on its label: required , repeated and map fields get non-nullable types, whereas optional fields are of nullable types. With the exception of required fields, each field has a default value: null for optional fields, emptyList() for repeated fields, emptyMap() for map fields. Here\u2019s the same Dinosaur message in Kotlin: // Code generated by Wire protocol buffer compiler, do not edit. // Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto package com.squareup.dinosaurs import com.squareup.geology.Period import com.squareup.wire.FieldEncoding import com.squareup.wire.Message import com.squareup.wire.ProtoAdapter import com.squareup.wire.ProtoReader import com.squareup.wire.ProtoWriter import com.squareup.wire.Syntax.PROTO_3 import com.squareup.wire.WireField import com.squareup.wire.internal.immutableCopyOf import com.squareup.wire.internal.sanitize import kotlin.Any import kotlin.AssertionError import kotlin.Boolean import kotlin.Deprecated import kotlin.DeprecationLevel import kotlin.Int import kotlin.Long import kotlin.Nothing import kotlin.String import kotlin.collections.List import kotlin.hashCode import kotlin.jvm.JvmField import okio.ByteString class Dinosaur ( /** * Common name of this dinosaur, like \"Stegosaurus\". */ @field : WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . OMIT_IDENTITY ) val name : String = \"\" , picture_urls : List < String > = emptyList (), @field : WireField ( tag = 5 , adapter = \"com.squareup.geology.Period#ADAPTER\" , label = WireField . Label . OMIT_IDENTITY ) val period : Period = Period . CRETACEOUS , unknownFields : ByteString = ByteString . EMPTY ) : Message < Dinosaur , Nothing > ( ADAPTER , unknownFields ) { /** * URLs with images of this dinosaur. */ @field : WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" , label = WireField . Label . REPEATED , jsonName = \"pictureUrls\" ) val picture_urls : List < String > = immutableCopyOf ( \"picture_urls\" , picture_urls ) @Deprecated ( message = \"Shouldn't be used in Kotlin\" , level = DeprecationLevel . HIDDEN ) override fun newBuilder (): Nothing = throw AssertionError () override fun equals ( other : Any? ): Boolean { if ( other === this ) return true if ( other !is Dinosaur ) return false if ( unknownFields != other . unknownFields ) return false if ( name != other . name ) return false if ( picture_urls != other . picture_urls ) return false if ( period != other . period ) return false return true } override fun hashCode (): Int { var result = super . hashCode if ( result == 0 ) { result = unknownFields . hashCode () result = result * 37 + name . hashCode () result = result * 37 + picture_urls . hashCode () result = result * 37 + period . hashCode () super . hashCode = result } return result } override fun toString (): String { val result = mutableListOf < String > () result += \"\"\"name= ${ sanitize ( name ) } \"\"\" if ( picture_urls . isNotEmpty ()) result += \"\"\"picture_urls= ${ sanitize ( picture_urls ) } \"\"\" result += \"\"\"period= $ period \"\"\" return result . joinToString ( prefix = \"Dinosaur{\" , separator = \", \" , postfix = \"}\" ) } fun copy ( name : String = this . name , picture_urls : List < String > = this . picture_urls , period : Period = this . period , unknownFields : ByteString = this . unknownFields ): Dinosaur = Dinosaur ( name , picture_urls , period , unknownFields ) companion object { @JvmField val ADAPTER : ProtoAdapter < Dinosaur > = object : ProtoAdapter < Dinosaur > ( FieldEncoding . LENGTH_DELIMITED , Dinosaur :: class , \"type.googleapis.com/squareup.dinosaurs.Dinosaur\" , PROTO_3 , null ) { override fun encodedSize ( value : Dinosaur ): Int { var size = value . unknownFields . size if ( value . name != \"\" ) size += ProtoAdapter . STRING . encodedSizeWithTag ( 1 , value . name ) size += ProtoAdapter . STRING . asRepeated (). encodedSizeWithTag ( 2 , value . picture_urls ) if ( value . period != Period . CRETACEOUS ) size += Period . ADAPTER . encodedSizeWithTag ( 5 , value . period ) return size } override fun encode ( writer : ProtoWriter , value : Dinosaur ) { if ( value . name != \"\" ) ProtoAdapter . STRING . encodeWithTag ( writer , 1 , value . name ) ProtoAdapter . STRING . asRepeated (). encodeWithTag ( writer , 2 , value . picture_urls ) if ( value . period != Period . CRETACEOUS ) Period . ADAPTER . encodeWithTag ( writer , 5 , value . period ) writer . writeBytes ( value . unknownFields ) } override fun decode ( reader : ProtoReader ): Dinosaur { var name : String = \"\" val picture_urls = mutableListOf < String > () var period : Period = Period . CRETACEOUS val unknownFields = reader . forEachTag { tag -> when ( tag ) { 1 -> name = ProtoAdapter . STRING . decode ( reader ) 2 -> picture_urls . add ( ProtoAdapter . STRING . decode ( reader )) 5 -> try { period = Period . ADAPTER . decode ( reader ) } catch ( e : ProtoAdapter . EnumConstantNotFoundException ) { reader . addUnknownField ( tag , FieldEncoding . VARINT , e . value . toLong ()) } else -> reader . readUnknownField ( tag ) } } return Dinosaur ( name = name , picture_urls = picture_urls , period = period , unknownFields = unknownFields ) } override fun redact ( value : Dinosaur ): Dinosaur = value . copy ( unknownFields = ByteString . EMPTY ) } private const val serialVersionUID : Long = 0L } } Creating and accessing proto models is easy: val stegosaurus = Dinosaur ( name = \"Stegosaurus\" , period = Period . JURASSIC ) println ( \"My favorite dinosaur existed in the ${ stegosaurus . period } period.\" ) Here\u2019s how you can modify the object to add extra fields: val stegosaurus = stegosaurus . copy ( picture_urls = listOf ( \"https://www.flickr.com/photos/tags/Stegosaurus/\" ) ) println ( \"Here are some photos of ${ stegosaurus . name } : ${ stegosaurus . picture_urls } \" )","title":"Wire Kotlin"},{"location":"#wire-grpc","text":"Since version 3.0.0, Wire supports gRPC .","title":"Wire gRPC"},{"location":"#generating-code-with-wire","text":"Wire can read .proto files from the local file system and from within .jar files. The compiler can optionally prune your schema to a subset of root types and their transitive dependencies. This is useful when sharing a schema between projects: a Java service and Android app may each use a subset of a larger shared schema. For more info on how to get started, see Wire Compiler & Gradle Plugin . If you don\u2019t use Gradle, the compiler also has a command line interface. Just substitute wire-compiler-VERSION-jar-with-dependencies.jar with the path to your jar. Download the latest precompiled jar. % java -jar wire-compiler-VERSION-jar-with-dependencies.jar \\ --proto_path=src/main/proto \\ --java_out=out \\ squareup/dinosaurs/dinosaur.proto \\ squareup/geology/period.proto Writing com.squareup.dinosaurs.Dinosaur to out Writing com.squareup.geology.Period to out Supplying the --android flag to the compiler causes Wire messages to implement Parcelable . If you use Proguard, then you need to add keep rules. The simplest option is to tell Proguard not to touch the Wire runtime library and your generated protocol buffers (of course these simple rules will miss opportunities to shrink and optimize the code): -keep class com.squareup.wire.** { *; } -keep class com.yourcompany.yourgeneratedcode.** { *; }","title":"Generating Code With Wire"},{"location":"#get-wire","text":"The wire-runtime package contains runtime support libraries that must be included in applications that use Wire-generated code. With Maven: <dependency> <groupId> com.squareup.wire </groupId> <artifactId> wire-runtime-jvm </artifactId> <version> 4.4.1 </version> </dependency> With Gradle: api \"com.squareup.wire:wire-runtime:4.4.1\" Snapshots of the development version are available in Sonatype\u2019s snapshots repository .","title":"Get Wire"},{"location":"#unsupported","text":"Wire does not support: Groups - they are skipped when parsing binary input data Wire supports custom options on messages and fields. Other custom options are ignored. Pass --excludes=google.protobuf.* to the compiler to omit options from the generated code.","title":"Unsupported"},{"location":"#further-documentation","text":"See Google\u2019s excellent documentation on the structure and syntax of proto schemas.","title":"Further Documentation"},{"location":"changelog/","text":"Change Log \u00b6 Version 4.4.1 \u00b6 2022-08-05 New: Check HTTP2 protocol is set for passed client to GrpcClient . New: Add buildersOnly option for Java and Kotlin target, setting it to true will change the visibility of generate types\u2019 constructor to non-public. Fix: Properly define api dependency for okio in wire-schema . Fix: Sort input locations so they match on all platforms. Fix: Avoid NPEs with kotlin 1.7.20 around source sets. Update: Bumped KotlinPoet to 1.12.0 . Version 4.4.0 \u00b6 2022-06-07 New: Custom schema handlers! Wire lets you now plug in your own logic to deal with the protobuf schema the way you want. Check our documentation for details. You can also check our recipe directory for examples. Note that this API obsoletes the CustomHandlerBeta type Wire had until now. New: You can now easily create an in-memory protobuf schema with the new SchemaBuilder class. This lives in the new wire-schema-tests artifact. For usage examples, check the tests in custom handler recipes . Breaking: the wire-profiles artifact has been removed and is now inlined in wire-schema . Breaking: CoreLoader \u2018s isWireRuntimeProto methods are now static. Breaking: SchemaLoader and related classes have been moved from wire-compiler to wire-schema . New: Support packed and map fields when converting to/from JSON with Kotlin. New: Support typesafe accessors and version catalogs in Wire plugin. New: Generate annotations for repeated options. New: Allow parsing of oneof options. New: Support map fields in options. New: Add macosArm64 support to the KMP projects supporting mac. Fix: Properly deal with maps of scalar types, deserializing missing scala key/value into identity. Fix: Fix a crash where ProtoMember was populated with the wrong data. Version 4.3.0 \u00b6 2022-03-24 New: reserved tags and names in enum types are now honoured by Wire. Fix: max keyword is now correctly parsed for enum types. Fix: Wire now writes minus double zeros and minus float zeros on proto3. Fix: Wire doesn\u2019t write google wrappers types\u2019 identity values anymore. Fix: CoreLoader correctly loads .proto files present in the resources of the project. Fix: Propagate GrpcExceptions in GrpcCalls . Fix: Change GrpcCall.isCanceled to honor OkHttp cancellations. Version 4.2.0 \u00b6 2022-02-17 New: Publish a bill of materials (BOM) for Wire. Depend on this from Gradle or Maven to keep all of your Wire artifacts on the same version, even if they\u2019re declared via transitive dependencies. You can even omit versions when declaring other Wire dependencies. dependencies { implementation ( platform ( \"com.squareup.wire:wire-bom:4.2.0\" )) implementation ( \"com.squareup.wire:wire-compiler\" ) // No version! implementation ( \"com.squareup.wire:wire-gradle-plugin\" ) // No version! implementation ( \"com.squareup.wire:wire-grpc-client\" ) // No version! // Etc. } Version 4.1.1 \u00b6 2022-02-15 Fix: Print target name in ConsoleWireLogger . Fix: Throw early when field or constant names start with a digit. Update: Bumped SwiftPoet to 1.3.1 . Fix: Wire will not generate annotations for repeated options. Version 4.1.0 \u00b6 2022-01-28 New: When using Wire JSON factories, you can now override the proto3 behavior of skipping default values when writing JSON. Set writeIdentityValues to true for either WireJsonAdapterFactory or WireTypeAdapterFactory to enable it. Breaking: WireLogger methods has been refactored to remove platform dependencies and allow more precise callbacks. We might add new methods in the future for better logging still. Removal: The dry-run option on WireCompiler has been removed. Swift: WireCompiler podspec is now backup by a jar so consumers will not have to locally build it on pod install . Version 4.0.1 \u00b6 2021-12-07 Fix: Don\u2019t fail at compilation when an enum is in a oneof for Swift generation. Version 4.0.0 \u00b6 2021-12-03 New: Add \u2018nameSuffix\u2019 parameter for configuring generated service-class names in Kotlin. New: Define oneofName in @WireField . New: Enable iosSimulatorArm64 for Kotlin multiplatform. New: Expose the source .proto file at ProtoAdaper.sourceFile . This is null for built-in types and types generated prior to this release. New: Generate Kotlin code whose members match the declaration order of the corresponding .proto files. In previous releases, generated members were sorted by kind (fields, oneofs), then by declaration order. With this update only declaration order is used. Note that this will change the encoded-bytes of these messages. This change is both forwards and backwards-compatible. Identical encoding of equal messages across Wire releases is typical but not guaranteed, and this is a rare release that changes that encoding. If you do cryptographic hashes on encoded proto messages, you will notice that the hashes are different in this release. New: Option in SchemaLoader to exhaustively load imported files. By default we only load what\u2019s immediately necessary to generate code; this new option loads everything reachable into the schema. New: Programmatic API to prune schemas. See Pruner in wire-schema. New: SchemaLoader doesn\u2019t extend the Closeable interface anymore. New: Support rpcRole = 'none' in the Gradle plugin to generate neither client nor server code. New: Support for Android variants. New: Support for glob syntax in srcJar includes. New: Support for special float literals. New: Swift support Timestamp and Duration . New: The Wire plugin requires an output to be set. Before, it would generate Java code by default; it will now throw if there are no output defined. New: The default value of emitAppliedOptions for our Java and Kotlin target is now set to true. New: Wire should build and execute properly on Windows. New: @WireRpc has a new sourceFile attribute. New: GrpcClient.Builder.minMessageToCompress() configures which messages are compressed. This will completely disable compression if the size is Long.MAX_VALUE . We\u2019ve seen problems where some Golang gRPC servers don\u2019t support compression; setting this to MAX_VALUE is necessary to interop with them. New: SchemaReflector is our initial implementation of the gRPC Server Reflection Protocol . Note that although we implement the business logic of gRPC reflection, we don\u2019t offer a gRPC server built into Wire. New: wire-reflector bundles gRPC\u2019s reflection.proto which it is built upon. New: wire-runtime exposes a com.squareup.wire.VERSION constant reflecting the project version. New: change the Gradle plugin so that (unstable) custom handlers can be configured with instance instead of with a class name. Fix: Be more aggressive about loading transitive files with SchemaLoader.loadExhaustively . Fix: Bugs in JSON serialization of builder-less Kotlin types have been addressed. Fix: Compile Kotlin/JS with both LEGACY and IR compilers. Fix: Deep copy metadata on GrpcCall.clone() . Fix: Don\u2019t break task caching by using absolute paths in the Gradle plugin. Wire now uses project-relative paths in any attribute that is used as a cache key. Fix: Don\u2019t crash encoding schemas when an option contains a repeated field, an enum, or a double. Fix: Don\u2019t depend on moshi-kotlin in wire-moshi. This caused a transitive dependency on kotlin-reflect, which we neither needed nor wanted. Fix: Don\u2019t generate invalid code when an enum constant is named name or ordinal . Fix: Don\u2019t re-use the cache if protobuf inputs have changed. Fix: Emitting proper protobuf format for option values defined as a list of enum constants. Fix: Explicitly defined Wire gRPC server generation as experimental: the feature isn\u2019t complete. Fix: Generate @Deprecated annotations on deprecated messages, fields, enums, and enum constants. Fix: Handle out of order proto fields when initializing Kotlin constructors. Fix: Handle writing/reading exceptions for duplex calls in Wire gRPC. Fix: In Java, rename instances to avoid field and class name conflicts. Fix: Locate files in the root package when importing. Fix: Memory fixes found with Address Sanitizer in Swift. Fix: Permit values other than 0 and 1 when decoding protobuf-encoded booleans. Previously we threw an IOException for other values; now all non-zero values are true. Fix: Redact boxed OneOf fields. Fix: Redacted Kotlin scalars now respect nullability. Fix: Retain field order when emitting a schema as .proto files. Fix: Reverse the topological sort of dependent files in SchemaReflector . We had problems with grpc-curl which expects the requested file to be listed first. Fix: Support Kotlin-generated annotations on Java fields. Fix: Support for serializing builder-less Kotlin generated classes to JSON. Fix: Support reporting errors in CustomHandlerBeta . Fix: Suppress deprecation warnings on generated enum\u2019s fromValue method in Kotlin. Fix: Swift adapters will throw an error when encountering an unexpected ProtoReader.beginMessage() rather than calling fatalError() . Fix: Update the Wire Gradle plugin to clear the output directory before generating code. This prevents the need to do a clean build after removing a message type. Fix: Update the Wire Gradle plugin to register generated .java sources with the Java compiler. Previously this was broken if the Kotlin plugin was installed. Fix: Use Gradle\u2019s logging mechanism to reduce output when Wire generates code. Fix: Use correct type when referencing a custom adapter in Kotlin generated code. Fix: Use relative path sensitivity and file collection. Fix: Validate enum constant uniqueness for the entire package. Fix: Wire Gradle plugin tasks have been modernized with configuration caching support. Fix: Wire will not generate respective built-in types for Java, Kotlin, and Swift generation. Those are usually the google types for which Wire will provide its own implementation. Upgrade: Update KotlinPoet to 1.8.0 . Upgrade: OkHttp 4.9.3 . Upgrade: Okio 3.0.0 . We now use Okio 3\u2019s FileSystem in SchemaLoader , which makes it easier to load .proto files from the classpath. This is binary-incompatible with the Okio 3.0 alpha releases. Bye: Drop support for emitKotlinxSerialization. Version 3.7.1 \u00b6 2021-11-03 Fix: Properly load schema located at root without packages. Version 3.7.0 \u00b6 2021-03-25 New: srcProject(\":project-name\") makes it easier to depend on .proto files of other projects. Fix: Don\u2019t require source that .proto directories exist at Gradle plugin configuration time. This was preventing Wire from using other tasks\u2019 outputs as its inputs. Fix: Don\u2019t fail if options have a . prefix. Version 3.6.1 \u00b6 2021-03-09 Fix: The Wire Gradle plugin now supports Java only Android projects. Fix: In the Wire Gradle plugin, sourcePath will now include only protos defined with include if the option is present. It used to include all existing .proto files even if include was used. New: Full support Optional Int64 and UInt64 for JSONString in Swift. Version 3.6.0 \u00b6 2021-02-08 New: Automatically add a dependency when a protoPath or protoSource depends on a project. New: protoPath and protoSource dependencies are now not transitive by default. New: New protoLibrary option for the Wire Gradle plugin. Configuring a project as a protoLibrary will cause the generated .jar file to include .proto sources. New: Code generation for plain gRPC server. The Kotlin target now has a new grpcServerCompatible option which if set to true will generate gRPC server-compatible classes. New: Introduce GrpcException . New: Add GrpcMethod tag to the request. New: Adds redacting support for Moshi JSON adapters. New: Publish plugin marker for Gradle plugin. Fix: Escape square brackets in Kotlin generated code documentation. Fix: Improved proto parsing performance. Version 3.5.0 \u00b6 2020-10-27 New: Wire Gradle plugin improvements: A task is now created for each available sources (main, Android variants, etc). The wire-runtime dependency is automatically added. Generated code directories are automatically added into their module\u2019s source sets. New: Wire\u2019s proto parser now knows about oneOfOptions . New: Wire will throw when two enum constants are ambiguous, like ZERO and zero . New: Bytes options are not eligible anymore as annotation members. Fix: Optional fields in proto3 are now generated as nullable fields. Fix: JSON camel-casing is updated to fit latest protobuf specifications. Fix: Exception messages when gRPC fails have been improved. Fix: Allow ; as entry separator in option maps. Fix: Enum constants are now properly escaped when conflicting with keywords of their generated target platform. Fix: Update to KotlinPoet 1.7.2 which makes a lot of change in how Kotlin code is generated. Version 3.4.0 \u00b6 2020-09-24 New: Stop emitting enum constant options as fields for Kotlin. New: The Wire Gradle plugin task is now cacheable. New: New GrpcCall function to help implement fakes. New: Change GrpcStreamingCall.execute() to support structured concurrency. Version 3.3.0 \u00b6 2020-09-14 New: Proto3 support! This includes the new behaviors, the new types, and the JSON. New: Swift support for proto2 schemas. The details are in our blog post . New: Wire will now throw an error when: two generated files end up overriding each other, imports form a cycle, packages form a cycle. This can be turned off with the flag permitPackageCycles , an option within the source set cannot be resolved, there are name duplications of members in a message, or of rpcs in a service, a map is used as an extension. New: Support for the json_name pseudo option. New: The wire_package file option allows one to set the JVM package where classes generated from the concerned file will be placed. wire_package takes precedence over java_package . New: Lists and maps in Kotlin generated code are now immutable. New: Support UTF-8 with BOM in proto files. New: wire.since and wire.until have been renamed with the prefix constant_ for EnumValueOptions . New: Wire generates 1) annotations for options which 2) gets assigned to the generated code where appropriate. Both behavior can be turn on or off via the flags: emitDeclaredOptions : True to emit types for options declared on messages, fields, etc. Default to true, emitAppliedOptions : True to emit annotations for options applied on messages, fields, etc. Default to false. Fix: Recursive map values. Fix: Long expressions in equals and encodedSize functions. Version 3.2.2 \u00b6 2020-05-15 Fix: JSON serialization correctly emits all values. Version 3.2.1 \u00b6 2020-05-02 New: onlyVersion option on the Wire Gradle plugin to target a unique version. By and large, service code that supports many clients would target ranges via sinceVersion and untilVersion , while client code would target a unique version via onlyVersion . New: Support for optional fields in Proto3. Fix: Restored the GrpcClient.create API to create implementations for gRPC interfaces. Version 3.2.0 \u00b6 2020-04-23 New: wire.since and wire.until options on members and enum values. You can prune fields or constants using these two options. When generating code with the Wire Gradle plugin, define sinceVersion and/or untilVersion to scope the generated code. New: Messages\u2019 toString method on Kotlin and Java now escape string values for easy parsing. Fix: Link the entire descriptor.proto every time when building the Schema . Fix: Properly handle members named after keywords of the target language for both Java and Kotlin. Fix: Use the declared name for keys in JSON when emitting/reading keyword named members. Fix: Generated Kotlin code is malformed for long identifiers. Fix: Make the Wire Gradle plugin compatible with instant execution. Version 3.1.0 \u00b6 2020-02-06 This release includes major non-backwards-compatible API changes to the wire-schema module. This will break tools that use Wire\u2019s schema modeling as a standalone library. We are making big changes to this component and we sacrificed API compatibility to accelerate these improvements. New: proto { ... } target in the Wire Gradle plugin. Use this to perform basic source code transformations on collections of .proto files. We use it to prune large collections of protos to just the subset used by the application. Fix: Support all forms of reserved extensions, such as extensions 1, 3 to 5, 7; . Fix: Don\u2019t re-generate source files when their .proto files haven\u2019t changed. New: includes , excludes , root , and prune give precedence to the most precise rule. Previously excludes always took precedence over includes , and prune always took precedence over root . Fix: Generate non-instantiable class for enclosing types in Kotlin. These are emitted when a nested type is retained but its enclosing type is pruned. Fix: Do not fail to build when the profile cannot find a dependency. Version 3.0.3 \u00b6 2019-12-23 Starting with this version the Wire Maven plugin is no longer maintained and has been removed from the repository. New: Support for custom options in Kotlin. New: Kotlin 1.3.61. New: Add support for custom targets in WireRun and the Gradle plugin. New: Improve schema evaluation algorithm when loading separate sourcePath and protoPath . New: Lazy loading of protoPath contents. New: Make it possible to customize Gradle plugin\u2019s configurations. New: Make it possible to customize Gradle plugin\u2019s generateProtos task. Fix: Use correct ProtoAdapter for packed fields in Kotlin. Fix: Properly handle name clashes between fields and enclosing types. Fix: Preserve the package name on files loaded from protoPath . Fix: ProtoPruner: Properly evaluate Pruner\u2019s reachable objects. Fix: ProtoPruner: Ensure --excludes properly prunes options. Fix: ProtoPruner: Keep used ServiceOptions and MethodOptions when pruning. Version 3.0.2 \u00b6 2019-11-22 Fix: Generate correct unknownFields code if a message field\u2019s name is a Kotlin keyword. Fix: Properly handle unknown enum values in Kotlin. Fix: ProtoPruner: retain used extends. Fix: ProtoPruner: retain only used imports. Fix: ProtoPruner: use NewSchemaLoader that correctly loads google.protobuf.descriptor. Fix: ProtoPruner: print default values for scalar types for proto target within the options. Fix: ProtoPruner: fix handling of options. Fix: ProtoPruner: print default values for enums. Version 3.0.1 \u00b6 2019-10-18 Fix: Use the correct adapter path for gRPC endpoints that customize the Java package. Fix: Preserve documentation in generated services. Fix: Fail to generate code if the source directory doesn\u2019t exist. Fix: Make Kotlin consistent with Java for unknown enum constants. We now treat these as unknown fields rather than failing to decode the enclosing message. Version 3.0.0 \u00b6 2019-10-07 Update: All gRPC networking calls are encoded in gzip. Version 3.0.0-rc03 \u00b6 2019-10-04 Fix: Update dependency to a stable version, 2.4.1 of Okio. Version 3.0.0-rc02 \u00b6 2019-10-01 Kotlin \u00b6 Fix: Nullify other oneof fields in Builder setters in Kotlin interop. Fix: Use unknownFields in hashCode() . Fix: Remove withoutUnknownFields() from Kotlin. gRPC \u00b6 Update: Total rewrite of the generated interfaces for clients: Introduce two interfaces, GrpcCall for simple RPCs, and GrpcStreamingCall fox duplex ones. Both will provide blocking and suspending API, including a reference to the underlying OkHttp Call object and its timeout. Fix: Send stream cancels from clients. Misc \u00b6 New: Changes printing of options and enums: No empty lines between options and fields for enums. Print options on new lines only when more than one. Fix: Don\u2019t cache Message\u2019s hash code on Native. Fix: Fix handling of map values in FieldBinding . Fix: Fix import fails on windows due to path separator. Fix: Don\u2019t emit proto2 sources for proto3 syntax. Version 3.0.0-rc01 \u00b6 2019-08-02 Compiler + Gradle plugin \u00b6 New: Support includes on Maven coordinate dependencies. New: Track includes separately for source vs proto paths. New: Follow symlinks when building. New: Change the Gradle plugin to track targets as a list. New: Includes and Excludes for Wire targets. New: Print errors on ambiguous and missing imports. Fix: Fix a bug where protopath Maven resources weren\u2019t working. Fix: Don\u2019t reuse source dependencies as protopath dependencies. Fix: Fix equals() implementation for messages with no fields. Kotlin \u00b6 New: Move Wire.kt into jvmMain to discourage its use in common Kotlin code. New: Make Message.adapter a val . New: Optimize decode() code for protos with no fields. New: Update supported Native platforms. New: Make Message.unknownFields property non-nullable. New: Make Message.unknownFields a val . Fix: Don\u2019t use KClass.simpleName to avoid needing kotlin-reflect dependency. Fix: Use kotlin.UnsupportedOperationException in generated code. gRPC \u00b6 New: Introduce MessageSource and MessageSink interfaces in wire-runtime . New: Honor Java package names in Wire gRPC services. New: Make PipeDuplexRequestBody internal. Fix: Workaround for @Generated annotation on Java 9+. Fix: Fix types for blocking APIs. Misc \u00b6 Fix: Fix deserializing null values in Gson adapter. Fix: Change wire-runtime artifact names to preserve 2.x compatibility. Version 3.0.0-alpha03 \u00b6 2019-06-22 Similar to alpha02, but with proper wire-runtime multiplatform artifacts. Version 3.0.0-alpha02 \u00b6 2019-06-21 New: Experimental multiplatform runtime. Starting with this version, wire-runtime is published as a multiplatform Kotlin artifact. While the JVM artifact is binary- and behavior-compatible with 3.0.0-alpha01, artifacts for other platforms may not work correctly at this point. The artifact name for the JVM artifact has been changed to wire-runtime-jvm : now, in order to depend on the multiplatform runtime, use the following Gradle dependency declaration: api \"com.squareup.wire:wire-runtime:3.0.0-alpha02\" and if you want to depend on the JVM artifact only, use the following declaration: api \"com.squareup.wire:wire-runtime-jvm:3.0.0-alpha02\" New: Generate RPCs as Single Abstract Methods. New: Add \u201csingleMethod\u201d Gradle plugin configuration for services. New: Add \u201cblockingServices\u201d Gradle plugin configuration for services. New: Support packageless services code generation. New: Remove sealed classes-based oneof implementation. New: Don\u2019t generate a Builder for non-interop Kotlin messages. Fix: Kotlin Generator correctly generates code for Protobuf services. Fix: Improved formatting of generated Kotlin code. Fix: Generate correct adapter names for WireField annotation. Fix: Generate labels for WireField annotation. Fix: Wrap oneof error message properly. Version 3.0.0-alpha01 \u00b6 2019-03-14 New: Kotlin Generator Wire 3 can generate Kotlin data classes. To enable this feature via the command line API, pass in the --kotlin_out parameter that should specify the output directory for the generated *.kt files. Given the following simple proto: message Person { required string name = 1 ; required int32 id = 2 ; optional string email = 3 ; } the generated Kotlin code will look like the following: data class Person ( @field : WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" ) val name : String , @field : WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#INT32\" ) val id : Int , @field : WireField ( tag = 3 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" ) val email : String? = null , val unknownFields : ByteString = ByteString . EMPTY ) : Message < Person , Person . Builder > ( ADAPTER , unknownFields ) { companion object { @JvmField val ADAPTER : ProtoAdapter < Person > = ... // code omitted for brevity The copy() method of a data class replaces most usages of the builder. If your code relies on the Builder , you can enable full Builder generation by passing the --java_interop parameter to the compiler. New: gRPC support In addition to generating Kotlin code from proto messages, Wire can now generate code for gRPC endpoints. Here\u2019s an example schema: service RouteGuide { // A simple RPC. // // Obtains the feature at a given position. // // A feature with an empty name is returned if there's no feature at the given // position. rpc GetFeature ( Point ) returns ( Feature ) {} } The generated code will look like the following (message protos, referenced by the schema, are omitted): interface RouteGuide : Service { @WireRpc ( path = \"/routeguide.RouteGuide/GetFeature\" , requestAdapter = \"routeguide.Point#ADAPTER\" , responseAdapter = \"routeguide.Feature#ADAPTER\" ) suspend fun GetFeature ( request : Point ): Feature } All four gRPC modes are supported: the generated code uses suspendable functions to implement non-blocking asynchronous execution. In streaming modes, ReceiveChannel and SendChannel are used to listen to asynchronous data in a non-blocking fashion. This feature works out of the box in Wire 3 compiler as long as the input file contains a gRPC schema. New: Gradle plugin Here\u2019s an example Gradle configuration: apply plugin: 'com.squareup.wire' wire { // Keeps only 'Dinosaur#name' as the root of the object graph roots 'squareup.dinosaurs.Dinosaur#name' // Keeps all fields, except 'name', in 'Dinosaur' prunes 'squareup.dinosaurs.Dinosaur#name' // Both roots and prunes in an external file rules 'rules.txt' kotlin { javaInterop true out \"${buildDir}/generated/custom\" } } The wire extension introduces the concept of compilation targets, such as kotlin and java , where each target has its own configuration properties. Multiple targets can be supplied, which benefits use cases such as migrating Java protos to Kotlin. New: Decouple the option of using Android annotations for nullability from the option of having messages implement Parcelable. New: Wire Moshi adapter for serializing proto JSON representation using the Moshi library. New: Implement support for custom enum types. New: Generate AndroidX nullability annotations instead of old support library annotations. New: Import JSR 305 and use it to mark nullability of public API. New: Allow inline multiline comments. New: Generate an empty class when a nested message is retained but its parent was pruned. New: Support rendering a ProtoFile to its schema. New: Support hexadecimal numeric literals. New: Allow custom types to be constrained with a \u2018with\u2019 clause. New: Generate a constructor which takes in a Message.Builder instead of all fields separately. New: Add location to the error message about unsupported group elements. New: Permit single files to be used on the proto path. Fix: Emit \u2018=\u2019 for syntax declaration. Fix: Don\u2019t crash when a comment has a dollar sign. Fix: Return subclass type instead of abstract parameterized type for newBuilder. Fix: Validate enum namespace in file context are unique. Version 2.2.0 \u00b6 2016-06-17 New: Support for map type in the schema, compiler, and runtime! New: AndroidMessage base class consolidates everything required for supporting Android and will now be used for generating code with --android . New: stream keyword in RPC definitions is now parsed and exposed in the schema. Fix: Nested types which are retained no longer cause their enclosing type to be retained. Instead, non-instantiable empty types will be generated for pruned enclosing types. Fix: Remove per-type Parcelable.Creator classes and instead use a single type which delegates to the message\u2019s ProtoAdapter . Fix: Retain information on redacted fields even when options were pruned. Fix: Do not generate code for handling null from list types (and now map types) which are guaranteed to never be null . Version 2.1.2 \u00b6 2016-04-15 Fix: Gson type adapter now deserializes JSON null literals to empty list for repeated fields. Version 2.1.1 \u00b6 2016-02-01 New: reserved keyword is now supported and enforced. Fix: Defer reflection-based lookup of enum method until first use to avoid class loading race conditions. Fix: Support single-quoted string literals. Fix: Adjacent string literals are not correctly concatenated. Version 2.1.0 \u00b6 2016-01-18 Empty lists of packed values were being encoded incorrectly. In Wire 2.0.x our message adapters incorrectly included empty lists for [packed=true] rather than omitting them. This is now fixed. New: Message.encode() to concisely encode a message. New: MessageAdapter.decode(ByteString) to decode a message from a byte string without an intermediate byte array. New: Wire now includes a sample code generation for service interfaces. Version 2.0.3 \u00b6 2016-01-04 New: ProtoAdapter.get overload which returns an adapter given an instance of a message. New: @Nullable annotations are emitted for optional fields when using --android . Fix: Remove the need for javac to generate synthetic accessor methods in the generated code. This results in smaller code size and less method references (for Android users). Version 2.0.2 \u00b6 2015-12-14 Fix: Exclude unknown fields when encoding JSON and drop unknown fields when parsing JSON. Fix: Ensure JSON encoding and decoding works in the default generation mode (not just --compact ) by always adding @WireField metadata to message fields. Fix: Update to JavaPoet 1.4 for more accurate generation of valid Java code. Version 2.0.1 \u00b6 2015-11-12 Fix: Do not emit case statements for aliased enum constant values. The first constant for a value will be returned when deserializing. Fix: Emit @Deprecated annotation on deprecated enum constants. Fix: Correctly prune dependencies of excluded message, enum, or service members. Previously the dependencies of an excluded member were retained despite the member itself being omitted. Version 2.0.0 \u00b6 2015-10-23 Wire 2 is a backwards-incompatible release. It makes breaking changes to the compiler, runtime, extensions, and generated code. These changes aren\u2019t made lightly as we\u2019ve endured the upgrade in our own projects! We believe the cost of migration is worth the benefits. We\u2019ve created the wire-schema library that models .proto schema definitions. This is a capable library that packs several neat features. You can load a Schema from .proto files located on the local file system, a ZIP or JAR file, or any java.nio.FileSystem like Jimfs . You can prune this schema with includes or excludes, allowing you to reuse .proto definitions with minimal code. And you can decode data directly from a schema: no code generation is necessary! We\u2019ve flattened extensions. Wire 2.0 combines the fields defined directly on messages with fields defined far away in extensions. In the generated code, extension fields look just like every other field! One limitation of this approach is that it\u2019s no longer possible to compile extensions separately from the messages they extend. For this reason we now recommend always generating all Wire code in a single step. We\u2019ve rearranged the runtime. Types related to the protocol buffers format are now prefixed Proto and types related to our implementation are prefixed Wire . To encode and decode messages you must first get an adapter either from the ADAPTER constant or from ProtoAdapter.get() . You no longer need a Wire instance! Runtime \u00b6 New ADAPTER constant on most messages gives access to encode & decode values. This replaces the encoding and decoding methods on Wire . Guard against null lists. Code that passes null to builder methods expecting a List used to accept that; now Wire throws a NullPointerException . Similarly list elements must also be non-null. New Message.newBuilder() API. This replaces the previous copy constructor on Builder . New: Message.withoutUnknownFields() strips unknown fields. Fix: Always throw ProtocolException when there are decoding problems. Fix: Stricter checking for oneof fields. Previously it was possible to create instances with multiple values set! Fix: Improve redacting of repeated fields. Fix: ProtoReader now silently unpacks packed values. Fix: ProtoReader doesn\u2019t return groups to callers. Schema & Java Generator \u00b6 The Java generator is now standalone. Use these APIs programmatically to build plugins without delegating to the command line interface. New: Prune schemas using includes and excludes. The IdentifierSet can be used to configure which types and members are retained and which are pruned. New: Encode and decode values directly from the schema. New: Improved error messages for validation. Fix: Strict imports. Fix: Detect and forbid conflicts on extension tags. Compiler \u00b6 New: Always use Wire\u2019s bundled descriptor.proto . Previously to define custom options you needed to import a potentially-inconsistent descriptor. New: Emit all types when no .proto files are explicitly specified. New: Generate code for encoding and decoding messages. The previous, reflection-based encoder and decoder are accessible with --compact . New: ServiceFactory has been removed. To generate code for your services, load a schema with wire-schema and then use a library like JavaPoet to generate your own code. The JavaGenerator class can be used to look up Java names of message types. New: Compiler will load all .proto files if none are explicitly specified. New: Load .proto files from ZIP and JAR files. New: The --android flag causes Wire messages to implement Parcelable . New: Support multiple --proto_path arguments New: The --named_files_only flag limits which .proto files yield .java files. This was the default in Wire 1.x. New: The --no_options flag has been deleted. Use --excludes=google.protobuf.* instead. Extensions \u00b6 Extensions have been flattened. Fix: Better field resolution for options. Fix: Extension fields must not be required . Version 1.8.0 \u00b6 2015-06-27 New: oneof support! Fix: Correct serialization of repeated unknown fields. Fix: Removed superfluous private modifier on enum constructor. Warning: The \u2018protoparser\u2019 library was updated to version 4.0. This changes the type passed to any ServiceWriter implementations. Version 1.7.0 \u00b6 2015-03-05 New: Messages implement Serializable . The serialized form follows protobuf encoding, so renaming fields is safe as long as tags are consistent. (Renaming classes is unsafe, however). Note that extension fields are deserialized as unknown fields. Version 1.6.1 \u00b6 2015-01-16 New: --quiet and --dry-run command-line arguments. Fix: Handle an extension registry with zero or only one item. Okio dependency bumped to 1.2.0. Version 1.6.0 \u00b6 2014-10-23 Fix: Correctly throw IOException when parsing bad input fails. Fix: Ensure emitted code references to Arrays.asList correctly compiles in some edge cases. \u2018 UNDEFINED \u2018 enum value has been removed. Version 1.5.2 \u00b6 2014-09-15 New: \u2018 UNDEFINED \u2018 enum value represents values that the generated code is unable to handle. New: Service writer implementation can now be specified on the command-line. Version 1.5.1 \u00b6 2014-06-18 New: Generate interface definition for a Service with a partial list of methods. Okio dependency bumped to 1.0.0. Version 1.5.0 \u00b6 2014-04-22 New: Options on enums and enum values are now supported. New: Options ending with .redacted on fields will omit values from toString . New: Redactor creates copies of messages with redacted fields omitted. Various internal serialization improvements and memory reduction. Okio dependency bumped to 0.9.0. Version 1.4.0 \u00b6 2014-04-22 Replace Wire\u2019s ByteString class with the one from Okio ( https://github.com/square/okio ). This is a breaking API change . Add a new static method Wire.parseFrom(okio.Source input, Class<M> messageClass) . Reimplement Wire\u2019s input handling to use Okio internally. Provide basic support for generating code from service declarations (see README.md). Improve deserialization performance. Fix a bug where no some extension dependencies were not detected. Version 1.3.3 \u00b6 2014-03-28 New: Support service declarations as roots. The request and response types of their methods will be included. Version 1.3.2 \u00b6 2014-03-27 Fix: Enum value duplicate check now correctly looks at names instead of values. Version 1.3.1 \u00b6 2014-03-25 New: Automatically add Maven plugin\u2019s generated source as a compilation root. Fix: Correct Maven plugin\u2019s \u2018no arguments\u2019 flag to work properly. Fix: Support extend declarations nested inside message types. Version 1.3.0 \u00b6 2014-03-21 New: Empty repeated fields are now initialized to an empty collection. New: Emit field options. Use --no_options flag to disable. New: @Deprecated is now added to fields and setters on the builder. New: Maven plugin for running the compiler as part of a build. Fix: Treat empty and null repeated fields the same in equals() and hashCode() . Note: This version is not backwards compatible with code generated from previous versions. Version 1.2.0 \u00b6 2013-11-01 New: --registry_class compiler argument emits a class with a list of extensions suitable for passing to the Wire constructor. Fix: Ensure all trailing whitespace is trimmed on documentation. Version 1.1.1 \u00b6 2013-10-23 Fix: Correct parsing and emission of multi-line documentation. Version 1.1.0 \u00b6 2013-10-22 New: Support for message options. New: Check for duplicate field tag numbers. New: Emit Javadoc on messages, enum values, and builder methods. Fix: Emit imports for extension fields and classes outside of package. Fix: Correctly generate sources for protos with the same basename. Fix: Do not generate default constants for message types. Fix: Avoid shadowing fields named \u201cresult\u201d, \u201cother\u201d, or \u201co\u201d. Version 1.0.1 \u00b6 2013-08-27 New: Support reading directly from InputStream . New: Add \u2018 other == this \u2018 shortcut in generated equals() methods. Version 1.0.0 \u00b6 2013-08-23 Initial version.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-441","text":"2022-08-05 New: Check HTTP2 protocol is set for passed client to GrpcClient . New: Add buildersOnly option for Java and Kotlin target, setting it to true will change the visibility of generate types\u2019 constructor to non-public. Fix: Properly define api dependency for okio in wire-schema . Fix: Sort input locations so they match on all platforms. Fix: Avoid NPEs with kotlin 1.7.20 around source sets. Update: Bumped KotlinPoet to 1.12.0 .","title":"Version 4.4.1"},{"location":"changelog/#version-440","text":"2022-06-07 New: Custom schema handlers! Wire lets you now plug in your own logic to deal with the protobuf schema the way you want. Check our documentation for details. You can also check our recipe directory for examples. Note that this API obsoletes the CustomHandlerBeta type Wire had until now. New: You can now easily create an in-memory protobuf schema with the new SchemaBuilder class. This lives in the new wire-schema-tests artifact. For usage examples, check the tests in custom handler recipes . Breaking: the wire-profiles artifact has been removed and is now inlined in wire-schema . Breaking: CoreLoader \u2018s isWireRuntimeProto methods are now static. Breaking: SchemaLoader and related classes have been moved from wire-compiler to wire-schema . New: Support packed and map fields when converting to/from JSON with Kotlin. New: Support typesafe accessors and version catalogs in Wire plugin. New: Generate annotations for repeated options. New: Allow parsing of oneof options. New: Support map fields in options. New: Add macosArm64 support to the KMP projects supporting mac. Fix: Properly deal with maps of scalar types, deserializing missing scala key/value into identity. Fix: Fix a crash where ProtoMember was populated with the wrong data.","title":"Version 4.4.0"},{"location":"changelog/#version-430","text":"2022-03-24 New: reserved tags and names in enum types are now honoured by Wire. Fix: max keyword is now correctly parsed for enum types. Fix: Wire now writes minus double zeros and minus float zeros on proto3. Fix: Wire doesn\u2019t write google wrappers types\u2019 identity values anymore. Fix: CoreLoader correctly loads .proto files present in the resources of the project. Fix: Propagate GrpcExceptions in GrpcCalls . Fix: Change GrpcCall.isCanceled to honor OkHttp cancellations.","title":"Version 4.3.0"},{"location":"changelog/#version-420","text":"2022-02-17 New: Publish a bill of materials (BOM) for Wire. Depend on this from Gradle or Maven to keep all of your Wire artifacts on the same version, even if they\u2019re declared via transitive dependencies. You can even omit versions when declaring other Wire dependencies. dependencies { implementation ( platform ( \"com.squareup.wire:wire-bom:4.2.0\" )) implementation ( \"com.squareup.wire:wire-compiler\" ) // No version! implementation ( \"com.squareup.wire:wire-gradle-plugin\" ) // No version! implementation ( \"com.squareup.wire:wire-grpc-client\" ) // No version! // Etc. }","title":"Version 4.2.0"},{"location":"changelog/#version-411","text":"2022-02-15 Fix: Print target name in ConsoleWireLogger . Fix: Throw early when field or constant names start with a digit. Update: Bumped SwiftPoet to 1.3.1 . Fix: Wire will not generate annotations for repeated options.","title":"Version 4.1.1"},{"location":"changelog/#version-410","text":"2022-01-28 New: When using Wire JSON factories, you can now override the proto3 behavior of skipping default values when writing JSON. Set writeIdentityValues to true for either WireJsonAdapterFactory or WireTypeAdapterFactory to enable it. Breaking: WireLogger methods has been refactored to remove platform dependencies and allow more precise callbacks. We might add new methods in the future for better logging still. Removal: The dry-run option on WireCompiler has been removed. Swift: WireCompiler podspec is now backup by a jar so consumers will not have to locally build it on pod install .","title":"Version 4.1.0"},{"location":"changelog/#version-401","text":"2021-12-07 Fix: Don\u2019t fail at compilation when an enum is in a oneof for Swift generation.","title":"Version 4.0.1"},{"location":"changelog/#version-400","text":"2021-12-03 New: Add \u2018nameSuffix\u2019 parameter for configuring generated service-class names in Kotlin. New: Define oneofName in @WireField . New: Enable iosSimulatorArm64 for Kotlin multiplatform. New: Expose the source .proto file at ProtoAdaper.sourceFile . This is null for built-in types and types generated prior to this release. New: Generate Kotlin code whose members match the declaration order of the corresponding .proto files. In previous releases, generated members were sorted by kind (fields, oneofs), then by declaration order. With this update only declaration order is used. Note that this will change the encoded-bytes of these messages. This change is both forwards and backwards-compatible. Identical encoding of equal messages across Wire releases is typical but not guaranteed, and this is a rare release that changes that encoding. If you do cryptographic hashes on encoded proto messages, you will notice that the hashes are different in this release. New: Option in SchemaLoader to exhaustively load imported files. By default we only load what\u2019s immediately necessary to generate code; this new option loads everything reachable into the schema. New: Programmatic API to prune schemas. See Pruner in wire-schema. New: SchemaLoader doesn\u2019t extend the Closeable interface anymore. New: Support rpcRole = 'none' in the Gradle plugin to generate neither client nor server code. New: Support for Android variants. New: Support for glob syntax in srcJar includes. New: Support for special float literals. New: Swift support Timestamp and Duration . New: The Wire plugin requires an output to be set. Before, it would generate Java code by default; it will now throw if there are no output defined. New: The default value of emitAppliedOptions for our Java and Kotlin target is now set to true. New: Wire should build and execute properly on Windows. New: @WireRpc has a new sourceFile attribute. New: GrpcClient.Builder.minMessageToCompress() configures which messages are compressed. This will completely disable compression if the size is Long.MAX_VALUE . We\u2019ve seen problems where some Golang gRPC servers don\u2019t support compression; setting this to MAX_VALUE is necessary to interop with them. New: SchemaReflector is our initial implementation of the gRPC Server Reflection Protocol . Note that although we implement the business logic of gRPC reflection, we don\u2019t offer a gRPC server built into Wire. New: wire-reflector bundles gRPC\u2019s reflection.proto which it is built upon. New: wire-runtime exposes a com.squareup.wire.VERSION constant reflecting the project version. New: change the Gradle plugin so that (unstable) custom handlers can be configured with instance instead of with a class name. Fix: Be more aggressive about loading transitive files with SchemaLoader.loadExhaustively . Fix: Bugs in JSON serialization of builder-less Kotlin types have been addressed. Fix: Compile Kotlin/JS with both LEGACY and IR compilers. Fix: Deep copy metadata on GrpcCall.clone() . Fix: Don\u2019t break task caching by using absolute paths in the Gradle plugin. Wire now uses project-relative paths in any attribute that is used as a cache key. Fix: Don\u2019t crash encoding schemas when an option contains a repeated field, an enum, or a double. Fix: Don\u2019t depend on moshi-kotlin in wire-moshi. This caused a transitive dependency on kotlin-reflect, which we neither needed nor wanted. Fix: Don\u2019t generate invalid code when an enum constant is named name or ordinal . Fix: Don\u2019t re-use the cache if protobuf inputs have changed. Fix: Emitting proper protobuf format for option values defined as a list of enum constants. Fix: Explicitly defined Wire gRPC server generation as experimental: the feature isn\u2019t complete. Fix: Generate @Deprecated annotations on deprecated messages, fields, enums, and enum constants. Fix: Handle out of order proto fields when initializing Kotlin constructors. Fix: Handle writing/reading exceptions for duplex calls in Wire gRPC. Fix: In Java, rename instances to avoid field and class name conflicts. Fix: Locate files in the root package when importing. Fix: Memory fixes found with Address Sanitizer in Swift. Fix: Permit values other than 0 and 1 when decoding protobuf-encoded booleans. Previously we threw an IOException for other values; now all non-zero values are true. Fix: Redact boxed OneOf fields. Fix: Redacted Kotlin scalars now respect nullability. Fix: Retain field order when emitting a schema as .proto files. Fix: Reverse the topological sort of dependent files in SchemaReflector . We had problems with grpc-curl which expects the requested file to be listed first. Fix: Support Kotlin-generated annotations on Java fields. Fix: Support for serializing builder-less Kotlin generated classes to JSON. Fix: Support reporting errors in CustomHandlerBeta . Fix: Suppress deprecation warnings on generated enum\u2019s fromValue method in Kotlin. Fix: Swift adapters will throw an error when encountering an unexpected ProtoReader.beginMessage() rather than calling fatalError() . Fix: Update the Wire Gradle plugin to clear the output directory before generating code. This prevents the need to do a clean build after removing a message type. Fix: Update the Wire Gradle plugin to register generated .java sources with the Java compiler. Previously this was broken if the Kotlin plugin was installed. Fix: Use Gradle\u2019s logging mechanism to reduce output when Wire generates code. Fix: Use correct type when referencing a custom adapter in Kotlin generated code. Fix: Use relative path sensitivity and file collection. Fix: Validate enum constant uniqueness for the entire package. Fix: Wire Gradle plugin tasks have been modernized with configuration caching support. Fix: Wire will not generate respective built-in types for Java, Kotlin, and Swift generation. Those are usually the google types for which Wire will provide its own implementation. Upgrade: Update KotlinPoet to 1.8.0 . Upgrade: OkHttp 4.9.3 . Upgrade: Okio 3.0.0 . We now use Okio 3\u2019s FileSystem in SchemaLoader , which makes it easier to load .proto files from the classpath. This is binary-incompatible with the Okio 3.0 alpha releases. Bye: Drop support for emitKotlinxSerialization.","title":"Version 4.0.0"},{"location":"changelog/#version-371","text":"2021-11-03 Fix: Properly load schema located at root without packages.","title":"Version 3.7.1"},{"location":"changelog/#version-370","text":"2021-03-25 New: srcProject(\":project-name\") makes it easier to depend on .proto files of other projects. Fix: Don\u2019t require source that .proto directories exist at Gradle plugin configuration time. This was preventing Wire from using other tasks\u2019 outputs as its inputs. Fix: Don\u2019t fail if options have a . prefix.","title":"Version 3.7.0"},{"location":"changelog/#version-361","text":"2021-03-09 Fix: The Wire Gradle plugin now supports Java only Android projects. Fix: In the Wire Gradle plugin, sourcePath will now include only protos defined with include if the option is present. It used to include all existing .proto files even if include was used. New: Full support Optional Int64 and UInt64 for JSONString in Swift.","title":"Version 3.6.1"},{"location":"changelog/#version-360","text":"2021-02-08 New: Automatically add a dependency when a protoPath or protoSource depends on a project. New: protoPath and protoSource dependencies are now not transitive by default. New: New protoLibrary option for the Wire Gradle plugin. Configuring a project as a protoLibrary will cause the generated .jar file to include .proto sources. New: Code generation for plain gRPC server. The Kotlin target now has a new grpcServerCompatible option which if set to true will generate gRPC server-compatible classes. New: Introduce GrpcException . New: Add GrpcMethod tag to the request. New: Adds redacting support for Moshi JSON adapters. New: Publish plugin marker for Gradle plugin. Fix: Escape square brackets in Kotlin generated code documentation. Fix: Improved proto parsing performance.","title":"Version 3.6.0"},{"location":"changelog/#version-350","text":"2020-10-27 New: Wire Gradle plugin improvements: A task is now created for each available sources (main, Android variants, etc). The wire-runtime dependency is automatically added. Generated code directories are automatically added into their module\u2019s source sets. New: Wire\u2019s proto parser now knows about oneOfOptions . New: Wire will throw when two enum constants are ambiguous, like ZERO and zero . New: Bytes options are not eligible anymore as annotation members. Fix: Optional fields in proto3 are now generated as nullable fields. Fix: JSON camel-casing is updated to fit latest protobuf specifications. Fix: Exception messages when gRPC fails have been improved. Fix: Allow ; as entry separator in option maps. Fix: Enum constants are now properly escaped when conflicting with keywords of their generated target platform. Fix: Update to KotlinPoet 1.7.2 which makes a lot of change in how Kotlin code is generated.","title":"Version 3.5.0"},{"location":"changelog/#version-340","text":"2020-09-24 New: Stop emitting enum constant options as fields for Kotlin. New: The Wire Gradle plugin task is now cacheable. New: New GrpcCall function to help implement fakes. New: Change GrpcStreamingCall.execute() to support structured concurrency.","title":"Version 3.4.0"},{"location":"changelog/#version-330","text":"2020-09-14 New: Proto3 support! This includes the new behaviors, the new types, and the JSON. New: Swift support for proto2 schemas. The details are in our blog post . New: Wire will now throw an error when: two generated files end up overriding each other, imports form a cycle, packages form a cycle. This can be turned off with the flag permitPackageCycles , an option within the source set cannot be resolved, there are name duplications of members in a message, or of rpcs in a service, a map is used as an extension. New: Support for the json_name pseudo option. New: The wire_package file option allows one to set the JVM package where classes generated from the concerned file will be placed. wire_package takes precedence over java_package . New: Lists and maps in Kotlin generated code are now immutable. New: Support UTF-8 with BOM in proto files. New: wire.since and wire.until have been renamed with the prefix constant_ for EnumValueOptions . New: Wire generates 1) annotations for options which 2) gets assigned to the generated code where appropriate. Both behavior can be turn on or off via the flags: emitDeclaredOptions : True to emit types for options declared on messages, fields, etc. Default to true, emitAppliedOptions : True to emit annotations for options applied on messages, fields, etc. Default to false. Fix: Recursive map values. Fix: Long expressions in equals and encodedSize functions.","title":"Version 3.3.0"},{"location":"changelog/#version-322","text":"2020-05-15 Fix: JSON serialization correctly emits all values.","title":"Version 3.2.2"},{"location":"changelog/#version-321","text":"2020-05-02 New: onlyVersion option on the Wire Gradle plugin to target a unique version. By and large, service code that supports many clients would target ranges via sinceVersion and untilVersion , while client code would target a unique version via onlyVersion . New: Support for optional fields in Proto3. Fix: Restored the GrpcClient.create API to create implementations for gRPC interfaces.","title":"Version 3.2.1"},{"location":"changelog/#version-320","text":"2020-04-23 New: wire.since and wire.until options on members and enum values. You can prune fields or constants using these two options. When generating code with the Wire Gradle plugin, define sinceVersion and/or untilVersion to scope the generated code. New: Messages\u2019 toString method on Kotlin and Java now escape string values for easy parsing. Fix: Link the entire descriptor.proto every time when building the Schema . Fix: Properly handle members named after keywords of the target language for both Java and Kotlin. Fix: Use the declared name for keys in JSON when emitting/reading keyword named members. Fix: Generated Kotlin code is malformed for long identifiers. Fix: Make the Wire Gradle plugin compatible with instant execution.","title":"Version 3.2.0"},{"location":"changelog/#version-310","text":"2020-02-06 This release includes major non-backwards-compatible API changes to the wire-schema module. This will break tools that use Wire\u2019s schema modeling as a standalone library. We are making big changes to this component and we sacrificed API compatibility to accelerate these improvements. New: proto { ... } target in the Wire Gradle plugin. Use this to perform basic source code transformations on collections of .proto files. We use it to prune large collections of protos to just the subset used by the application. Fix: Support all forms of reserved extensions, such as extensions 1, 3 to 5, 7; . Fix: Don\u2019t re-generate source files when their .proto files haven\u2019t changed. New: includes , excludes , root , and prune give precedence to the most precise rule. Previously excludes always took precedence over includes , and prune always took precedence over root . Fix: Generate non-instantiable class for enclosing types in Kotlin. These are emitted when a nested type is retained but its enclosing type is pruned. Fix: Do not fail to build when the profile cannot find a dependency.","title":"Version 3.1.0"},{"location":"changelog/#version-303","text":"2019-12-23 Starting with this version the Wire Maven plugin is no longer maintained and has been removed from the repository. New: Support for custom options in Kotlin. New: Kotlin 1.3.61. New: Add support for custom targets in WireRun and the Gradle plugin. New: Improve schema evaluation algorithm when loading separate sourcePath and protoPath . New: Lazy loading of protoPath contents. New: Make it possible to customize Gradle plugin\u2019s configurations. New: Make it possible to customize Gradle plugin\u2019s generateProtos task. Fix: Use correct ProtoAdapter for packed fields in Kotlin. Fix: Properly handle name clashes between fields and enclosing types. Fix: Preserve the package name on files loaded from protoPath . Fix: ProtoPruner: Properly evaluate Pruner\u2019s reachable objects. Fix: ProtoPruner: Ensure --excludes properly prunes options. Fix: ProtoPruner: Keep used ServiceOptions and MethodOptions when pruning.","title":"Version 3.0.3"},{"location":"changelog/#version-302","text":"2019-11-22 Fix: Generate correct unknownFields code if a message field\u2019s name is a Kotlin keyword. Fix: Properly handle unknown enum values in Kotlin. Fix: ProtoPruner: retain used extends. Fix: ProtoPruner: retain only used imports. Fix: ProtoPruner: use NewSchemaLoader that correctly loads google.protobuf.descriptor. Fix: ProtoPruner: print default values for scalar types for proto target within the options. Fix: ProtoPruner: fix handling of options. Fix: ProtoPruner: print default values for enums.","title":"Version 3.0.2"},{"location":"changelog/#version-301","text":"2019-10-18 Fix: Use the correct adapter path for gRPC endpoints that customize the Java package. Fix: Preserve documentation in generated services. Fix: Fail to generate code if the source directory doesn\u2019t exist. Fix: Make Kotlin consistent with Java for unknown enum constants. We now treat these as unknown fields rather than failing to decode the enclosing message.","title":"Version 3.0.1"},{"location":"changelog/#version-300","text":"2019-10-07 Update: All gRPC networking calls are encoded in gzip.","title":"Version 3.0.0"},{"location":"changelog/#version-300-rc03","text":"2019-10-04 Fix: Update dependency to a stable version, 2.4.1 of Okio.","title":"Version 3.0.0-rc03"},{"location":"changelog/#version-300-rc02","text":"2019-10-01","title":"Version 3.0.0-rc02"},{"location":"changelog/#kotlin","text":"Fix: Nullify other oneof fields in Builder setters in Kotlin interop. Fix: Use unknownFields in hashCode() . Fix: Remove withoutUnknownFields() from Kotlin.","title":"Kotlin"},{"location":"changelog/#grpc","text":"Update: Total rewrite of the generated interfaces for clients: Introduce two interfaces, GrpcCall for simple RPCs, and GrpcStreamingCall fox duplex ones. Both will provide blocking and suspending API, including a reference to the underlying OkHttp Call object and its timeout. Fix: Send stream cancels from clients.","title":"gRPC"},{"location":"changelog/#misc","text":"New: Changes printing of options and enums: No empty lines between options and fields for enums. Print options on new lines only when more than one. Fix: Don\u2019t cache Message\u2019s hash code on Native. Fix: Fix handling of map values in FieldBinding . Fix: Fix import fails on windows due to path separator. Fix: Don\u2019t emit proto2 sources for proto3 syntax.","title":"Misc"},{"location":"changelog/#version-300-rc01","text":"2019-08-02","title":"Version 3.0.0-rc01"},{"location":"changelog/#compiler-gradle-plugin","text":"New: Support includes on Maven coordinate dependencies. New: Track includes separately for source vs proto paths. New: Follow symlinks when building. New: Change the Gradle plugin to track targets as a list. New: Includes and Excludes for Wire targets. New: Print errors on ambiguous and missing imports. Fix: Fix a bug where protopath Maven resources weren\u2019t working. Fix: Don\u2019t reuse source dependencies as protopath dependencies. Fix: Fix equals() implementation for messages with no fields.","title":"Compiler + Gradle plugin"},{"location":"changelog/#kotlin_1","text":"New: Move Wire.kt into jvmMain to discourage its use in common Kotlin code. New: Make Message.adapter a val . New: Optimize decode() code for protos with no fields. New: Update supported Native platforms. New: Make Message.unknownFields property non-nullable. New: Make Message.unknownFields a val . Fix: Don\u2019t use KClass.simpleName to avoid needing kotlin-reflect dependency. Fix: Use kotlin.UnsupportedOperationException in generated code.","title":"Kotlin"},{"location":"changelog/#grpc_1","text":"New: Introduce MessageSource and MessageSink interfaces in wire-runtime . New: Honor Java package names in Wire gRPC services. New: Make PipeDuplexRequestBody internal. Fix: Workaround for @Generated annotation on Java 9+. Fix: Fix types for blocking APIs.","title":"gRPC"},{"location":"changelog/#misc_1","text":"Fix: Fix deserializing null values in Gson adapter. Fix: Change wire-runtime artifact names to preserve 2.x compatibility.","title":"Misc"},{"location":"changelog/#version-300-alpha03","text":"2019-06-22 Similar to alpha02, but with proper wire-runtime multiplatform artifacts.","title":"Version 3.0.0-alpha03"},{"location":"changelog/#version-300-alpha02","text":"2019-06-21 New: Experimental multiplatform runtime. Starting with this version, wire-runtime is published as a multiplatform Kotlin artifact. While the JVM artifact is binary- and behavior-compatible with 3.0.0-alpha01, artifacts for other platforms may not work correctly at this point. The artifact name for the JVM artifact has been changed to wire-runtime-jvm : now, in order to depend on the multiplatform runtime, use the following Gradle dependency declaration: api \"com.squareup.wire:wire-runtime:3.0.0-alpha02\" and if you want to depend on the JVM artifact only, use the following declaration: api \"com.squareup.wire:wire-runtime-jvm:3.0.0-alpha02\" New: Generate RPCs as Single Abstract Methods. New: Add \u201csingleMethod\u201d Gradle plugin configuration for services. New: Add \u201cblockingServices\u201d Gradle plugin configuration for services. New: Support packageless services code generation. New: Remove sealed classes-based oneof implementation. New: Don\u2019t generate a Builder for non-interop Kotlin messages. Fix: Kotlin Generator correctly generates code for Protobuf services. Fix: Improved formatting of generated Kotlin code. Fix: Generate correct adapter names for WireField annotation. Fix: Generate labels for WireField annotation. Fix: Wrap oneof error message properly.","title":"Version 3.0.0-alpha02"},{"location":"changelog/#version-300-alpha01","text":"2019-03-14 New: Kotlin Generator Wire 3 can generate Kotlin data classes. To enable this feature via the command line API, pass in the --kotlin_out parameter that should specify the output directory for the generated *.kt files. Given the following simple proto: message Person { required string name = 1 ; required int32 id = 2 ; optional string email = 3 ; } the generated Kotlin code will look like the following: data class Person ( @field : WireField ( tag = 1 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" ) val name : String , @field : WireField ( tag = 2 , adapter = \"com.squareup.wire.ProtoAdapter#INT32\" ) val id : Int , @field : WireField ( tag = 3 , adapter = \"com.squareup.wire.ProtoAdapter#STRING\" ) val email : String? = null , val unknownFields : ByteString = ByteString . EMPTY ) : Message < Person , Person . Builder > ( ADAPTER , unknownFields ) { companion object { @JvmField val ADAPTER : ProtoAdapter < Person > = ... // code omitted for brevity The copy() method of a data class replaces most usages of the builder. If your code relies on the Builder , you can enable full Builder generation by passing the --java_interop parameter to the compiler. New: gRPC support In addition to generating Kotlin code from proto messages, Wire can now generate code for gRPC endpoints. Here\u2019s an example schema: service RouteGuide { // A simple RPC. // // Obtains the feature at a given position. // // A feature with an empty name is returned if there's no feature at the given // position. rpc GetFeature ( Point ) returns ( Feature ) {} } The generated code will look like the following (message protos, referenced by the schema, are omitted): interface RouteGuide : Service { @WireRpc ( path = \"/routeguide.RouteGuide/GetFeature\" , requestAdapter = \"routeguide.Point#ADAPTER\" , responseAdapter = \"routeguide.Feature#ADAPTER\" ) suspend fun GetFeature ( request : Point ): Feature } All four gRPC modes are supported: the generated code uses suspendable functions to implement non-blocking asynchronous execution. In streaming modes, ReceiveChannel and SendChannel are used to listen to asynchronous data in a non-blocking fashion. This feature works out of the box in Wire 3 compiler as long as the input file contains a gRPC schema. New: Gradle plugin Here\u2019s an example Gradle configuration: apply plugin: 'com.squareup.wire' wire { // Keeps only 'Dinosaur#name' as the root of the object graph roots 'squareup.dinosaurs.Dinosaur#name' // Keeps all fields, except 'name', in 'Dinosaur' prunes 'squareup.dinosaurs.Dinosaur#name' // Both roots and prunes in an external file rules 'rules.txt' kotlin { javaInterop true out \"${buildDir}/generated/custom\" } } The wire extension introduces the concept of compilation targets, such as kotlin and java , where each target has its own configuration properties. Multiple targets can be supplied, which benefits use cases such as migrating Java protos to Kotlin. New: Decouple the option of using Android annotations for nullability from the option of having messages implement Parcelable. New: Wire Moshi adapter for serializing proto JSON representation using the Moshi library. New: Implement support for custom enum types. New: Generate AndroidX nullability annotations instead of old support library annotations. New: Import JSR 305 and use it to mark nullability of public API. New: Allow inline multiline comments. New: Generate an empty class when a nested message is retained but its parent was pruned. New: Support rendering a ProtoFile to its schema. New: Support hexadecimal numeric literals. New: Allow custom types to be constrained with a \u2018with\u2019 clause. New: Generate a constructor which takes in a Message.Builder instead of all fields separately. New: Add location to the error message about unsupported group elements. New: Permit single files to be used on the proto path. Fix: Emit \u2018=\u2019 for syntax declaration. Fix: Don\u2019t crash when a comment has a dollar sign. Fix: Return subclass type instead of abstract parameterized type for newBuilder. Fix: Validate enum namespace in file context are unique.","title":"Version 3.0.0-alpha01"},{"location":"changelog/#version-220","text":"2016-06-17 New: Support for map type in the schema, compiler, and runtime! New: AndroidMessage base class consolidates everything required for supporting Android and will now be used for generating code with --android . New: stream keyword in RPC definitions is now parsed and exposed in the schema. Fix: Nested types which are retained no longer cause their enclosing type to be retained. Instead, non-instantiable empty types will be generated for pruned enclosing types. Fix: Remove per-type Parcelable.Creator classes and instead use a single type which delegates to the message\u2019s ProtoAdapter . Fix: Retain information on redacted fields even when options were pruned. Fix: Do not generate code for handling null from list types (and now map types) which are guaranteed to never be null .","title":"Version 2.2.0"},{"location":"changelog/#version-212","text":"2016-04-15 Fix: Gson type adapter now deserializes JSON null literals to empty list for repeated fields.","title":"Version 2.1.2"},{"location":"changelog/#version-211","text":"2016-02-01 New: reserved keyword is now supported and enforced. Fix: Defer reflection-based lookup of enum method until first use to avoid class loading race conditions. Fix: Support single-quoted string literals. Fix: Adjacent string literals are not correctly concatenated.","title":"Version 2.1.1"},{"location":"changelog/#version-210","text":"2016-01-18 Empty lists of packed values were being encoded incorrectly. In Wire 2.0.x our message adapters incorrectly included empty lists for [packed=true] rather than omitting them. This is now fixed. New: Message.encode() to concisely encode a message. New: MessageAdapter.decode(ByteString) to decode a message from a byte string without an intermediate byte array. New: Wire now includes a sample code generation for service interfaces.","title":"Version 2.1.0"},{"location":"changelog/#version-203","text":"2016-01-04 New: ProtoAdapter.get overload which returns an adapter given an instance of a message. New: @Nullable annotations are emitted for optional fields when using --android . Fix: Remove the need for javac to generate synthetic accessor methods in the generated code. This results in smaller code size and less method references (for Android users).","title":"Version 2.0.3"},{"location":"changelog/#version-202","text":"2015-12-14 Fix: Exclude unknown fields when encoding JSON and drop unknown fields when parsing JSON. Fix: Ensure JSON encoding and decoding works in the default generation mode (not just --compact ) by always adding @WireField metadata to message fields. Fix: Update to JavaPoet 1.4 for more accurate generation of valid Java code.","title":"Version 2.0.2"},{"location":"changelog/#version-201","text":"2015-11-12 Fix: Do not emit case statements for aliased enum constant values. The first constant for a value will be returned when deserializing. Fix: Emit @Deprecated annotation on deprecated enum constants. Fix: Correctly prune dependencies of excluded message, enum, or service members. Previously the dependencies of an excluded member were retained despite the member itself being omitted.","title":"Version 2.0.1"},{"location":"changelog/#version-200","text":"2015-10-23 Wire 2 is a backwards-incompatible release. It makes breaking changes to the compiler, runtime, extensions, and generated code. These changes aren\u2019t made lightly as we\u2019ve endured the upgrade in our own projects! We believe the cost of migration is worth the benefits. We\u2019ve created the wire-schema library that models .proto schema definitions. This is a capable library that packs several neat features. You can load a Schema from .proto files located on the local file system, a ZIP or JAR file, or any java.nio.FileSystem like Jimfs . You can prune this schema with includes or excludes, allowing you to reuse .proto definitions with minimal code. And you can decode data directly from a schema: no code generation is necessary! We\u2019ve flattened extensions. Wire 2.0 combines the fields defined directly on messages with fields defined far away in extensions. In the generated code, extension fields look just like every other field! One limitation of this approach is that it\u2019s no longer possible to compile extensions separately from the messages they extend. For this reason we now recommend always generating all Wire code in a single step. We\u2019ve rearranged the runtime. Types related to the protocol buffers format are now prefixed Proto and types related to our implementation are prefixed Wire . To encode and decode messages you must first get an adapter either from the ADAPTER constant or from ProtoAdapter.get() . You no longer need a Wire instance!","title":"Version 2.0.0"},{"location":"changelog/#runtime","text":"New ADAPTER constant on most messages gives access to encode & decode values. This replaces the encoding and decoding methods on Wire . Guard against null lists. Code that passes null to builder methods expecting a List used to accept that; now Wire throws a NullPointerException . Similarly list elements must also be non-null. New Message.newBuilder() API. This replaces the previous copy constructor on Builder . New: Message.withoutUnknownFields() strips unknown fields. Fix: Always throw ProtocolException when there are decoding problems. Fix: Stricter checking for oneof fields. Previously it was possible to create instances with multiple values set! Fix: Improve redacting of repeated fields. Fix: ProtoReader now silently unpacks packed values. Fix: ProtoReader doesn\u2019t return groups to callers.","title":"Runtime"},{"location":"changelog/#schema-java-generator","text":"The Java generator is now standalone. Use these APIs programmatically to build plugins without delegating to the command line interface. New: Prune schemas using includes and excludes. The IdentifierSet can be used to configure which types and members are retained and which are pruned. New: Encode and decode values directly from the schema. New: Improved error messages for validation. Fix: Strict imports. Fix: Detect and forbid conflicts on extension tags.","title":"Schema &amp; Java Generator"},{"location":"changelog/#compiler","text":"New: Always use Wire\u2019s bundled descriptor.proto . Previously to define custom options you needed to import a potentially-inconsistent descriptor. New: Emit all types when no .proto files are explicitly specified. New: Generate code for encoding and decoding messages. The previous, reflection-based encoder and decoder are accessible with --compact . New: ServiceFactory has been removed. To generate code for your services, load a schema with wire-schema and then use a library like JavaPoet to generate your own code. The JavaGenerator class can be used to look up Java names of message types. New: Compiler will load all .proto files if none are explicitly specified. New: Load .proto files from ZIP and JAR files. New: The --android flag causes Wire messages to implement Parcelable . New: Support multiple --proto_path arguments New: The --named_files_only flag limits which .proto files yield .java files. This was the default in Wire 1.x. New: The --no_options flag has been deleted. Use --excludes=google.protobuf.* instead.","title":"Compiler"},{"location":"changelog/#extensions","text":"Extensions have been flattened. Fix: Better field resolution for options. Fix: Extension fields must not be required .","title":"Extensions"},{"location":"changelog/#version-180","text":"2015-06-27 New: oneof support! Fix: Correct serialization of repeated unknown fields. Fix: Removed superfluous private modifier on enum constructor. Warning: The \u2018protoparser\u2019 library was updated to version 4.0. This changes the type passed to any ServiceWriter implementations.","title":"Version 1.8.0"},{"location":"changelog/#version-170","text":"2015-03-05 New: Messages implement Serializable . The serialized form follows protobuf encoding, so renaming fields is safe as long as tags are consistent. (Renaming classes is unsafe, however). Note that extension fields are deserialized as unknown fields.","title":"Version 1.7.0"},{"location":"changelog/#version-161","text":"2015-01-16 New: --quiet and --dry-run command-line arguments. Fix: Handle an extension registry with zero or only one item. Okio dependency bumped to 1.2.0.","title":"Version 1.6.1"},{"location":"changelog/#version-160","text":"2014-10-23 Fix: Correctly throw IOException when parsing bad input fails. Fix: Ensure emitted code references to Arrays.asList correctly compiles in some edge cases. \u2018 UNDEFINED \u2018 enum value has been removed.","title":"Version 1.6.0"},{"location":"changelog/#version-152","text":"2014-09-15 New: \u2018 UNDEFINED \u2018 enum value represents values that the generated code is unable to handle. New: Service writer implementation can now be specified on the command-line.","title":"Version 1.5.2"},{"location":"changelog/#version-151","text":"2014-06-18 New: Generate interface definition for a Service with a partial list of methods. Okio dependency bumped to 1.0.0.","title":"Version 1.5.1"},{"location":"changelog/#version-150","text":"2014-04-22 New: Options on enums and enum values are now supported. New: Options ending with .redacted on fields will omit values from toString . New: Redactor creates copies of messages with redacted fields omitted. Various internal serialization improvements and memory reduction. Okio dependency bumped to 0.9.0.","title":"Version 1.5.0"},{"location":"changelog/#version-140","text":"2014-04-22 Replace Wire\u2019s ByteString class with the one from Okio ( https://github.com/square/okio ). This is a breaking API change . Add a new static method Wire.parseFrom(okio.Source input, Class<M> messageClass) . Reimplement Wire\u2019s input handling to use Okio internally. Provide basic support for generating code from service declarations (see README.md). Improve deserialization performance. Fix a bug where no some extension dependencies were not detected.","title":"Version 1.4.0"},{"location":"changelog/#version-133","text":"2014-03-28 New: Support service declarations as roots. The request and response types of their methods will be included.","title":"Version 1.3.3"},{"location":"changelog/#version-132","text":"2014-03-27 Fix: Enum value duplicate check now correctly looks at names instead of values.","title":"Version 1.3.2"},{"location":"changelog/#version-131","text":"2014-03-25 New: Automatically add Maven plugin\u2019s generated source as a compilation root. Fix: Correct Maven plugin\u2019s \u2018no arguments\u2019 flag to work properly. Fix: Support extend declarations nested inside message types.","title":"Version 1.3.1"},{"location":"changelog/#version-130","text":"2014-03-21 New: Empty repeated fields are now initialized to an empty collection. New: Emit field options. Use --no_options flag to disable. New: @Deprecated is now added to fields and setters on the builder. New: Maven plugin for running the compiler as part of a build. Fix: Treat empty and null repeated fields the same in equals() and hashCode() . Note: This version is not backwards compatible with code generated from previous versions.","title":"Version 1.3.0"},{"location":"changelog/#version-120","text":"2013-11-01 New: --registry_class compiler argument emits a class with a list of extensions suitable for passing to the Wire constructor. Fix: Ensure all trailing whitespace is trimmed on documentation.","title":"Version 1.2.0"},{"location":"changelog/#version-111","text":"2013-10-23 Fix: Correct parsing and emission of multi-line documentation.","title":"Version 1.1.1"},{"location":"changelog/#version-110","text":"2013-10-22 New: Support for message options. New: Check for duplicate field tag numbers. New: Emit Javadoc on messages, enum values, and builder methods. Fix: Emit imports for extension fields and classes outside of package. Fix: Correctly generate sources for protos with the same basename. Fix: Do not generate default constants for message types. Fix: Avoid shadowing fields named \u201cresult\u201d, \u201cother\u201d, or \u201co\u201d.","title":"Version 1.1.0"},{"location":"changelog/#version-101","text":"2013-08-27 New: Support reading directly from InputStream . New: Add \u2018 other == this \u2018 shortcut in generated equals() methods.","title":"Version 1.0.1"},{"location":"changelog/#version-100","text":"2013-08-23 Initial version.","title":"Version 1.0.0"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct \u00b6 At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement \u00b6 We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks \u00b6 Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide \u00b6 If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"contributing/","text":"Contributing \u00b6 Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you\u2019ve found a security problem, please follow our bug bounty program. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) . Code Contributions \u00b6 Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge. Committer\u2019s Guides \u00b6 Releasing","title":"Contributing"},{"location":"contributing/#contributing","text":"Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you\u2019ve found a security problem, please follow our bug bounty program. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#code-contributions","text":"Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge.","title":"Code Contributions"},{"location":"contributing/#committers-guides","text":"Releasing","title":"Committer's Guides"},{"location":"releasing/","text":"Releasing \u00b6 Prerequisite: Sonatype (Maven Central) Account \u00b6 Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for com.squareup projects. Cutting a JVM Release \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update versions: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ `find . -name \"gradle.properties\"` sed -i \"\" \\ \"s/\\\"com.squareup.wire:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.wire:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` sed -i \"\" \\ \"s/\\<version\\>\\([^<]*\\)\\<\\/version\\>/\\<version\\>$RELEASE_VERSION\\<\\/version\\>/g\" \\ `find . -name \"README.md\"` Tag the release and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a $RELEASE_VERSION -m \"Version $RELEASE_VERSION\" git push && git push --tags Wait for GitHub Actions to start building the release. Prepare for ongoing development and push to GitHub. sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ `find . -name \"gradle.properties\"` git commit -am \"Prepare next development version.\" git push Wait for GitHub Actions to build and publish releases for both Windows and Non-Windows. Visit Sonatype Nexus to promote (close then release) the releases. Or drop it if there is a problem! Deploy the documentation website. ./deploy_website.sh Publishing the Swift CocoaPods \u00b6 There are two Podspecs to publish to CocoaPods: the Swift Wire runtime and the Swift Wire compiler. The same version number should be used for both. CocoaPods are published to the trunk repo, which is the main public repo for all CocoaPods. If you have not published Wire before then you\u2019ll need to get set up to publish to trunk , and be added as a publisher for the Wire Podspecs. Setting the Version \u00b6 When publishing a new version, two things must be done: 1. The version must be tagged in Git. So if you\u2019re publishing version 4.0.0-alpha1 , then you\u2019d check out the SHA you want to publish and run: git tag 4.0.0-alpha1 git push origin refs/tags/4.0.0-alpha1 The version being published needs to be passed into the Podspecs. This is done by setting the POD_VERSION environment variable: export POD_VERSION=4.0.0-alpha1 If publishing a release version (like 4.0.0 rather than 4.0.0-alpha1 ) then setting the POD_VERSION is optional and it will be pulled automatically from wire-library/gradle.properties . Publishing the Podspecs \u00b6 After setting the version as described above, you can publish the two Podspecs by doing: # Tests are currently failing, thus --skip-tests is required pod trunk push Wire.podspec --skip-tests and pod trunk push WireCompiler.podspec","title":"Releasing"},{"location":"releasing/#releasing","text":"","title":"Releasing"},{"location":"releasing/#prerequisite-sonatype-maven-central-account","text":"Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for com.squareup projects.","title":"Prerequisite: Sonatype (Maven Central) Account"},{"location":"releasing/#cutting-a-jvm-release","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update versions: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ `find . -name \"gradle.properties\"` sed -i \"\" \\ \"s/\\\"com.squareup.wire:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"com.squareup.wire:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` sed -i \"\" \\ \"s/\\<version\\>\\([^<]*\\)\\<\\/version\\>/\\<version\\>$RELEASE_VERSION\\<\\/version\\>/g\" \\ `find . -name \"README.md\"` Tag the release and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a $RELEASE_VERSION -m \"Version $RELEASE_VERSION\" git push && git push --tags Wait for GitHub Actions to start building the release. Prepare for ongoing development and push to GitHub. sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ `find . -name \"gradle.properties\"` git commit -am \"Prepare next development version.\" git push Wait for GitHub Actions to build and publish releases for both Windows and Non-Windows. Visit Sonatype Nexus to promote (close then release) the releases. Or drop it if there is a problem! Deploy the documentation website. ./deploy_website.sh","title":"Cutting a JVM Release"},{"location":"releasing/#publishing-the-swift-cocoapods","text":"There are two Podspecs to publish to CocoaPods: the Swift Wire runtime and the Swift Wire compiler. The same version number should be used for both. CocoaPods are published to the trunk repo, which is the main public repo for all CocoaPods. If you have not published Wire before then you\u2019ll need to get set up to publish to trunk , and be added as a publisher for the Wire Podspecs.","title":"Publishing the Swift CocoaPods"},{"location":"releasing/#setting-the-version","text":"When publishing a new version, two things must be done: 1. The version must be tagged in Git. So if you\u2019re publishing version 4.0.0-alpha1 , then you\u2019d check out the SHA you want to publish and run: git tag 4.0.0-alpha1 git push origin refs/tags/4.0.0-alpha1 The version being published needs to be passed into the Podspecs. This is done by setting the POD_VERSION environment variable: export POD_VERSION=4.0.0-alpha1 If publishing a release version (like 4.0.0 rather than 4.0.0-alpha1 ) then setting the POD_VERSION is optional and it will be pulled automatically from wire-library/gradle.properties .","title":"Setting the Version"},{"location":"releasing/#publishing-the-podspecs","text":"After setting the version as described above, you can publish the two Podspecs by doing: # Tests are currently failing, thus --skip-tests is required pod trunk push Wire.podspec --skip-tests and pod trunk push WireCompiler.podspec","title":"Publishing the Podspecs"},{"location":"security/","text":"Security Policy \u00b6 Supported Versions \u00b6 Version Supported 3.x \u2705 2.x 1.x Reporting a Vulnerability \u00b6 Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource","title":"Security"},{"location":"security/#security-policy","text":"","title":"Security Policy"},{"location":"security/#supported-versions","text":"Version Supported 3.x \u2705 2.x 1.x","title":"Supported Versions"},{"location":"security/#reporting-a-vulnerability","text":"Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource","title":"Reporting a Vulnerability"},{"location":"wire_compiler/","text":"Wire Compiler & Gradle Plugin \u00b6 Wire has two key components: a compiler that generates Kotlin and Java code at build time, and a runtime library that supports the generated code when your program executes. The compiler is very configurable; this guide explains its features and their use. Getting Started \u00b6 The best way to configure and execute the Wire compiler is via our Gradle plugin. It requires Gradle 5.5 or newer. A typical project has .proto files in the standard src/main/proto directory. src/ main/ proto/ com/ example/ pizza/ pizza_delivery.proto pizza.proto sales/ price.proto store.proto geo/ address.proto country.proto kotlin/ com/ example/ pizza/ PizzaApp.kt test/ kotlin/ com/ example/ pizza/ PizzaAppTest.kt build.gradle Because this project uses the default configuration, plugin setup is easy. Just a simple block in build.gradle , Using plugin application: buildscript { repositories { mavenCentral () } dependencies { classpath 'com.squareup.wire:wire-gradle-plugin:<version>' } } apply plugin: 'com.squareup.wire' wire { kotlin {} } Using the plugins DSL: plugins { id 'application' id 'org.jetbrains.kotlin.jvm' id 'com.squareup.wire' } wire { kotlin {} } The plugin will read the .proto schema definitions, validate them, link them, and generate Kotlin code. It uses KotlinPoet internally to generate compact and legible source files. Wire will generate files in build/generated/source/wire . It\u2019ll also register this directory as a source directory for the project so the generated sources are compiled by the Kotlin compiler. Replace kotlin with java to generate Java sources instead. Inputs and Outputs \u00b6 Wire can pull source .proto schema definitions from a local directory, a local .jar file, or an external artifact specified with Maven coordinates . wire { sourcePath { srcDir 'src/main/protos' } sourcePath { srcJar 'lib/pizza-protos.jar' } sourcePath { srcJar 'com.example.pizza:pizza-protos:1.0.0' } ... } If your resource or directory contains more .proto files than you need to compile you can constrain the inputs to specific files: wire { sourcePath { srcDir 'src/main/protos' include 'com/example/pizza/pizza_delivery.proto' include 'com/example/pizza/pizza.proto' } } Wildcards (with two stars) are also accepted: wire { sourcePath { srcDir 'src/main/protos' include 'com/example/pizza/**' } } You can also do the opposite and exclude some files: wire { sourcePath { srcDir 'src/main/protos' exclude 'com/example/juice/**' exclude 'com/example/pizza/toppings.proto' } } Wire can emit both Java and Kotlin in the same build. Use includes to specify which types are emitted for a target language; subsequent languages will emit what\u2019s left over. wire { ... kotlin { // Kotlin emits the matched types only. includes = [ 'com.example.pizza.*' ] } java { // Java gets everything else! } } Note that sources are specified as file system paths (slash delimiter) and targets are specified as Proto type names (dot delimiter). You may also specify targets with excludes. If you have both includes and excludes, excludes take precedence. wire { ... kotlin { // Kotlin emits everything but sales and geo packages. excludes = [ 'com.example.sales.*' , 'com.example.geo.*' ] } java { // Java gets those because they're left over. } } Wire will print a warning if any name in includes or excludes is unused. When configuring Wire you must use the package name from the .proto file\u2019s package declaration. The option java_package name is not used for Wire configuration. Proto Path for Libraries \u00b6 Large projects may span multiple modules. To support this Wire has a \u2018proto path\u2019. The .proto schema files on this path are used for linking and validation, but they do not yield files in the generated output. The proto path supports the same inputs as the source path: directories, .jar files, and Maven coordinates. Similarly, the proto path may be filtered with include . wire { protoPath { srcDir 'src/main/address-protos' } protoPath { srcJar 'lib/price.jar' } protoPath { srcJar 'com.example:countries:1.0.0' include 'com/example/geo/country.proto' } protoPath { srcDir 'src/main/extra-protos' exclude 'com/example/**' } ... } The source path and proto path are linked together but only types on the source path are generated. Dependencies between Gradle Modules \u00b6 Wire provides support to define dependencies between modules within the same project. A module can include its .proto files into the output resources. Use this when your .jar file can be used as a library for other proto or Wire projects. Note that only the .proto files used in the library will be included. wire { protoLibrary = true } Wire also creates two configurations, protoPath and protoSource you can use to define a dependency on another proto or Wire project. dependencies { // The task `:common-protos:jar` will be added into the dependency // graph of this module for the Wire generating tasks. protoPath ( project ( ':common-protos' )) implementation ( project ( ':common-protos' )) } wire { kotlin { } } Note that protoPath and protoSource dependencies are not transitive by default. If needed, you can change it manually. configurations . protoPath { transitive = true } Pruning \u00b6 For mobile projects it\u2019s easy to generate a lot of unnecessary code. For example, a .proto schema might support types for obsolete features. General-purpose code-shrinking tools like R8 and ProGuard have difficulty shrinking Wire-generated sources because the encode() and decode() functions still use them. Instead, Wire offers its own code shrinker to eliminate unwanted declarations early. Use prune to precisely eliminate an unwanted type or member. These will be eliminated along with all references to them. wire { ... prune 'com.example.store.Store' prune 'com.example.geo.Country' ... } Alternately you may prefer to specify what to keep, pruning everything not reachable from that set. wire { ... root 'com.example.pizza.PizzaDelivery' ... } Version Matching \u00b6 Another way to prune obsolete fields is to assign them a version, then to generate your code against a version range or a unique version. The fields out of the version range will get pruned. Members may be declared with wire.since and wire.until options; enum constant can use wire.constant_since and wire.constant_until . For example, these options declare a field age that was replaced with birth_date in version \u201c5.0\u201d: import \"wire/extensions.proto\" ; message Singer { optional string name = 1 ; optional int32 age = 2 [( wire.until ) = \"5.0\" ]; optional Date birth_date = 3 [( wire.since ) = \"5.0\" ]; } Client code should typically target a single version. In this example, clients will have the name and birth_date fields only. wire { onlyVersion \"5.0\" } Service code that supports many clients should support the union of versions of all supported clients. Such code will have name , as well as both the age and birth_date fields. wire { sinceVersion \"3.0\" untilVersion \"6.0\" } Proto Libraries \u00b6 By default, .proto input files are not included in the generated .jar artifact. Use the protoLibrary option to include them: wire { protoLibrary = true } This is most useful when building .jar files for other wire tasks to use as dependencies. Note that only the true sources are included \u2013 proto messages that are pruned or not used are not included in the output artifact. Customizing Output \u00b6 Java \u00b6 Here\u2019s an exhaustive Java configuration. Booleans are shown with their default behavior. wire { java { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ 'com.example.pizza.*' ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ 'com.example.sales.*' ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = true // Directory to emit to. out \"${buildDir}/custom\" // True for emitted types to implement android.os.Parcelable. android = false // True to enable the androidx.annotation.Nullable annotation where applicable. androidAnnotations = false // True to emit code that uses reflection for reading, writing, and toString // methods which are normally implemented with generated code. compact = false // True to turn visibility of all generated types' constructors to non-public. buildersOnly = false // True to emit types for options declared on messages, fields, etc. emitDeclaredOptions = true // True to emit annotations for options applied on messages, fields, etc. emitAppliedOptions = true } } Kotlin \u00b6 Here\u2019s an exhaustive Kotlin configuration. Booleans and enums are shown with their default behavior. wire { kotlin { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ 'com.example.pizza.*' ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ 'com.example.sales.*' ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = true // Directory to emit to. out \"${buildDir}/custom\" // True for emitted types to implement android.os.Parcelable. android = false // True for emitted types to implement APIs for easier migration from the Java // target. javaInterop = false // True to turn visibility of all generated types' constructors to non-public. buildersOnly = false // True to emit types for options declared on messages, fields, etc. emitDeclaredOptions = true // True to emit annotations for options applied on messages, fields, etc. emitAppliedOptions = true // `suspending` to generate coroutines APIs that require a Kotlin coroutines context. // `blocking` to generate blocking APIs callable by Java and Kotlin. rpcCallStyle = 'blocking' // `client` to generate interfaces best suited to sending outbound calls. // `server` to generate interfaces best suited to receiving inbound calls. // `none` to not generate services. rpcRole = 'server' // If set, the value will be appended to generated service type names. If null, their rpcRole // will be used as a suffix instead. nameSuffix = \"Suffix\" // True for emitted services to implement one interface per RPC. singleMethodServices = false } } Proto \u00b6 Here\u2019s an exhaustive Proto configuration. You can use this target to generate a pruned proto schema, or to pretty-print one. Note that even with multiple outputs set, the proto target will always emit all types, all services, and all extensions of the schema. wire { proto { // Directory to emit to. out \"${buildDir}/custom\" } } Custom Handlers \u00b6 With a custom schema handler, you can handle a proto schema in any way you want, including code generation or other side effects such as validation, logging, etc. You\u2019ll need to first extend the SchemaHandler class, and then the SchemaHandler.Factory interface which is to return an instance of the former. See our recipes for different use cases\u2019 implementations. Build that into an jar artifact and add that as a buildscript dependency to your Gradle project. buildscript { dependencies { classpath \"com.example.my-custom-handler:my-custom-handler:1.0.0\" } } Next configure the Wire plugin to call your custom handler. Here\u2019s an exhaustive custom configuration. Booleans and enums are shown with their default behavior. wire { custom { // The name of a Java class to generate code with. This class must: // * be in the buildscript dependencies for this Gradle project // * be a public class // * have a public no-arguments constructor // * implement the com.squareup.wire.schema.SchemaHandler.Factory interface schemaHandlerFactoryClass = \"com.example.MyCustomHandlerFactory\" // These options work the same as the java and kotlin targets above. includes = [ 'com.example.pizza.*' ] excludes = [ 'com.example.sales.*' ] exclusive = true out \"${buildDir}/custom\" } }","title":"Gradle Plugin"},{"location":"wire_compiler/#wire-compiler-gradle-plugin","text":"Wire has two key components: a compiler that generates Kotlin and Java code at build time, and a runtime library that supports the generated code when your program executes. The compiler is very configurable; this guide explains its features and their use.","title":"Wire Compiler &amp; Gradle Plugin"},{"location":"wire_compiler/#getting-started","text":"The best way to configure and execute the Wire compiler is via our Gradle plugin. It requires Gradle 5.5 or newer. A typical project has .proto files in the standard src/main/proto directory. src/ main/ proto/ com/ example/ pizza/ pizza_delivery.proto pizza.proto sales/ price.proto store.proto geo/ address.proto country.proto kotlin/ com/ example/ pizza/ PizzaApp.kt test/ kotlin/ com/ example/ pizza/ PizzaAppTest.kt build.gradle Because this project uses the default configuration, plugin setup is easy. Just a simple block in build.gradle , Using plugin application: buildscript { repositories { mavenCentral () } dependencies { classpath 'com.squareup.wire:wire-gradle-plugin:<version>' } } apply plugin: 'com.squareup.wire' wire { kotlin {} } Using the plugins DSL: plugins { id 'application' id 'org.jetbrains.kotlin.jvm' id 'com.squareup.wire' } wire { kotlin {} } The plugin will read the .proto schema definitions, validate them, link them, and generate Kotlin code. It uses KotlinPoet internally to generate compact and legible source files. Wire will generate files in build/generated/source/wire . It\u2019ll also register this directory as a source directory for the project so the generated sources are compiled by the Kotlin compiler. Replace kotlin with java to generate Java sources instead.","title":"Getting Started"},{"location":"wire_compiler/#inputs-and-outputs","text":"Wire can pull source .proto schema definitions from a local directory, a local .jar file, or an external artifact specified with Maven coordinates . wire { sourcePath { srcDir 'src/main/protos' } sourcePath { srcJar 'lib/pizza-protos.jar' } sourcePath { srcJar 'com.example.pizza:pizza-protos:1.0.0' } ... } If your resource or directory contains more .proto files than you need to compile you can constrain the inputs to specific files: wire { sourcePath { srcDir 'src/main/protos' include 'com/example/pizza/pizza_delivery.proto' include 'com/example/pizza/pizza.proto' } } Wildcards (with two stars) are also accepted: wire { sourcePath { srcDir 'src/main/protos' include 'com/example/pizza/**' } } You can also do the opposite and exclude some files: wire { sourcePath { srcDir 'src/main/protos' exclude 'com/example/juice/**' exclude 'com/example/pizza/toppings.proto' } } Wire can emit both Java and Kotlin in the same build. Use includes to specify which types are emitted for a target language; subsequent languages will emit what\u2019s left over. wire { ... kotlin { // Kotlin emits the matched types only. includes = [ 'com.example.pizza.*' ] } java { // Java gets everything else! } } Note that sources are specified as file system paths (slash delimiter) and targets are specified as Proto type names (dot delimiter). You may also specify targets with excludes. If you have both includes and excludes, excludes take precedence. wire { ... kotlin { // Kotlin emits everything but sales and geo packages. excludes = [ 'com.example.sales.*' , 'com.example.geo.*' ] } java { // Java gets those because they're left over. } } Wire will print a warning if any name in includes or excludes is unused. When configuring Wire you must use the package name from the .proto file\u2019s package declaration. The option java_package name is not used for Wire configuration.","title":"Inputs and Outputs"},{"location":"wire_compiler/#proto-path-for-libraries","text":"Large projects may span multiple modules. To support this Wire has a \u2018proto path\u2019. The .proto schema files on this path are used for linking and validation, but they do not yield files in the generated output. The proto path supports the same inputs as the source path: directories, .jar files, and Maven coordinates. Similarly, the proto path may be filtered with include . wire { protoPath { srcDir 'src/main/address-protos' } protoPath { srcJar 'lib/price.jar' } protoPath { srcJar 'com.example:countries:1.0.0' include 'com/example/geo/country.proto' } protoPath { srcDir 'src/main/extra-protos' exclude 'com/example/**' } ... } The source path and proto path are linked together but only types on the source path are generated.","title":"Proto Path for Libraries"},{"location":"wire_compiler/#dependencies-between-gradle-modules","text":"Wire provides support to define dependencies between modules within the same project. A module can include its .proto files into the output resources. Use this when your .jar file can be used as a library for other proto or Wire projects. Note that only the .proto files used in the library will be included. wire { protoLibrary = true } Wire also creates two configurations, protoPath and protoSource you can use to define a dependency on another proto or Wire project. dependencies { // The task `:common-protos:jar` will be added into the dependency // graph of this module for the Wire generating tasks. protoPath ( project ( ':common-protos' )) implementation ( project ( ':common-protos' )) } wire { kotlin { } } Note that protoPath and protoSource dependencies are not transitive by default. If needed, you can change it manually. configurations . protoPath { transitive = true }","title":"Dependencies between Gradle Modules"},{"location":"wire_compiler/#pruning","text":"For mobile projects it\u2019s easy to generate a lot of unnecessary code. For example, a .proto schema might support types for obsolete features. General-purpose code-shrinking tools like R8 and ProGuard have difficulty shrinking Wire-generated sources because the encode() and decode() functions still use them. Instead, Wire offers its own code shrinker to eliminate unwanted declarations early. Use prune to precisely eliminate an unwanted type or member. These will be eliminated along with all references to them. wire { ... prune 'com.example.store.Store' prune 'com.example.geo.Country' ... } Alternately you may prefer to specify what to keep, pruning everything not reachable from that set. wire { ... root 'com.example.pizza.PizzaDelivery' ... }","title":"Pruning"},{"location":"wire_compiler/#version-matching","text":"Another way to prune obsolete fields is to assign them a version, then to generate your code against a version range or a unique version. The fields out of the version range will get pruned. Members may be declared with wire.since and wire.until options; enum constant can use wire.constant_since and wire.constant_until . For example, these options declare a field age that was replaced with birth_date in version \u201c5.0\u201d: import \"wire/extensions.proto\" ; message Singer { optional string name = 1 ; optional int32 age = 2 [( wire.until ) = \"5.0\" ]; optional Date birth_date = 3 [( wire.since ) = \"5.0\" ]; } Client code should typically target a single version. In this example, clients will have the name and birth_date fields only. wire { onlyVersion \"5.0\" } Service code that supports many clients should support the union of versions of all supported clients. Such code will have name , as well as both the age and birth_date fields. wire { sinceVersion \"3.0\" untilVersion \"6.0\" }","title":"Version Matching"},{"location":"wire_compiler/#proto-libraries","text":"By default, .proto input files are not included in the generated .jar artifact. Use the protoLibrary option to include them: wire { protoLibrary = true } This is most useful when building .jar files for other wire tasks to use as dependencies. Note that only the true sources are included \u2013 proto messages that are pruned or not used are not included in the output artifact.","title":"Proto Libraries"},{"location":"wire_compiler/#customizing-output","text":"","title":"Customizing Output"},{"location":"wire_compiler/#java","text":"Here\u2019s an exhaustive Java configuration. Booleans are shown with their default behavior. wire { java { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ 'com.example.pizza.*' ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ 'com.example.sales.*' ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = true // Directory to emit to. out \"${buildDir}/custom\" // True for emitted types to implement android.os.Parcelable. android = false // True to enable the androidx.annotation.Nullable annotation where applicable. androidAnnotations = false // True to emit code that uses reflection for reading, writing, and toString // methods which are normally implemented with generated code. compact = false // True to turn visibility of all generated types' constructors to non-public. buildersOnly = false // True to emit types for options declared on messages, fields, etc. emitDeclaredOptions = true // True to emit annotations for options applied on messages, fields, etc. emitAppliedOptions = true } }","title":"Java"},{"location":"wire_compiler/#kotlin","text":"Here\u2019s an exhaustive Kotlin configuration. Booleans and enums are shown with their default behavior. wire { kotlin { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ 'com.example.pizza.*' ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ 'com.example.sales.*' ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = true // Directory to emit to. out \"${buildDir}/custom\" // True for emitted types to implement android.os.Parcelable. android = false // True for emitted types to implement APIs for easier migration from the Java // target. javaInterop = false // True to turn visibility of all generated types' constructors to non-public. buildersOnly = false // True to emit types for options declared on messages, fields, etc. emitDeclaredOptions = true // True to emit annotations for options applied on messages, fields, etc. emitAppliedOptions = true // `suspending` to generate coroutines APIs that require a Kotlin coroutines context. // `blocking` to generate blocking APIs callable by Java and Kotlin. rpcCallStyle = 'blocking' // `client` to generate interfaces best suited to sending outbound calls. // `server` to generate interfaces best suited to receiving inbound calls. // `none` to not generate services. rpcRole = 'server' // If set, the value will be appended to generated service type names. If null, their rpcRole // will be used as a suffix instead. nameSuffix = \"Suffix\" // True for emitted services to implement one interface per RPC. singleMethodServices = false } }","title":"Kotlin"},{"location":"wire_compiler/#proto","text":"Here\u2019s an exhaustive Proto configuration. You can use this target to generate a pruned proto schema, or to pretty-print one. Note that even with multiple outputs set, the proto target will always emit all types, all services, and all extensions of the schema. wire { proto { // Directory to emit to. out \"${buildDir}/custom\" } }","title":"Proto"},{"location":"wire_compiler/#custom-handlers","text":"With a custom schema handler, you can handle a proto schema in any way you want, including code generation or other side effects such as validation, logging, etc. You\u2019ll need to first extend the SchemaHandler class, and then the SchemaHandler.Factory interface which is to return an instance of the former. See our recipes for different use cases\u2019 implementations. Build that into an jar artifact and add that as a buildscript dependency to your Gradle project. buildscript { dependencies { classpath \"com.example.my-custom-handler:my-custom-handler:1.0.0\" } } Next configure the Wire plugin to call your custom handler. Here\u2019s an exhaustive custom configuration. Booleans and enums are shown with their default behavior. wire { custom { // The name of a Java class to generate code with. This class must: // * be in the buildscript dependencies for this Gradle project // * be a public class // * have a public no-arguments constructor // * implement the com.squareup.wire.schema.SchemaHandler.Factory interface schemaHandlerFactoryClass = \"com.example.MyCustomHandlerFactory\" // These options work the same as the java and kotlin targets above. includes = [ 'com.example.pizza.*' ] excludes = [ 'com.example.sales.*' ] exclusive = true out \"${buildDir}/custom\" } }","title":"Custom Handlers"},{"location":"wire_grpc/","text":"Wire gRPC \u00b6 The Wire compiler will generate interfaces for your service RPCs defined in your protobuf schema; under the condition that the target is set to Kotlin. Getting Started \u00b6 You can configure how your services are generated via the Gradle plugin : wire { // Kotlin target will generate code for services. kotlin { // `client` to generate interfaces best suited to sending outbound calls. // `server` to generate interfaces best suited to receiving inbound calls. rpcRole = 'server' // Server only // `suspending` to generate coroutines APIs that require a Kotlin coroutines context. // `blocking` to generate blocking APIs callable by Java and Kotlin. rpcCallStyle = 'suspending' // Server only // True for emitted services to generate one interface per RPC. singleMethodServices = false } } The generated code varies depending on your RPC role, namely client or server. We\u2019ll use the following schema to demonstrate how they differ: syntax = \"proto2\" ; package routeguide ; service RouteGuide { // A simple RPC. rpc GetFeature ( Point ) returns ( Feature ) {} // A server-to-client streaming RPC. rpc ListFeatures ( Rectangle ) returns ( stream Feature ) {} // A client-to-server streaming RPC. rpc RecordRoute ( stream Point ) returns ( RouteSummary ) {} // A Bidirectional streaming RPC. rpc RouteChat ( stream RouteNote ) returns ( stream RouteNote ) {} } gRPC for Clients \u00b6 For the schema RouteGuide , when rpcRole is client , the Wire compiler will generate the following interface: interface RouteGuideClient : Service { fun GetFeature (): GrpcCall < Point , Feature > fun ListFeatures (): GrpcStreamingCall < Rectangle , Feature > fun RecordRoute (): GrpcStreamingCall < Point , RouteSummary > fun RouteChat (): GrpcStreamingCall < RouteNote , RouteNote > } For streaming APIs, we return a GrpcStreamingCall , and a GrpcCall otherwise. With these objects, the caller can communicate with the server. Both blocking and suspending APIs are provided. Wire runtime \u00b6 To help you instantiate your service, we provide a small runtime, namely GrpcClient : val grpcClient = GrpcClient . Builder () . client ( OkHttpClient . Builder (). protocols ( listOf ( Protocol . H2_PRIOR_KNOWLEDGE )). build ()) . baseUrl ( serverUrl ) . build () val routeGuideClient = grpcClient . create ( RouteGuideClient :: class ) gRPC for Servers \u00b6 Blocking APIs \u00b6 Following this configuration: wire { kotlin { rpcRole = 'server' rpcCallStyle = 'blocking' } } the Wire compiler will generate the following interface for the server to implement: interface RouteGuideBlockingServer : Service { fun GetFeature ( request : Point ): Feature fun ListFeatures ( request : Rectangle , response : MessageSink < Feature > ) fun RecordRoute ( request : MessageSource < Point > ): RouteSummary fun RouteChat ( request : MessageSource < RouteNote > , response : MessageSink < RouteNote > ) } For streaming connections, the server can use Wire\u2019s blocking APIs: MessageSource and MessageSink . Suspending APIs \u00b6 Following this configuration: wire { kotlin { rpcRole = 'server' rpcCallStyle = 'suspending' } } the Wire compiler will generate the following interface for the server to implement: interface RouteGuideServer : Service { suspend fun GetFeature ( request : Point ): Feature fun ListFeatures ( request : Rectangle , response : SendChannel < Feature > ) fun RecordRoute ( request : ReceiveChannel < Point > ): RouteSummary fun RouteChat ( request : ReceiveChannel < RouteNote > , response : SendChannel < RouteNote > ) } The server can use Kotlin coroutines\u2019 suspend and Channels mechanisms to execute suspending network calls. Implementing Client Interfaces \u00b6 Wire has helper functions to make it easier to implement its client interfaces. This can be particularly useful for testing. It supports both streaming and non-streaming APIs in Kotlin: class FakeRouteGuideClient : RouteGuideClient { override fun GetFeature (): GrpcCall < Point , Feature > { return GrpcCall { request : Point -> return @GrpcCall Feature ( name = \"test\" , location = request ) } } override fun RouteChat (): GrpcStreamingCall < RouteNote , RouteNote > { return GrpcStreamingCall { requests : ReceiveChannel < RouteNote > , responses : SendChannel < RouteNote > -> try { requests . consumeEach { routeNote : RouteNote -> responses . send ( RouteNote ( message = \"ACK: ${ routeNote . message } \" )) } } finally { responses . close () } } } ... } The GrpcCall and GrpcStreamingCall functions are well suited to expression functions: class FakeRouteGuideClient : RouteGuideClient { override fun GetFeature () = GrpcCall < Point , Feature > { request -> return @GrpcCall Feature ( name = \"test\" , location = request ) } override fun RouteChat () = GrpcStreamingCall < RouteNote , RouteNote > { requests , responses -> try { requests . consumeEach { routeNote -> responses . send ( RouteNote ( message = \"ACK: ${ routeNote . message } \" )) } } finally { responses . close () } } ... } The client interface may also be implemented in Java. Wire only offers a non-streaming helper function. The GrpcStreamingCall above uses coroutines which is Kotlin-only. public class FakeRouteGuideClient implements RouteGuideClient { @Override public GrpcCall < Point , Feature > GetFeature () { return GrpcCalls . grpcCall ( new Function1 < Point , Feature > () { @Override public Feature invoke ( Point request ) { return new Feature . Builder () . name ( \"test\" ) . location ( request ) . build (); } }); } ... } These similarly interact nicely with Java lambdas. Sample \u00b6 Check out our sample project demonstrating bidirectional communication between an Android application and a server. Get it \u00b6 Use Wire runtime Gradle coordinates: implementation ( \"com.squareup.wire:wire-runtime:LATEST_VERSION\" ) In addition, to use Wire gRPC for clients, use these new Gradle coordinates: implementation ( \"com.squareup.wire:wire-grpc-client:LATEST_VERSION\" )","title":"gRPC"},{"location":"wire_grpc/#wire-grpc","text":"The Wire compiler will generate interfaces for your service RPCs defined in your protobuf schema; under the condition that the target is set to Kotlin.","title":"Wire gRPC"},{"location":"wire_grpc/#getting-started","text":"You can configure how your services are generated via the Gradle plugin : wire { // Kotlin target will generate code for services. kotlin { // `client` to generate interfaces best suited to sending outbound calls. // `server` to generate interfaces best suited to receiving inbound calls. rpcRole = 'server' // Server only // `suspending` to generate coroutines APIs that require a Kotlin coroutines context. // `blocking` to generate blocking APIs callable by Java and Kotlin. rpcCallStyle = 'suspending' // Server only // True for emitted services to generate one interface per RPC. singleMethodServices = false } } The generated code varies depending on your RPC role, namely client or server. We\u2019ll use the following schema to demonstrate how they differ: syntax = \"proto2\" ; package routeguide ; service RouteGuide { // A simple RPC. rpc GetFeature ( Point ) returns ( Feature ) {} // A server-to-client streaming RPC. rpc ListFeatures ( Rectangle ) returns ( stream Feature ) {} // A client-to-server streaming RPC. rpc RecordRoute ( stream Point ) returns ( RouteSummary ) {} // A Bidirectional streaming RPC. rpc RouteChat ( stream RouteNote ) returns ( stream RouteNote ) {} }","title":"Getting Started"},{"location":"wire_grpc/#grpc-for-clients","text":"For the schema RouteGuide , when rpcRole is client , the Wire compiler will generate the following interface: interface RouteGuideClient : Service { fun GetFeature (): GrpcCall < Point , Feature > fun ListFeatures (): GrpcStreamingCall < Rectangle , Feature > fun RecordRoute (): GrpcStreamingCall < Point , RouteSummary > fun RouteChat (): GrpcStreamingCall < RouteNote , RouteNote > } For streaming APIs, we return a GrpcStreamingCall , and a GrpcCall otherwise. With these objects, the caller can communicate with the server. Both blocking and suspending APIs are provided.","title":"gRPC for Clients"},{"location":"wire_grpc/#wire-runtime","text":"To help you instantiate your service, we provide a small runtime, namely GrpcClient : val grpcClient = GrpcClient . Builder () . client ( OkHttpClient . Builder (). protocols ( listOf ( Protocol . H2_PRIOR_KNOWLEDGE )). build ()) . baseUrl ( serverUrl ) . build () val routeGuideClient = grpcClient . create ( RouteGuideClient :: class )","title":"Wire runtime"},{"location":"wire_grpc/#grpc-for-servers","text":"","title":"gRPC for Servers"},{"location":"wire_grpc/#blocking-apis","text":"Following this configuration: wire { kotlin { rpcRole = 'server' rpcCallStyle = 'blocking' } } the Wire compiler will generate the following interface for the server to implement: interface RouteGuideBlockingServer : Service { fun GetFeature ( request : Point ): Feature fun ListFeatures ( request : Rectangle , response : MessageSink < Feature > ) fun RecordRoute ( request : MessageSource < Point > ): RouteSummary fun RouteChat ( request : MessageSource < RouteNote > , response : MessageSink < RouteNote > ) } For streaming connections, the server can use Wire\u2019s blocking APIs: MessageSource and MessageSink .","title":"Blocking APIs"},{"location":"wire_grpc/#suspending-apis","text":"Following this configuration: wire { kotlin { rpcRole = 'server' rpcCallStyle = 'suspending' } } the Wire compiler will generate the following interface for the server to implement: interface RouteGuideServer : Service { suspend fun GetFeature ( request : Point ): Feature fun ListFeatures ( request : Rectangle , response : SendChannel < Feature > ) fun RecordRoute ( request : ReceiveChannel < Point > ): RouteSummary fun RouteChat ( request : ReceiveChannel < RouteNote > , response : SendChannel < RouteNote > ) } The server can use Kotlin coroutines\u2019 suspend and Channels mechanisms to execute suspending network calls.","title":"Suspending APIs"},{"location":"wire_grpc/#implementing-client-interfaces","text":"Wire has helper functions to make it easier to implement its client interfaces. This can be particularly useful for testing. It supports both streaming and non-streaming APIs in Kotlin: class FakeRouteGuideClient : RouteGuideClient { override fun GetFeature (): GrpcCall < Point , Feature > { return GrpcCall { request : Point -> return @GrpcCall Feature ( name = \"test\" , location = request ) } } override fun RouteChat (): GrpcStreamingCall < RouteNote , RouteNote > { return GrpcStreamingCall { requests : ReceiveChannel < RouteNote > , responses : SendChannel < RouteNote > -> try { requests . consumeEach { routeNote : RouteNote -> responses . send ( RouteNote ( message = \"ACK: ${ routeNote . message } \" )) } } finally { responses . close () } } } ... } The GrpcCall and GrpcStreamingCall functions are well suited to expression functions: class FakeRouteGuideClient : RouteGuideClient { override fun GetFeature () = GrpcCall < Point , Feature > { request -> return @GrpcCall Feature ( name = \"test\" , location = request ) } override fun RouteChat () = GrpcStreamingCall < RouteNote , RouteNote > { requests , responses -> try { requests . consumeEach { routeNote -> responses . send ( RouteNote ( message = \"ACK: ${ routeNote . message } \" )) } } finally { responses . close () } } ... } The client interface may also be implemented in Java. Wire only offers a non-streaming helper function. The GrpcStreamingCall above uses coroutines which is Kotlin-only. public class FakeRouteGuideClient implements RouteGuideClient { @Override public GrpcCall < Point , Feature > GetFeature () { return GrpcCalls . grpcCall ( new Function1 < Point , Feature > () { @Override public Feature invoke ( Point request ) { return new Feature . Builder () . name ( \"test\" ) . location ( request ) . build (); } }); } ... } These similarly interact nicely with Java lambdas.","title":"Implementing Client Interfaces"},{"location":"wire_grpc/#sample","text":"Check out our sample project demonstrating bidirectional communication between an Android application and a server.","title":"Sample"},{"location":"wire_grpc/#get-it","text":"Use Wire runtime Gradle coordinates: implementation ( \"com.squareup.wire:wire-runtime:LATEST_VERSION\" ) In addition, to use Wire gRPC for clients, use these new Gradle coordinates: implementation ( \"com.squareup.wire:wire-grpc-client:LATEST_VERSION\" )","title":"Get it"},{"location":"wire_json/","text":"Wire JSON \u00b6 Wire offers JSON serialization over Moshi or Gson . We provide an adapter factory for both to configure them to deal with protobuf specifics. Moshi \u00b6 Moshi support is part of the wire-moshi-adapter module. It has to be added to the project dependencies in order to plug the WireJsonAdapterFactory into Moshi. The Maven coordinates are: com.squareup.wire:wire-moshi-adapter:<version> val moshi = Moshi . Builder () . add ( WireJsonAdapterFactory ()) . build () val adapter = moshi . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json ) Gson \u00b6 Moshi support is part of the wire-gson-support module. It has to be added to the project dependencies in order to plug the WireTypeAdapterFactory into Gson. The Maven coordinates are: com.squareup.wire:wire-gson-support:<version> val gson = GsonBuilder () . registerTypeAdapterFactory ( WireTypeAdapterFactory ()) . create () val adapter = gson . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json ) Protoc \u00b6 Wire is interoperable with protoc for all proto3 messages. The JSON representation of proto2 is unspecified. JSON representations of proto2 messages from Wire and protoc are not interoperable. Note that by default Protoc throws an error for unknown fields. Wire will ignore them.","title":"JSON"},{"location":"wire_json/#wire-json","text":"Wire offers JSON serialization over Moshi or Gson . We provide an adapter factory for both to configure them to deal with protobuf specifics.","title":"Wire JSON"},{"location":"wire_json/#moshi","text":"Moshi support is part of the wire-moshi-adapter module. It has to be added to the project dependencies in order to plug the WireJsonAdapterFactory into Moshi. The Maven coordinates are: com.squareup.wire:wire-moshi-adapter:<version> val moshi = Moshi . Builder () . add ( WireJsonAdapterFactory ()) . build () val adapter = moshi . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json )","title":"Moshi"},{"location":"wire_json/#gson","text":"Moshi support is part of the wire-gson-support module. It has to be added to the project dependencies in order to plug the WireTypeAdapterFactory into Gson. The Maven coordinates are: com.squareup.wire:wire-gson-support:<version> val gson = GsonBuilder () . registerTypeAdapterFactory ( WireTypeAdapterFactory ()) . create () val adapter = gson . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json )","title":"Gson"},{"location":"wire_json/#protoc","text":"Wire is interoperable with protoc for all proto3 messages. The JSON representation of proto2 is unspecified. JSON representations of proto2 messages from Wire and protoc are not interoperable. Note that by default Protoc throws an error for unknown fields. Wire will ignore them.","title":"Protoc"},{"location":"wire_vs_protoc/","text":"Wire versus Protoc \u00b6 Non-Primitive Types \u00b6 Protoc generates literal equivalents for all the Proto3 new types like empty , struct , etc. Wire tries to reuse existing types in the corresponding language when possible. The only new type Wire brings is AnyMessage for the google.protobuf.Any proto type. Any \u00b6 The Any type wraps an arbitrary protobuf message by holding a field to identify its type and another field for storing the serialized representation of the wrapped message. Wire comes with its own AnyMessage type to represent google.protobuf.Any . class AnyMessage ( val typeUrl : String , val value : okio . ByteString ) It comes with a few methods to wrap or unwrap the embedded message. // Wire val anyMessage : AnyMessage = AnyMessage . pack ( person ) val person : Person = anyMessage . unpack ( Person . ADAPTER ) // Protoc val any : Any = Any . pack ( foo ) val person : Person = any . unpack ( Person . class ) Duration & Timestamp \u00b6 Both google.protobuf.Duration and google.protobuf.Timestamp types will be generated by using their JVM equivalent: java.time.Duration and java.time.Instant . For non-JVM platforms, we provide two new Wire types with the same APIs: class com . squareup . wire . Duration { fun getSeconds (): Long fun getNano (): Int } fun durationOfSeconds ( seconds : Long , nano : Long ): Duration class com . squareup . wire . Instant { fun getEpochSecond (): Long fun getNano (): Int } fun ofEpochSecond ( epochSecond : Long , nano : Long ): Instant // Wire val duration : java . time . Duration = Duration . standardMinutes ( 15 ) val instant : java . time . Instant = Instant . now () // Protoc val duration : google . protobuf . Duration = Duration . newBuilder () . setSeconds ( 60 * 15 ) . build () val instant : google . protobuf . Timestamp = Timestamps . fromMillis ( System . currentTimeMillis ()) Struct \u00b6 google.protobuf.Struct is meant mainly to represent JSON objects in code. Instead of building new types, Wire reuses Java/Kotlin native types to represent all Struct types. Google Protobuf Type Wire\u2019s Java Equivalent Wire\u2019s Kotlin Equivalent Struct Map<String, ?> Map<String, ?>? ListValue List<?> List<?>? Value Object Any? NullValue Void Nothing? One difference worth noting between Protoc and Wire is that Protoc can make the difference between an absent value, and a null value, Wire doesn\u2019t. Wire will always write null s in JSON objects except at the root of it. // Wire val struct = mapOf ( \"a\" to 1.0 ) val list = listOf ( \u201c b \u201d , 2.0 ) val boolValue = true val nullValue = null // Protoc val struct : Struct = Struct . newBuilder (). apply { putFields ( \u201c a \u201d , Value . newBuilder . setNumberValue ( 1.0 ). build ()) } . build () val list : List = ListValue . newBuilder (). apply { addValues ( Value . newBuilder . setStringValue ( \u201c a \u201d ). build ()) addValues ( Value . newBuilder . setNumberValue ( 2.0 ). build ()) } . build () val boolValue = Value . newBuilder . setBoolValue ( true ). build () val nullValue = Value . newBuilder (). setNullValue ( NullValue . NULL_VALUE ). build () Wrappers \u00b6 Wire didn\u2019t create new types for wrappers either, each wrapper will be represented by a nullable version of the primitive type it defines. For instance google.protobuf.FloatValue will be represented in Java by the float boxed type @Nullable Float , in Kotlin by Float? . // Wire val floatValue = 33.3f // Protoc val floatValue = FloatValue . newBuilder (). setValue ( 33.3f ). build () JSON \u00b6 While Proto2 didn\u2019t, Proto3 defines Protobuf serialization over JSON. Wire and Protoc are interoperable but their API are quite different. Wire offers JSON serialization over Moshi or Gson . Protoc brings its own JsonFormatter. Beware that Protoc throws an error for unknown fields, you need to configure it to opt-out of this behavior! // Wire & Moshi val moshi = Moshi . Builder () . add ( WireJsonAdapterFactory ()) . build () val adapter = moshi . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json ) // Protoc val pizza : PizzaOuterClass . Pizza = \u2026 val json = JsonFormat . printer (). print ( value ) val jsonParser = JsonFormat . parser (). ignoringUnknownFields () val parsedBuilder = PizzaOuterClass . Pizza . newBuilder () jsonParser . merge ( json , parsedBuilder ) val parsedPizza = parsedBuilder . build ()","title":"Wire vs Protoc"},{"location":"wire_vs_protoc/#wire-versus-protoc","text":"","title":"Wire versus Protoc"},{"location":"wire_vs_protoc/#non-primitive-types","text":"Protoc generates literal equivalents for all the Proto3 new types like empty , struct , etc. Wire tries to reuse existing types in the corresponding language when possible. The only new type Wire brings is AnyMessage for the google.protobuf.Any proto type.","title":"Non-Primitive Types"},{"location":"wire_vs_protoc/#any","text":"The Any type wraps an arbitrary protobuf message by holding a field to identify its type and another field for storing the serialized representation of the wrapped message. Wire comes with its own AnyMessage type to represent google.protobuf.Any . class AnyMessage ( val typeUrl : String , val value : okio . ByteString ) It comes with a few methods to wrap or unwrap the embedded message. // Wire val anyMessage : AnyMessage = AnyMessage . pack ( person ) val person : Person = anyMessage . unpack ( Person . ADAPTER ) // Protoc val any : Any = Any . pack ( foo ) val person : Person = any . unpack ( Person . class )","title":"Any"},{"location":"wire_vs_protoc/#duration-timestamp","text":"Both google.protobuf.Duration and google.protobuf.Timestamp types will be generated by using their JVM equivalent: java.time.Duration and java.time.Instant . For non-JVM platforms, we provide two new Wire types with the same APIs: class com . squareup . wire . Duration { fun getSeconds (): Long fun getNano (): Int } fun durationOfSeconds ( seconds : Long , nano : Long ): Duration class com . squareup . wire . Instant { fun getEpochSecond (): Long fun getNano (): Int } fun ofEpochSecond ( epochSecond : Long , nano : Long ): Instant // Wire val duration : java . time . Duration = Duration . standardMinutes ( 15 ) val instant : java . time . Instant = Instant . now () // Protoc val duration : google . protobuf . Duration = Duration . newBuilder () . setSeconds ( 60 * 15 ) . build () val instant : google . protobuf . Timestamp = Timestamps . fromMillis ( System . currentTimeMillis ())","title":"Duration &amp; Timestamp"},{"location":"wire_vs_protoc/#struct","text":"google.protobuf.Struct is meant mainly to represent JSON objects in code. Instead of building new types, Wire reuses Java/Kotlin native types to represent all Struct types. Google Protobuf Type Wire\u2019s Java Equivalent Wire\u2019s Kotlin Equivalent Struct Map<String, ?> Map<String, ?>? ListValue List<?> List<?>? Value Object Any? NullValue Void Nothing? One difference worth noting between Protoc and Wire is that Protoc can make the difference between an absent value, and a null value, Wire doesn\u2019t. Wire will always write null s in JSON objects except at the root of it. // Wire val struct = mapOf ( \"a\" to 1.0 ) val list = listOf ( \u201c b \u201d , 2.0 ) val boolValue = true val nullValue = null // Protoc val struct : Struct = Struct . newBuilder (). apply { putFields ( \u201c a \u201d , Value . newBuilder . setNumberValue ( 1.0 ). build ()) } . build () val list : List = ListValue . newBuilder (). apply { addValues ( Value . newBuilder . setStringValue ( \u201c a \u201d ). build ()) addValues ( Value . newBuilder . setNumberValue ( 2.0 ). build ()) } . build () val boolValue = Value . newBuilder . setBoolValue ( true ). build () val nullValue = Value . newBuilder (). setNullValue ( NullValue . NULL_VALUE ). build ()","title":"Struct"},{"location":"wire_vs_protoc/#wrappers","text":"Wire didn\u2019t create new types for wrappers either, each wrapper will be represented by a nullable version of the primitive type it defines. For instance google.protobuf.FloatValue will be represented in Java by the float boxed type @Nullable Float , in Kotlin by Float? . // Wire val floatValue = 33.3f // Protoc val floatValue = FloatValue . newBuilder (). setValue ( 33.3f ). build ()","title":"Wrappers"},{"location":"wire_vs_protoc/#json","text":"While Proto2 didn\u2019t, Proto3 defines Protobuf serialization over JSON. Wire and Protoc are interoperable but their API are quite different. Wire offers JSON serialization over Moshi or Gson . Protoc brings its own JsonFormatter. Beware that Protoc throws an error for unknown fields, you need to configure it to opt-out of this behavior! // Wire & Moshi val moshi = Moshi . Builder () . add ( WireJsonAdapterFactory ()) . build () val adapter = moshi . adapter ( Pizza :: class . java ) val pizza : Pizza = ... val json = adapter . toJson ( pizza ) val parsedPizza = adapter . fromJson ( json ) // Protoc val pizza : PizzaOuterClass . Pizza = \u2026 val json = JsonFormat . printer (). print ( value ) val jsonParser = JsonFormat . parser (). ignoringUnknownFields () val parsedBuilder = PizzaOuterClass . Pizza . newBuilder () jsonParser . merge ( json , parsedBuilder ) val parsedPizza = parsedBuilder . build ()","title":"JSON"},{"location":"3.x/","text":"// wire-swift-generator wire-swift-generator \u00b6 Packages \u00b6 Name com.squareup.wire.swift","title":"Index"},{"location":"3.x/#wire-swift-generator","text":"","title":"wire-swift-generator"},{"location":"3.x/#packages","text":"Name com.squareup.wire.swift","title":"Packages"},{"location":"3.x/wire-compiler/com.squareup.wire/","text":"// wire-compiler / com.squareup.wire Package com.squareup.wire \u00b6 Types \u00b6 Name Summary WireCompiler [jvm] class WireCompiler Command line interface to the Wire Java generator.","title":"wire-compiler"},{"location":"3.x/wire-compiler/com.squareup.wire/#package-comsquareupwire","text":"","title":"Package com.squareup.wire"},{"location":"3.x/wire-compiler/com.squareup.wire/#types","text":"Name Summary WireCompiler [jvm] class WireCompiler Command line interface to the Wire Java generator.","title":"Types"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/","text":"// wire-compiler / com.squareup.wire / WireCompiler WireCompiler \u00b6 [jvm]\\ class WireCompiler Command line interface to the Wire Java generator. Usage java WireCompiler \u2013proto_path=<path>\\ [\u2013java_out=<path>]\\ [\u2013kotlin_out=<path>]\\ [\u2013swift_out=<path>]\\ [\u2013files=<protos.include>]\\ [\u2013includes=<message_name>[,<message_name>\u2026]]\\ [\u2013excludes=<message_name>[,<message_name>\u2026]]\\ [\u2013android]\\ [\u2013android-annotations]\\ [\u2013compact]\\ [file [file\u2026]] \u2013java_out should provide the folder where the files generated by the Java code generator should be placed. Similarly, \u2013kotlin_out should provide the folder where the files generated by the Kotlin code generator will be written. Only one of the two should be specified. \u2013swift_out should provide the folder where the files generated by the Swift code generator should be placed. If the \u2013includes flag is present, its argument must be a comma-separated list of fully-qualified message or enum names. The output will be limited to those messages and enums that are (transitive) dependencies of the listed names. The \u2013excludes flag excludes types, and takes precedence over \u2013includes. If the \u2013registry_class flag is present, its argument must be a Java class name. A class with the given name will be generated, containing a constant list of all extension classes generated during the compile. This list is suitable for passing to Wire\u2019s constructor at runtime for constructing its internal extension registry. The \u2013dry_run flag causes the compile to just emit the names of the source files that would be generated to stdout. The \u2013android flag will cause all messages to implement the Parcelable interface. This implies \u2013android-annotations as well. The \u2013android-annotations flag will add the Nullable annotation to optional fields. The \u2013compact flag will emit code that uses reflection for reading, writing, and toString methods which are normally implemented with code generation. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary compile [jvm] fun compile () Properties \u00b6 Name Summary emitAndroid [jvm] val emitAndroid : Boolean emitAndroidAnnotations [jvm] val emitAndroidAnnotations : Boolean emitAppliedOptions [jvm] val emitAppliedOptions : Boolean emitCompact [jvm] val emitCompact : Boolean emitDeclaredOptions [jvm] val emitDeclaredOptions : Boolean fs [jvm] val fs : FileSystem javaInterop [jvm] val javaInterop : Boolean javaOut [jvm] val javaOut : String ? kotlinBoxOneOfsMinSize [jvm] val kotlinBoxOneOfsMinSize : Int kotlinOut [jvm] val kotlinOut : String ? log [jvm] val log : WireLogger modules [jvm] val modules : Map < String , WireRun.Module > permitPackageCycles [jvm] val permitPackageCycles : Boolean protoPaths [jvm] val protoPaths : List < String > sourceFileNames [jvm] val sourceFileNames : List < String > swiftOut [jvm] val swiftOut : String ? treeShakingRoots [jvm] val treeShakingRoots : List < String > treeShakingRubbish [jvm] val treeShakingRubbish : List < String >","title":"Index"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/#wirecompiler","text":"[jvm]\\ class WireCompiler Command line interface to the Wire Java generator. Usage java WireCompiler \u2013proto_path=<path>\\ [\u2013java_out=<path>]\\ [\u2013kotlin_out=<path>]\\ [\u2013swift_out=<path>]\\ [\u2013files=<protos.include>]\\ [\u2013includes=<message_name>[,<message_name>\u2026]]\\ [\u2013excludes=<message_name>[,<message_name>\u2026]]\\ [\u2013android]\\ [\u2013android-annotations]\\ [\u2013compact]\\ [file [file\u2026]] \u2013java_out should provide the folder where the files generated by the Java code generator should be placed. Similarly, \u2013kotlin_out should provide the folder where the files generated by the Kotlin code generator will be written. Only one of the two should be specified. \u2013swift_out should provide the folder where the files generated by the Swift code generator should be placed. If the \u2013includes flag is present, its argument must be a comma-separated list of fully-qualified message or enum names. The output will be limited to those messages and enums that are (transitive) dependencies of the listed names. The \u2013excludes flag excludes types, and takes precedence over \u2013includes. If the \u2013registry_class flag is present, its argument must be a Java class name. A class with the given name will be generated, containing a constant list of all extension classes generated during the compile. This list is suitable for passing to Wire\u2019s constructor at runtime for constructing its internal extension registry. The \u2013dry_run flag causes the compile to just emit the names of the source files that would be generated to stdout. The \u2013android flag will cause all messages to implement the Parcelable interface. This implies \u2013android-annotations as well. The \u2013android-annotations flag will add the Nullable annotation to optional fields. The \u2013compact flag will emit code that uses reflection for reading, writing, and toString methods which are normally implemented with code generation.","title":"WireCompiler"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/#functions","text":"Name Summary compile [jvm] fun compile ()","title":"Functions"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/#properties","text":"Name Summary emitAndroid [jvm] val emitAndroid : Boolean emitAndroidAnnotations [jvm] val emitAndroidAnnotations : Boolean emitAppliedOptions [jvm] val emitAppliedOptions : Boolean emitCompact [jvm] val emitCompact : Boolean emitDeclaredOptions [jvm] val emitDeclaredOptions : Boolean fs [jvm] val fs : FileSystem javaInterop [jvm] val javaInterop : Boolean javaOut [jvm] val javaOut : String ? kotlinBoxOneOfsMinSize [jvm] val kotlinBoxOneOfsMinSize : Int kotlinOut [jvm] val kotlinOut : String ? log [jvm] val log : WireLogger modules [jvm] val modules : Map < String , WireRun.Module > permitPackageCycles [jvm] val permitPackageCycles : Boolean protoPaths [jvm] val protoPaths : List < String > sourceFileNames [jvm] val sourceFileNames : List < String > swiftOut [jvm] val swiftOut : String ? treeShakingRoots [jvm] val treeShakingRoots : List < String > treeShakingRubbish [jvm] val treeShakingRubbish : List < String >","title":"Properties"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/compile/","text":"// wire-compiler / com.squareup.wire / WireCompiler / compile compile \u00b6 [jvm]\\ fun compile ()","title":"Compile"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/compile/#compile","text":"[jvm]\\ fun compile ()","title":"compile"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-android-annotations/","text":"// wire-compiler / com.squareup.wire / WireCompiler / emitAndroidAnnotations emitAndroidAnnotations \u00b6 [jvm]\\ val emitAndroidAnnotations : Boolean","title":"Emit android annotations"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-android-annotations/#emitandroidannotations","text":"[jvm]\\ val emitAndroidAnnotations : Boolean","title":"emitAndroidAnnotations"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-android/","text":"// wire-compiler / com.squareup.wire / WireCompiler / emitAndroid emitAndroid \u00b6 [jvm]\\ val emitAndroid : Boolean","title":"Emit android"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-android/#emitandroid","text":"[jvm]\\ val emitAndroid : Boolean","title":"emitAndroid"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-applied-options/","text":"// wire-compiler / com.squareup.wire / WireCompiler / emitAppliedOptions emitAppliedOptions \u00b6 [jvm]\\ val emitAppliedOptions : Boolean","title":"Emit applied options"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-applied-options/#emitappliedoptions","text":"[jvm]\\ val emitAppliedOptions : Boolean","title":"emitAppliedOptions"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-compact/","text":"// wire-compiler / com.squareup.wire / WireCompiler / emitCompact emitCompact \u00b6 [jvm]\\ val emitCompact : Boolean","title":"Emit compact"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-compact/#emitcompact","text":"[jvm]\\ val emitCompact : Boolean","title":"emitCompact"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-declared-options/","text":"// wire-compiler / com.squareup.wire / WireCompiler / emitDeclaredOptions emitDeclaredOptions \u00b6 [jvm]\\ val emitDeclaredOptions : Boolean","title":"Emit declared options"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/emit-declared-options/#emitdeclaredoptions","text":"[jvm]\\ val emitDeclaredOptions : Boolean","title":"emitDeclaredOptions"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/fs/","text":"// wire-compiler / com.squareup.wire / WireCompiler / fs fs \u00b6 [jvm]\\ val fs : FileSystem","title":"Fs"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/fs/#fs","text":"[jvm]\\ val fs : FileSystem","title":"fs"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/java-interop/","text":"// wire-compiler / com.squareup.wire / WireCompiler / javaInterop javaInterop \u00b6 [jvm]\\ val javaInterop : Boolean","title":"Java interop"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/java-interop/#javainterop","text":"[jvm]\\ val javaInterop : Boolean","title":"javaInterop"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/java-out/","text":"// wire-compiler / com.squareup.wire / WireCompiler / javaOut javaOut \u00b6 [jvm]\\ val javaOut : String ?","title":"Java out"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/java-out/#javaout","text":"[jvm]\\ val javaOut : String ?","title":"javaOut"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/kotlin-box-one-ofs-min-size/","text":"// wire-compiler / com.squareup.wire / WireCompiler / kotlinBoxOneOfsMinSize kotlinBoxOneOfsMinSize \u00b6 [jvm]\\ val kotlinBoxOneOfsMinSize : Int","title":"Kotlin box one ofs min size"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/kotlin-box-one-ofs-min-size/#kotlinboxoneofsminsize","text":"[jvm]\\ val kotlinBoxOneOfsMinSize : Int","title":"kotlinBoxOneOfsMinSize"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/kotlin-out/","text":"// wire-compiler / com.squareup.wire / WireCompiler / kotlinOut kotlinOut \u00b6 [jvm]\\ val kotlinOut : String ?","title":"Kotlin out"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/kotlin-out/#kotlinout","text":"[jvm]\\ val kotlinOut : String ?","title":"kotlinOut"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/log/","text":"// wire-compiler / com.squareup.wire / WireCompiler / log log \u00b6 [jvm]\\ val log : WireLogger","title":"Log"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/log/#log","text":"[jvm]\\ val log : WireLogger","title":"log"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/modules/","text":"// wire-compiler / com.squareup.wire / WireCompiler / modules modules \u00b6 [jvm]\\ val modules : Map < String , WireRun.Module >","title":"Modules"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/modules/#modules","text":"[jvm]\\ val modules : Map < String , WireRun.Module >","title":"modules"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/permit-package-cycles/","text":"// wire-compiler / com.squareup.wire / WireCompiler / permitPackageCycles permitPackageCycles \u00b6 [jvm]\\ val permitPackageCycles : Boolean","title":"Permit package cycles"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/permit-package-cycles/#permitpackagecycles","text":"[jvm]\\ val permitPackageCycles : Boolean","title":"permitPackageCycles"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/proto-paths/","text":"// wire-compiler / com.squareup.wire / WireCompiler / protoPaths protoPaths \u00b6 [jvm]\\ val protoPaths : List < String >","title":"Proto paths"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/proto-paths/#protopaths","text":"[jvm]\\ val protoPaths : List < String >","title":"protoPaths"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/source-file-names/","text":"// wire-compiler / com.squareup.wire / WireCompiler / sourceFileNames sourceFileNames \u00b6 [jvm]\\ val sourceFileNames : List < String >","title":"Source file names"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/source-file-names/#sourcefilenames","text":"[jvm]\\ val sourceFileNames : List < String >","title":"sourceFileNames"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/swift-out/","text":"// wire-compiler / com.squareup.wire / WireCompiler / swiftOut swiftOut \u00b6 [jvm]\\ val swiftOut : String ?","title":"Swift out"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/swift-out/#swiftout","text":"[jvm]\\ val swiftOut : String ?","title":"swiftOut"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/tree-shaking-roots/","text":"// wire-compiler / com.squareup.wire / WireCompiler / treeShakingRoots treeShakingRoots \u00b6 [jvm]\\ val treeShakingRoots : List < String >","title":"Tree shaking roots"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/tree-shaking-roots/#treeshakingroots","text":"[jvm]\\ val treeShakingRoots : List < String >","title":"treeShakingRoots"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/tree-shaking-rubbish/","text":"// wire-compiler / com.squareup.wire / WireCompiler / treeShakingRubbish treeShakingRubbish \u00b6 [jvm]\\ val treeShakingRubbish : List < String >","title":"Tree shaking rubbish"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/tree-shaking-rubbish/#treeshakingrubbish","text":"[jvm]\\ val treeShakingRubbish : List < String >","title":"treeShakingRubbish"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/","text":"// wire-compiler / com.squareup.wire / WireCompiler / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary forArgs [jvm] @ JvmStatic fun forArgs (fileSystem: FileSystem , logger: WireLogger, vararg args: String ): WireCompiler @ JvmOverloads @ JvmStatic fun forArgs (fileSystem: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger(), vararg args: String ): WireCompiler main [jvm] @ JvmStatic fun main (args: Array < String >) Properties \u00b6 Name Summary CODE_GENERATED_BY_WIRE [jvm] const val CODE_GENERATED_BY_WIRE : String","title":"Index"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/#functions","text":"Name Summary forArgs [jvm] @ JvmStatic fun forArgs (fileSystem: FileSystem , logger: WireLogger, vararg args: String ): WireCompiler @ JvmOverloads @ JvmStatic fun forArgs (fileSystem: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger(), vararg args: String ): WireCompiler main [jvm] @ JvmStatic fun main (args: Array < String >)","title":"Functions"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/#properties","text":"Name Summary CODE_GENERATED_BY_WIRE [jvm] const val CODE_GENERATED_BY_WIRE : String","title":"Properties"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/-c-o-d-e_-g-e-n-e-r-a-t-e-d_-b-y_-w-i-r-e/","text":"// wire-compiler / com.squareup.wire / WireCompiler / Companion / CODE_GENERATED_BY_WIRE CODE_GENERATED_BY_WIRE \u00b6 [jvm]\\ const val CODE_GENERATED_BY_WIRE : String","title":" c o d e  g e n e r a t e d  b y  w i r e"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/-c-o-d-e_-g-e-n-e-r-a-t-e-d_-b-y_-w-i-r-e/#code_generated_by_wire","text":"[jvm]\\ const val CODE_GENERATED_BY_WIRE : String","title":"CODE_GENERATED_BY_WIRE"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/for-args/","text":"// wire-compiler / com.squareup.wire / WireCompiler / Companion / forArgs forArgs \u00b6 [jvm]\\ @ JvmStatic fun forArgs (fileSystem: FileSystem , logger: WireLogger, vararg args: String ): WireCompiler @ JvmOverloads @ JvmStatic fun forArgs (fileSystem: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger(), vararg args: String ): WireCompiler","title":"For args"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/for-args/#forargs","text":"[jvm]\\ @ JvmStatic fun forArgs (fileSystem: FileSystem , logger: WireLogger, vararg args: String ): WireCompiler @ JvmOverloads @ JvmStatic fun forArgs (fileSystem: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger(), vararg args: String ): WireCompiler","title":"forArgs"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/main/","text":"// wire-compiler / com.squareup.wire / WireCompiler / Companion / main main \u00b6 [jvm]\\ @ JvmStatic fun main (args: Array < String >)","title":"Main"},{"location":"3.x/wire-compiler/com.squareup.wire/-wire-compiler/-companion/main/#main","text":"[jvm]\\ @ JvmStatic fun main (args: Array < String >)","title":"main"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/","text":"// wire-compiler / com.squareup.wire.schema Package com.squareup.wire.schema \u00b6 Types \u00b6 Name Summary CustomTarget [jvm] data class CustomTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , schemaHandlerFactory: SchemaHandler.Factory) : Target JavaTarget [jvm] data class JavaTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , android: Boolean , androidAnnotations: Boolean , compact: Boolean , emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean , buildersOnly: Boolean ) : Target Generate .java sources. KotlinTarget [jvm] data class KotlinTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , android: Boolean , javaInterop: Boolean , emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean , rpcCallStyle: RpcCallStyle, rpcRole: RpcRole, singleMethodServices: Boolean , boxOneOfsMinSize: Int , grpcServerCompatible: Boolean , nameSuffix: String ?, buildersOnly: Boolean ) : Target Generate .kt sources. ProtoTarget [jvm] data class ProtoTarget (outDirectory: String ) : Target SwiftTarget [jvm] data class SwiftTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ) : Target Target [jvm] sealed class Target : Serializable WireRun [jvm] data class WireRun (sourcePath: List <Location>, protoPath: List <Location>, treeShakingRoots: List < String >, treeShakingRubbish: List < String >, moves: List <TypeMover.Move>, sinceVersion: String ?, untilVersion: String ?, onlyVersion: String ?, targets: List < Target >, modules: Map < String , WireRun.Module >, permitPackageCycles: Boolean ) An invocation of the Wire compiler. Each invocation performs the following operations: Functions \u00b6 Name Summary newSchemaHandler [jvm] fun newSchemaHandler (schemaHandlerFactoryClass: String ): SchemaHandler.Factory Create and return an instance of SchemaHandler.Factory.","title":"Index"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/#package-comsquareupwireschema","text":"","title":"Package com.squareup.wire.schema"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/#types","text":"Name Summary CustomTarget [jvm] data class CustomTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , schemaHandlerFactory: SchemaHandler.Factory) : Target JavaTarget [jvm] data class JavaTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , android: Boolean , androidAnnotations: Boolean , compact: Boolean , emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean , buildersOnly: Boolean ) : Target Generate .java sources. KotlinTarget [jvm] data class KotlinTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , android: Boolean , javaInterop: Boolean , emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean , rpcCallStyle: RpcCallStyle, rpcRole: RpcRole, singleMethodServices: Boolean , boxOneOfsMinSize: Int , grpcServerCompatible: Boolean , nameSuffix: String ?, buildersOnly: Boolean ) : Target Generate .kt sources. ProtoTarget [jvm] data class ProtoTarget (outDirectory: String ) : Target SwiftTarget [jvm] data class SwiftTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ) : Target Target [jvm] sealed class Target : Serializable WireRun [jvm] data class WireRun (sourcePath: List <Location>, protoPath: List <Location>, treeShakingRoots: List < String >, treeShakingRubbish: List < String >, moves: List <TypeMover.Move>, sinceVersion: String ?, untilVersion: String ?, onlyVersion: String ?, targets: List < Target >, modules: Map < String , WireRun.Module >, permitPackageCycles: Boolean ) An invocation of the Wire compiler. Each invocation performs the following operations:","title":"Types"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/#functions","text":"Name Summary newSchemaHandler [jvm] fun newSchemaHandler (schemaHandlerFactoryClass: String ): SchemaHandler.Factory Create and return an instance of SchemaHandler.Factory.","title":"Functions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/new-schema-handler/","text":"// wire-compiler / com.squareup.wire.schema / newSchemaHandler newSchemaHandler \u00b6 [jvm]\\ fun newSchemaHandler (schemaHandlerFactoryClass: String ): SchemaHandler.Factory Create and return an instance of SchemaHandler.Factory. Parameters \u00b6 jvm schemaHandlerFactoryClass a fully qualified class name for a class that implements SchemaHandler.Factory. The class must have a no-arguments public constructor.","title":"New schema handler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/new-schema-handler/#newschemahandler","text":"[jvm]\\ fun newSchemaHandler (schemaHandlerFactoryClass: String ): SchemaHandler.Factory Create and return an instance of SchemaHandler.Factory.","title":"newSchemaHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/new-schema-handler/#parameters","text":"jvm schemaHandlerFactoryClass a fully qualified class name for a class that implements SchemaHandler.Factory. The class must have a no-arguments public constructor.","title":"Parameters"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/","text":"// wire-compiler / com.squareup.wire.schema / CustomTarget CustomTarget \u00b6 [jvm]\\ data class CustomTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , schemaHandlerFactory: SchemaHandler.Factory) : Target Functions \u00b6 Name Summary copyTarget [jvm] open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] open override fun newHandler (): SchemaHandler Properties \u00b6 Name Summary excludes [jvm] open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm] open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm] open override val outDirectory : String Directory where this target will write its output. schemaHandlerFactory [jvm] val schemaHandlerFactory : SchemaHandler.Factory","title":"Index"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/#customtarget","text":"[jvm]\\ data class CustomTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , schemaHandlerFactory: SchemaHandler.Factory) : Target","title":"CustomTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/#functions","text":"Name Summary copyTarget [jvm] open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] open override fun newHandler (): SchemaHandler","title":"Functions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/#properties","text":"Name Summary excludes [jvm] open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm] open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm] open override val outDirectory : String Directory where this target will write its output. schemaHandlerFactory [jvm] val schemaHandlerFactory : SchemaHandler.Factory","title":"Properties"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/-custom-target/","text":"// wire-compiler / com.squareup.wire.schema / CustomTarget / CustomTarget CustomTarget \u00b6 [jvm]\\ fun CustomTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String , schemaHandlerFactory: SchemaHandler.Factory)","title":" custom target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/-custom-target/#customtarget","text":"[jvm]\\ fun CustomTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String , schemaHandlerFactory: SchemaHandler.Factory)","title":"CustomTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/copy-target/","text":"// wire-compiler / com.squareup.wire.schema / CustomTarget / copyTarget copyTarget \u00b6 [jvm]\\ open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"Copy target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/copy-target/#copytarget","text":"[jvm]\\ open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"copyTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/excludes/","text":"// wire-compiler / com.squareup.wire.schema / CustomTarget / excludes excludes \u00b6 [jvm]\\ open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/excludes/#excludes","text":"[jvm]\\ open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/exclusive/","text":"// wire-compiler / com.squareup.wire.schema / CustomTarget / exclusive exclusive \u00b6 [jvm]\\ open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"Exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/exclusive/#exclusive","text":"[jvm]\\ open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/includes/","text":"// wire-compiler / com.squareup.wire.schema / CustomTarget / includes includes \u00b6 [jvm]\\ open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/includes/#includes","text":"[jvm]\\ open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/new-handler/","text":"// wire-compiler / com.squareup.wire.schema / CustomTarget / newHandler newHandler \u00b6 [jvm]\\ open override fun newHandler (): SchemaHandler","title":"New handler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/new-handler/#newhandler","text":"[jvm]\\ open override fun newHandler (): SchemaHandler","title":"newHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/out-directory/","text":"// wire-compiler / com.squareup.wire.schema / CustomTarget / outDirectory outDirectory \u00b6 [jvm]\\ open override val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"Out directory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/out-directory/#outdirectory","text":"[jvm]\\ open override val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"outDirectory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/schema-handler-factory/","text":"// wire-compiler / com.squareup.wire.schema / CustomTarget / schemaHandlerFactory schemaHandlerFactory \u00b6 [jvm]\\ val schemaHandlerFactory : SchemaHandler.Factory","title":"Schema handler factory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-custom-target/schema-handler-factory/#schemahandlerfactory","text":"[jvm]\\ val schemaHandlerFactory : SchemaHandler.Factory","title":"schemaHandlerFactory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget JavaTarget \u00b6 [jvm]\\ data class JavaTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , android: Boolean , androidAnnotations: Boolean , compact: Boolean , emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean , buildersOnly: Boolean ) : Target Generate .java sources. Constructors \u00b6 JavaTarget [jvm] fun JavaTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String , android: Boolean = false, androidAnnotations: Boolean = false, compact: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, buildersOnly: Boolean = false) Functions \u00b6 Name Summary copyTarget [jvm] open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] open override fun newHandler (): SchemaHandler Properties \u00b6 Name Summary android [jvm] val android : Boolean = false True for emitted types to implement android.os.Parcelable. androidAnnotations [jvm] val androidAnnotations : Boolean = false True to enable the androidx.annotation.Nullable annotation where applicable. buildersOnly [jvm] val buildersOnly : Boolean = false If true, the constructor of all generated types will be non-public. compact [jvm] val compact : Boolean = false True to emit code that uses reflection for reading, writing, and toString methods which are normally implemented with generated code. emitAppliedOptions [jvm] val emitAppliedOptions : Boolean = true True to emit annotations for options applied on messages, fields, etc. emitDeclaredOptions [jvm] val emitDeclaredOptions : Boolean = true True to emit types for options declared on messages, fields, etc. excludes [jvm] open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm] open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm] open override val outDirectory : String Directory where this target will write its output.","title":"Index"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/#javatarget","text":"[jvm]\\ data class JavaTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , android: Boolean , androidAnnotations: Boolean , compact: Boolean , emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean , buildersOnly: Boolean ) : Target Generate .java sources.","title":"JavaTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/#constructors","text":"JavaTarget [jvm] fun JavaTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String , android: Boolean = false, androidAnnotations: Boolean = false, compact: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, buildersOnly: Boolean = false)","title":"Constructors"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/#functions","text":"Name Summary copyTarget [jvm] open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] open override fun newHandler (): SchemaHandler","title":"Functions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/#properties","text":"Name Summary android [jvm] val android : Boolean = false True for emitted types to implement android.os.Parcelable. androidAnnotations [jvm] val androidAnnotations : Boolean = false True to enable the androidx.annotation.Nullable annotation where applicable. buildersOnly [jvm] val buildersOnly : Boolean = false If true, the constructor of all generated types will be non-public. compact [jvm] val compact : Boolean = false True to emit code that uses reflection for reading, writing, and toString methods which are normally implemented with generated code. emitAppliedOptions [jvm] val emitAppliedOptions : Boolean = true True to emit annotations for options applied on messages, fields, etc. emitDeclaredOptions [jvm] val emitDeclaredOptions : Boolean = true True to emit types for options declared on messages, fields, etc. excludes [jvm] open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm] open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm] open override val outDirectory : String Directory where this target will write its output.","title":"Properties"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/-java-target/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / JavaTarget JavaTarget \u00b6 [jvm]\\ fun JavaTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String , android: Boolean = false, androidAnnotations: Boolean = false, compact: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, buildersOnly: Boolean = false)","title":" java target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/-java-target/#javatarget","text":"[jvm]\\ fun JavaTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String , android: Boolean = false, androidAnnotations: Boolean = false, compact: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, buildersOnly: Boolean = false)","title":"JavaTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/android-annotations/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / androidAnnotations androidAnnotations \u00b6 [jvm]\\ val androidAnnotations : Boolean = false True to enable the androidx.annotation.Nullable annotation where applicable.","title":"Android annotations"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/android-annotations/#androidannotations","text":"[jvm]\\ val androidAnnotations : Boolean = false True to enable the androidx.annotation.Nullable annotation where applicable.","title":"androidAnnotations"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/android/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / android android \u00b6 [jvm]\\ val android : Boolean = false True for emitted types to implement android.os.Parcelable.","title":"Android"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/android/#android","text":"[jvm]\\ val android : Boolean = false True for emitted types to implement android.os.Parcelable.","title":"android"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/builders-only/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / buildersOnly buildersOnly \u00b6 [jvm]\\ val buildersOnly : Boolean = false If true, the constructor of all generated types will be non-public.","title":"Builders only"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/builders-only/#buildersonly","text":"[jvm]\\ val buildersOnly : Boolean = false If true, the constructor of all generated types will be non-public.","title":"buildersOnly"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/compact/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / compact compact \u00b6 [jvm]\\ val compact : Boolean = false True to emit code that uses reflection for reading, writing, and toString methods which are normally implemented with generated code.","title":"Compact"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/compact/#compact","text":"[jvm]\\ val compact : Boolean = false True to emit code that uses reflection for reading, writing, and toString methods which are normally implemented with generated code.","title":"compact"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/copy-target/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / copyTarget copyTarget \u00b6 [jvm]\\ open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"Copy target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/copy-target/#copytarget","text":"[jvm]\\ open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"copyTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/emit-applied-options/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / emitAppliedOptions emitAppliedOptions \u00b6 [jvm]\\ val emitAppliedOptions : Boolean = true True to emit annotations for options applied on messages, fields, etc.","title":"Emit applied options"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/emit-applied-options/#emitappliedoptions","text":"[jvm]\\ val emitAppliedOptions : Boolean = true True to emit annotations for options applied on messages, fields, etc.","title":"emitAppliedOptions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/emit-declared-options/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / emitDeclaredOptions emitDeclaredOptions \u00b6 [jvm]\\ val emitDeclaredOptions : Boolean = true True to emit types for options declared on messages, fields, etc.","title":"Emit declared options"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/emit-declared-options/#emitdeclaredoptions","text":"[jvm]\\ val emitDeclaredOptions : Boolean = true True to emit types for options declared on messages, fields, etc.","title":"emitDeclaredOptions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/excludes/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / excludes excludes \u00b6 [jvm]\\ open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/excludes/#excludes","text":"[jvm]\\ open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/exclusive/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / exclusive exclusive \u00b6 [jvm]\\ open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"Exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/exclusive/#exclusive","text":"[jvm]\\ open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/includes/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / includes includes \u00b6 [jvm]\\ open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/includes/#includes","text":"[jvm]\\ open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/new-handler/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / newHandler newHandler \u00b6 [jvm]\\ open override fun newHandler (): SchemaHandler","title":"New handler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/new-handler/#newhandler","text":"[jvm]\\ open override fun newHandler (): SchemaHandler","title":"newHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/out-directory/","text":"// wire-compiler / com.squareup.wire.schema / JavaTarget / outDirectory outDirectory \u00b6 [jvm]\\ open override val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"Out directory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-java-target/out-directory/#outdirectory","text":"[jvm]\\ open override val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"outDirectory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget KotlinTarget \u00b6 [jvm]\\ data class KotlinTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , android: Boolean , javaInterop: Boolean , emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean , rpcCallStyle: RpcCallStyle, rpcRole: RpcRole, singleMethodServices: Boolean , boxOneOfsMinSize: Int , grpcServerCompatible: Boolean , nameSuffix: String ?, buildersOnly: Boolean ) : Target Generate .kt sources. Constructors \u00b6 KotlinTarget [jvm] fun KotlinTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String , android: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, singleMethodServices: Boolean = false, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String ? = null, buildersOnly: Boolean = false) Functions \u00b6 Name Summary copyTarget [jvm] open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] open override fun newHandler (): SchemaHandler Properties \u00b6 Name Summary android [jvm] val android : Boolean = false True for emitted types to implement android.os.Parcelable. boxOneOfsMinSize [jvm] val boxOneOfsMinSize : Int = 5_000 If a oneof has more than or boxOneOfsMinSize fields, it will be generated using boxed oneofs as defined in OneOf. buildersOnly [jvm] val buildersOnly : Boolean = false If true, the constructor of all generated types will be non-public. emitAppliedOptions [jvm] val emitAppliedOptions : Boolean = true True to emit annotations for options applied on messages, fields, etc. emitDeclaredOptions [jvm] val emitDeclaredOptions : Boolean = true True to emit types for options declared on messages, fields, etc. excludes [jvm] open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. grpcServerCompatible [jvm] val grpcServerCompatible : Boolean = false True to also generate gRPC server-compatible classes. Experimental feature. includes [jvm] open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. javaInterop [jvm] val javaInterop : Boolean = false True for emitted types to implement APIs for easier migration from the Java target. nameSuffix [jvm] val nameSuffix : String ? = null If present, generated services classes will use this as a suffix instead of inferring one from the rpcRole . outDirectory [jvm] open override val outDirectory : String Directory where this target will write its output. rpcCallStyle [jvm] val rpcCallStyle : RpcCallStyle Blocking or suspending. rpcRole [jvm] val rpcRole : RpcRole Client or server. singleMethodServices [jvm] val singleMethodServices : Boolean = false True for emitted services to implement one interface per RPC.","title":"Index"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/#kotlintarget","text":"[jvm]\\ data class KotlinTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String , android: Boolean , javaInterop: Boolean , emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean , rpcCallStyle: RpcCallStyle, rpcRole: RpcRole, singleMethodServices: Boolean , boxOneOfsMinSize: Int , grpcServerCompatible: Boolean , nameSuffix: String ?, buildersOnly: Boolean ) : Target Generate .kt sources.","title":"KotlinTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/#constructors","text":"KotlinTarget [jvm] fun KotlinTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String , android: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, singleMethodServices: Boolean = false, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String ? = null, buildersOnly: Boolean = false)","title":"Constructors"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/#functions","text":"Name Summary copyTarget [jvm] open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] open override fun newHandler (): SchemaHandler","title":"Functions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/#properties","text":"Name Summary android [jvm] val android : Boolean = false True for emitted types to implement android.os.Parcelable. boxOneOfsMinSize [jvm] val boxOneOfsMinSize : Int = 5_000 If a oneof has more than or boxOneOfsMinSize fields, it will be generated using boxed oneofs as defined in OneOf. buildersOnly [jvm] val buildersOnly : Boolean = false If true, the constructor of all generated types will be non-public. emitAppliedOptions [jvm] val emitAppliedOptions : Boolean = true True to emit annotations for options applied on messages, fields, etc. emitDeclaredOptions [jvm] val emitDeclaredOptions : Boolean = true True to emit types for options declared on messages, fields, etc. excludes [jvm] open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. grpcServerCompatible [jvm] val grpcServerCompatible : Boolean = false True to also generate gRPC server-compatible classes. Experimental feature. includes [jvm] open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. javaInterop [jvm] val javaInterop : Boolean = false True for emitted types to implement APIs for easier migration from the Java target. nameSuffix [jvm] val nameSuffix : String ? = null If present, generated services classes will use this as a suffix instead of inferring one from the rpcRole . outDirectory [jvm] open override val outDirectory : String Directory where this target will write its output. rpcCallStyle [jvm] val rpcCallStyle : RpcCallStyle Blocking or suspending. rpcRole [jvm] val rpcRole : RpcRole Client or server. singleMethodServices [jvm] val singleMethodServices : Boolean = false True for emitted services to implement one interface per RPC.","title":"Properties"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/-kotlin-target/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / KotlinTarget KotlinTarget \u00b6 [jvm]\\ fun KotlinTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String , android: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, singleMethodServices: Boolean = false, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String ? = null, buildersOnly: Boolean = false)","title":" kotlin target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/-kotlin-target/#kotlintarget","text":"[jvm]\\ fun KotlinTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String , android: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, singleMethodServices: Boolean = false, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String ? = null, buildersOnly: Boolean = false)","title":"KotlinTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/android/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / android android \u00b6 [jvm]\\ val android : Boolean = false True for emitted types to implement android.os.Parcelable.","title":"Android"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/android/#android","text":"[jvm]\\ val android : Boolean = false True for emitted types to implement android.os.Parcelable.","title":"android"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/box-one-ofs-min-size/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / boxOneOfsMinSize boxOneOfsMinSize \u00b6 [jvm]\\ val boxOneOfsMinSize : Int = 5_000 If a oneof has more than or boxOneOfsMinSize fields, it will be generated using boxed oneofs as defined in OneOf.","title":"Box one ofs min size"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/box-one-ofs-min-size/#boxoneofsminsize","text":"[jvm]\\ val boxOneOfsMinSize : Int = 5_000 If a oneof has more than or boxOneOfsMinSize fields, it will be generated using boxed oneofs as defined in OneOf.","title":"boxOneOfsMinSize"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/builders-only/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / buildersOnly buildersOnly \u00b6 [jvm]\\ val buildersOnly : Boolean = false If true, the constructor of all generated types will be non-public.","title":"Builders only"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/builders-only/#buildersonly","text":"[jvm]\\ val buildersOnly : Boolean = false If true, the constructor of all generated types will be non-public.","title":"buildersOnly"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/copy-target/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / copyTarget copyTarget \u00b6 [jvm]\\ open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"Copy target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/copy-target/#copytarget","text":"[jvm]\\ open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"copyTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/emit-applied-options/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / emitAppliedOptions emitAppliedOptions \u00b6 [jvm]\\ val emitAppliedOptions : Boolean = true True to emit annotations for options applied on messages, fields, etc.","title":"Emit applied options"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/emit-applied-options/#emitappliedoptions","text":"[jvm]\\ val emitAppliedOptions : Boolean = true True to emit annotations for options applied on messages, fields, etc.","title":"emitAppliedOptions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/emit-declared-options/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / emitDeclaredOptions emitDeclaredOptions \u00b6 [jvm]\\ val emitDeclaredOptions : Boolean = true True to emit types for options declared on messages, fields, etc.","title":"Emit declared options"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/emit-declared-options/#emitdeclaredoptions","text":"[jvm]\\ val emitDeclaredOptions : Boolean = true True to emit types for options declared on messages, fields, etc.","title":"emitDeclaredOptions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/excludes/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / excludes excludes \u00b6 [jvm]\\ open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/excludes/#excludes","text":"[jvm]\\ open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/exclusive/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / exclusive exclusive \u00b6 [jvm]\\ open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"Exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/exclusive/#exclusive","text":"[jvm]\\ open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/grpc-server-compatible/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / grpcServerCompatible grpcServerCompatible \u00b6 [jvm]\\ val grpcServerCompatible : Boolean = false True to also generate gRPC server-compatible classes. Experimental feature.","title":"Grpc server compatible"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/grpc-server-compatible/#grpcservercompatible","text":"[jvm]\\ val grpcServerCompatible : Boolean = false True to also generate gRPC server-compatible classes. Experimental feature.","title":"grpcServerCompatible"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/includes/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / includes includes \u00b6 [jvm]\\ open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/includes/#includes","text":"[jvm]\\ open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/java-interop/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / javaInterop javaInterop \u00b6 [jvm]\\ val javaInterop : Boolean = false True for emitted types to implement APIs for easier migration from the Java target.","title":"Java interop"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/java-interop/#javainterop","text":"[jvm]\\ val javaInterop : Boolean = false True for emitted types to implement APIs for easier migration from the Java target.","title":"javaInterop"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/name-suffix/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / nameSuffix nameSuffix \u00b6 [jvm]\\ val nameSuffix : String ? = null If present, generated services classes will use this as a suffix instead of inferring one from the rpcRole .","title":"Name suffix"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/name-suffix/#namesuffix","text":"[jvm]\\ val nameSuffix : String ? = null If present, generated services classes will use this as a suffix instead of inferring one from the rpcRole .","title":"nameSuffix"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/new-handler/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / newHandler newHandler \u00b6 [jvm]\\ open override fun newHandler (): SchemaHandler","title":"New handler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/new-handler/#newhandler","text":"[jvm]\\ open override fun newHandler (): SchemaHandler","title":"newHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/out-directory/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / outDirectory outDirectory \u00b6 [jvm]\\ open override val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"Out directory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/out-directory/#outdirectory","text":"[jvm]\\ open override val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"outDirectory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/rpc-call-style/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / rpcCallStyle rpcCallStyle \u00b6 [jvm]\\ val rpcCallStyle : RpcCallStyle Blocking or suspending.","title":"Rpc call style"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/rpc-call-style/#rpccallstyle","text":"[jvm]\\ val rpcCallStyle : RpcCallStyle Blocking or suspending.","title":"rpcCallStyle"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/rpc-role/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / rpcRole rpcRole \u00b6 [jvm]\\ val rpcRole : RpcRole Client or server.","title":"Rpc role"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/rpc-role/#rpcrole","text":"[jvm]\\ val rpcRole : RpcRole Client or server.","title":"rpcRole"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/single-method-services/","text":"// wire-compiler / com.squareup.wire.schema / KotlinTarget / singleMethodServices singleMethodServices \u00b6 [jvm]\\ val singleMethodServices : Boolean = false True for emitted services to implement one interface per RPC.","title":"Single method services"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-kotlin-target/single-method-services/#singlemethodservices","text":"[jvm]\\ val singleMethodServices : Boolean = false True for emitted services to implement one interface per RPC.","title":"singleMethodServices"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/","text":"// wire-compiler / com.squareup.wire.schema / ProtoTarget ProtoTarget \u00b6 [jvm]\\ data class ProtoTarget (outDirectory: String ) : Target Functions \u00b6 Name Summary copyTarget [jvm] open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] open override fun newHandler (): SchemaHandler Properties \u00b6 Name Summary excludes [jvm] open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] open override val exclusive : Boolean = false True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm] open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm] open override val outDirectory : String Directory where this target will write its output.","title":"Index"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/#prototarget","text":"[jvm]\\ data class ProtoTarget (outDirectory: String ) : Target","title":"ProtoTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/#functions","text":"Name Summary copyTarget [jvm] open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] open override fun newHandler (): SchemaHandler","title":"Functions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/#properties","text":"Name Summary excludes [jvm] open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] open override val exclusive : Boolean = false True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm] open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm] open override val outDirectory : String Directory where this target will write its output.","title":"Properties"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/-proto-target/","text":"// wire-compiler / com.squareup.wire.schema / ProtoTarget / ProtoTarget ProtoTarget \u00b6 [jvm]\\ fun ProtoTarget (outDirectory: String )","title":" proto target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/-proto-target/#prototarget","text":"[jvm]\\ fun ProtoTarget (outDirectory: String )","title":"ProtoTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/copy-target/","text":"// wire-compiler / com.squareup.wire.schema / ProtoTarget / copyTarget copyTarget \u00b6 [jvm]\\ open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"Copy target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/copy-target/#copytarget","text":"[jvm]\\ open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"copyTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/excludes/","text":"// wire-compiler / com.squareup.wire.schema / ProtoTarget / excludes excludes \u00b6 [jvm]\\ open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/excludes/#excludes","text":"[jvm]\\ open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/exclusive/","text":"// wire-compiler / com.squareup.wire.schema / ProtoTarget / exclusive exclusive \u00b6 [jvm]\\ open override val exclusive : Boolean = false True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"Exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/exclusive/#exclusive","text":"[jvm]\\ open override val exclusive : Boolean = false True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/includes/","text":"// wire-compiler / com.squareup.wire.schema / ProtoTarget / includes includes \u00b6 [jvm]\\ open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/includes/#includes","text":"[jvm]\\ open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/new-handler/","text":"// wire-compiler / com.squareup.wire.schema / ProtoTarget / newHandler newHandler \u00b6 [jvm]\\ open override fun newHandler (): SchemaHandler","title":"New handler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/new-handler/#newhandler","text":"[jvm]\\ open override fun newHandler (): SchemaHandler","title":"newHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/out-directory/","text":"// wire-compiler / com.squareup.wire.schema / ProtoTarget / outDirectory outDirectory \u00b6 [jvm]\\ open override val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"Out directory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-proto-target/out-directory/#outdirectory","text":"[jvm]\\ open override val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"outDirectory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/","text":"// wire-compiler / com.squareup.wire.schema / SwiftTarget SwiftTarget \u00b6 [jvm]\\ data class SwiftTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ) : Target Functions \u00b6 Name Summary copyTarget [jvm] open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] open override fun newHandler (): SchemaHandler Properties \u00b6 Name Summary excludes [jvm] open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm] open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm] open override val outDirectory : String Directory where this target will write its output.","title":"Index"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/#swifttarget","text":"[jvm]\\ data class SwiftTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ) : Target","title":"SwiftTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/#functions","text":"Name Summary copyTarget [jvm] open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] open override fun newHandler (): SchemaHandler","title":"Functions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/#properties","text":"Name Summary excludes [jvm] open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm] open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm] open override val outDirectory : String Directory where this target will write its output.","title":"Properties"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/-swift-target/","text":"// wire-compiler / com.squareup.wire.schema / SwiftTarget / SwiftTarget SwiftTarget \u00b6 [jvm]\\ fun SwiftTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String )","title":" swift target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/-swift-target/#swifttarget","text":"[jvm]\\ fun SwiftTarget (includes: List < String > = listOf(\u201c*\u201d), excludes: List < String > = listOf(), exclusive: Boolean = true, outDirectory: String )","title":"SwiftTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/copy-target/","text":"// wire-compiler / com.squareup.wire.schema / SwiftTarget / copyTarget copyTarget \u00b6 [jvm]\\ open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"Copy target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/copy-target/#copytarget","text":"[jvm]\\ open override fun copyTarget (includes: List < String >, excludes: List < String >, exclusive: Boolean , outDirectory: String ): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"copyTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/excludes/","text":"// wire-compiler / com.squareup.wire.schema / SwiftTarget / excludes excludes \u00b6 [jvm]\\ open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/excludes/#excludes","text":"[jvm]\\ open override val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/exclusive/","text":"// wire-compiler / com.squareup.wire.schema / SwiftTarget / exclusive exclusive \u00b6 [jvm]\\ open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"Exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/exclusive/#exclusive","text":"[jvm]\\ open override val exclusive : Boolean = true True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/includes/","text":"// wire-compiler / com.squareup.wire.schema / SwiftTarget / includes includes \u00b6 [jvm]\\ open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/includes/#includes","text":"[jvm]\\ open override val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/new-handler/","text":"// wire-compiler / com.squareup.wire.schema / SwiftTarget / newHandler newHandler \u00b6 [jvm]\\ open override fun newHandler (): SchemaHandler","title":"New handler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/new-handler/#newhandler","text":"[jvm]\\ open override fun newHandler (): SchemaHandler","title":"newHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/out-directory/","text":"// wire-compiler / com.squareup.wire.schema / SwiftTarget / outDirectory outDirectory \u00b6 [jvm]\\ open override val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"Out directory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-swift-target/out-directory/#outdirectory","text":"[jvm]\\ open override val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"outDirectory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/","text":"// wire-compiler / com.squareup.wire.schema / Target Target \u00b6 [jvm]\\ sealed class Target : Serializable Functions \u00b6 Name Summary copyTarget [jvm] abstract fun copyTarget (includes: List < String > = this.includes, excludes: List < String > = this.excludes, exclusive: Boolean = this.exclusive, outDirectory: String = this.outDirectory): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] abstract fun newHandler (): SchemaHandler Properties \u00b6 Name Summary excludes [jvm] abstract val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] abstract val exclusive : Boolean True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm] abstract val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm] abstract val outDirectory : String Directory where this target will write its output. Inheritors \u00b6 Name JavaTarget KotlinTarget SwiftTarget ProtoTarget CustomTarget","title":"Index"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/#target","text":"[jvm]\\ sealed class Target : Serializable","title":"Target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/#functions","text":"Name Summary copyTarget [jvm] abstract fun copyTarget (includes: List < String > = this.includes, excludes: List < String > = this.excludes, exclusive: Boolean = this.exclusive, outDirectory: String = this.outDirectory): Target Returns a new Target object that is a copy of this one, but with the given fields updated. newHandler [jvm] abstract fun newHandler (): SchemaHandler","title":"Functions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/#properties","text":"Name Summary excludes [jvm] abstract val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. exclusive [jvm] abstract val exclusive : Boolean True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type. includes [jvm] abstract val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. outDirectory [jvm] abstract val outDirectory : String Directory where this target will write its output.","title":"Properties"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/#inheritors","text":"Name JavaTarget KotlinTarget SwiftTarget ProtoTarget CustomTarget","title":"Inheritors"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/copy-target/","text":"// wire-compiler / com.squareup.wire.schema / Target / copyTarget copyTarget \u00b6 [jvm]\\ abstract fun copyTarget (includes: List < String > = this.includes, excludes: List < String > = this.excludes, exclusive: Boolean = this.exclusive, outDirectory: String = this.outDirectory): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"Copy target"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/copy-target/#copytarget","text":"[jvm]\\ abstract fun copyTarget (includes: List < String > = this.includes, excludes: List < String > = this.excludes, exclusive: Boolean = this.exclusive, outDirectory: String = this.outDirectory): Target Returns a new Target object that is a copy of this one, but with the given fields updated.","title":"copyTarget"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/excludes/","text":"// wire-compiler / com.squareup.wire.schema / Target / excludes excludes \u00b6 [jvm]\\ abstract val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/excludes/#excludes","text":"[jvm]\\ abstract val excludes : List < String > Proto types to excluded generated sources for. Types listed here will not be generated for this target. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"excludes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/exclusive/","text":"// wire-compiler / com.squareup.wire.schema / Target / exclusive exclusive \u00b6 [jvm]\\ abstract val exclusive : Boolean True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"Exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/exclusive/#exclusive","text":"[jvm]\\ abstract val exclusive : Boolean True if types emitted for this target should not also be emitted for other targets. Use this to cause multiple outputs to be emitted for the same input type.","title":"exclusive"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/includes/","text":"// wire-compiler / com.squareup.wire.schema / Target / includes includes \u00b6 [jvm]\\ abstract val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"Includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/includes/#includes","text":"[jvm]\\ abstract val includes : List < String > Proto types to include generated sources for. Types listed here will be generated for this target and not for subsequent targets in the task. This list should contain package names (suffixed with .*) and type names only. It should not contain member names.","title":"includes"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/new-handler/","text":"// wire-compiler / com.squareup.wire.schema / Target / newHandler newHandler \u00b6 [jvm]\\ abstract fun newHandler (): SchemaHandler","title":"New handler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/new-handler/#newhandler","text":"[jvm]\\ abstract fun newHandler (): SchemaHandler","title":"newHandler"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/out-directory/","text":"// wire-compiler / com.squareup.wire.schema / Target / outDirectory outDirectory \u00b6 [jvm]\\ abstract val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"Out directory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-target/out-directory/#outdirectory","text":"[jvm]\\ abstract val outDirectory : String Directory where this target will write its output. In Gradle, when this class is serialized, this is relative to the project to improve build cacheability. Callers must use copyTarget to resolve it to real path prior to use.","title":"outDirectory"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/","text":"// wire-compiler / com.squareup.wire.schema / WireRun WireRun \u00b6 [jvm]\\ data class WireRun (sourcePath: List <Location>, protoPath: List <Location>, treeShakingRoots: List < String >, treeShakingRubbish: List < String >, moves: List <TypeMover.Move>, sinceVersion: String ?, untilVersion: String ?, onlyVersion: String ?, targets: List < Target >, modules: Map < String , WireRun.Module >, permitPackageCycles: Boolean ) An invocation of the Wire compiler. Each invocation performs the following operations: Read source .proto files directly from the file system or from archive files (ie. .jar and .zip files). This will also load imported .proto files from either the [sourcePath](source-path.md) or [protoPath](proto-path.md). The collection of loaded type declarations is called a schema. Validate the schema and resolve references between types. Optionally refactor the schema. This builds a new schema that is a subset of the original. The new schema contains only types that are both transitively reachable from [treeShakingRoots](tree-shaking-roots.md) and not in [treeShakingRubbish](tree-shaking-rubbish.md). Types are moved to different files as specified by [moves](moves.md). Call each target. It will generate sources for protos in the [sourcePath](source-path.md) that are in its [Target.includes](../-target/includes.md), that are not in its [Target.excludes](../-target/excludes.md), and that haven't already been emitted by an earlier target. Source Directories and Archives The sourcePath and protoPath lists contain locations that are of the following forms: Locations of .proto files. Locations of directories that contain a tree of .proto files. Typically this is a directory ending in src/main/proto. Locations of .zip and .jar archives that contain a tree of .proto files. Typically this is a .jar file from a Maven repository. When one .proto message imports another, the import is resolved from the base of each location and archive. If the build is in the unfortunate situation where an import could be resolved by multiple files, whichever was listed first takes precedence. Although the content and structure of sourcePath and protoPath are the same, only types defined in sourcePath are used to generate sources. Matching Packages, Types, and Members The treeShakingRoots , treeShakingRubbish , Target.includes and Target.excludes lists contain strings that select proto types and members. Strings in these lists are in one of these forms: Package names followed by .*, like squareup.dinosaurs.*. This matches types defined in the package and its descendant packages. A lone asterisk * matches all packages. Fully-qualified type names like squareup.dinosaurs.Dinosaur. Types may be messages, enums, or services. Fully-qualified member names like squareup.dinosaurs.Dinosaur#name. These are type names followed by # followed by a member name. Members may be message fields, enum constants, or service RPCs. It is an error to specify mutually-redundant values in any of these lists. For example, the list [squareup.dinosaurs, squareup.dinosaurs.Dinosaur] is invalid because the second element is already matched by the first. Every element in each lists must apply to at least one declaration. Otherwise that option is unnecessary and a possible typo. Composability There are many moving parts in this system! For most applications it is safe to use sourcePath and targets only. The other options are for the benefit of large and modular applications. Use protoPath when one proto module depends on another proto module. \u00b6 These .proto files are used for checking dependencies only. It is assumed that the sources for these protos are generated elsewhere. Use tree shaking to remove unwanted types. \u00b6 Tree shaking can be used to create a small-as-possible generated footprint even if the source declarations are large. This works like ProGuard and other code shrinking compilers: it allows you to benefit from a shared codebase without creating a large artifact. Use multiple targets to split generated code across multiple programming languages. \u00b6 If your project is already using generated Java, it\u2019s difficult to switch to generated Kotlin. Instead of switching everything over at once you can use multiple targets to switch over incrementally. Targets consume their types; subsequent targets get whatever types are left over. Constructors \u00b6 WireRun [jvm] fun WireRun (sourcePath: List <Location>, protoPath: List <Location> = listOf(), treeShakingRoots: List < String > = listOf(\u201c*\u201d), treeShakingRubbish: List < String > = listOf(), moves: List <TypeMover.Move> = listOf(), sinceVersion: String ? = null, untilVersion: String ? = null, onlyVersion: String ? = null, targets: List < Target >, modules: Map < String , WireRun.Module > = emptyMap(), permitPackageCycles: Boolean = false) Types \u00b6 Name Summary Module [jvm] data class Module (dependencies: Set < String >, pruningRules: PruningRules?) Functions \u00b6 Name Summary execute [jvm] fun execute (fs: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger()) Properties \u00b6 Name Summary modules [jvm] val modules : Map < String , WireRun.Module > A map from module dir to module info which dictates how the loaded types are partitioned and generated. moves [jvm] val moves : List <TypeMover.Move> Types to move before generating code or producing other output. Use this with ProtoTarget to refactor proto schemas safely. onlyVersion [jvm] val onlyVersion : String ? = null The only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained. This field is mutually exclusive with sinceVersion and untilVersion. permitPackageCycles [jvm] val permitPackageCycles : Boolean = false If true, no validation will be executed to check package cycles. protoPath [jvm] val protoPath : List <Location> Sources .proto files for this task to use when resolving references. sinceVersion [jvm] val sinceVersion : String ? = null The exclusive lower bound of the version range. Fields with until values greater than this are retained. sourcePath [jvm] val sourcePath : List <Location> Source .proto files for this task to generate from. targets [jvm] val targets : List < Target > Action to take with the loaded, resolved, and possibly-pruned schema. treeShakingRoots [jvm] val treeShakingRoots : List < String > The roots of the schema model. Wire will prune the schema model to only include types in this list and the types transitively required by them. treeShakingRubbish [jvm] val treeShakingRubbish : List < String > Types and members that will be stripped from the schema model. Wire will remove the elements themselves and also all references to them. untilVersion [jvm] val untilVersion : String ? = null The inclusive upper bound of the version range. Fields with since values less than or equal to this are retained.","title":"Index"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#wirerun","text":"[jvm]\\ data class WireRun (sourcePath: List <Location>, protoPath: List <Location>, treeShakingRoots: List < String >, treeShakingRubbish: List < String >, moves: List <TypeMover.Move>, sinceVersion: String ?, untilVersion: String ?, onlyVersion: String ?, targets: List < Target >, modules: Map < String , WireRun.Module >, permitPackageCycles: Boolean ) An invocation of the Wire compiler. Each invocation performs the following operations: Read source .proto files directly from the file system or from archive files (ie. .jar and .zip files). This will also load imported .proto files from either the [sourcePath](source-path.md) or [protoPath](proto-path.md). The collection of loaded type declarations is called a schema. Validate the schema and resolve references between types. Optionally refactor the schema. This builds a new schema that is a subset of the original. The new schema contains only types that are both transitively reachable from [treeShakingRoots](tree-shaking-roots.md) and not in [treeShakingRubbish](tree-shaking-rubbish.md). Types are moved to different files as specified by [moves](moves.md). Call each target. It will generate sources for protos in the [sourcePath](source-path.md) that are in its [Target.includes](../-target/includes.md), that are not in its [Target.excludes](../-target/excludes.md), and that haven't already been emitted by an earlier target. Source Directories and Archives The sourcePath and protoPath lists contain locations that are of the following forms: Locations of .proto files. Locations of directories that contain a tree of .proto files. Typically this is a directory ending in src/main/proto. Locations of .zip and .jar archives that contain a tree of .proto files. Typically this is a .jar file from a Maven repository. When one .proto message imports another, the import is resolved from the base of each location and archive. If the build is in the unfortunate situation where an import could be resolved by multiple files, whichever was listed first takes precedence. Although the content and structure of sourcePath and protoPath are the same, only types defined in sourcePath are used to generate sources. Matching Packages, Types, and Members The treeShakingRoots , treeShakingRubbish , Target.includes and Target.excludes lists contain strings that select proto types and members. Strings in these lists are in one of these forms: Package names followed by .*, like squareup.dinosaurs.*. This matches types defined in the package and its descendant packages. A lone asterisk * matches all packages. Fully-qualified type names like squareup.dinosaurs.Dinosaur. Types may be messages, enums, or services. Fully-qualified member names like squareup.dinosaurs.Dinosaur#name. These are type names followed by # followed by a member name. Members may be message fields, enum constants, or service RPCs. It is an error to specify mutually-redundant values in any of these lists. For example, the list [squareup.dinosaurs, squareup.dinosaurs.Dinosaur] is invalid because the second element is already matched by the first. Every element in each lists must apply to at least one declaration. Otherwise that option is unnecessary and a possible typo. Composability There are many moving parts in this system! For most applications it is safe to use sourcePath and targets only. The other options are for the benefit of large and modular applications.","title":"WireRun"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#use-protopath-when-one-proto-module-depends-on-another-proto-module","text":"These .proto files are used for checking dependencies only. It is assumed that the sources for these protos are generated elsewhere.","title":"Use protoPath when one proto module depends on another proto module."},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#use-tree-shaking-to-remove-unwanted-types","text":"Tree shaking can be used to create a small-as-possible generated footprint even if the source declarations are large. This works like ProGuard and other code shrinking compilers: it allows you to benefit from a shared codebase without creating a large artifact.","title":"Use tree shaking to remove unwanted types."},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#use-multiple-targets-to-split-generated-code-across-multiple-programming-languages","text":"If your project is already using generated Java, it\u2019s difficult to switch to generated Kotlin. Instead of switching everything over at once you can use multiple targets to switch over incrementally. Targets consume their types; subsequent targets get whatever types are left over.","title":"Use multiple targets to split generated code across multiple programming languages."},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#constructors","text":"WireRun [jvm] fun WireRun (sourcePath: List <Location>, protoPath: List <Location> = listOf(), treeShakingRoots: List < String > = listOf(\u201c*\u201d), treeShakingRubbish: List < String > = listOf(), moves: List <TypeMover.Move> = listOf(), sinceVersion: String ? = null, untilVersion: String ? = null, onlyVersion: String ? = null, targets: List < Target >, modules: Map < String , WireRun.Module > = emptyMap(), permitPackageCycles: Boolean = false)","title":"Constructors"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#types","text":"Name Summary Module [jvm] data class Module (dependencies: Set < String >, pruningRules: PruningRules?)","title":"Types"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#functions","text":"Name Summary execute [jvm] fun execute (fs: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger())","title":"Functions"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/#properties","text":"Name Summary modules [jvm] val modules : Map < String , WireRun.Module > A map from module dir to module info which dictates how the loaded types are partitioned and generated. moves [jvm] val moves : List <TypeMover.Move> Types to move before generating code or producing other output. Use this with ProtoTarget to refactor proto schemas safely. onlyVersion [jvm] val onlyVersion : String ? = null The only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained. This field is mutually exclusive with sinceVersion and untilVersion. permitPackageCycles [jvm] val permitPackageCycles : Boolean = false If true, no validation will be executed to check package cycles. protoPath [jvm] val protoPath : List <Location> Sources .proto files for this task to use when resolving references. sinceVersion [jvm] val sinceVersion : String ? = null The exclusive lower bound of the version range. Fields with until values greater than this are retained. sourcePath [jvm] val sourcePath : List <Location> Source .proto files for this task to generate from. targets [jvm] val targets : List < Target > Action to take with the loaded, resolved, and possibly-pruned schema. treeShakingRoots [jvm] val treeShakingRoots : List < String > The roots of the schema model. Wire will prune the schema model to only include types in this list and the types transitively required by them. treeShakingRubbish [jvm] val treeShakingRubbish : List < String > Types and members that will be stripped from the schema model. Wire will remove the elements themselves and also all references to them. untilVersion [jvm] val untilVersion : String ? = null The inclusive upper bound of the version range. Fields with since values less than or equal to this are retained.","title":"Properties"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-wire-run/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / WireRun WireRun \u00b6 [jvm]\\ fun WireRun (sourcePath: List <Location>, protoPath: List <Location> = listOf(), treeShakingRoots: List < String > = listOf(\u201c*\u201d), treeShakingRubbish: List < String > = listOf(), moves: List <TypeMover.Move> = listOf(), sinceVersion: String ? = null, untilVersion: String ? = null, onlyVersion: String ? = null, targets: List < Target >, modules: Map < String , WireRun.Module > = emptyMap(), permitPackageCycles: Boolean = false)","title":" wire run"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-wire-run/#wirerun","text":"[jvm]\\ fun WireRun (sourcePath: List <Location>, protoPath: List <Location> = listOf(), treeShakingRoots: List < String > = listOf(\u201c*\u201d), treeShakingRubbish: List < String > = listOf(), moves: List <TypeMover.Move> = listOf(), sinceVersion: String ? = null, untilVersion: String ? = null, onlyVersion: String ? = null, targets: List < Target >, modules: Map < String , WireRun.Module > = emptyMap(), permitPackageCycles: Boolean = false)","title":"WireRun"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/execute/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / execute execute \u00b6 [jvm]\\ fun execute (fs: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger())","title":"Execute"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/execute/#execute","text":"[jvm]\\ fun execute (fs: FileSystem = FileSystem.SYSTEM, logger: WireLogger = ConsoleWireLogger())","title":"execute"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/modules/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / modules modules \u00b6 [jvm]\\ val modules : Map < String , WireRun.Module > A map from module dir to module info which dictates how the loaded types are partitioned and generated. When empty everything is generated in the root output directory. If desired, multiple modules can be specified along with dependencies between them. Types which appear in dependencies will not be re-generated.","title":"Modules"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/modules/#modules","text":"[jvm]\\ val modules : Map < String , WireRun.Module > A map from module dir to module info which dictates how the loaded types are partitioned and generated. When empty everything is generated in the root output directory. If desired, multiple modules can be specified along with dependencies between them. Types which appear in dependencies will not be re-generated.","title":"modules"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/moves/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / moves moves \u00b6 [jvm]\\ val moves : List <TypeMover.Move> Types to move before generating code or producing other output. Use this with ProtoTarget to refactor proto schemas safely.","title":"Moves"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/moves/#moves","text":"[jvm]\\ val moves : List <TypeMover.Move> Types to move before generating code or producing other output. Use this with ProtoTarget to refactor proto schemas safely.","title":"moves"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/only-version/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / onlyVersion onlyVersion \u00b6 [jvm]\\ val onlyVersion : String ? = null The only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained. This field is mutually exclusive with sinceVersion and untilVersion.","title":"Only version"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/only-version/#onlyversion","text":"[jvm]\\ val onlyVersion : String ? = null The only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained. This field is mutually exclusive with sinceVersion and untilVersion.","title":"onlyVersion"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/permit-package-cycles/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / permitPackageCycles permitPackageCycles \u00b6 [jvm]\\ val permitPackageCycles : Boolean = false If true, no validation will be executed to check package cycles.","title":"Permit package cycles"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/permit-package-cycles/#permitpackagecycles","text":"[jvm]\\ val permitPackageCycles : Boolean = false If true, no validation will be executed to check package cycles.","title":"permitPackageCycles"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/proto-path/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / protoPath protoPath \u00b6 [jvm]\\ val protoPath : List <Location> Sources .proto files for this task to use when resolving references.","title":"Proto path"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/proto-path/#protopath","text":"[jvm]\\ val protoPath : List <Location> Sources .proto files for this task to use when resolving references.","title":"protoPath"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/since-version/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / sinceVersion sinceVersion \u00b6 [jvm]\\ val sinceVersion : String ? = null The exclusive lower bound of the version range. Fields with until values greater than this are retained.","title":"Since version"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/since-version/#sinceversion","text":"[jvm]\\ val sinceVersion : String ? = null The exclusive lower bound of the version range. Fields with until values greater than this are retained.","title":"sinceVersion"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/source-path/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / sourcePath sourcePath \u00b6 [jvm]\\ val sourcePath : List <Location> Source .proto files for this task to generate from.","title":"Source path"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/source-path/#sourcepath","text":"[jvm]\\ val sourcePath : List <Location> Source .proto files for this task to generate from.","title":"sourcePath"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/targets/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / targets targets \u00b6 [jvm]\\ val targets : List < Target > Action to take with the loaded, resolved, and possibly-pruned schema.","title":"Targets"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/targets/#targets","text":"[jvm]\\ val targets : List < Target > Action to take with the loaded, resolved, and possibly-pruned schema.","title":"targets"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/tree-shaking-roots/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / treeShakingRoots treeShakingRoots \u00b6 [jvm]\\ val treeShakingRoots : List < String > The roots of the schema model. Wire will prune the schema model to only include types in this list and the types transitively required by them. If a member is included in this list then the enclosing type is included but its other members are not. For example, if squareup.dinosaurs.Dinosaur#name is in this list then the emitted source of the Dinosaur message will have the name field, but not the length_meters or mass_kilograms fields.","title":"Tree shaking roots"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/tree-shaking-roots/#treeshakingroots","text":"[jvm]\\ val treeShakingRoots : List < String > The roots of the schema model. Wire will prune the schema model to only include types in this list and the types transitively required by them. If a member is included in this list then the enclosing type is included but its other members are not. For example, if squareup.dinosaurs.Dinosaur#name is in this list then the emitted source of the Dinosaur message will have the name field, but not the length_meters or mass_kilograms fields.","title":"treeShakingRoots"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/tree-shaking-rubbish/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / treeShakingRubbish treeShakingRubbish \u00b6 [jvm]\\ val treeShakingRubbish : List < String > Types and members that will be stripped from the schema model. Wire will remove the elements themselves and also all references to them.","title":"Tree shaking rubbish"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/tree-shaking-rubbish/#treeshakingrubbish","text":"[jvm]\\ val treeShakingRubbish : List < String > Types and members that will be stripped from the schema model. Wire will remove the elements themselves and also all references to them.","title":"treeShakingRubbish"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/until-version/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / untilVersion untilVersion \u00b6 [jvm]\\ val untilVersion : String ? = null The inclusive upper bound of the version range. Fields with since values less than or equal to this are retained.","title":"Until version"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/until-version/#untilversion","text":"[jvm]\\ val untilVersion : String ? = null The inclusive upper bound of the version range. Fields with since values less than or equal to this are retained.","title":"untilVersion"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / Module Module \u00b6 [jvm]\\ data class Module (dependencies: Set < String >, pruningRules: PruningRules?) Properties \u00b6 Name Summary dependencies [jvm] val dependencies : Set < String > pruningRules [jvm] val pruningRules : PruningRules? = null","title":"Index"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/#module","text":"[jvm]\\ data class Module (dependencies: Set < String >, pruningRules: PruningRules?)","title":"Module"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/#properties","text":"Name Summary dependencies [jvm] val dependencies : Set < String > pruningRules [jvm] val pruningRules : PruningRules? = null","title":"Properties"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/-module/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / Module / Module Module \u00b6 [jvm]\\ fun Module (dependencies: Set < String > = emptySet(), pruningRules: PruningRules? = null)","title":" module"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/-module/#module","text":"[jvm]\\ fun Module (dependencies: Set < String > = emptySet(), pruningRules: PruningRules? = null)","title":"Module"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/dependencies/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / Module / dependencies dependencies \u00b6 [jvm]\\ val dependencies : Set < String >","title":"Dependencies"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/dependencies/#dependencies","text":"[jvm]\\ val dependencies : Set < String >","title":"dependencies"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/pruning-rules/","text":"// wire-compiler / com.squareup.wire.schema / WireRun / Module / pruningRules pruningRules \u00b6 [jvm]\\ val pruningRules : PruningRules? = null","title":"Pruning rules"},{"location":"3.x/wire-compiler/com.squareup.wire.schema/-wire-run/-module/pruning-rules/#pruningrules","text":"[jvm]\\ val pruningRules : PruningRules? = null","title":"pruningRules"},{"location":"3.x/wire-grpc-client/com.squareup.wire/","text":"// wire-grpc-client / com.squareup.wire Package com.squareup.wire \u00b6 Types \u00b6 Name Summary GrpcCall [common] interface GrpcCall < S : Any , R : Any > A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. GrpcClient [common, js, jvm, native] [common, js, jvm, native] class GrpcClient GrpcException [common] class GrpcException (grpcStatus: GrpcStatus , grpcMessage: String ?) : IOException GrpcHeaders [common, js, native, jvm] [common, js, native] class GrpcHeaders [jvm] typealias GrpcHeaders = Headers GrpcHttpUrl [common, js, native, jvm] [common, js, native] class GrpcHttpUrl [jvm] typealias GrpcHttpUrl = HttpUrl GrpcMethod [common] class GrpcMethod < S : Any , R : Any >(path: String , requestAdapter: ProtoAdapter< S >, responseAdapter: ProtoAdapter< R >) GrpcRequest [common, js, native, jvm] [common, js, native] class GrpcRequest [jvm] typealias GrpcRequest = Request GrpcRequestBody [common, js, native, jvm] [common, js, native] abstract class GrpcRequestBody [jvm] typealias GrpcRequestBody = RequestBody GrpcRequestBuilder [common, js, native, jvm] [common, js, native] open class GrpcRequestBuilder [jvm] typealias GrpcRequestBuilder = Request.Builder GrpcResponse [common, js, native, jvm] [common, js, native] class GrpcResponse [jvm] typealias GrpcResponse = Response GrpcResponseBody [common, js, native, jvm] [common, js, native] abstract class GrpcResponseBody [jvm] typealias GrpcResponseBody = ResponseBody GrpcStatus [common] class GrpcStatus GrpcStreamingCall [common] interface GrpcStreamingCall < S : Any , R : Any > A single streaming call to a remote server. This class handles three streaming call types: WireGrpcExperimental [common] @ExperimentalCoroutinesApi @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class WireGrpcExperimental Marker annotation for experimental Wire gRPC features. Functions \u00b6 Name Summary GrpcCall [jvm] @ JvmName (name = \u201cgrpcCall\u201d) fun < S : Any , R : Any > GrpcCall (function: ( S ) -> R ): GrpcCall< S , R > Returns a new instance of GrpcCall that can be used for a single call to execute, executeBlocking, or enqueue. GrpcStreamingCall [jvm] @ JvmName (name = \u201cgrpcStreamingCall\u201d) fun < S : Any , R : Any > GrpcStreamingCall (function: suspend (ReceiveChannel< S >, SendChannel< R >) -> Unit ): GrpcStreamingCall< S , R > Returns a new instance of GrpcStreamingCall that can be used for a single call to executeIn or executeBlocking. toHttpUrl [common, js, jvm, native] [common, js, jvm, native] fun String . toHttpUrl (): GrpcHttpUrl","title":"wire-grpc-client"},{"location":"3.x/wire-grpc-client/com.squareup.wire/#package-comsquareupwire","text":"","title":"Package com.squareup.wire"},{"location":"3.x/wire-grpc-client/com.squareup.wire/#types","text":"Name Summary GrpcCall [common] interface GrpcCall < S : Any , R : Any > A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. GrpcClient [common, js, jvm, native] [common, js, jvm, native] class GrpcClient GrpcException [common] class GrpcException (grpcStatus: GrpcStatus , grpcMessage: String ?) : IOException GrpcHeaders [common, js, native, jvm] [common, js, native] class GrpcHeaders [jvm] typealias GrpcHeaders = Headers GrpcHttpUrl [common, js, native, jvm] [common, js, native] class GrpcHttpUrl [jvm] typealias GrpcHttpUrl = HttpUrl GrpcMethod [common] class GrpcMethod < S : Any , R : Any >(path: String , requestAdapter: ProtoAdapter< S >, responseAdapter: ProtoAdapter< R >) GrpcRequest [common, js, native, jvm] [common, js, native] class GrpcRequest [jvm] typealias GrpcRequest = Request GrpcRequestBody [common, js, native, jvm] [common, js, native] abstract class GrpcRequestBody [jvm] typealias GrpcRequestBody = RequestBody GrpcRequestBuilder [common, js, native, jvm] [common, js, native] open class GrpcRequestBuilder [jvm] typealias GrpcRequestBuilder = Request.Builder GrpcResponse [common, js, native, jvm] [common, js, native] class GrpcResponse [jvm] typealias GrpcResponse = Response GrpcResponseBody [common, js, native, jvm] [common, js, native] abstract class GrpcResponseBody [jvm] typealias GrpcResponseBody = ResponseBody GrpcStatus [common] class GrpcStatus GrpcStreamingCall [common] interface GrpcStreamingCall < S : Any , R : Any > A single streaming call to a remote server. This class handles three streaming call types: WireGrpcExperimental [common] @ExperimentalCoroutinesApi @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class WireGrpcExperimental Marker annotation for experimental Wire gRPC features.","title":"Types"},{"location":"3.x/wire-grpc-client/com.squareup.wire/#functions","text":"Name Summary GrpcCall [jvm] @ JvmName (name = \u201cgrpcCall\u201d) fun < S : Any , R : Any > GrpcCall (function: ( S ) -> R ): GrpcCall< S , R > Returns a new instance of GrpcCall that can be used for a single call to execute, executeBlocking, or enqueue. GrpcStreamingCall [jvm] @ JvmName (name = \u201cgrpcStreamingCall\u201d) fun < S : Any , R : Any > GrpcStreamingCall (function: suspend (ReceiveChannel< S >, SendChannel< R >) -> Unit ): GrpcStreamingCall< S , R > Returns a new instance of GrpcStreamingCall that can be used for a single call to executeIn or executeBlocking. toHttpUrl [common, js, jvm, native] [common, js, jvm, native] fun String . toHttpUrl (): GrpcHttpUrl","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall GrpcCall \u00b6 [jvm]\\ @ JvmName (name = \u201cgrpcCall\u201d) fun < S : Any , R : Any > GrpcCall (function: ( S ) -> R ): GrpcCall< S , R > Returns a new instance of GrpcCall that can be used for a single call to execute, executeBlocking, or enqueue. The returned instance executes function synchronously on the calling thread, regardless of which blocking mode is used. If function throws, the thrown exception will be wrapped in an IOException. This method is useful when implementing the interfaces that are generated by Wire: override fun GetFeature(): GrpcCall<Point, Feature> {\\ return GrpcCall<Point, Feature> { request ->\\ return@GrpcCall lookupNearestFeature(request.latitude, request.longitude)\\ }\\ } It is succinct when used in an expression function: override fun GetFeature() = GrpcCall<Point, Feature> { request ->\\ return@GrpcCall lookupNearestFeature(request.latitude, request.longitude)\\ }","title":" grpc call"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#grpccall","text":"[jvm]\\ @ JvmName (name = \u201cgrpcCall\u201d) fun < S : Any , R : Any > GrpcCall (function: ( S ) -> R ): GrpcCall< S , R > Returns a new instance of GrpcCall that can be used for a single call to execute, executeBlocking, or enqueue. The returned instance executes function synchronously on the calling thread, regardless of which blocking mode is used. If function throws, the thrown exception will be wrapped in an IOException. This method is useful when implementing the interfaces that are generated by Wire: override fun GetFeature(): GrpcCall<Point, Feature> {\\ return GrpcCall<Point, Feature> { request ->\\ return@GrpcCall lookupNearestFeature(request.latitude, request.longitude)\\ }\\ } It is succinct when used in an expression function: override fun GetFeature() = GrpcCall<Point, Feature> { request ->\\ return@GrpcCall lookupNearestFeature(request.latitude, request.longitude)\\ }","title":"GrpcCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall GrpcStreamingCall \u00b6 [jvm]\\ @ JvmName (name = \u201cgrpcStreamingCall\u201d) fun < S : Any , R : Any > GrpcStreamingCall (function: suspend (ReceiveChannel< S >, SendChannel< R >) -> Unit ): GrpcStreamingCall< S , R > Returns a new instance of GrpcStreamingCall that can be used for a single call to executeIn or executeBlocking. The returned instance launches function on Dispatchers.IO. The function must close the SendChannel when it has no more messages to transmit. If function throws, both channels will be closed using the thrown exception as a cause. This method is useful when implementing the interfaces that are generated by Wire: override fun RouteChat(): GrpcStreamingCall<RouteNote, RouteNote> {\\ return GrpcStreamingCall { requests, responses ->\\ requests.consumeEach { note ->\\ responses.send(translateNote(note))\\ }\\ responses.close()\\ }\\ } It is succinct when used in an expression function: override fun RouteChat() = GrpcStreamingCall<RouteNote, RouteNote> { requests, responses ->\\ requests.consumeEach { note ->\\ responses.send(translateNote(note))\\ }\\ responses.close()\\ }","title":" grpc streaming call"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#grpcstreamingcall","text":"[jvm]\\ @ JvmName (name = \u201cgrpcStreamingCall\u201d) fun < S : Any , R : Any > GrpcStreamingCall (function: suspend (ReceiveChannel< S >, SendChannel< R >) -> Unit ): GrpcStreamingCall< S , R > Returns a new instance of GrpcStreamingCall that can be used for a single call to executeIn or executeBlocking. The returned instance launches function on Dispatchers.IO. The function must close the SendChannel when it has no more messages to transmit. If function throws, both channels will be closed using the thrown exception as a cause. This method is useful when implementing the interfaces that are generated by Wire: override fun RouteChat(): GrpcStreamingCall<RouteNote, RouteNote> {\\ return GrpcStreamingCall { requests, responses ->\\ requests.consumeEach { note ->\\ responses.send(translateNote(note))\\ }\\ responses.close()\\ }\\ } It is succinct when used in an expression function: override fun RouteChat() = GrpcStreamingCall<RouteNote, RouteNote> { requests, responses ->\\ requests.consumeEach { note ->\\ responses.send(translateNote(note))\\ }\\ responses.close()\\ }","title":"GrpcStreamingCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/to-http-url/","text":"// wire-grpc-client / com.squareup.wire / toHttpUrl toHttpUrl \u00b6 [common, js, jvm, native]\\ [common, js, jvm, native]\\ fun String . toHttpUrl (): GrpcHttpUrl","title":"To http url"},{"location":"3.x/wire-grpc-client/com.squareup.wire/to-http-url/#tohttpurl","text":"[common, js, jvm, native]\\ [common, js, jvm, native]\\ fun String . toHttpUrl (): GrpcHttpUrl","title":"toHttpUrl"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall GrpcCall \u00b6 [common]\\ interface GrpcCall < S : Any , R : Any > A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. gRPC calls can be suspending , blocking , or asynchronous . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same. Types \u00b6 Name Summary Callback [common] interface Callback < S : Any , R : Any > Functions \u00b6 Name Summary cancel [common] abstract fun cancel () Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone [common] abstract fun clone (): GrpcCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. enqueue [common] abstract fun enqueue (request: S , callback: GrpcCall.Callback < S , R >) Enqueues this call for asynchronous execution. The callback will be invoked on the client\u2019s dispatcher thread when the call completes. execute [common] abstract suspend fun execute (request: S ): R Invokes the call immediately and suspends until its response is received. executeBlocking [common] abstract fun executeBlocking (request: S ): R Invokes the call immediately and blocks until its response is received. isCanceled [common] abstract fun isCanceled (): Boolean True if cancel was called. isExecuted [common] abstract fun isExecuted (): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once. Properties \u00b6 Name Summary method [common] abstract val method : GrpcMethod < S , R > The method invoked by this call. requestMetadata [common] abstract var requestMetadata : Map < String , String > A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed. responseMetadata [common] abstract val responseMetadata : Map < String , String >? A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present. timeout [common] abstract val timeout : Timeout Configures how long the call can take to complete before it is automatically canceled.","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#grpccall","text":"[common]\\ interface GrpcCall < S : Any , R : Any > A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. gRPC calls can be suspending , blocking , or asynchronous . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same.","title":"GrpcCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#types","text":"Name Summary Callback [common] interface Callback < S : Any , R : Any >","title":"Types"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#functions","text":"Name Summary cancel [common] abstract fun cancel () Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone [common] abstract fun clone (): GrpcCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. enqueue [common] abstract fun enqueue (request: S , callback: GrpcCall.Callback < S , R >) Enqueues this call for asynchronous execution. The callback will be invoked on the client\u2019s dispatcher thread when the call completes. execute [common] abstract suspend fun execute (request: S ): R Invokes the call immediately and suspends until its response is received. executeBlocking [common] abstract fun executeBlocking (request: S ): R Invokes the call immediately and blocks until its response is received. isCanceled [common] abstract fun isCanceled (): Boolean True if cancel was called. isExecuted [common] abstract fun isExecuted (): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once.","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#properties","text":"Name Summary method [common] abstract val method : GrpcMethod < S , R > The method invoked by this call. requestMetadata [common] abstract var requestMetadata : Map < String , String > A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed. responseMetadata [common] abstract val responseMetadata : Map < String , String >? A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present. timeout [common] abstract val timeout : Timeout Configures how long the call can take to complete before it is automatically canceled.","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/cancel/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / cancel cancel \u00b6 [common]\\ abstract fun cancel () Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"Cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/cancel/#cancel","text":"[common]\\ abstract fun cancel () Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/clone/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / clone clone \u00b6 [common]\\ abstract fun clone (): GrpcCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"Clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/clone/#clone","text":"[common]\\ abstract fun clone (): GrpcCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/enqueue/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / enqueue enqueue \u00b6 [common]\\ abstract fun enqueue (request: S , callback: GrpcCall.Callback < S , R >) Enqueues this call for asynchronous execution. The callback will be invoked on the client\u2019s dispatcher thread when the call completes.","title":"Enqueue"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/enqueue/#enqueue","text":"[common]\\ abstract fun enqueue (request: S , callback: GrpcCall.Callback < S , R >) Enqueues this call for asynchronous execution. The callback will be invoked on the client\u2019s dispatcher thread when the call completes.","title":"enqueue"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute-blocking/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / executeBlocking executeBlocking \u00b6 [common]\\ abstract fun executeBlocking (request: S ): R Invokes the call immediately and blocks until its response is received.","title":"Execute blocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute-blocking/#executeblocking","text":"[common]\\ abstract fun executeBlocking (request: S ): R Invokes the call immediately and blocks until its response is received.","title":"executeBlocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / execute execute \u00b6 [common]\\ abstract suspend fun execute (request: S ): R Invokes the call immediately and suspends until its response is received.","title":"Execute"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute/#execute","text":"[common]\\ abstract suspend fun execute (request: S ): R Invokes the call immediately and suspends until its response is received.","title":"execute"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-canceled/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / isCanceled isCanceled \u00b6 [common]\\ abstract fun isCanceled (): Boolean True if cancel was called.","title":"Is canceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-canceled/#iscanceled","text":"[common]\\ abstract fun isCanceled (): Boolean True if cancel was called.","title":"isCanceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-executed/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / isExecuted isExecuted \u00b6 [common]\\ abstract fun isExecuted (): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once.","title":"Is executed"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-executed/#isexecuted","text":"[common]\\ abstract fun isExecuted (): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once.","title":"isExecuted"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/method/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / method method \u00b6 [common]\\ abstract val method : GrpcMethod < S , R > The method invoked by this call.","title":"Method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/method/#method","text":"[common]\\ abstract val method : GrpcMethod < S , R > The method invoked by this call.","title":"method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/request-metadata/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / requestMetadata requestMetadata \u00b6 [common]\\ abstract var requestMetadata : Map < String , String > A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed.","title":"Request metadata"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/request-metadata/#requestmetadata","text":"[common]\\ abstract var requestMetadata : Map < String , String > A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed.","title":"requestMetadata"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/response-metadata/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / responseMetadata responseMetadata \u00b6 [common]\\ abstract val responseMetadata : Map < String , String >? A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present.","title":"Response metadata"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/response-metadata/#responsemetadata","text":"[common]\\ abstract val responseMetadata : Map < String , String >? A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present.","title":"responseMetadata"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/timeout/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / timeout timeout \u00b6 [common]\\ abstract val timeout : Timeout Configures how long the call can take to complete before it is automatically canceled.","title":"Timeout"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/timeout/#timeout","text":"[common]\\ abstract val timeout : Timeout Configures how long the call can take to complete before it is automatically canceled.","title":"timeout"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / Callback Callback \u00b6 [common]\\ interface Callback < S : Any , R : Any > Functions \u00b6 Name Summary onFailure [common] abstract fun onFailure (call: GrpcCall < S , R >, exception: IOException) onSuccess [common] abstract fun onSuccess (call: GrpcCall < S , R >, response: R )","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/#callback","text":"[common]\\ interface Callback < S : Any , R : Any >","title":"Callback"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/#functions","text":"Name Summary onFailure [common] abstract fun onFailure (call: GrpcCall < S , R >, exception: IOException) onSuccess [common] abstract fun onSuccess (call: GrpcCall < S , R >, response: R )","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-failure/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / Callback / onFailure onFailure \u00b6 [common]\\ abstract fun onFailure (call: GrpcCall < S , R >, exception: IOException)","title":"On failure"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-failure/#onfailure","text":"[common]\\ abstract fun onFailure (call: GrpcCall < S , R >, exception: IOException)","title":"onFailure"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-success/","text":"// wire-grpc-client / com.squareup.wire / GrpcCall / Callback / onSuccess onSuccess \u00b6 [common]\\ abstract fun onSuccess (call: GrpcCall < S , R >, response: R )","title":"On success"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-success/#onsuccess","text":"[common]\\ abstract fun onSuccess (call: GrpcCall < S , R >, response: R )","title":"onSuccess"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient GrpcClient \u00b6 [common, js, jvm, native]\\ class GrpcClient Types \u00b6 Name Summary Builder [jvm] class Builder Functions \u00b6 Name Summary create [jvm] inline fun < T : Service> create (): T Returns a T that makes gRPC calls using this client. [jvm] fun < T : Service> create (service: KClass < T >): T Returns a service that makes gRPC calls using this client. newBuilder [jvm] fun newBuilder (): GrpcClient.Builder newCall [common, js, jvm, native] [common] fun < S : Any , R : Any > newCall (method: GrpcMethod < S , R >): GrpcCall < S , R > [js, jvm, native] fun < S : Any , R : Any > newCall (method: GrpcMethod< S , R >): GrpcCall< S , R > newStreamingCall [common, js, jvm, native] [common] fun < S : Any , R : Any > newStreamingCall (method: GrpcMethod < S , R >): GrpcStreamingCall < S , R > [js, jvm, native] fun < S : Any , R : Any > newStreamingCall (method: GrpcMethod< S , R >): GrpcStreamingCall< S , R >","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#grpcclient","text":"[common, js, jvm, native]\\ class GrpcClient","title":"GrpcClient"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#types","text":"Name Summary Builder [jvm] class Builder","title":"Types"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#functions","text":"Name Summary create [jvm] inline fun < T : Service> create (): T Returns a T that makes gRPC calls using this client. [jvm] fun < T : Service> create (service: KClass < T >): T Returns a service that makes gRPC calls using this client. newBuilder [jvm] fun newBuilder (): GrpcClient.Builder newCall [common, js, jvm, native] [common] fun < S : Any , R : Any > newCall (method: GrpcMethod < S , R >): GrpcCall < S , R > [js, jvm, native] fun < S : Any , R : Any > newCall (method: GrpcMethod< S , R >): GrpcCall< S , R > newStreamingCall [common, js, jvm, native] [common] fun < S : Any , R : Any > newStreamingCall (method: GrpcMethod < S , R >): GrpcStreamingCall < S , R > [js, jvm, native] fun < S : Any , R : Any > newStreamingCall (method: GrpcMethod< S , R >): GrpcStreamingCall< S , R >","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-grpc-client/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / GrpcClient GrpcClient \u00b6 [js, native]\\ [js, native]\\ fun GrpcClient ()","title":" grpc client"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-grpc-client/#grpcclient","text":"[js, native]\\ [js, native]\\ fun GrpcClient ()","title":"GrpcClient"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/create/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / create create \u00b6 [jvm]\\ inline fun < T : Service> create (): T Returns a T that makes gRPC calls using this client. [jvm]\\ fun < T : Service> create (service: KClass < T >): T Returns a service that makes gRPC calls using this client.","title":"Create"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/create/#create","text":"[jvm]\\ inline fun < T : Service> create (): T Returns a T that makes gRPC calls using this client. [jvm]\\ fun < T : Service> create (service: KClass < T >): T Returns a service that makes gRPC calls using this client.","title":"create"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-builder/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / newBuilder newBuilder \u00b6 [jvm]\\ fun newBuilder (): GrpcClient.Builder","title":"New builder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-builder/#newbuilder","text":"[jvm]\\ fun newBuilder (): GrpcClient.Builder","title":"newBuilder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-call/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / newCall newCall \u00b6 [common, js, jvm, native]\\ [common]\\ fun < S : Any , R : Any > newCall (method: GrpcMethod < S , R >): GrpcCall < S , R > [js, jvm, native]\\ fun < S : Any , R : Any > newCall (method: GrpcMethod< S , R >): GrpcCall< S , R >","title":"New call"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-call/#newcall","text":"[common, js, jvm, native]\\ [common]\\ fun < S : Any , R : Any > newCall (method: GrpcMethod < S , R >): GrpcCall < S , R > [js, jvm, native]\\ fun < S : Any , R : Any > newCall (method: GrpcMethod< S , R >): GrpcCall< S , R >","title":"newCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-streaming-call/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / newStreamingCall newStreamingCall \u00b6 [common, js, jvm, native]\\ [common]\\ fun < S : Any , R : Any > newStreamingCall (method: GrpcMethod < S , R >): GrpcStreamingCall < S , R > [js, jvm, native]\\ fun < S : Any , R : Any > newStreamingCall (method: GrpcMethod< S , R >): GrpcStreamingCall< S , R >","title":"New streaming call"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/new-streaming-call/#newstreamingcall","text":"[common, js, jvm, native]\\ [common]\\ fun < S : Any , R : Any > newStreamingCall (method: GrpcMethod < S , R >): GrpcStreamingCall < S , R > [js, jvm, native]\\ fun < S : Any , R : Any > newStreamingCall (method: GrpcMethod< S , R >): GrpcStreamingCall< S , R >","title":"newStreamingCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / Builder Builder \u00b6 [jvm]\\ class Builder Functions \u00b6 Name Summary baseUrl [jvm] fun baseUrl (baseUrl: String ): GrpcClient.Builder fun baseUrl (url: GrpcHttpUrl ): GrpcClient.Builder build [jvm] fun build (): GrpcClient callFactory [jvm] fun callFactory (client: Call.Factory): GrpcClient.Builder client [jvm] fun client (client: OkHttpClient): GrpcClient.Builder minMessageToCompress [jvm] fun minMessageToCompress (bytes: Long ): GrpcClient.Builder Sets the minimum outbound message size (in bytes) that will be compressed.","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/#builder","text":"[jvm]\\ class Builder","title":"Builder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/#functions","text":"Name Summary baseUrl [jvm] fun baseUrl (baseUrl: String ): GrpcClient.Builder fun baseUrl (url: GrpcHttpUrl ): GrpcClient.Builder build [jvm] fun build (): GrpcClient callFactory [jvm] fun callFactory (client: Call.Factory): GrpcClient.Builder client [jvm] fun client (client: OkHttpClient): GrpcClient.Builder minMessageToCompress [jvm] fun minMessageToCompress (bytes: Long ): GrpcClient.Builder Sets the minimum outbound message size (in bytes) that will be compressed.","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/-builder/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / Builder / Builder Builder \u00b6 [jvm]\\ fun Builder ()","title":" builder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/-builder/#builder","text":"[jvm]\\ fun Builder ()","title":"Builder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/base-url/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / Builder / baseUrl baseUrl \u00b6 [jvm]\\ fun baseUrl (baseUrl: String ): GrpcClient.Builder fun baseUrl (url: GrpcHttpUrl ): GrpcClient.Builder","title":"Base url"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/base-url/#baseurl","text":"[jvm]\\ fun baseUrl (baseUrl: String ): GrpcClient.Builder fun baseUrl (url: GrpcHttpUrl ): GrpcClient.Builder","title":"baseUrl"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/build/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / Builder / build build \u00b6 [jvm]\\ fun build (): GrpcClient","title":"Build"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/build/#build","text":"[jvm]\\ fun build (): GrpcClient","title":"build"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/call-factory/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / Builder / callFactory callFactory \u00b6 [jvm]\\ fun callFactory (client: Call.Factory): GrpcClient.Builder","title":"Call factory"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/call-factory/#callfactory","text":"[jvm]\\ fun callFactory (client: Call.Factory): GrpcClient.Builder","title":"callFactory"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/client/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / Builder / client client \u00b6 [jvm]\\ fun client (client: OkHttpClient): GrpcClient.Builder","title":"Client"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/client/#client","text":"[jvm]\\ fun client (client: OkHttpClient): GrpcClient.Builder","title":"client"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/min-message-to-compress/","text":"// wire-grpc-client / com.squareup.wire / GrpcClient / Builder / minMessageToCompress minMessageToCompress \u00b6 [jvm]\\ fun minMessageToCompress (bytes: Long ): GrpcClient.Builder Sets the minimum outbound message size (in bytes) that will be compressed. Set this to 0 to enable compression for all outbound messages. Set to Long.MAX_VALUE to disable compression. This is 0 by default.","title":"Min message to compress"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/min-message-to-compress/#minmessagetocompress","text":"[jvm]\\ fun minMessageToCompress (bytes: Long ): GrpcClient.Builder Sets the minimum outbound message size (in bytes) that will be compressed. Set this to 0 to enable compression for all outbound messages. Set to Long.MAX_VALUE to disable compression. This is 0 by default.","title":"minMessageToCompress"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/","text":"// wire-grpc-client / com.squareup.wire / GrpcException GrpcException \u00b6 [common]\\ class GrpcException (grpcStatus: GrpcStatus , grpcMessage: String ?) : IOException Properties \u00b6 Name Summary cause [common] open val cause : Throwable ? grpcMessage [common] val grpcMessage : String ? grpcStatus [common] val grpcStatus : GrpcStatus message [common] open val message : String ?","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/#grpcexception","text":"[common]\\ class GrpcException (grpcStatus: GrpcStatus , grpcMessage: String ?) : IOException","title":"GrpcException"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/#properties","text":"Name Summary cause [common] open val cause : Throwable ? grpcMessage [common] val grpcMessage : String ? grpcStatus [common] val grpcStatus : GrpcStatus message [common] open val message : String ?","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/-grpc-exception/","text":"// wire-grpc-client / com.squareup.wire / GrpcException / GrpcException GrpcException \u00b6 [common]\\ fun GrpcException (grpcStatus: GrpcStatus , grpcMessage: String ?)","title":" grpc exception"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/-grpc-exception/#grpcexception","text":"[common]\\ fun GrpcException (grpcStatus: GrpcStatus , grpcMessage: String ?)","title":"GrpcException"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-message/","text":"// wire-grpc-client / com.squareup.wire / GrpcException / grpcMessage grpcMessage \u00b6 [common]\\ val grpcMessage : String ?","title":"Grpc message"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-message/#grpcmessage","text":"[common]\\ val grpcMessage : String ?","title":"grpcMessage"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-status/","text":"// wire-grpc-client / com.squareup.wire / GrpcException / grpcStatus grpcStatus \u00b6 [common]\\ val grpcStatus : GrpcStatus","title":"Grpc status"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-exception/grpc-status/#grpcstatus","text":"[common]\\ val grpcStatus : GrpcStatus","title":"grpcStatus"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/","text":"// wire-grpc-client / com.squareup.wire / GrpcHeaders GrpcHeaders \u00b6 [common, js, native]\\ class GrpcHeaders [jvm]\\ typealias GrpcHeaders = Headers Functions \u00b6 Name Summary get [common, js, native] [common, js, native] operator fun get (name: String ): String ?","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/#grpcheaders","text":"[common, js, native]\\ class GrpcHeaders [jvm]\\ typealias GrpcHeaders = Headers","title":"GrpcHeaders"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/#functions","text":"Name Summary get [common, js, native] [common, js, native] operator fun get (name: String ): String ?","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-grpc-headers/","text":"// wire-grpc-client / com.squareup.wire / GrpcHeaders / GrpcHeaders GrpcHeaders \u00b6 [js, native]\\ [js, native]\\ fun GrpcHeaders ()","title":" grpc headers"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/-grpc-headers/#grpcheaders","text":"[js, native]\\ [js, native]\\ fun GrpcHeaders ()","title":"GrpcHeaders"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/get/","text":"// wire-grpc-client / com.squareup.wire / GrpcHeaders / get get \u00b6 [common, js, native]\\ [common, js, native]\\ operator fun get (name: String ): String ?","title":"Get"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-headers/get/#get","text":"[common, js, native]\\ [common, js, native]\\ operator fun get (name: String ): String ?","title":"get"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/","text":"// wire-grpc-client / com.squareup.wire / GrpcHttpUrl GrpcHttpUrl \u00b6 [common, js, native]\\ class GrpcHttpUrl [jvm]\\ typealias GrpcHttpUrl = HttpUrl Functions \u00b6 Name Summary resolve [common, js, native] [common, js, native] fun resolve (link: String ): GrpcHttpUrl ?","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/#grpchttpurl","text":"[common, js, native]\\ class GrpcHttpUrl [jvm]\\ typealias GrpcHttpUrl = HttpUrl","title":"GrpcHttpUrl"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/#functions","text":"Name Summary resolve [common, js, native] [common, js, native] fun resolve (link: String ): GrpcHttpUrl ?","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-grpc-http-url/","text":"// wire-grpc-client / com.squareup.wire / GrpcHttpUrl / GrpcHttpUrl GrpcHttpUrl \u00b6 [js, native]\\ [js, native]\\ fun GrpcHttpUrl ()","title":" grpc http url"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/-grpc-http-url/#grpchttpurl","text":"[js, native]\\ [js, native]\\ fun GrpcHttpUrl ()","title":"GrpcHttpUrl"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/resolve/","text":"// wire-grpc-client / com.squareup.wire / GrpcHttpUrl / resolve resolve \u00b6 [common, js, native]\\ [common, js, native]\\ fun resolve (link: String ): GrpcHttpUrl ?","title":"Resolve"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-http-url/resolve/#resolve","text":"[common, js, native]\\ [common, js, native]\\ fun resolve (link: String ): GrpcHttpUrl ?","title":"resolve"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/","text":"// wire-grpc-client / com.squareup.wire / GrpcMethod GrpcMethod \u00b6 [common]\\ class GrpcMethod < S : Any , R : Any >(path: String , requestAdapter: ProtoAdapter< S >, responseAdapter: ProtoAdapter< R >) Properties \u00b6 Name Summary path [common] val path : String requestAdapter [common] val requestAdapter : ProtoAdapter< S > responseAdapter [common] val responseAdapter : ProtoAdapter< R >","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/#grpcmethod","text":"[common]\\ class GrpcMethod < S : Any , R : Any >(path: String , requestAdapter: ProtoAdapter< S >, responseAdapter: ProtoAdapter< R >)","title":"GrpcMethod"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/#properties","text":"Name Summary path [common] val path : String requestAdapter [common] val requestAdapter : ProtoAdapter< S > responseAdapter [common] val responseAdapter : ProtoAdapter< R >","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/-grpc-method/","text":"// wire-grpc-client / com.squareup.wire / GrpcMethod / GrpcMethod GrpcMethod \u00b6 [common]\\ fun < S : Any , R : Any > GrpcMethod (path: String , requestAdapter: ProtoAdapter< S >, responseAdapter: ProtoAdapter< R >)","title":" grpc method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/-grpc-method/#grpcmethod","text":"[common]\\ fun < S : Any , R : Any > GrpcMethod (path: String , requestAdapter: ProtoAdapter< S >, responseAdapter: ProtoAdapter< R >)","title":"GrpcMethod"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/path/","text":"// wire-grpc-client / com.squareup.wire / GrpcMethod / path path \u00b6 [common]\\ val path : String","title":"Path"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/path/#path","text":"[common]\\ val path : String","title":"path"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/request-adapter/","text":"// wire-grpc-client / com.squareup.wire / GrpcMethod / requestAdapter requestAdapter \u00b6 [common]\\ val requestAdapter : ProtoAdapter< S >","title":"Request adapter"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/request-adapter/#requestadapter","text":"[common]\\ val requestAdapter : ProtoAdapter< S >","title":"requestAdapter"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/response-adapter/","text":"// wire-grpc-client / com.squareup.wire / GrpcMethod / responseAdapter responseAdapter \u00b6 [common]\\ val responseAdapter : ProtoAdapter< R >","title":"Response adapter"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-method/response-adapter/#responseadapter","text":"[common]\\ val responseAdapter : ProtoAdapter< R >","title":"responseAdapter"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/","text":"// wire-grpc-client / com.squareup.wire / GrpcRequest GrpcRequest \u00b6 [common, js, native]\\ class GrpcRequest [jvm]\\ typealias GrpcRequest = Request","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/#grpcrequest","text":"[common, js, native]\\ class GrpcRequest [jvm]\\ typealias GrpcRequest = Request","title":"GrpcRequest"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/-grpc-request/","text":"// wire-grpc-client / com.squareup.wire / GrpcRequest / GrpcRequest GrpcRequest \u00b6 [js, native]\\ [js, native]\\ fun GrpcRequest ()","title":" grpc request"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request/-grpc-request/#grpcrequest","text":"[js, native]\\ [js, native]\\ fun GrpcRequest ()","title":"GrpcRequest"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/","text":"// wire-grpc-client / com.squareup.wire / GrpcRequestBody GrpcRequestBody \u00b6 [common, js, native]\\ abstract class GrpcRequestBody [jvm]\\ typealias GrpcRequestBody = RequestBody","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/#grpcrequestbody","text":"[common, js, native]\\ abstract class GrpcRequestBody [jvm]\\ typealias GrpcRequestBody = RequestBody","title":"GrpcRequestBody"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/-grpc-request-body/","text":"// wire-grpc-client / com.squareup.wire / GrpcRequestBody / GrpcRequestBody GrpcRequestBody \u00b6 [js, native]\\ [js, native]\\ fun GrpcRequestBody ()","title":" grpc request body"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-body/-grpc-request-body/#grpcrequestbody","text":"[js, native]\\ [js, native]\\ fun GrpcRequestBody ()","title":"GrpcRequestBody"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/","text":"// wire-grpc-client / com.squareup.wire / GrpcRequestBuilder GrpcRequestBuilder \u00b6 [common, js, native]\\ open class GrpcRequestBuilder [jvm]\\ typealias GrpcRequestBuilder = Request.Builder Functions \u00b6 Name Summary addHeader [common, js, native] [common, js, native] open fun addHeader (name: String , value: String ): GrpcRequestBuilder build [common, js, native] [common, js, native] open fun build (): GrpcRequest method [common, js, native] [common, js, native] open fun method (method: String , body: GrpcRequestBody ?): GrpcRequestBuilder url [common, js, native] [common, js, native] open fun url (url: GrpcHttpUrl ): GrpcRequestBuilder","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/#grpcrequestbuilder","text":"[common, js, native]\\ open class GrpcRequestBuilder [jvm]\\ typealias GrpcRequestBuilder = Request.Builder","title":"GrpcRequestBuilder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/#functions","text":"Name Summary addHeader [common, js, native] [common, js, native] open fun addHeader (name: String , value: String ): GrpcRequestBuilder build [common, js, native] [common, js, native] open fun build (): GrpcRequest method [common, js, native] [common, js, native] open fun method (method: String , body: GrpcRequestBody ?): GrpcRequestBuilder url [common, js, native] [common, js, native] open fun url (url: GrpcHttpUrl ): GrpcRequestBuilder","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/","text":"// wire-grpc-client / com.squareup.wire / GrpcRequestBuilder / GrpcRequestBuilder GrpcRequestBuilder \u00b6 [js, native]\\ [js, native]\\ fun GrpcRequestBuilder ()","title":" grpc request builder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/-grpc-request-builder/#grpcrequestbuilder","text":"[js, native]\\ [js, native]\\ fun GrpcRequestBuilder ()","title":"GrpcRequestBuilder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/add-header/","text":"// wire-grpc-client / com.squareup.wire / GrpcRequestBuilder / addHeader addHeader \u00b6 [common, js, native]\\ [common, js, native]\\ open fun addHeader (name: String , value: String ): GrpcRequestBuilder","title":"Add header"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/add-header/#addheader","text":"[common, js, native]\\ [common, js, native]\\ open fun addHeader (name: String , value: String ): GrpcRequestBuilder","title":"addHeader"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/build/","text":"// wire-grpc-client / com.squareup.wire / GrpcRequestBuilder / build build \u00b6 [common, js, native]\\ [common, js, native]\\ open fun build (): GrpcRequest","title":"Build"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/build/#build","text":"[common, js, native]\\ [common, js, native]\\ open fun build (): GrpcRequest","title":"build"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/method/","text":"// wire-grpc-client / com.squareup.wire / GrpcRequestBuilder / method method \u00b6 [common, js, native]\\ [common, js, native]\\ open fun method (method: String , body: GrpcRequestBody ?): GrpcRequestBuilder","title":"Method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/method/#method","text":"[common, js, native]\\ [common, js, native]\\ open fun method (method: String , body: GrpcRequestBody ?): GrpcRequestBuilder","title":"method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/url/","text":"// wire-grpc-client / com.squareup.wire / GrpcRequestBuilder / url url \u00b6 [common, js, native]\\ [common, js, native]\\ open fun url (url: GrpcHttpUrl ): GrpcRequestBuilder","title":"Url"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-request-builder/url/#url","text":"[common, js, native]\\ [common, js, native]\\ open fun url (url: GrpcHttpUrl ): GrpcRequestBuilder","title":"url"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/","text":"// wire-grpc-client / com.squareup.wire / GrpcResponse GrpcResponse \u00b6 [common, js, native]\\ class GrpcResponse [jvm]\\ typealias GrpcResponse = Response Functions \u00b6 Name Summary close [common, js, native] [common, js, native] fun close () header [common, js, native] [common] @ JvmOverloads fun header (name: String , defaultValue: String ? = null): String ? [js, native] fun header (name: String , defaultValue: String ? = null): String ? trailers [common, js, native] [common, js, native] fun trailers (): GrpcHeaders Properties \u00b6 Name Summary body [common] @get: JvmName (name = \u201cbody\u201d) val body : GrpcResponseBody ? [js, native] val body : GrpcResponseBody ?","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/#grpcresponse","text":"[common, js, native]\\ class GrpcResponse [jvm]\\ typealias GrpcResponse = Response","title":"GrpcResponse"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/#functions","text":"Name Summary close [common, js, native] [common, js, native] fun close () header [common, js, native] [common] @ JvmOverloads fun header (name: String , defaultValue: String ? = null): String ? [js, native] fun header (name: String , defaultValue: String ? = null): String ? trailers [common, js, native] [common, js, native] fun trailers (): GrpcHeaders","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/#properties","text":"Name Summary body [common] @get: JvmName (name = \u201cbody\u201d) val body : GrpcResponseBody ? [js, native] val body : GrpcResponseBody ?","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/","text":"// wire-grpc-client / com.squareup.wire / GrpcResponse / GrpcResponse GrpcResponse \u00b6 [js, native]\\ [js, native]\\ fun GrpcResponse ()","title":" grpc response"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/-grpc-response/#grpcresponse","text":"[js, native]\\ [js, native]\\ fun GrpcResponse ()","title":"GrpcResponse"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/body/","text":"// wire-grpc-client / com.squareup.wire / GrpcResponse / body body \u00b6 [common, js, native]\\ [common]\\ @get: JvmName (name = \u201cbody\u201d) val body : GrpcResponseBody ? [js, native]\\ val body : GrpcResponseBody ?","title":"Body"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/body/#body","text":"[common, js, native]\\ [common]\\ @get: JvmName (name = \u201cbody\u201d) val body : GrpcResponseBody ? [js, native]\\ val body : GrpcResponseBody ?","title":"body"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/close/","text":"// wire-grpc-client / com.squareup.wire / GrpcResponse / close close \u00b6 [common, js, native]\\ [common, js, native]\\ fun close ()","title":"Close"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/close/#close","text":"[common, js, native]\\ [common, js, native]\\ fun close ()","title":"close"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/header/","text":"// wire-grpc-client / com.squareup.wire / GrpcResponse / header header \u00b6 [common, js, native]\\ [common]\\ @ JvmOverloads fun header (name: String , defaultValue: String ? = null): String ? [js, native]\\ fun header (name: String , defaultValue: String ? = null): String ?","title":"Header"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/header/#header","text":"[common, js, native]\\ [common]\\ @ JvmOverloads fun header (name: String , defaultValue: String ? = null): String ? [js, native]\\ fun header (name: String , defaultValue: String ? = null): String ?","title":"header"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/trailers/","text":"// wire-grpc-client / com.squareup.wire / GrpcResponse / trailers trailers \u00b6 [common, js, native]\\ [common, js, native]\\ fun trailers (): GrpcHeaders","title":"Trailers"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response/trailers/#trailers","text":"[common, js, native]\\ [common, js, native]\\ fun trailers (): GrpcHeaders","title":"trailers"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/","text":"// wire-grpc-client / com.squareup.wire / GrpcResponseBody GrpcResponseBody \u00b6 [common, js, native]\\ abstract class GrpcResponseBody [jvm]\\ typealias GrpcResponseBody = ResponseBody Functions \u00b6 Name Summary source [common, js, native] [common, js, native] abstract fun source (): BufferedSource","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/#grpcresponsebody","text":"[common, js, native]\\ abstract class GrpcResponseBody [jvm]\\ typealias GrpcResponseBody = ResponseBody","title":"GrpcResponseBody"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/#functions","text":"Name Summary source [common, js, native] [common, js, native] abstract fun source (): BufferedSource","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-grpc-response-body/","text":"// wire-grpc-client / com.squareup.wire / GrpcResponseBody / GrpcResponseBody GrpcResponseBody \u00b6 [js, native]\\ [js, native]\\ fun GrpcResponseBody ()","title":" grpc response body"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/-grpc-response-body/#grpcresponsebody","text":"[js, native]\\ [js, native]\\ fun GrpcResponseBody ()","title":"GrpcResponseBody"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/source/","text":"// wire-grpc-client / com.squareup.wire / GrpcResponseBody / source source \u00b6 [common, js, native]\\ [common, js, native]\\ abstract fun source (): BufferedSource","title":"Source"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-response-body/source/#source","text":"[common, js, native]\\ [common, js, native]\\ abstract fun source (): BufferedSource","title":"source"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus GrpcStatus \u00b6 [common]\\ class GrpcStatus Types \u00b6 Name Summary Companion [common] object Companion Properties \u00b6 Name Summary code [common] val code : Int name [common] val name : String","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/#grpcstatus","text":"[common]\\ class GrpcStatus","title":"GrpcStatus"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/#properties","text":"Name Summary code [common] val code : Int name [common] val name : String","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/code/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / code code \u00b6 [common]\\ val code : Int","title":"Code"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/code/#code","text":"[common]\\ val code : Int","title":"code"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/name/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary get [common] @ Synchronized fun get (status: Int ): GrpcStatus Properties \u00b6 Name Summary ABORTED [common] @ JvmField val ABORTED : GrpcStatus ALREADY_EXISTS [common] @ JvmField val ALREADY_EXISTS : GrpcStatus CANCELLED [common] @ JvmField val CANCELLED : GrpcStatus DATA_LOSS [common] @ JvmField val DATA_LOSS : GrpcStatus DEADLINE_EXCEEDED [common] @ JvmField val DEADLINE_EXCEEDED : GrpcStatus FAILED_PRECONDITION [common] @ JvmField val FAILED_PRECONDITION : GrpcStatus INTERNAL [common] @ JvmField val INTERNAL : GrpcStatus INVALID_ARGUMENT [common] @ JvmField val INVALID_ARGUMENT : GrpcStatus NOT_FOUND [common] @ JvmField val NOT_FOUND : GrpcStatus OK [common] @ JvmField val OK : GrpcStatus OUT_OF_RANGE [common] @ JvmField val OUT_OF_RANGE : GrpcStatus PERMISSION_DENIED [common] @ JvmField val PERMISSION_DENIED : GrpcStatus RESOURCE_EXHAUSTED [common] @ JvmField val RESOURCE_EXHAUSTED : GrpcStatus UNAUTHENTICATED [common] @ JvmField val UNAUTHENTICATED : GrpcStatus UNAVAILABLE [common] @ JvmField val UNAVAILABLE : GrpcStatus UNIMPLEMENTED [common] @ JvmField val UNIMPLEMENTED : GrpcStatus UNKNOWN [common] @ JvmField val UNKNOWN : GrpcStatus","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/#functions","text":"Name Summary get [common] @ Synchronized fun get (status: Int ): GrpcStatus","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/#properties","text":"Name Summary ABORTED [common] @ JvmField val ABORTED : GrpcStatus ALREADY_EXISTS [common] @ JvmField val ALREADY_EXISTS : GrpcStatus CANCELLED [common] @ JvmField val CANCELLED : GrpcStatus DATA_LOSS [common] @ JvmField val DATA_LOSS : GrpcStatus DEADLINE_EXCEEDED [common] @ JvmField val DEADLINE_EXCEEDED : GrpcStatus FAILED_PRECONDITION [common] @ JvmField val FAILED_PRECONDITION : GrpcStatus INTERNAL [common] @ JvmField val INTERNAL : GrpcStatus INVALID_ARGUMENT [common] @ JvmField val INVALID_ARGUMENT : GrpcStatus NOT_FOUND [common] @ JvmField val NOT_FOUND : GrpcStatus OK [common] @ JvmField val OK : GrpcStatus OUT_OF_RANGE [common] @ JvmField val OUT_OF_RANGE : GrpcStatus PERMISSION_DENIED [common] @ JvmField val PERMISSION_DENIED : GrpcStatus RESOURCE_EXHAUSTED [common] @ JvmField val RESOURCE_EXHAUSTED : GrpcStatus UNAUTHENTICATED [common] @ JvmField val UNAUTHENTICATED : GrpcStatus UNAVAILABLE [common] @ JvmField val UNAVAILABLE : GrpcStatus UNIMPLEMENTED [common] @ JvmField val UNIMPLEMENTED : GrpcStatus UNKNOWN [common] @ JvmField val UNKNOWN : GrpcStatus","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-a-b-o-r-t-e-d/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / ABORTED ABORTED \u00b6 [common]\\ @ JvmField val ABORTED : GrpcStatus","title":" a b o r t e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-a-b-o-r-t-e-d/#aborted","text":"[common]\\ @ JvmField val ABORTED : GrpcStatus","title":"ABORTED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-a-l-r-e-a-d-y_-e-x-i-s-t-s/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / ALREADY_EXISTS ALREADY_EXISTS \u00b6 [common]\\ @ JvmField val ALREADY_EXISTS : GrpcStatus","title":" a l r e a d y  e x i s t s"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-a-l-r-e-a-d-y_-e-x-i-s-t-s/#already_exists","text":"[common]\\ @ JvmField val ALREADY_EXISTS : GrpcStatus","title":"ALREADY_EXISTS"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-c-a-n-c-e-l-l-e-d/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / CANCELLED CANCELLED \u00b6 [common]\\ @ JvmField val CANCELLED : GrpcStatus","title":" c a n c e l l e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-c-a-n-c-e-l-l-e-d/#cancelled","text":"[common]\\ @ JvmField val CANCELLED : GrpcStatus","title":"CANCELLED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-d-a-t-a_-l-o-s-s/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / DATA_LOSS DATA_LOSS \u00b6 [common]\\ @ JvmField val DATA_LOSS : GrpcStatus","title":" d a t a  l o s s"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-d-a-t-a_-l-o-s-s/#data_loss","text":"[common]\\ @ JvmField val DATA_LOSS : GrpcStatus","title":"DATA_LOSS"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-d-e-a-d-l-i-n-e_-e-x-c-e-e-d-e-d/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / DEADLINE_EXCEEDED DEADLINE_EXCEEDED \u00b6 [common]\\ @ JvmField val DEADLINE_EXCEEDED : GrpcStatus","title":" d e a d l i n e  e x c e e d e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-d-e-a-d-l-i-n-e_-e-x-c-e-e-d-e-d/#deadline_exceeded","text":"[common]\\ @ JvmField val DEADLINE_EXCEEDED : GrpcStatus","title":"DEADLINE_EXCEEDED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-f-a-i-l-e-d_-p-r-e-c-o-n-d-i-t-i-o-n/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / FAILED_PRECONDITION FAILED_PRECONDITION \u00b6 [common]\\ @ JvmField val FAILED_PRECONDITION : GrpcStatus","title":" f a i l e d  p r e c o n d i t i o n"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-f-a-i-l-e-d_-p-r-e-c-o-n-d-i-t-i-o-n/#failed_precondition","text":"[common]\\ @ JvmField val FAILED_PRECONDITION : GrpcStatus","title":"FAILED_PRECONDITION"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-i-n-t-e-r-n-a-l/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / INTERNAL INTERNAL \u00b6 [common]\\ @ JvmField val INTERNAL : GrpcStatus","title":" i n t e r n a l"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-i-n-t-e-r-n-a-l/#internal","text":"[common]\\ @ JvmField val INTERNAL : GrpcStatus","title":"INTERNAL"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-i-n-v-a-l-i-d_-a-r-g-u-m-e-n-t/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / INVALID_ARGUMENT INVALID_ARGUMENT \u00b6 [common]\\ @ JvmField val INVALID_ARGUMENT : GrpcStatus","title":" i n v a l i d  a r g u m e n t"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-i-n-v-a-l-i-d_-a-r-g-u-m-e-n-t/#invalid_argument","text":"[common]\\ @ JvmField val INVALID_ARGUMENT : GrpcStatus","title":"INVALID_ARGUMENT"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-n-o-t_-f-o-u-n-d/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / NOT_FOUND NOT_FOUND \u00b6 [common]\\ @ JvmField val NOT_FOUND : GrpcStatus","title":" n o t  f o u n d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-n-o-t_-f-o-u-n-d/#not_found","text":"[common]\\ @ JvmField val NOT_FOUND : GrpcStatus","title":"NOT_FOUND"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-o-k/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / OK OK \u00b6 [common]\\ @ JvmField val OK : GrpcStatus","title":" o k"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-o-k/#ok","text":"[common]\\ @ JvmField val OK : GrpcStatus","title":"OK"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-o-u-t_-o-f_-r-a-n-g-e/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / OUT_OF_RANGE OUT_OF_RANGE \u00b6 [common]\\ @ JvmField val OUT_OF_RANGE : GrpcStatus","title":" o u t  o f  r a n g e"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-o-u-t_-o-f_-r-a-n-g-e/#out_of_range","text":"[common]\\ @ JvmField val OUT_OF_RANGE : GrpcStatus","title":"OUT_OF_RANGE"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-p-e-r-m-i-s-s-i-o-n_-d-e-n-i-e-d/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / PERMISSION_DENIED PERMISSION_DENIED \u00b6 [common]\\ @ JvmField val PERMISSION_DENIED : GrpcStatus","title":" p e r m i s s i o n  d e n i e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-p-e-r-m-i-s-s-i-o-n_-d-e-n-i-e-d/#permission_denied","text":"[common]\\ @ JvmField val PERMISSION_DENIED : GrpcStatus","title":"PERMISSION_DENIED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-r-e-s-o-u-r-c-e_-e-x-h-a-u-s-t-e-d/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / RESOURCE_EXHAUSTED RESOURCE_EXHAUSTED \u00b6 [common]\\ @ JvmField val RESOURCE_EXHAUSTED : GrpcStatus","title":" r e s o u r c e  e x h a u s t e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-r-e-s-o-u-r-c-e_-e-x-h-a-u-s-t-e-d/#resource_exhausted","text":"[common]\\ @ JvmField val RESOURCE_EXHAUSTED : GrpcStatus","title":"RESOURCE_EXHAUSTED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-a-u-t-h-e-n-t-i-c-a-t-e-d/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / UNAUTHENTICATED UNAUTHENTICATED \u00b6 [common]\\ @ JvmField val UNAUTHENTICATED : GrpcStatus","title":" u n a u t h e n t i c a t e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-a-u-t-h-e-n-t-i-c-a-t-e-d/#unauthenticated","text":"[common]\\ @ JvmField val UNAUTHENTICATED : GrpcStatus","title":"UNAUTHENTICATED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-a-v-a-i-l-a-b-l-e/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / UNAVAILABLE UNAVAILABLE \u00b6 [common]\\ @ JvmField val UNAVAILABLE : GrpcStatus","title":" u n a v a i l a b l e"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-a-v-a-i-l-a-b-l-e/#unavailable","text":"[common]\\ @ JvmField val UNAVAILABLE : GrpcStatus","title":"UNAVAILABLE"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-i-m-p-l-e-m-e-n-t-e-d/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / UNIMPLEMENTED UNIMPLEMENTED \u00b6 [common]\\ @ JvmField val UNIMPLEMENTED : GrpcStatus","title":" u n i m p l e m e n t e d"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-i-m-p-l-e-m-e-n-t-e-d/#unimplemented","text":"[common]\\ @ JvmField val UNIMPLEMENTED : GrpcStatus","title":"UNIMPLEMENTED"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-k-n-o-w-n/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / UNKNOWN UNKNOWN \u00b6 [common]\\ @ JvmField val UNKNOWN : GrpcStatus","title":" u n k n o w n"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/-u-n-k-n-o-w-n/#unknown","text":"[common]\\ @ JvmField val UNKNOWN : GrpcStatus","title":"UNKNOWN"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/get/","text":"// wire-grpc-client / com.squareup.wire / GrpcStatus / Companion / get get \u00b6 [common]\\ @ Synchronized fun get (status: Int ): GrpcStatus","title":"Get"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-status/-companion/get/#get","text":"[common]\\ @ Synchronized fun get (status: Int ): GrpcStatus","title":"get"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall GrpcStreamingCall \u00b6 [common]\\ interface GrpcStreamingCall < S : Any , R : Any > A single streaming call to a remote server. This class handles three streaming call types: Single request, streaming response. The send channel or message sink accept exactly one message. The receive channel or message source produce zero or more messages. The outbound request message is sent before any inbound response messages. Streaming request, single response. The send channel or message sink accept zero or more messages. The receive channel or message source produce exactly one message. All outbound request messages are sent before the inbound response message. Streaming request, streaming response. The send channel or message sink accept zero or more messages, and the receive channel or message source produce any number of messages. Unlike the above two types, you are free to interleave request and response messages. A gRPC call cannot be executed twice. gRPC calls can be suspending or blocking . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same. Functions \u00b6 Name Summary cancel [common] abstract fun cancel () Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone [common] abstract fun clone (): GrpcStreamingCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. executeBlocking [common] abstract fun executeBlocking (): Pair <MessageSink< S >, MessageSource< R >> Enqueues this call for execution and returns streams to send and receive the call\u2019s messages. Reads and writes on the returned streams are blocking. executeIn [common] abstract fun executeIn (scope: CoroutineScope): Pair <SendChannel< S >, ReceiveChannel< R >> Enqueues this call for execution and returns channels to send and receive the call\u2019s messages. This uses the Dispatchers.IO to transmit outbound messages. isCanceled [common] abstract fun isCanceled (): Boolean True if cancel was called. isExecuted [common] abstract fun isExecuted (): Boolean Returns true if executeIn or executeBlocking was called. It is an error to execute a call more than once. Properties \u00b6 Name Summary method [common] abstract val method : GrpcMethod < S , R > The method invoked by this call. requestMetadata [common] abstract var requestMetadata : Map < String , String > A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed. responseMetadata [common] abstract val responseMetadata : Map < String , String >? A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present. timeout [common] abstract val timeout : Timeout Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout.","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#grpcstreamingcall","text":"[common]\\ interface GrpcStreamingCall < S : Any , R : Any > A single streaming call to a remote server. This class handles three streaming call types: Single request, streaming response. The send channel or message sink accept exactly one message. The receive channel or message source produce zero or more messages. The outbound request message is sent before any inbound response messages. Streaming request, single response. The send channel or message sink accept zero or more messages. The receive channel or message source produce exactly one message. All outbound request messages are sent before the inbound response message. Streaming request, streaming response. The send channel or message sink accept zero or more messages, and the receive channel or message source produce any number of messages. Unlike the above two types, you are free to interleave request and response messages. A gRPC call cannot be executed twice. gRPC calls can be suspending or blocking . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same.","title":"GrpcStreamingCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#functions","text":"Name Summary cancel [common] abstract fun cancel () Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone [common] abstract fun clone (): GrpcStreamingCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. executeBlocking [common] abstract fun executeBlocking (): Pair <MessageSink< S >, MessageSource< R >> Enqueues this call for execution and returns streams to send and receive the call\u2019s messages. Reads and writes on the returned streams are blocking. executeIn [common] abstract fun executeIn (scope: CoroutineScope): Pair <SendChannel< S >, ReceiveChannel< R >> Enqueues this call for execution and returns channels to send and receive the call\u2019s messages. This uses the Dispatchers.IO to transmit outbound messages. isCanceled [common] abstract fun isCanceled (): Boolean True if cancel was called. isExecuted [common] abstract fun isExecuted (): Boolean Returns true if executeIn or executeBlocking was called. It is an error to execute a call more than once.","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#properties","text":"Name Summary method [common] abstract val method : GrpcMethod < S , R > The method invoked by this call. requestMetadata [common] abstract var requestMetadata : Map < String , String > A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed. responseMetadata [common] abstract val responseMetadata : Map < String , String >? A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present. timeout [common] abstract val timeout : Timeout Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout.","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/cancel/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall / cancel cancel \u00b6 [common]\\ abstract fun cancel () Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"Cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/cancel/#cancel","text":"[common]\\ abstract fun cancel () Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/clone/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall / clone clone \u00b6 [common]\\ abstract fun clone (): GrpcStreamingCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"Clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/clone/#clone","text":"[common]\\ abstract fun clone (): GrpcStreamingCall < S , R > Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-blocking/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall / executeBlocking executeBlocking \u00b6 [common]\\ abstract fun executeBlocking (): Pair <MessageSink< S >, MessageSource< R >> Enqueues this call for execution and returns streams to send and receive the call\u2019s messages. Reads and writes on the returned streams are blocking.","title":"Execute blocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-blocking/#executeblocking","text":"[common]\\ abstract fun executeBlocking (): Pair <MessageSink< S >, MessageSource< R >> Enqueues this call for execution and returns streams to send and receive the call\u2019s messages. Reads and writes on the returned streams are blocking.","title":"executeBlocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-in/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall / executeIn executeIn \u00b6 [common]\\ abstract fun executeIn (scope: CoroutineScope): Pair <SendChannel< S >, ReceiveChannel< R >> Enqueues this call for execution and returns channels to send and receive the call\u2019s messages. This uses the Dispatchers.IO to transmit outbound messages.","title":"Execute in"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-in/#executein","text":"[common]\\ abstract fun executeIn (scope: CoroutineScope): Pair <SendChannel< S >, ReceiveChannel< R >> Enqueues this call for execution and returns channels to send and receive the call\u2019s messages. This uses the Dispatchers.IO to transmit outbound messages.","title":"executeIn"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-canceled/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall / isCanceled isCanceled \u00b6 [common]\\ abstract fun isCanceled (): Boolean True if cancel was called.","title":"Is canceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-canceled/#iscanceled","text":"[common]\\ abstract fun isCanceled (): Boolean True if cancel was called.","title":"isCanceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-executed/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall / isExecuted isExecuted \u00b6 [common]\\ abstract fun isExecuted (): Boolean Returns true if executeIn or executeBlocking was called. It is an error to execute a call more than once.","title":"Is executed"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-executed/#isexecuted","text":"[common]\\ abstract fun isExecuted (): Boolean Returns true if executeIn or executeBlocking was called. It is an error to execute a call more than once.","title":"isExecuted"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/method/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall / method method \u00b6 [common]\\ abstract val method : GrpcMethod < S , R > The method invoked by this call.","title":"Method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/method/#method","text":"[common]\\ abstract val method : GrpcMethod < S , R > The method invoked by this call.","title":"method"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/request-metadata/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall / requestMetadata requestMetadata \u00b6 [common]\\ abstract var requestMetadata : Map < String , String > A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed.","title":"Request metadata"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/request-metadata/#requestmetadata","text":"[common]\\ abstract var requestMetadata : Map < String , String > A map containing request metadata. This is initially empty; it can be assigned to any other map of metadata before the call is executed. It is an error to set this value after the call is executed.","title":"requestMetadata"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/response-metadata/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall / responseMetadata responseMetadata \u00b6 [common]\\ abstract val responseMetadata : Map < String , String >? A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present.","title":"Response metadata"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/response-metadata/#responsemetadata","text":"[common]\\ abstract val responseMetadata : Map < String , String >? A map containing response metadata. This is null until the call has executed, at which point it will be non-null if the call completed successfully. It may also be non-null in failure cases if the failure was not a problem of connectivity. For example, if the gRPC call fails with an HTTP 503 error, response metadata will be present.","title":"responseMetadata"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/timeout/","text":"// wire-grpc-client / com.squareup.wire / GrpcStreamingCall / timeout timeout \u00b6 [common]\\ abstract val timeout : Timeout Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout.","title":"Timeout"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/timeout/#timeout","text":"[common]\\ abstract val timeout : Timeout Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout.","title":"timeout"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/","text":"// wire-grpc-client / com.squareup.wire / WireGrpcExperimental WireGrpcExperimental \u00b6 [common]\\ @ExperimentalCoroutinesApi @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class WireGrpcExperimental Marker annotation for experimental Wire gRPC features. Constructors \u00b6 WireGrpcExperimental [common] fun WireGrpcExperimental ()","title":"Index"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/#wiregrpcexperimental","text":"[common]\\ @ExperimentalCoroutinesApi @ Target (allowedTargets = [ AnnotationTarget.CLASS , AnnotationTarget.FUNCTION ]) annotation class WireGrpcExperimental Marker annotation for experimental Wire gRPC features.","title":"WireGrpcExperimental"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/#constructors","text":"WireGrpcExperimental [common] fun WireGrpcExperimental ()","title":"Constructors"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/-wire-grpc-experimental/","text":"// wire-grpc-client / com.squareup.wire / WireGrpcExperimental / WireGrpcExperimental WireGrpcExperimental \u00b6 [common]\\ fun WireGrpcExperimental ()","title":" wire grpc experimental"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-wire-grpc-experimental/-wire-grpc-experimental/#wiregrpcexperimental","text":"[common]\\ fun WireGrpcExperimental ()","title":"WireGrpcExperimental"},{"location":"3.x/wire-gson-support/com.squareup.wire/","text":"// wire-gson-support / com.squareup.wire Package com.squareup.wire \u00b6 Types \u00b6 Name Summary AnyMessageTypeAdapter [jvm] class AnyMessageTypeAdapter (gson: Gson, typeUrlToAdapter: Map < String , ProtoAdapter<*>>) : TypeAdapter<AnyMessage> WireTypeAdapterFactory [jvm] class WireTypeAdapterFactory @ JvmOverloads constructor(typeUrlToAdapter: Map < String , ProtoAdapter<*>>, writeIdentityValues: Boolean ) : TypeAdapterFactory A TypeAdapterFactory that allows Wire messages to be serialized and deserialized using the GSON Json library. To create a Gson instance that works with Wire, use the com.google.gson.GsonBuilder interface:","title":"wire-gson-support"},{"location":"3.x/wire-gson-support/com.squareup.wire/#package-comsquareupwire","text":"","title":"Package com.squareup.wire"},{"location":"3.x/wire-gson-support/com.squareup.wire/#types","text":"Name Summary AnyMessageTypeAdapter [jvm] class AnyMessageTypeAdapter (gson: Gson, typeUrlToAdapter: Map < String , ProtoAdapter<*>>) : TypeAdapter<AnyMessage> WireTypeAdapterFactory [jvm] class WireTypeAdapterFactory @ JvmOverloads constructor(typeUrlToAdapter: Map < String , ProtoAdapter<*>>, writeIdentityValues: Boolean ) : TypeAdapterFactory A TypeAdapterFactory that allows Wire messages to be serialized and deserialized using the GSON Json library. To create a Gson instance that works with Wire, use the com.google.gson.GsonBuilder interface:","title":"Types"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/","text":"// wire-gson-support / com.squareup.wire / AnyMessageTypeAdapter AnyMessageTypeAdapter \u00b6 [jvm]\\ class AnyMessageTypeAdapter (gson: Gson, typeUrlToAdapter: Map < String , ProtoAdapter<*>>) : TypeAdapter<AnyMessage> Functions \u00b6 Name Summary fromJson [jvm] fun fromJson (p0: Reader ): AnyMessage fun fromJson (p0: String ): AnyMessage fromJsonTree [jvm] fun fromJsonTree (p0: JsonElement): AnyMessage nullSafe [jvm] fun nullSafe (): TypeAdapter<AnyMessage> read [jvm] open override fun read (reader: JsonReader): AnyMessage? toJson [jvm] fun toJson (p0: AnyMessage): String fun toJson (p0: Writer , p1: AnyMessage) toJsonTree [jvm] fun toJsonTree (p0: AnyMessage): JsonElement write [jvm] open override fun write (writer: JsonWriter, value: AnyMessage?)","title":"Index"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/#anymessagetypeadapter","text":"[jvm]\\ class AnyMessageTypeAdapter (gson: Gson, typeUrlToAdapter: Map < String , ProtoAdapter<*>>) : TypeAdapter<AnyMessage>","title":"AnyMessageTypeAdapter"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/#functions","text":"Name Summary fromJson [jvm] fun fromJson (p0: Reader ): AnyMessage fun fromJson (p0: String ): AnyMessage fromJsonTree [jvm] fun fromJsonTree (p0: JsonElement): AnyMessage nullSafe [jvm] fun nullSafe (): TypeAdapter<AnyMessage> read [jvm] open override fun read (reader: JsonReader): AnyMessage? toJson [jvm] fun toJson (p0: AnyMessage): String fun toJson (p0: Writer , p1: AnyMessage) toJsonTree [jvm] fun toJsonTree (p0: AnyMessage): JsonElement write [jvm] open override fun write (writer: JsonWriter, value: AnyMessage?)","title":"Functions"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/-any-message-type-adapter/","text":"// wire-gson-support / com.squareup.wire / AnyMessageTypeAdapter / AnyMessageTypeAdapter AnyMessageTypeAdapter \u00b6 [jvm]\\ fun AnyMessageTypeAdapter (gson: Gson, typeUrlToAdapter: Map < String , ProtoAdapter<*>>)","title":" any message type adapter"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/-any-message-type-adapter/#anymessagetypeadapter","text":"[jvm]\\ fun AnyMessageTypeAdapter (gson: Gson, typeUrlToAdapter: Map < String , ProtoAdapter<*>>)","title":"AnyMessageTypeAdapter"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/read/","text":"// wire-gson-support / com.squareup.wire / AnyMessageTypeAdapter / read read \u00b6 [jvm]\\ open override fun read (reader: JsonReader): AnyMessage?","title":"Read"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/read/#read","text":"[jvm]\\ open override fun read (reader: JsonReader): AnyMessage?","title":"read"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/write/","text":"// wire-gson-support / com.squareup.wire / AnyMessageTypeAdapter / write write \u00b6 [jvm]\\ open override fun write (writer: JsonWriter, value: AnyMessage?)","title":"Write"},{"location":"3.x/wire-gson-support/com.squareup.wire/-any-message-type-adapter/write/#write","text":"[jvm]\\ open override fun write (writer: JsonWriter, value: AnyMessage?)","title":"write"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/","text":"// wire-gson-support / com.squareup.wire / WireTypeAdapterFactory WireTypeAdapterFactory \u00b6 [jvm]\\ class WireTypeAdapterFactory @ JvmOverloads constructor(typeUrlToAdapter: Map < String , ProtoAdapter<*>>, writeIdentityValues: Boolean ) : TypeAdapterFactory A TypeAdapterFactory that allows Wire messages to be serialized and deserialized using the GSON Json library. To create a Gson instance that works with Wire, use the com.google.gson.GsonBuilder interface: Gson gson = new GsonBuilder()\\ .registerTypeAdapterFactory(new WireTypeAdapterFactory())\\ .create(); The resulting Gson instance will be able to serialize and deserialize any Wire Message type, including extensions and unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library. Note that version 1.2 of that API has a bug in the way it serializes unknown fields, so we use our own approach for this case. In Proto3, if a field is set to its default (or identity) value, it will be omitted in the JSON-encoded data. Set writeIdentityValues to true if you want Wire to always write values, including default ones. Constructors \u00b6 WireTypeAdapterFactory [jvm] @ JvmOverloads fun WireTypeAdapterFactory (typeUrlToAdapter: Map < String , ProtoAdapter<*>> = mapOf(), writeIdentityValues: Boolean = false) Functions \u00b6 Name Summary create [jvm] open override fun < T > create (gson: Gson, type: TypeToken< T >): TypeAdapter< T >? plus [jvm] fun plus (adapter: ProtoAdapter< >): WireTypeAdapterFactory Returns a new WireTypeAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage. [jvm] fun plus (adapters: List <ProtoAdapter< >>): WireTypeAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage.","title":"Index"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/#wiretypeadapterfactory","text":"[jvm]\\ class WireTypeAdapterFactory @ JvmOverloads constructor(typeUrlToAdapter: Map < String , ProtoAdapter<*>>, writeIdentityValues: Boolean ) : TypeAdapterFactory A TypeAdapterFactory that allows Wire messages to be serialized and deserialized using the GSON Json library. To create a Gson instance that works with Wire, use the com.google.gson.GsonBuilder interface: Gson gson = new GsonBuilder()\\ .registerTypeAdapterFactory(new WireTypeAdapterFactory())\\ .create(); The resulting Gson instance will be able to serialize and deserialize any Wire Message type, including extensions and unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library. Note that version 1.2 of that API has a bug in the way it serializes unknown fields, so we use our own approach for this case. In Proto3, if a field is set to its default (or identity) value, it will be omitted in the JSON-encoded data. Set writeIdentityValues to true if you want Wire to always write values, including default ones.","title":"WireTypeAdapterFactory"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/#constructors","text":"WireTypeAdapterFactory [jvm] @ JvmOverloads fun WireTypeAdapterFactory (typeUrlToAdapter: Map < String , ProtoAdapter<*>> = mapOf(), writeIdentityValues: Boolean = false)","title":"Constructors"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/#functions","text":"Name Summary create [jvm] open override fun < T > create (gson: Gson, type: TypeToken< T >): TypeAdapter< T >? plus [jvm] fun plus (adapter: ProtoAdapter< >): WireTypeAdapterFactory Returns a new WireTypeAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage. [jvm] fun plus (adapters: List <ProtoAdapter< >>): WireTypeAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage.","title":"Functions"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/-wire-type-adapter-factory/","text":"// wire-gson-support / com.squareup.wire / WireTypeAdapterFactory / WireTypeAdapterFactory WireTypeAdapterFactory \u00b6 [jvm]\\ @ JvmOverloads fun WireTypeAdapterFactory (typeUrlToAdapter: Map < String , ProtoAdapter<*>> = mapOf(), writeIdentityValues: Boolean = false)","title":" wire type adapter factory"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/-wire-type-adapter-factory/#wiretypeadapterfactory","text":"[jvm]\\ @ JvmOverloads fun WireTypeAdapterFactory (typeUrlToAdapter: Map < String , ProtoAdapter<*>> = mapOf(), writeIdentityValues: Boolean = false)","title":"WireTypeAdapterFactory"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/create/","text":"// wire-gson-support / com.squareup.wire / WireTypeAdapterFactory / create create \u00b6 [jvm]\\ open override fun < T > create (gson: Gson, type: TypeToken< T >): TypeAdapter< T >?","title":"Create"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/create/#create","text":"[jvm]\\ open override fun < T > create (gson: Gson, type: TypeToken< T >): TypeAdapter< T >?","title":"create"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/plus/","text":"// wire-gson-support / com.squareup.wire / WireTypeAdapterFactory / plus plus \u00b6 [jvm]\\ fun plus (adapters: List <ProtoAdapter<*>>): WireTypeAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage. [jvm]\\ fun plus (adapter: ProtoAdapter<*>): WireTypeAdapterFactory Returns a new WireTypeAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage.","title":"Plus"},{"location":"3.x/wire-gson-support/com.squareup.wire/-wire-type-adapter-factory/plus/#plus","text":"[jvm]\\ fun plus (adapters: List <ProtoAdapter<*>>): WireTypeAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage. [jvm]\\ fun plus (adapter: ProtoAdapter<*>): WireTypeAdapterFactory Returns a new WireTypeAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage.","title":"plus"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/","text":"// wire-java-generator / com.squareup.wire.java Package com.squareup.wire.java \u00b6 Types \u00b6 Name Summary JavaGenerator [jvm] class JavaGenerator Generates Java source code that matches proto definitions.","title":"Index"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/#package-comsquareupwirejava","text":"","title":"Package com.squareup.wire.java"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/#types","text":"Name Summary JavaGenerator [jvm] class JavaGenerator Generates Java source code that matches proto definitions.","title":"Types"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator JavaGenerator \u00b6 [jvm]\\ class JavaGenerator Generates Java source code that matches proto definitions. This can map type names from protocol buffers (like uint32, string, or squareup.protos.person.Person to the corresponding Java names (like int, java.lang.String, or com.squareup.protos.person.Person). Functions \u00b6 Name Summary abstractAdapterName [jvm] @ Nullable open fun abstractAdapterName (protoType: ProtoType): ClassName Returns the Java type of the abstract adapter class generated for a corresponding protoType. builtInType [jvm] open fun builtInType (protoType: ProtoType): Boolean generateAdapterForCustomType [jvm] open fun generateAdapterForCustomType (type: Type): TypeSpec Returns a standalone adapter for type. generatedTypeName [jvm] open fun generatedTypeName (member: ProtoMember): ClassName Returns the full name of the class generated for member. [jvm] open fun generatedTypeName (type: Type): ClassName Returns the full name of the class generated for type. generateOptionType [jvm] @ Nullable open fun generateOptionType (extend: Extend, field: Field): TypeSpec generateType [jvm] open fun generateType (type: Type): TypeSpec Returns the generated code for type, which may be a top-level or a nested type. get [jvm] open fun get (schema: Schema): JavaGenerator isEnum [jvm] open fun isEnum (type: ProtoType): Boolean schema [jvm] open fun schema (): Schema typeName [jvm] open fun typeName (protoType: ProtoType): TypeName Returns the Java type for protoType. withAndroid [jvm] open fun withAndroid (emitAndroid: Boolean ): JavaGenerator withAndroidAnnotations [jvm] open fun withAndroidAnnotations (emitAndroidAnnotations: Boolean ): JavaGenerator withBuildersOnly [jvm] open fun withBuildersOnly (buildersOnly: Boolean ): JavaGenerator withCompact [jvm] open fun withCompact (emitCompact: Boolean ): JavaGenerator withOptions [jvm] open fun withOptions (emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean ): JavaGenerator withProfile [jvm] open fun withProfile (profile: Profile): JavaGenerator","title":"Index"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/#javagenerator","text":"[jvm]\\ class JavaGenerator Generates Java source code that matches proto definitions. This can map type names from protocol buffers (like uint32, string, or squareup.protos.person.Person to the corresponding Java names (like int, java.lang.String, or com.squareup.protos.person.Person).","title":"JavaGenerator"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/#functions","text":"Name Summary abstractAdapterName [jvm] @ Nullable open fun abstractAdapterName (protoType: ProtoType): ClassName Returns the Java type of the abstract adapter class generated for a corresponding protoType. builtInType [jvm] open fun builtInType (protoType: ProtoType): Boolean generateAdapterForCustomType [jvm] open fun generateAdapterForCustomType (type: Type): TypeSpec Returns a standalone adapter for type. generatedTypeName [jvm] open fun generatedTypeName (member: ProtoMember): ClassName Returns the full name of the class generated for member. [jvm] open fun generatedTypeName (type: Type): ClassName Returns the full name of the class generated for type. generateOptionType [jvm] @ Nullable open fun generateOptionType (extend: Extend, field: Field): TypeSpec generateType [jvm] open fun generateType (type: Type): TypeSpec Returns the generated code for type, which may be a top-level or a nested type. get [jvm] open fun get (schema: Schema): JavaGenerator isEnum [jvm] open fun isEnum (type: ProtoType): Boolean schema [jvm] open fun schema (): Schema typeName [jvm] open fun typeName (protoType: ProtoType): TypeName Returns the Java type for protoType. withAndroid [jvm] open fun withAndroid (emitAndroid: Boolean ): JavaGenerator withAndroidAnnotations [jvm] open fun withAndroidAnnotations (emitAndroidAnnotations: Boolean ): JavaGenerator withBuildersOnly [jvm] open fun withBuildersOnly (buildersOnly: Boolean ): JavaGenerator withCompact [jvm] open fun withCompact (emitCompact: Boolean ): JavaGenerator withOptions [jvm] open fun withOptions (emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean ): JavaGenerator withProfile [jvm] open fun withProfile (profile: Profile): JavaGenerator","title":"Functions"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/abstract-adapter-name/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / abstractAdapterName abstractAdapterName \u00b6 [jvm]\\ @ Nullable open fun abstractAdapterName (protoType: ProtoType): ClassName Returns the Java type of the abstract adapter class generated for a corresponding protoType. Returns null if protoType is not using a custom proto adapter.","title":"Abstract adapter name"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/abstract-adapter-name/#abstractadaptername","text":"[jvm]\\ @ Nullable open fun abstractAdapterName (protoType: ProtoType): ClassName Returns the Java type of the abstract adapter class generated for a corresponding protoType. Returns null if protoType is not using a custom proto adapter.","title":"abstractAdapterName"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/built-in-type/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / builtInType builtInType \u00b6 [jvm]\\ open fun builtInType (protoType: ProtoType): Boolean","title":"Built in type"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/built-in-type/#builtintype","text":"[jvm]\\ open fun builtInType (protoType: ProtoType): Boolean","title":"builtInType"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-adapter-for-custom-type/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / generateAdapterForCustomType generateAdapterForCustomType \u00b6 [jvm]\\ open fun generateAdapterForCustomType (type: Type): TypeSpec Returns a standalone adapter for type.","title":"Generate adapter for custom type"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-adapter-for-custom-type/#generateadapterforcustomtype","text":"[jvm]\\ open fun generateAdapterForCustomType (type: Type): TypeSpec Returns a standalone adapter for type.","title":"generateAdapterForCustomType"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-option-type/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / generateOptionType generateOptionType \u00b6 [jvm]\\ @ Nullable open fun generateOptionType (extend: Extend, field: Field): TypeSpec","title":"Generate option type"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-option-type/#generateoptiontype","text":"[jvm]\\ @ Nullable open fun generateOptionType (extend: Extend, field: Field): TypeSpec","title":"generateOptionType"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-type/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / generateType generateType \u00b6 [jvm]\\ open fun generateType (type: Type): TypeSpec Returns the generated code for type, which may be a top-level or a nested type.","title":"Generate type"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generate-type/#generatetype","text":"[jvm]\\ open fun generateType (type: Type): TypeSpec Returns the generated code for type, which may be a top-level or a nested type.","title":"generateType"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generated-type-name/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / generatedTypeName generatedTypeName \u00b6 [jvm]\\ open fun generatedTypeName (type: Type): ClassName Returns the full name of the class generated for type. [jvm]\\ open fun generatedTypeName (member: ProtoMember): ClassName Returns the full name of the class generated for member.","title":"Generated type name"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/generated-type-name/#generatedtypename","text":"[jvm]\\ open fun generatedTypeName (type: Type): ClassName Returns the full name of the class generated for type. [jvm]\\ open fun generatedTypeName (member: ProtoMember): ClassName Returns the full name of the class generated for member.","title":"generatedTypeName"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/get/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / get get \u00b6 [jvm]\\ open fun get (schema: Schema): JavaGenerator","title":"Get"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/get/#get","text":"[jvm]\\ open fun get (schema: Schema): JavaGenerator","title":"get"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/is-enum/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / isEnum isEnum \u00b6 [jvm]\\ open fun isEnum (type: ProtoType): Boolean","title":"Is enum"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/is-enum/#isenum","text":"[jvm]\\ open fun isEnum (type: ProtoType): Boolean","title":"isEnum"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/schema/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / schema schema \u00b6 [jvm]\\ open fun schema (): Schema","title":"Schema"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/schema/#schema","text":"[jvm]\\ open fun schema (): Schema","title":"schema"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/type-name/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / typeName typeName \u00b6 [jvm]\\ open fun typeName (protoType: ProtoType): TypeName Returns the Java type for protoType. Throws \u00b6 java.lang.IllegalArgumentException if there is no known Java type for protoType, such as if that type wasn\u2019t in this generator\u2019s schema.","title":"Type name"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/type-name/#typename","text":"[jvm]\\ open fun typeName (protoType: ProtoType): TypeName Returns the Java type for protoType.","title":"typeName"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/type-name/#throws","text":"java.lang.IllegalArgumentException if there is no known Java type for protoType, such as if that type wasn\u2019t in this generator\u2019s schema.","title":"Throws"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-android-annotations/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / withAndroidAnnotations withAndroidAnnotations \u00b6 [jvm]\\ open fun withAndroidAnnotations (emitAndroidAnnotations: Boolean ): JavaGenerator","title":"With android annotations"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-android-annotations/#withandroidannotations","text":"[jvm]\\ open fun withAndroidAnnotations (emitAndroidAnnotations: Boolean ): JavaGenerator","title":"withAndroidAnnotations"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-android/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / withAndroid withAndroid \u00b6 [jvm]\\ open fun withAndroid (emitAndroid: Boolean ): JavaGenerator","title":"With android"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-android/#withandroid","text":"[jvm]\\ open fun withAndroid (emitAndroid: Boolean ): JavaGenerator","title":"withAndroid"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-builders-only/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / withBuildersOnly withBuildersOnly \u00b6 [jvm]\\ open fun withBuildersOnly (buildersOnly: Boolean ): JavaGenerator","title":"With builders only"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-builders-only/#withbuildersonly","text":"[jvm]\\ open fun withBuildersOnly (buildersOnly: Boolean ): JavaGenerator","title":"withBuildersOnly"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-compact/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / withCompact withCompact \u00b6 [jvm]\\ open fun withCompact (emitCompact: Boolean ): JavaGenerator","title":"With compact"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-compact/#withcompact","text":"[jvm]\\ open fun withCompact (emitCompact: Boolean ): JavaGenerator","title":"withCompact"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-options/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / withOptions withOptions \u00b6 [jvm]\\ open fun withOptions (emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean ): JavaGenerator","title":"With options"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-options/#withoptions","text":"[jvm]\\ open fun withOptions (emitDeclaredOptions: Boolean , emitAppliedOptions: Boolean ): JavaGenerator","title":"withOptions"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-profile/","text":"// wire-java-generator / com.squareup.wire.java / JavaGenerator / withProfile withProfile \u00b6 [jvm]\\ open fun withProfile (profile: Profile): JavaGenerator","title":"With profile"},{"location":"3.x/wire-java-generator/com.squareup.wire.java/-java-generator/with-profile/#withprofile","text":"[jvm]\\ open fun withProfile (profile: Profile): JavaGenerator","title":"withProfile"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin Package com.squareup.wire.kotlin \u00b6 Types \u00b6 Name Summary KotlinGenerator [jvm] class KotlinGenerator RpcCallStyle [jvm] enum RpcCallStyle : Enum < RpcCallStyle > RpcRole [jvm] enum RpcRole : Enum < RpcRole >","title":"Index"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/#package-comsquareupwirekotlin","text":"","title":"Package com.squareup.wire.kotlin"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/#types","text":"Name Summary KotlinGenerator [jvm] class KotlinGenerator RpcCallStyle [jvm] enum RpcCallStyle : Enum < RpcCallStyle > RpcRole [jvm] enum RpcRole : Enum < RpcRole >","title":"Types"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / KotlinGenerator KotlinGenerator \u00b6 [jvm]\\ class KotlinGenerator Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary generatedServiceName [jvm] fun generatedServiceName (service: Service, rpc: Rpc? = null, isImplementation: Boolean = false): ClassName Returns the full name of the class generated for service # rpc . This returns a name like RouteGuideClient or RouteGuideGetFeatureBlockingServer. generatedTypeName [jvm] fun generatedTypeName (member: ProtoMember): ClassName Returns the full name of the class generated for member . [jvm] fun generatedTypeName (type: Type): ClassName Returns the full name of the class generated for type . generateOptionType [jvm] fun generateOptionType (extend: Extend, field: Field): TypeSpec? Example generateServiceTypeSpecs [jvm] fun generateServiceTypeSpecs (service: Service, onlyRpc: Rpc? = null): Map <ClassName, TypeSpec> Generates all TypeSpecs for the given Service. generateType [jvm] fun generateType (type: Type): TypeSpec Properties \u00b6 Name Summary schema [jvm] val schema : Schema","title":"Index"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/#kotlingenerator","text":"[jvm]\\ class KotlinGenerator","title":"KotlinGenerator"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/#functions","text":"Name Summary generatedServiceName [jvm] fun generatedServiceName (service: Service, rpc: Rpc? = null, isImplementation: Boolean = false): ClassName Returns the full name of the class generated for service # rpc . This returns a name like RouteGuideClient or RouteGuideGetFeatureBlockingServer. generatedTypeName [jvm] fun generatedTypeName (member: ProtoMember): ClassName Returns the full name of the class generated for member . [jvm] fun generatedTypeName (type: Type): ClassName Returns the full name of the class generated for type . generateOptionType [jvm] fun generateOptionType (extend: Extend, field: Field): TypeSpec? Example generateServiceTypeSpecs [jvm] fun generateServiceTypeSpecs (service: Service, onlyRpc: Rpc? = null): Map <ClassName, TypeSpec> Generates all TypeSpecs for the given Service. generateType [jvm] fun generateType (type: Type): TypeSpec","title":"Functions"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/#properties","text":"Name Summary schema [jvm] val schema : Schema","title":"Properties"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-option-type/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / KotlinGenerator / generateOptionType generateOptionType \u00b6 [jvm]\\ fun generateOptionType (extend: Extend, field: Field): TypeSpec? Example @Retention(AnnotationRetention.RUNTIME)\\ @Target(AnnotationTarget.PROPERTY, AnnotationTarget.FIELD)\\ annotation class MyFieldOption(val value: String)","title":"Generate option type"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-option-type/#generateoptiontype","text":"[jvm]\\ fun generateOptionType (extend: Extend, field: Field): TypeSpec? Example @Retention(AnnotationRetention.RUNTIME)\\ @Target(AnnotationTarget.PROPERTY, AnnotationTarget.FIELD)\\ annotation class MyFieldOption(val value: String)","title":"generateOptionType"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-service-type-specs/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / KotlinGenerator / generateServiceTypeSpecs generateServiceTypeSpecs \u00b6 [jvm]\\ fun generateServiceTypeSpecs (service: Service, onlyRpc: Rpc? = null): Map <ClassName, TypeSpec> Generates all TypeSpecs for the given Service. If onlyRpc isn\u2019t null, this will generate code only for this onlyRpc; otherwise, all RPCs of the service will be code generated.","title":"Generate service type specs"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-service-type-specs/#generateservicetypespecs","text":"[jvm]\\ fun generateServiceTypeSpecs (service: Service, onlyRpc: Rpc? = null): Map <ClassName, TypeSpec> Generates all TypeSpecs for the given Service. If onlyRpc isn\u2019t null, this will generate code only for this onlyRpc; otherwise, all RPCs of the service will be code generated.","title":"generateServiceTypeSpecs"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-type/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / KotlinGenerator / generateType generateType \u00b6 [jvm]\\ fun generateType (type: Type): TypeSpec","title":"Generate type"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generate-type/#generatetype","text":"[jvm]\\ fun generateType (type: Type): TypeSpec","title":"generateType"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generated-service-name/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / KotlinGenerator / generatedServiceName generatedServiceName \u00b6 [jvm]\\ fun generatedServiceName (service: Service, rpc: Rpc? = null, isImplementation: Boolean = false): ClassName Returns the full name of the class generated for service # rpc . This returns a name like RouteGuideClient or RouteGuideGetFeatureBlockingServer.","title":"Generated service name"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generated-service-name/#generatedservicename","text":"[jvm]\\ fun generatedServiceName (service: Service, rpc: Rpc? = null, isImplementation: Boolean = false): ClassName Returns the full name of the class generated for service # rpc . This returns a name like RouteGuideClient or RouteGuideGetFeatureBlockingServer.","title":"generatedServiceName"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generated-type-name/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / KotlinGenerator / generatedTypeName generatedTypeName \u00b6 [jvm]\\ fun generatedTypeName (type: Type): ClassName Returns the full name of the class generated for type . [jvm]\\ fun generatedTypeName (member: ProtoMember): ClassName Returns the full name of the class generated for member .","title":"Generated type name"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/generated-type-name/#generatedtypename","text":"[jvm]\\ fun generatedTypeName (type: Type): ClassName Returns the full name of the class generated for type . [jvm]\\ fun generatedTypeName (member: ProtoMember): ClassName Returns the full name of the class generated for member .","title":"generatedTypeName"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/schema/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / KotlinGenerator / schema schema \u00b6 [jvm]\\ val schema : Schema","title":"Schema"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/schema/#schema","text":"[jvm]\\ val schema : Schema","title":"schema"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / KotlinGenerator / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary builtInType [jvm] fun builtInType (protoType: ProtoType): Boolean invoke [jvm] @ JvmStatic @ JvmName (name = \u201cget\u201d) operator fun invoke (schema: Schema, profile: Profile = Profile(), emitAndroid: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String ? = null, buildersOnly: Boolean = false): KotlinGenerator","title":"Index"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/#functions","text":"Name Summary builtInType [jvm] fun builtInType (protoType: ProtoType): Boolean invoke [jvm] @ JvmStatic @ JvmName (name = \u201cget\u201d) operator fun invoke (schema: Schema, profile: Profile = Profile(), emitAndroid: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String ? = null, buildersOnly: Boolean = false): KotlinGenerator","title":"Functions"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/built-in-type/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / KotlinGenerator / Companion / builtInType builtInType \u00b6 [jvm]\\ fun builtInType (protoType: ProtoType): Boolean","title":"Built in type"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/built-in-type/#builtintype","text":"[jvm]\\ fun builtInType (protoType: ProtoType): Boolean","title":"builtInType"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/invoke/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / KotlinGenerator / Companion / invoke invoke \u00b6 [jvm]\\ @ JvmStatic @ JvmName (name = \u201cget\u201d) operator fun invoke (schema: Schema, profile: Profile = Profile(), emitAndroid: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String ? = null, buildersOnly: Boolean = false): KotlinGenerator","title":"Invoke"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-kotlin-generator/-companion/invoke/#invoke","text":"[jvm]\\ @ JvmStatic @ JvmName (name = \u201cget\u201d) operator fun invoke (schema: Schema, profile: Profile = Profile(), emitAndroid: Boolean = false, javaInterop: Boolean = false, emitDeclaredOptions: Boolean = true, emitAppliedOptions: Boolean = true, rpcCallStyle: RpcCallStyle = RpcCallStyle.SUSPENDING, rpcRole: RpcRole = RpcRole.CLIENT, boxOneOfsMinSize: Int = 5_000, grpcServerCompatible: Boolean = false, nameSuffix: String ? = null, buildersOnly: Boolean = false): KotlinGenerator","title":"invoke"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / RpcCallStyle RpcCallStyle \u00b6 [jvm]\\ enum RpcCallStyle : Enum < RpcCallStyle > Entries \u00b6 BLOCKING [jvm] BLOCKING () Generate blocking APIs callable by Java and Kotlin. SUSPENDING [jvm] SUSPENDING () Generate coroutines APIs that require a Kotlin coroutines context. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/#rpccallstyle","text":"[jvm]\\ enum RpcCallStyle : Enum < RpcCallStyle >","title":"RpcCallStyle"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/#entries","text":"BLOCKING [jvm] BLOCKING () Generate blocking APIs callable by Java and Kotlin. SUSPENDING [jvm] SUSPENDING () Generate coroutines APIs that require a Kotlin coroutines context.","title":"Entries"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-b-l-o-c-k-i-n-g/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / RpcCallStyle / BLOCKING BLOCKING \u00b6 [jvm]\\ BLOCKING () Generate blocking APIs callable by Java and Kotlin. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-b-l-o-c-k-i-n-g/#blocking","text":"[jvm]\\ BLOCKING () Generate blocking APIs callable by Java and Kotlin.","title":"BLOCKING"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-b-l-o-c-k-i-n-g/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-s-u-s-p-e-n-d-i-n-g/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / RpcCallStyle / SUSPENDING SUSPENDING \u00b6 [jvm]\\ SUSPENDING () Generate coroutines APIs that require a Kotlin coroutines context. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-s-u-s-p-e-n-d-i-n-g/#suspending","text":"[jvm]\\ SUSPENDING () Generate coroutines APIs that require a Kotlin coroutines context.","title":"SUSPENDING"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-call-style/-s-u-s-p-e-n-d-i-n-g/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / RpcRole RpcRole \u00b6 [jvm]\\ enum RpcRole : Enum < RpcRole > Entries \u00b6 NONE [jvm] NONE () Doesn\u2019t generate any interfaces. SERVER [jvm] SERVER () Generate interfaces best suited to receiving inbound calls. CLIENT [jvm] CLIENT () Generate interfaces best suited to sending outbound calls. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/#rpcrole","text":"[jvm]\\ enum RpcRole : Enum < RpcRole >","title":"RpcRole"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/#entries","text":"NONE [jvm] NONE () Doesn\u2019t generate any interfaces. SERVER [jvm] SERVER () Generate interfaces best suited to receiving inbound calls. CLIENT [jvm] CLIENT () Generate interfaces best suited to sending outbound calls.","title":"Entries"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-c-l-i-e-n-t/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / RpcRole / CLIENT CLIENT \u00b6 [jvm]\\ CLIENT () Generate interfaces best suited to sending outbound calls. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-c-l-i-e-n-t/#client","text":"[jvm]\\ CLIENT () Generate interfaces best suited to sending outbound calls.","title":"CLIENT"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-c-l-i-e-n-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-n-o-n-e/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / RpcRole / NONE NONE \u00b6 [jvm]\\ NONE () Doesn\u2019t generate any interfaces. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-n-o-n-e/#none","text":"[jvm]\\ NONE () Doesn\u2019t generate any interfaces.","title":"NONE"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-n-o-n-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-s-e-r-v-e-r/","text":"// wire-kotlin-generator / com.squareup.wire.kotlin / RpcRole / SERVER SERVER \u00b6 [jvm]\\ SERVER () Generate interfaces best suited to receiving inbound calls. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-s-e-r-v-e-r/#server","text":"[jvm]\\ SERVER () Generate interfaces best suited to receiving inbound calls.","title":"SERVER"},{"location":"3.x/wire-kotlin-generator/com.squareup.wire.kotlin/-rpc-role/-s-e-r-v-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/","text":"// wire-moshi-adapter / com.squareup.wire Package com.squareup.wire \u00b6 Types \u00b6 Name Summary WireJsonAdapterFactory [jvm] class WireJsonAdapterFactory @ JvmOverloads constructor(typeUrlToAdapter: Map < String , ProtoAdapter<*>>, writeIdentityValues: Boolean ) : JsonAdapter.Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library. Functions \u00b6 Name Summary redacting [jvm] fun < T > JsonAdapter< T >. redacting (): JsonAdapter< T >","title":"wire-moshi-adapter"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/#package-comsquareupwire","text":"","title":"Package com.squareup.wire"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/#types","text":"Name Summary WireJsonAdapterFactory [jvm] class WireJsonAdapterFactory @ JvmOverloads constructor(typeUrlToAdapter: Map < String , ProtoAdapter<*>>, writeIdentityValues: Boolean ) : JsonAdapter.Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library.","title":"Types"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/#functions","text":"Name Summary redacting [jvm] fun < T > JsonAdapter< T >. redacting (): JsonAdapter< T >","title":"Functions"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/redacting/","text":"// wire-moshi-adapter / com.squareup.wire / redacting redacting \u00b6 [jvm]\\ fun < T > JsonAdapter< T >. redacting (): JsonAdapter< T >","title":"Redacting"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/redacting/#redacting","text":"[jvm]\\ fun < T > JsonAdapter< T >. redacting (): JsonAdapter< T >","title":"redacting"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/","text":"// wire-moshi-adapter / com.squareup.wire / WireJsonAdapterFactory WireJsonAdapterFactory \u00b6 [jvm]\\ class WireJsonAdapterFactory @ JvmOverloads constructor(typeUrlToAdapter: Map < String , ProtoAdapter<*>>, writeIdentityValues: Boolean ) : JsonAdapter.Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library. Moshi moshi = new Moshi.Builder()\\ .add(new WireJsonAdapterFactory())\\ .build(); The resulting Moshi instance will be able to serialize and deserialize Wire Message types, including extensions. It ignores unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library. In Proto3, if a field is set to its default (or identity) value, it will be omitted in the JSON-encoded data. Set writeIdentityValues to true if you want Wire to always write values, including default ones. Constructors \u00b6 WireJsonAdapterFactory [jvm] @ JvmOverloads fun WireJsonAdapterFactory (typeUrlToAdapter: Map < String , ProtoAdapter<*>> = mapOf(), writeIdentityValues: Boolean = false) Functions \u00b6 Name Summary create [jvm] open override fun create (type: Type , annotations: Set < Annotation >, moshi: Moshi): JsonAdapter<*>? plus [jvm] fun plus (adapter: ProtoAdapter< >): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage. [jvm] fun plus (adapters: List <ProtoAdapter< >>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage.","title":"Index"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#wirejsonadapterfactory","text":"[jvm]\\ class WireJsonAdapterFactory @ JvmOverloads constructor(typeUrlToAdapter: Map < String , ProtoAdapter<*>>, writeIdentityValues: Boolean ) : JsonAdapter.Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library. Moshi moshi = new Moshi.Builder()\\ .add(new WireJsonAdapterFactory())\\ .build(); The resulting Moshi instance will be able to serialize and deserialize Wire Message types, including extensions. It ignores unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library. In Proto3, if a field is set to its default (or identity) value, it will be omitted in the JSON-encoded data. Set writeIdentityValues to true if you want Wire to always write values, including default ones.","title":"WireJsonAdapterFactory"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#constructors","text":"WireJsonAdapterFactory [jvm] @ JvmOverloads fun WireJsonAdapterFactory (typeUrlToAdapter: Map < String , ProtoAdapter<*>> = mapOf(), writeIdentityValues: Boolean = false)","title":"Constructors"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#functions","text":"Name Summary create [jvm] open override fun create (type: Type , annotations: Set < Annotation >, moshi: Moshi): JsonAdapter<*>? plus [jvm] fun plus (adapter: ProtoAdapter< >): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage. [jvm] fun plus (adapters: List <ProtoAdapter< >>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage.","title":"Functions"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/-wire-json-adapter-factory/","text":"// wire-moshi-adapter / com.squareup.wire / WireJsonAdapterFactory / WireJsonAdapterFactory WireJsonAdapterFactory \u00b6 [jvm]\\ @ JvmOverloads fun WireJsonAdapterFactory (typeUrlToAdapter: Map < String , ProtoAdapter<*>> = mapOf(), writeIdentityValues: Boolean = false)","title":" wire json adapter factory"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/-wire-json-adapter-factory/#wirejsonadapterfactory","text":"[jvm]\\ @ JvmOverloads fun WireJsonAdapterFactory (typeUrlToAdapter: Map < String , ProtoAdapter<*>> = mapOf(), writeIdentityValues: Boolean = false)","title":"WireJsonAdapterFactory"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/create/","text":"// wire-moshi-adapter / com.squareup.wire / WireJsonAdapterFactory / create create \u00b6 [jvm]\\ open override fun create (type: Type , annotations: Set < Annotation >, moshi: Moshi): JsonAdapter<*>?","title":"Create"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/create/#create","text":"[jvm]\\ open override fun create (type: Type , annotations: Set < Annotation >, moshi: Moshi): JsonAdapter<*>?","title":"create"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/plus/","text":"// wire-moshi-adapter / com.squareup.wire / WireJsonAdapterFactory / plus plus \u00b6 [jvm]\\ fun plus (adapters: List <ProtoAdapter<*>>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage. [jvm]\\ fun plus (adapter: ProtoAdapter<*>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage.","title":"Plus"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/plus/#plus","text":"[jvm]\\ fun plus (adapters: List <ProtoAdapter<*>>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapters if they\u2019re used with AnyMessage. [jvm]\\ fun plus (adapter: ProtoAdapter<*>): WireJsonAdapterFactory Returns a new WireJsonAdapterFactory that can encode the messages for adapter if they\u2019re used with AnyMessage.","title":"plus"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/","text":"// wire-reflector / com.squareup.wire.reflector Package com.squareup.wire.reflector \u00b6 Types \u00b6 Name Summary SchemaReflector [jvm] class SchemaReflector (schema: Schema, includeDependencies: Boolean ) This converts a Wire Schema model to a protobuf DescriptorProtos model and serves that.","title":"Index"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/#package-comsquareupwirereflector","text":"","title":"Package com.squareup.wire.reflector"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/#types","text":"Name Summary SchemaReflector [jvm] class SchemaReflector (schema: Schema, includeDependencies: Boolean ) This converts a Wire Schema model to a protobuf DescriptorProtos model and serves that.","title":"Types"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/","text":"// wire-reflector / com.squareup.wire.reflector / SchemaReflector SchemaReflector \u00b6 [jvm]\\ class SchemaReflector (schema: Schema, includeDependencies: Boolean ) This converts a Wire Schema model to a protobuf DescriptorProtos model and serves that. Constructors \u00b6 SchemaReflector [jvm] fun SchemaReflector (schema: Schema, includeDependencies: Boolean = true) Functions \u00b6 Name Summary process [jvm] fun process (request: <ERROR CLASS>): <ERROR CLASS>","title":"Index"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/#schemareflector","text":"[jvm]\\ class SchemaReflector (schema: Schema, includeDependencies: Boolean ) This converts a Wire Schema model to a protobuf DescriptorProtos model and serves that.","title":"SchemaReflector"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/#constructors","text":"SchemaReflector [jvm] fun SchemaReflector (schema: Schema, includeDependencies: Boolean = true)","title":"Constructors"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/#functions","text":"Name Summary process [jvm] fun process (request: <ERROR CLASS>): <ERROR CLASS>","title":"Functions"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/-schema-reflector/","text":"// wire-reflector / com.squareup.wire.reflector / SchemaReflector / SchemaReflector SchemaReflector \u00b6 [jvm]\\ fun SchemaReflector (schema: Schema, includeDependencies: Boolean = true)","title":" schema reflector"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/-schema-reflector/#schemareflector","text":"[jvm]\\ fun SchemaReflector (schema: Schema, includeDependencies: Boolean = true)","title":"SchemaReflector"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/process/","text":"// wire-reflector / com.squareup.wire.reflector / SchemaReflector / process process \u00b6 [jvm]\\ fun process (request: <ERROR CLASS>): <ERROR CLASS>","title":"Process"},{"location":"3.x/wire-reflector/com.squareup.wire.reflector/-schema-reflector/process/#process","text":"[jvm]\\ fun process (request: <ERROR CLASS>): <ERROR CLASS>","title":"process"},{"location":"3.x/wire-runtime/com.squareup.wire/","text":"// wire-runtime / com.squareup.wire Package com.squareup.wire \u00b6 Types \u00b6 Name Summary AndroidMessage [jvm] abstract class AndroidMessage < M : Message < M , B >, B : Message.Builder < M , B >> : Message < M , B > , Parcelable An Android-specific Message which adds support for Parcelable. AnyMessage [common] class AnyMessage (typeUrl: String , value: ByteString) : Message < AnyMessage , Nothing > Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Duration [common] class Duration A measurement of time. Durations may be positive, zero, or negative. [js, native, jvm] [js, native] class Duration [jvm] typealias Duration = Duration EnumAdapter [common, js, jvm, native] [common] abstract class EnumAdapter < E : WireEnum > : ProtoAdapter < E > [js, jvm, native] abstract class EnumAdapter < E : WireEnum> : ProtoAdapter < E > An abstract ProtoAdapter that converts values of an enum to and from integers. FieldEncoding [common] enum FieldEncoding : Enum < FieldEncoding > Instant [common] class Instant This represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform. [js, native, jvm] [js, native] class Instant [jvm] typealias Instant = Instant Message [common, js, jvm, native] [common, js, native] abstract class Message < M : Message < M , B >, B : Message.Builder < M , B >> [jvm] abstract class Message < M : Message < M , B >, B : Message.Builder < M , B >> : Serializable A protocol buffer message. MessageSink [common] interface MessageSink <in T : Any > A writable stream of messages. [js, jvm, native] [js, native] interface MessageSink <in T : Any > [jvm] interface MessageSink <in T : Any > : Closeable MessageSource [common] interface MessageSource <out T : Any > A readable stream of messages. [js, jvm, native] [js, native] interface MessageSource <out T : Any > [jvm] interface MessageSource <out T : Any > : Closeable OneOf [common] data class OneOf <out K : OneOf.Key < T >, T >(key: K , value: T ) A oneof\u2019s value and the key that identifies which field holds it. ProtoAdapter [common, js, jvm, native] [common] abstract class ProtoAdapter < E >(fieldEncoding: FieldEncoding , type: KClass < >?, typeUrl: String ?, syntax: Syntax , identity: E ?, sourceFile: String ?) [js, jvm, native] abstract class ProtoAdapter < E >(fieldEncoding: FieldEncoding, type: KClass < >?, typeUrl: String ?, syntax: Syntax, identity: E ?, sourceFile: String ?) ProtoReader [common] class ProtoReader (source: BufferedSource) Reads and decodes protocol message fields. ProtoWriter [common] class ProtoWriter (sink: BufferedSink) Utilities for encoding and writing protocol message fields. ReverseProtoWriter [common] class ReverseProtoWriter Encodes protocol buffer message fields from back-to-front for efficiency. Callers should write data in the opposite order that the data will be read. RuntimeEnumAdapter [jvm] class RuntimeEnumAdapter < E : WireEnum> : EnumAdapter < E > Converts values of an enum to and from integers using reflection. Service [common] interface Service Syntax [common] enum Syntax : Enum < Syntax > Syntax version. WireEnum [common] interface WireEnum Interface for generated Enum values to help serialization and deserialization. WireEnumConstant [common] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class WireEnumConstant (declaredName: String ) Annotates generated WireEnum fields with metadata for serialization and deserialization. WireField [common] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class WireField (tag: Int , keyAdapter: String , adapter: String , label: WireField.Label , redacted: Boolean , declaredName: String , jsonName: String , oneofName: String ) Annotates generated Message fields with metadata for serialization and deserialization. WireRpc [common] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class WireRpc (path: String , requestAdapter: String , responseAdapter: String , sourceFile: String ) For gRPC actions the path is formatted as /<service name>/<method name>. The path of the proto service below is /squareup.helloworld.Greeter/SayHello. Functions \u00b6 Name Summary decode [darwin] fun < E > ProtoAdapter < E >. decode (data: <ERROR CLASS>): E Read an encoded message from data. durationOfSeconds [common, js, jvm, native] [common, js, native] fun durationOfSeconds (seconds: Long , nano: Long ): Duration [jvm] inline fun durationOfSeconds (seconds: Long , nano: Long ): Duration get [jvm] fun < T > get (value: T ?, defaultValue: T ): T Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example, ofEpochSecond [common, js, jvm, native] [common, js, native] fun ofEpochSecond (epochSecond: Long , nano: Long ): Instant [jvm] inline fun ofEpochSecond (epochSecond: Long , nano: Long ): Instant Properties \u00b6 Name Summary VERSION [common] val VERSION : String","title":"wire-runtime"},{"location":"3.x/wire-runtime/com.squareup.wire/#package-comsquareupwire","text":"","title":"Package com.squareup.wire"},{"location":"3.x/wire-runtime/com.squareup.wire/#types","text":"Name Summary AndroidMessage [jvm] abstract class AndroidMessage < M : Message < M , B >, B : Message.Builder < M , B >> : Message < M , B > , Parcelable An Android-specific Message which adds support for Parcelable. AnyMessage [common] class AnyMessage (typeUrl: String , value: ByteString) : Message < AnyMessage , Nothing > Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Duration [common] class Duration A measurement of time. Durations may be positive, zero, or negative. [js, native, jvm] [js, native] class Duration [jvm] typealias Duration = Duration EnumAdapter [common, js, jvm, native] [common] abstract class EnumAdapter < E : WireEnum > : ProtoAdapter < E > [js, jvm, native] abstract class EnumAdapter < E : WireEnum> : ProtoAdapter < E > An abstract ProtoAdapter that converts values of an enum to and from integers. FieldEncoding [common] enum FieldEncoding : Enum < FieldEncoding > Instant [common] class Instant This represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform. [js, native, jvm] [js, native] class Instant [jvm] typealias Instant = Instant Message [common, js, jvm, native] [common, js, native] abstract class Message < M : Message < M , B >, B : Message.Builder < M , B >> [jvm] abstract class Message < M : Message < M , B >, B : Message.Builder < M , B >> : Serializable A protocol buffer message. MessageSink [common] interface MessageSink <in T : Any > A writable stream of messages. [js, jvm, native] [js, native] interface MessageSink <in T : Any > [jvm] interface MessageSink <in T : Any > : Closeable MessageSource [common] interface MessageSource <out T : Any > A readable stream of messages. [js, jvm, native] [js, native] interface MessageSource <out T : Any > [jvm] interface MessageSource <out T : Any > : Closeable OneOf [common] data class OneOf <out K : OneOf.Key < T >, T >(key: K , value: T ) A oneof\u2019s value and the key that identifies which field holds it. ProtoAdapter [common, js, jvm, native] [common] abstract class ProtoAdapter < E >(fieldEncoding: FieldEncoding , type: KClass < >?, typeUrl: String ?, syntax: Syntax , identity: E ?, sourceFile: String ?) [js, jvm, native] abstract class ProtoAdapter < E >(fieldEncoding: FieldEncoding, type: KClass < >?, typeUrl: String ?, syntax: Syntax, identity: E ?, sourceFile: String ?) ProtoReader [common] class ProtoReader (source: BufferedSource) Reads and decodes protocol message fields. ProtoWriter [common] class ProtoWriter (sink: BufferedSink) Utilities for encoding and writing protocol message fields. ReverseProtoWriter [common] class ReverseProtoWriter Encodes protocol buffer message fields from back-to-front for efficiency. Callers should write data in the opposite order that the data will be read. RuntimeEnumAdapter [jvm] class RuntimeEnumAdapter < E : WireEnum> : EnumAdapter < E > Converts values of an enum to and from integers using reflection. Service [common] interface Service Syntax [common] enum Syntax : Enum < Syntax > Syntax version. WireEnum [common] interface WireEnum Interface for generated Enum values to help serialization and deserialization. WireEnumConstant [common] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class WireEnumConstant (declaredName: String ) Annotates generated WireEnum fields with metadata for serialization and deserialization. WireField [common] @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class WireField (tag: Int , keyAdapter: String , adapter: String , label: WireField.Label , redacted: Boolean , declaredName: String , jsonName: String , oneofName: String ) Annotates generated Message fields with metadata for serialization and deserialization. WireRpc [common] @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class WireRpc (path: String , requestAdapter: String , responseAdapter: String , sourceFile: String ) For gRPC actions the path is formatted as /<service name>/<method name>. The path of the proto service below is /squareup.helloworld.Greeter/SayHello.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/#functions","text":"Name Summary decode [darwin] fun < E > ProtoAdapter < E >. decode (data: <ERROR CLASS>): E Read an encoded message from data. durationOfSeconds [common, js, jvm, native] [common, js, native] fun durationOfSeconds (seconds: Long , nano: Long ): Duration [jvm] inline fun durationOfSeconds (seconds: Long , nano: Long ): Duration get [jvm] fun < T > get (value: T ?, defaultValue: T ): T Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example, ofEpochSecond [common, js, jvm, native] [common, js, native] fun ofEpochSecond (epochSecond: Long , nano: Long ): Instant [jvm] inline fun ofEpochSecond (epochSecond: Long , nano: Long ): Instant","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/#properties","text":"Name Summary VERSION [common] val VERSION : String","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-v-e-r-s-i-o-n/","text":"// wire-runtime / com.squareup.wire / VERSION VERSION \u00b6 [common]\\ val VERSION : String","title":" v e r s i o n"},{"location":"3.x/wire-runtime/com.squareup.wire/-v-e-r-s-i-o-n/#version","text":"[common]\\ val VERSION : String","title":"VERSION"},{"location":"3.x/wire-runtime/com.squareup.wire/decode/","text":"// wire-runtime / com.squareup.wire / decode decode \u00b6 [darwin]\\ fun < E > ProtoAdapter < E >. decode (data: <ERROR CLASS>): E Read an encoded message from data. Note: this method is marked with ExperimentalUnsignedTypes annotation and requires an opt-in (e.g. through @OptIn(ExperimentalUnsignedTypes::class) to be used. Throws \u00b6 IllegalArgumentException if data.length is larger than Int.MAX_VALUE .","title":"Decode"},{"location":"3.x/wire-runtime/com.squareup.wire/decode/#decode","text":"[darwin]\\ fun < E > ProtoAdapter < E >. decode (data: <ERROR CLASS>): E Read an encoded message from data. Note: this method is marked with ExperimentalUnsignedTypes annotation and requires an opt-in (e.g. through @OptIn(ExperimentalUnsignedTypes::class) to be used.","title":"decode"},{"location":"3.x/wire-runtime/com.squareup.wire/decode/#throws","text":"IllegalArgumentException if data.length is larger than Int.MAX_VALUE .","title":"Throws"},{"location":"3.x/wire-runtime/com.squareup.wire/duration-of-seconds/","text":"// wire-runtime / com.squareup.wire / durationOfSeconds durationOfSeconds \u00b6 [common, js, jvm, native]\\ [common, js, native]\\ fun durationOfSeconds (seconds: Long , nano: Long ): Duration [jvm]\\ inline fun durationOfSeconds (seconds: Long , nano: Long ): Duration","title":"Duration of seconds"},{"location":"3.x/wire-runtime/com.squareup.wire/duration-of-seconds/#durationofseconds","text":"[common, js, jvm, native]\\ [common, js, native]\\ fun durationOfSeconds (seconds: Long , nano: Long ): Duration [jvm]\\ inline fun durationOfSeconds (seconds: Long , nano: Long ): Duration","title":"durationOfSeconds"},{"location":"3.x/wire-runtime/com.squareup.wire/get/","text":"// wire-runtime / com.squareup.wire / get get \u00b6 [jvm]\\ fun < T > get (value: T ?, defaultValue: T ): T Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example, MyProto myProto = \u2026\\ MyField field = Wire.get(myProto.f, MyProto.f_default); will attempt to retrieve the value of the field \u2018f\u2019 defined by MyProto. If the field is null (i.e., unset), get will return its second argument, which in this case is the default value for the field \u2018f\u2019.","title":"Get"},{"location":"3.x/wire-runtime/com.squareup.wire/get/#get","text":"[jvm]\\ fun < T > get (value: T ?, defaultValue: T ): T Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example, MyProto myProto = \u2026\\ MyField field = Wire.get(myProto.f, MyProto.f_default); will attempt to retrieve the value of the field \u2018f\u2019 defined by MyProto. If the field is null (i.e., unset), get will return its second argument, which in this case is the default value for the field \u2018f\u2019.","title":"get"},{"location":"3.x/wire-runtime/com.squareup.wire/of-epoch-second/","text":"// wire-runtime / com.squareup.wire / ofEpochSecond ofEpochSecond \u00b6 [common, js, jvm, native]\\ [common, js, native]\\ fun ofEpochSecond (epochSecond: Long , nano: Long ): Instant [jvm]\\ inline fun ofEpochSecond (epochSecond: Long , nano: Long ): Instant","title":"Of epoch second"},{"location":"3.x/wire-runtime/com.squareup.wire/of-epoch-second/#ofepochsecond","text":"[common, js, jvm, native]\\ [common, js, native]\\ fun ofEpochSecond (epochSecond: Long , nano: Long ): Instant [jvm]\\ inline fun ofEpochSecond (epochSecond: Long , nano: Long ): Instant","title":"ofEpochSecond"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/","text":"// wire-runtime / com.squareup.wire / AndroidMessage AndroidMessage \u00b6 [jvm]\\ abstract class AndroidMessage < M : Message < M , B >, B : Message.Builder < M , B >> : Message < M , B > , Parcelable An Android-specific Message which adds support for Parcelable. Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary describeContents [jvm] open override fun describeContents (): Int encode [jvm] fun encode (): ByteArray Encode this message as a byte[]. [jvm] fun encode (stream: OutputStream ) fun encode (sink: BufferedSink) Encode this message and write it to stream. encodeByteString [jvm] fun encodeByteString (): ByteString Encode this message as a ByteString. newBuilder [jvm] abstract fun newBuilder (): B Returns a new builder initialized with the data in this message. toString [jvm] open override fun toString (): String withoutUnknownFields [jvm] fun withoutUnknownFields (): M Returns this message with any unknown fields removed. writeToParcel [jvm] open override fun writeToParcel (dest: Parcel, flags: Int ) Properties \u00b6 Name Summary adapter [jvm] @ Transient @get: JvmName (name = \u201cadapter\u201d) val adapter : ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. unknownFields [jvm] @ Transient @get: JvmName (name = \u201cunknownFields\u201d) val unknownFields : ByteString Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#androidmessage","text":"[jvm]\\ abstract class AndroidMessage < M : Message < M , B >, B : Message.Builder < M , B >> : Message < M , B > , Parcelable An Android-specific Message which adds support for Parcelable.","title":"AndroidMessage"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#functions","text":"Name Summary describeContents [jvm] open override fun describeContents (): Int encode [jvm] fun encode (): ByteArray Encode this message as a byte[]. [jvm] fun encode (stream: OutputStream ) fun encode (sink: BufferedSink) Encode this message and write it to stream. encodeByteString [jvm] fun encodeByteString (): ByteString Encode this message as a ByteString. newBuilder [jvm] abstract fun newBuilder (): B Returns a new builder initialized with the data in this message. toString [jvm] open override fun toString (): String withoutUnknownFields [jvm] fun withoutUnknownFields (): M Returns this message with any unknown fields removed. writeToParcel [jvm] open override fun writeToParcel (dest: Parcel, flags: Int )","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#properties","text":"Name Summary adapter [jvm] @ Transient @get: JvmName (name = \u201cadapter\u201d) val adapter : ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. unknownFields [jvm] @ Transient @get: JvmName (name = \u201cunknownFields\u201d) val unknownFields : ByteString Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/describe-contents/","text":"// wire-runtime / com.squareup.wire / AndroidMessage / describeContents describeContents \u00b6 [jvm]\\ open override fun describeContents (): Int","title":"Describe contents"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/describe-contents/#describecontents","text":"[jvm]\\ open override fun describeContents (): Int","title":"describeContents"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/write-to-parcel/","text":"// wire-runtime / com.squareup.wire / AndroidMessage / writeToParcel writeToParcel \u00b6 [jvm]\\ open override fun writeToParcel (dest: Parcel, flags: Int )","title":"Write to parcel"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/write-to-parcel/#writetoparcel","text":"[jvm]\\ open override fun writeToParcel (dest: Parcel, flags: Int )","title":"writeToParcel"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-companion/","text":"// wire-runtime / com.squareup.wire / AndroidMessage / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary newCreator [jvm] @ JvmStatic fun < E > newCreator (adapter: ProtoAdapter < E >): Parcelable.Creator< E > Creates a new Parcelable.Creator using adapter for serialization.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-companion/#functions","text":"Name Summary newCreator [jvm] @ JvmStatic fun < E > newCreator (adapter: ProtoAdapter < E >): Parcelable.Creator< E > Creates a new Parcelable.Creator using adapter for serialization.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-companion/new-creator/","text":"// wire-runtime / com.squareup.wire / AndroidMessage / Companion / newCreator newCreator \u00b6 [jvm]\\ @ JvmStatic fun < E > newCreator (adapter: ProtoAdapter < E >): Parcelable.Creator< E > Creates a new Parcelable.Creator using adapter for serialization.","title":"New creator"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-companion/new-creator/#newcreator","text":"[jvm]\\ @ JvmStatic fun < E > newCreator (adapter: ProtoAdapter < E >): Parcelable.Creator< E > Creates a new Parcelable.Creator using adapter for serialization.","title":"newCreator"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/","text":"// wire-runtime / com.squareup.wire / AnyMessage AnyMessage \u00b6 [common]\\ class AnyMessage (typeUrl: String , value: ByteString) : Message < AnyMessage , Nothing > Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Example val person: Person = anyMessage.unpack(Person.ADAPTER)\\ val anyMessage: AnyMessage = AnyMessage.ADAPTER.pack(person) Constructors \u00b6 AnyMessage [common] fun AnyMessage (typeUrl: String , value: ByteString = ByteString.EMPTY) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary copy [common] fun copy (typeUrl: String = this.typeUrl, value: ByteString = this.value): AnyMessage encode [common] fun encode (): ByteArray Encode this message as a byte[]. [common] fun encode (sink: BufferedSink) Encode this message and write it to stream. encodeByteString [common] fun encodeByteString (): ByteString Encode this message as a ByteString. equals [common] open operator override fun equals (other: Any ?): Boolean hashCode [common] open override fun hashCode (): Int toString [common] open override fun toString (): String unpack [common] fun < T > unpack (adapter: ProtoAdapter < T >): T unpackOrNull [common] fun < T > unpackOrNull (adapter: ProtoAdapter < T >): T ? Properties \u00b6 Name Summary adapter [common] val adapter : ProtoAdapter < AnyMessage > The ProtoAdapter for encoding and decoding messages of this type. typeUrl [common] val typeUrl : String unknownFields [common] val unknownFields : ByteString Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. value [common] val value : ByteString","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#anymessage","text":"[common]\\ class AnyMessage (typeUrl: String , value: ByteString) : Message < AnyMessage , Nothing > Wire implementation of the google.protobuf.Any type. The Any type wraps an arbitrary protobuf message. Field of Any generated by Wire will be typed AnyMessage . typeUrl is used to identify the type of the message, defined as \u2018type.googleapis.com/full.type.name\u2019. value is the serialized representation of the wrapped message. The pack and unpack methods are available to wrap and unwrap an Any message. Example val person: Person = anyMessage.unpack(Person.ADAPTER)\\ val anyMessage: AnyMessage = AnyMessage.ADAPTER.pack(person)","title":"AnyMessage"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#constructors","text":"AnyMessage [common] fun AnyMessage (typeUrl: String , value: ByteString = ByteString.EMPTY)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#functions","text":"Name Summary copy [common] fun copy (typeUrl: String = this.typeUrl, value: ByteString = this.value): AnyMessage encode [common] fun encode (): ByteArray Encode this message as a byte[]. [common] fun encode (sink: BufferedSink) Encode this message and write it to stream. encodeByteString [common] fun encodeByteString (): ByteString Encode this message as a ByteString. equals [common] open operator override fun equals (other: Any ?): Boolean hashCode [common] open override fun hashCode (): Int toString [common] open override fun toString (): String unpack [common] fun < T > unpack (adapter: ProtoAdapter < T >): T unpackOrNull [common] fun < T > unpackOrNull (adapter: ProtoAdapter < T >): T ?","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/#properties","text":"Name Summary adapter [common] val adapter : ProtoAdapter < AnyMessage > The ProtoAdapter for encoding and decoding messages of this type. typeUrl [common] val typeUrl : String unknownFields [common] val unknownFields : ByteString Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. value [common] val value : ByteString","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-any-message/","text":"// wire-runtime / com.squareup.wire / AnyMessage / AnyMessage AnyMessage \u00b6 [common]\\ fun AnyMessage (typeUrl: String , value: ByteString = ByteString.EMPTY)","title":" any message"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-any-message/#anymessage","text":"[common]\\ fun AnyMessage (typeUrl: String , value: ByteString = ByteString.EMPTY)","title":"AnyMessage"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/copy/","text":"// wire-runtime / com.squareup.wire / AnyMessage / copy copy \u00b6 [common]\\ fun copy (typeUrl: String = this.typeUrl, value: ByteString = this.value): AnyMessage","title":"Copy"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/copy/#copy","text":"[common]\\ fun copy (typeUrl: String = this.typeUrl, value: ByteString = this.value): AnyMessage","title":"copy"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/equals/","text":"// wire-runtime / com.squareup.wire / AnyMessage / equals equals \u00b6 [common]\\ open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/equals/#equals","text":"[common]\\ open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/hash-code/","text":"// wire-runtime / com.squareup.wire / AnyMessage / hashCode hashCode \u00b6 [common]\\ open override fun hashCode (): Int","title":"Hash code"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/hash-code/#hashcode","text":"[common]\\ open override fun hashCode (): Int","title":"hashCode"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/to-string/","text":"// wire-runtime / com.squareup.wire / AnyMessage / toString toString \u00b6 [common]\\ open override fun toString (): String","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/to-string/#tostring","text":"[common]\\ open override fun toString (): String","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/type-url/","text":"// wire-runtime / com.squareup.wire / AnyMessage / typeUrl typeUrl \u00b6 [common]\\ val typeUrl : String","title":"Type url"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/type-url/#typeurl","text":"[common]\\ val typeUrl : String","title":"typeUrl"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack-or-null/","text":"// wire-runtime / com.squareup.wire / AnyMessage / unpackOrNull unpackOrNull \u00b6 [common]\\ fun < T > unpackOrNull (adapter: ProtoAdapter < T >): T ?","title":"Unpack or null"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack-or-null/#unpackornull","text":"[common]\\ fun < T > unpackOrNull (adapter: ProtoAdapter < T >): T ?","title":"unpackOrNull"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack/","text":"// wire-runtime / com.squareup.wire / AnyMessage / unpack unpack \u00b6 [common]\\ fun < T > unpack (adapter: ProtoAdapter < T >): T","title":"Unpack"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/unpack/#unpack","text":"[common]\\ fun < T > unpack (adapter: ProtoAdapter < T >): T","title":"unpack"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/value/","text":"// wire-runtime / com.squareup.wire / AnyMessage / value value \u00b6 [common]\\ val value : ByteString","title":"Value"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/value/#value","text":"[common]\\ val value : ByteString","title":"value"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/","text":"// wire-runtime / com.squareup.wire / AnyMessage / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary pack [common] fun pack (message: Message <*, *>): AnyMessage Properties \u00b6 Name Summary ADAPTER [common] @ JvmField val ADAPTER : ProtoAdapter < AnyMessage >","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/#functions","text":"Name Summary pack [common] fun pack (message: Message <*, *>): AnyMessage","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/#properties","text":"Name Summary ADAPTER [common] @ JvmField val ADAPTER : ProtoAdapter < AnyMessage >","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/-a-d-a-p-t-e-r/","text":"// wire-runtime / com.squareup.wire / AnyMessage / Companion / ADAPTER ADAPTER \u00b6 [common]\\ @ JvmField val ADAPTER : ProtoAdapter < AnyMessage >","title":" a d a p t e r"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/-a-d-a-p-t-e-r/#adapter","text":"[common]\\ @ JvmField val ADAPTER : ProtoAdapter < AnyMessage >","title":"ADAPTER"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/pack/","text":"// wire-runtime / com.squareup.wire / AnyMessage / Companion / pack pack \u00b6 [common]\\ fun pack (message: Message <*, *>): AnyMessage","title":"Pack"},{"location":"3.x/wire-runtime/com.squareup.wire/-any-message/-companion/pack/#pack","text":"[common]\\ fun pack (message: Message <*, *>): AnyMessage","title":"pack"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/","text":"// wire-runtime / com.squareup.wire / Duration Duration \u00b6 [common]\\ class Duration A measurement of time. Durations may be positive, zero, or negative. Positive durations are measured in seconds, with both #getSeconds and #getNano parts with non-negative signs. Negative durations may be surprising. The #getSeconds property is negative, but the #getNano property is non-negative! To represent -1.3 seconds the seconds property is -2 and the nanos property is 700,000,000. [js, native]\\ class Duration [jvm]\\ typealias Duration = Duration Functions \u00b6 Name Summary getNano [common] fun getNano (): Int Returns a value in [0..1,000,000,000). [js, native] [js, native] fun getNano (): Int getSeconds [common, js, native] [common, js, native] fun getSeconds (): Long","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/#duration","text":"[common]\\ class Duration A measurement of time. Durations may be positive, zero, or negative. Positive durations are measured in seconds, with both #getSeconds and #getNano parts with non-negative signs. Negative durations may be surprising. The #getSeconds property is negative, but the #getNano property is non-negative! To represent -1.3 seconds the seconds property is -2 and the nanos property is 700,000,000. [js, native]\\ class Duration [jvm]\\ typealias Duration = Duration","title":"Duration"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/#functions","text":"Name Summary getNano [common] fun getNano (): Int Returns a value in [0..1,000,000,000). [js, native] [js, native] fun getNano (): Int getSeconds [common, js, native] [common, js, native] fun getSeconds (): Long","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/get-nano/","text":"// wire-runtime / com.squareup.wire / Duration / getNano getNano \u00b6 [common]\\ fun getNano (): Int Returns a value in [0..1,000,000,000). [js, native]\\ [js, native]\\ fun getNano (): Int","title":"Get nano"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/get-nano/#getnano","text":"[common]\\ fun getNano (): Int Returns a value in [0..1,000,000,000). [js, native]\\ [js, native]\\ fun getNano (): Int","title":"getNano"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/get-seconds/","text":"// wire-runtime / com.squareup.wire / Duration / getSeconds getSeconds \u00b6 [common, js, native]\\ [common, js, native]\\ fun getSeconds (): Long","title":"Get seconds"},{"location":"3.x/wire-runtime/com.squareup.wire/-duration/get-seconds/#getseconds","text":"[common, js, native]\\ [common, js, native]\\ fun getSeconds (): Long","title":"getSeconds"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/","text":"// wire-runtime / com.squareup.wire / EnumAdapter EnumAdapter \u00b6 [common]\\ abstract class EnumAdapter < E : WireEnum > : ProtoAdapter < E > An abstract ProtoAdapter that converts values of an enum to and from integers. [js, jvm, native]\\ abstract class EnumAdapter < E : WireEnum> : ProtoAdapter < E > An abstract ProtoAdapter that converts values of an enum to and from integers. Constructors \u00b6 EnumAdapter [jvm] fun < E : WireEnum> EnumAdapter (type: Class < E >, syntax: Syntax, identity: E ?) EnumAdapter [jvm] fun < E : WireEnum> EnumAdapter (type: Class < E >) EnumAdapter [jvm] fun < E : WireEnum> EnumAdapter (type: Class < E >, syntax: Syntax) EnumAdapter [jvm] fun < E : WireEnum> EnumAdapter (type: KClass < E >) EnumAdapter [jvm] fun < E : WireEnum> EnumAdapter (type: KClass < E >, syntax: Syntax) Functions \u00b6 Name Summary asPacked [common, js, native] [common, js, native] fun asPacked (): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. [jvm] fun asPacked (): ProtoAdapter < List < E >> asRepeated [common, js, native] [common, js, native] fun asRepeated (): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. [jvm] fun asRepeated (): ProtoAdapter < List < E >> decode [common, js, native] [common] open override fun decode (reader: ProtoReader ): E [js, native] open override fun decode (reader: ProtoReader): E Read a non-null value from reader. [jvm] open override fun decode (reader: ProtoReader): E fun decode (stream: InputStream ): E fun decode (bytes: ByteArray ): E fun decode (source: BufferedSource): E fun decode (bytes: ByteString): E [common, js, native] [common, js, native] fun decode (bytes: ByteArray ): E [common, js] fun decode (bytes: ByteString): E Read an encoded message from bytes. [common, js] [common, js] fun decode (source: BufferedSource): E Read an encoded message from source. encode [common, js, native] [common] fun encode (value: E ): ByteArray [js] fun encode (value: E ): ByteArray [native] fun encode (value: E ): ByteArray Encode value as a byte[]. [jvm] fun encode (value: E ): ByteArray open override fun encode (writer: ProtoWriter, value: E ) open override fun encode (writer: ReverseProtoWriter, value: E ) fun encode (stream: OutputStream , value: E ) fun encode (sink: BufferedSink, value: E ) [common, js, native] [common] open override fun encode (writer: ProtoWriter , value: E ) [js, native] open override fun encode (writer: ProtoWriter, value: E ) [common] open override fun encode (writer: ReverseProtoWriter , value: E ) [js, native] open override fun encode (writer: ReverseProtoWriter, value: E ) Write non-null value to writer. [common, js] [common] fun encode (sink: BufferedSink, value: E ) [js] fun encode (sink: BufferedSink, value: E ) Encode value and write it to stream. encodeByteString [common, js, native] [common] fun encodeByteString (value: E ): ByteString [js] fun encodeByteString (value: E ): ByteString [native] fun encodeByteString (value: E ): ByteString Encode value as a ByteString. [jvm] fun encodeByteString (value: E ): ByteString encodedSize [common, js, native] [common, js, native] open override fun encodedSize (value: E ): Int The size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one). [jvm] open override fun encodedSize (value: E ): Int encodedSizeWithTag [common, js, native] [common] open fun encodedSizeWithTag (tag: Int , value: E ?): Int [js] open fun encodedSizeWithTag (tag: Int , value: E ?): Int [native] open fun encodedSizeWithTag (tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. [jvm] open fun encodedSizeWithTag (tag: Int , value: E ?): Int encodeWithTag [common, js, native] [common] open fun encodeWithTag (writer: ProtoWriter , tag: Int , value: E ?) [js] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) [native] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) [common] open fun encodeWithTag (writer: ReverseProtoWriter , tag: Int , value: E ?) [js] open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) [native] open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) Write tag and value to writer. If value is null this does nothing. [jvm] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) redact [common, js, native] [common, js, native] open override fun redact (value: E ): E Returns the redacted form of value. [jvm] open override fun redact (value: E ): E toString [common, js, native] [common] open fun toString (value: E ): String [js] open fun toString (value: E ): String [native] open fun toString (value: E ): String Returns a human-readable version of the given value. [jvm] open fun toString (value: E ): String Properties \u00b6 Name Summary identity [common] val identity : E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. [js, jvm, native] val identity : E ? sourceFile [common] val sourceFile : String ? Path to the file containing the protobuf definition of this type. [js, jvm, native] val sourceFile : String ? syntax [common] val syntax : Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. [js, jvm, native] val syntax : Syntax type [common, js, jvm, native] val type : KClass <*>? typeUrl [common] val typeUrl : String ? Identifies this type for inclusion in a google.protobuf.Any. This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS. [js, jvm, native] val typeUrl : String ? Inheritors \u00b6 Name RuntimeEnumAdapter","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#enumadapter","text":"[common]\\ abstract class EnumAdapter < E : WireEnum > : ProtoAdapter < E > An abstract ProtoAdapter that converts values of an enum to and from integers. [js, jvm, native]\\ abstract class EnumAdapter < E : WireEnum> : ProtoAdapter < E > An abstract ProtoAdapter that converts values of an enum to and from integers.","title":"EnumAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#constructors","text":"EnumAdapter [jvm] fun < E : WireEnum> EnumAdapter (type: Class < E >, syntax: Syntax, identity: E ?) EnumAdapter [jvm] fun < E : WireEnum> EnumAdapter (type: Class < E >) EnumAdapter [jvm] fun < E : WireEnum> EnumAdapter (type: Class < E >, syntax: Syntax) EnumAdapter [jvm] fun < E : WireEnum> EnumAdapter (type: KClass < E >) EnumAdapter [jvm] fun < E : WireEnum> EnumAdapter (type: KClass < E >, syntax: Syntax)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#functions","text":"Name Summary asPacked [common, js, native] [common, js, native] fun asPacked (): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. [jvm] fun asPacked (): ProtoAdapter < List < E >> asRepeated [common, js, native] [common, js, native] fun asRepeated (): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. [jvm] fun asRepeated (): ProtoAdapter < List < E >> decode [common, js, native] [common] open override fun decode (reader: ProtoReader ): E [js, native] open override fun decode (reader: ProtoReader): E Read a non-null value from reader. [jvm] open override fun decode (reader: ProtoReader): E fun decode (stream: InputStream ): E fun decode (bytes: ByteArray ): E fun decode (source: BufferedSource): E fun decode (bytes: ByteString): E [common, js, native] [common, js, native] fun decode (bytes: ByteArray ): E [common, js] fun decode (bytes: ByteString): E Read an encoded message from bytes. [common, js] [common, js] fun decode (source: BufferedSource): E Read an encoded message from source. encode [common, js, native] [common] fun encode (value: E ): ByteArray [js] fun encode (value: E ): ByteArray [native] fun encode (value: E ): ByteArray Encode value as a byte[]. [jvm] fun encode (value: E ): ByteArray open override fun encode (writer: ProtoWriter, value: E ) open override fun encode (writer: ReverseProtoWriter, value: E ) fun encode (stream: OutputStream , value: E ) fun encode (sink: BufferedSink, value: E ) [common, js, native] [common] open override fun encode (writer: ProtoWriter , value: E ) [js, native] open override fun encode (writer: ProtoWriter, value: E ) [common] open override fun encode (writer: ReverseProtoWriter , value: E ) [js, native] open override fun encode (writer: ReverseProtoWriter, value: E ) Write non-null value to writer. [common, js] [common] fun encode (sink: BufferedSink, value: E ) [js] fun encode (sink: BufferedSink, value: E ) Encode value and write it to stream. encodeByteString [common, js, native] [common] fun encodeByteString (value: E ): ByteString [js] fun encodeByteString (value: E ): ByteString [native] fun encodeByteString (value: E ): ByteString Encode value as a ByteString. [jvm] fun encodeByteString (value: E ): ByteString encodedSize [common, js, native] [common, js, native] open override fun encodedSize (value: E ): Int The size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one). [jvm] open override fun encodedSize (value: E ): Int encodedSizeWithTag [common, js, native] [common] open fun encodedSizeWithTag (tag: Int , value: E ?): Int [js] open fun encodedSizeWithTag (tag: Int , value: E ?): Int [native] open fun encodedSizeWithTag (tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. [jvm] open fun encodedSizeWithTag (tag: Int , value: E ?): Int encodeWithTag [common, js, native] [common] open fun encodeWithTag (writer: ProtoWriter , tag: Int , value: E ?) [js] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) [native] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) [common] open fun encodeWithTag (writer: ReverseProtoWriter , tag: Int , value: E ?) [js] open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) [native] open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) Write tag and value to writer. If value is null this does nothing. [jvm] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) redact [common, js, native] [common, js, native] open override fun redact (value: E ): E Returns the redacted form of value. [jvm] open override fun redact (value: E ): E toString [common, js, native] [common] open fun toString (value: E ): String [js] open fun toString (value: E ): String [native] open fun toString (value: E ): String Returns a human-readable version of the given value. [jvm] open fun toString (value: E ): String","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#properties","text":"Name Summary identity [common] val identity : E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. [js, jvm, native] val identity : E ? sourceFile [common] val sourceFile : String ? Path to the file containing the protobuf definition of this type. [js, jvm, native] val sourceFile : String ? syntax [common] val syntax : Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. [js, jvm, native] val syntax : Syntax type [common, js, jvm, native] val type : KClass <*>? typeUrl [common] val typeUrl : String ? Identifies this type for inclusion in a google.protobuf.Any. This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS. [js, jvm, native] val typeUrl : String ?","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#inheritors","text":"Name RuntimeEnumAdapter","title":"Inheritors"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/-enum-adapter/","text":"// wire-runtime / com.squareup.wire / EnumAdapter / EnumAdapter EnumAdapter \u00b6 [jvm]\\ fun < E : WireEnum> EnumAdapter (type: Class < E >, syntax: Syntax, identity: E ?) fun < E : WireEnum> EnumAdapter (type: Class < E >) fun < E : WireEnum> EnumAdapter (type: Class < E >, syntax: Syntax) fun < E : WireEnum> EnumAdapter (type: KClass < E >) fun < E : WireEnum> EnumAdapter (type: KClass < E >, syntax: Syntax)","title":" enum adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/-enum-adapter/#enumadapter","text":"[jvm]\\ fun < E : WireEnum> EnumAdapter (type: Class < E >, syntax: Syntax, identity: E ?) fun < E : WireEnum> EnumAdapter (type: Class < E >) fun < E : WireEnum> EnumAdapter (type: Class < E >, syntax: Syntax) fun < E : WireEnum> EnumAdapter (type: KClass < E >) fun < E : WireEnum> EnumAdapter (type: KClass < E >, syntax: Syntax)","title":"EnumAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/decode/","text":"// wire-runtime / com.squareup.wire / EnumAdapter / decode decode \u00b6 [common, js, native]\\ [common]\\ open override fun decode (reader: ProtoReader ): E [js, native]\\ open override fun decode (reader: ProtoReader): E Read a non-null value from reader. [jvm]\\ open override fun decode (reader: ProtoReader): E","title":"Decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/decode/#decode","text":"[common, js, native]\\ [common]\\ open override fun decode (reader: ProtoReader ): E [js, native]\\ open override fun decode (reader: ProtoReader): E Read a non-null value from reader. [jvm]\\ open override fun decode (reader: ProtoReader): E","title":"decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encode/","text":"// wire-runtime / com.squareup.wire / EnumAdapter / encode encode \u00b6 [common, js, native]\\ [common]\\ open override fun encode (writer: ProtoWriter , value: E ) [js, native]\\ open override fun encode (writer: ProtoWriter, value: E ) [common]\\ open override fun encode (writer: ReverseProtoWriter , value: E ) [js, native]\\ open override fun encode (writer: ReverseProtoWriter, value: E ) Write non-null value to writer. [jvm]\\ open override fun encode (writer: ProtoWriter, value: E ) open override fun encode (writer: ReverseProtoWriter, value: E )","title":"Encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encode/#encode","text":"[common, js, native]\\ [common]\\ open override fun encode (writer: ProtoWriter , value: E ) [js, native]\\ open override fun encode (writer: ProtoWriter, value: E ) [common]\\ open override fun encode (writer: ReverseProtoWriter , value: E ) [js, native]\\ open override fun encode (writer: ReverseProtoWriter, value: E ) Write non-null value to writer. [jvm]\\ open override fun encode (writer: ProtoWriter, value: E ) open override fun encode (writer: ReverseProtoWriter, value: E )","title":"encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encoded-size/","text":"// wire-runtime / com.squareup.wire / EnumAdapter / encodedSize encodedSize \u00b6 [common, js, native]\\ [common, js, native]\\ open override fun encodedSize (value: E ): Int The size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one). [jvm]\\ open override fun encodedSize (value: E ): Int","title":"Encoded size"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encoded-size/#encodedsize","text":"[common, js, native]\\ [common, js, native]\\ open override fun encodedSize (value: E ): Int The size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one). [jvm]\\ open override fun encodedSize (value: E ): Int","title":"encodedSize"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/redact/","text":"// wire-runtime / com.squareup.wire / EnumAdapter / redact redact \u00b6 [common, js, native]\\ [common, js, native]\\ open override fun redact (value: E ): E Returns the redacted form of value. [jvm]\\ open override fun redact (value: E ): E","title":"Redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/redact/#redact","text":"[common, js, native]\\ [common, js, native]\\ open override fun redact (value: E ): E Returns the redacted form of value. [jvm]\\ open override fun redact (value: E ): E","title":"redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/","text":"// wire-runtime / com.squareup.wire / FieldEncoding FieldEncoding \u00b6 [common]\\ enum FieldEncoding : Enum < FieldEncoding > Entries \u00b6 FIXED32 [common] FIXED32 (5) LENGTH_DELIMITED [common] LENGTH_DELIMITED (2) FIXED64 [common] FIXED64 (1) VARINT [common] VARINT (0) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary rawProtoAdapter [common] fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#fieldencoding","text":"[common]\\ enum FieldEncoding : Enum < FieldEncoding >","title":"FieldEncoding"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#entries","text":"FIXED32 [common] FIXED32 (5) LENGTH_DELIMITED [common] LENGTH_DELIMITED (2) FIXED64 [common] FIXED64 (1) VARINT [common] VARINT (0)","title":"Entries"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#functions","text":"Name Summary rawProtoAdapter [common] fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/raw-proto-adapter/","text":"// wire-runtime / com.squareup.wire / FieldEncoding / rawProtoAdapter rawProtoAdapter \u00b6 [common]\\ fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Raw proto adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/raw-proto-adapter/#rawprotoadapter","text":"[common]\\ fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"rawProtoAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-companion/","text":"// wire-runtime / com.squareup.wire / FieldEncoding / Companion Companion \u00b6 [common]\\ object Companion","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/","text":"// wire-runtime / com.squareup.wire / FieldEncoding / FIXED32 FIXED32 \u00b6 [common]\\ FIXED32 (5) Functions \u00b6 Name Summary rawProtoAdapter [common] fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/#fixed32","text":"[common]\\ FIXED32 (5)","title":"FIXED32"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/#functions","text":"Name Summary rawProtoAdapter [common] fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/","text":"// wire-runtime / com.squareup.wire / FieldEncoding / FIXED64 FIXED64 \u00b6 [common]\\ FIXED64 (1) Functions \u00b6 Name Summary rawProtoAdapter [common] fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/#fixed64","text":"[common]\\ FIXED64 (1)","title":"FIXED64"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/#functions","text":"Name Summary rawProtoAdapter [common] fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/","text":"// wire-runtime / com.squareup.wire / FieldEncoding / LENGTH_DELIMITED LENGTH_DELIMITED \u00b6 [common]\\ LENGTH_DELIMITED (2) Functions \u00b6 Name Summary rawProtoAdapter [common] fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/#length_delimited","text":"[common]\\ LENGTH_DELIMITED (2)","title":"LENGTH_DELIMITED"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/#functions","text":"Name Summary rawProtoAdapter [common] fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/","text":"// wire-runtime / com.squareup.wire / FieldEncoding / VARINT VARINT \u00b6 [common]\\ VARINT (0) Functions \u00b6 Name Summary rawProtoAdapter [common] fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/#varint","text":"[common]\\ VARINT (0)","title":"VARINT"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/#functions","text":"Name Summary rawProtoAdapter [common] fun rawProtoAdapter (): ProtoAdapter <*> Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/","text":"// wire-runtime / com.squareup.wire / Instant Instant \u00b6 [common]\\ class Instant This represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform. [js, native]\\ class Instant [jvm]\\ typealias Instant = Instant Functions \u00b6 Name Summary getEpochSecond [common] fun getEpochSecond (): Long Returns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative. [js, native] [js, native] fun getEpochSecond (): Long getNano [common] fun getNano (): Int Returns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond . [js, native] [js, native] fun getNano (): Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/#instant","text":"[common]\\ class Instant This represents a timestamp, though we use the name \u2018instant\u2019 in the runtime because that\u2019s what the JVM libraries use, and \u2018Timestamp\u2019 means something else on that platform. [js, native]\\ class Instant [jvm]\\ typealias Instant = Instant","title":"Instant"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/#functions","text":"Name Summary getEpochSecond [common] fun getEpochSecond (): Long Returns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative. [js, native] [js, native] fun getEpochSecond (): Long getNano [common] fun getNano (): Int Returns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond . [js, native] [js, native] fun getNano (): Int","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/get-epoch-second/","text":"// wire-runtime / com.squareup.wire / Instant / getEpochSecond getEpochSecond \u00b6 [common]\\ fun getEpochSecond (): Long Returns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative. For example, this value will be -1 for the instant 1969-12-31T23:59:59Z, and 1 for the instant 1970-01-01T00:00:01Z. [js, native]\\ [js, native]\\ fun getEpochSecond (): Long","title":"Get epoch second"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/get-epoch-second/#getepochsecond","text":"[common]\\ fun getEpochSecond (): Long Returns the number of seconds since the UNIX epoch (1970-01-01T00:00:00Z) if this value is positive, or until the UNIX epoch if this value is negative. For example, this value will be -1 for the instant 1969-12-31T23:59:59Z, and 1 for the instant 1970-01-01T00:00:01Z. [js, native]\\ [js, native]\\ fun getEpochSecond (): Long","title":"getEpochSecond"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/get-nano/","text":"// wire-runtime / com.squareup.wire / Instant / getNano getNano \u00b6 [common]\\ fun getNano (): Int Returns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond . [js, native]\\ [js, native]\\ fun getNano (): Int","title":"Get nano"},{"location":"3.x/wire-runtime/com.squareup.wire/-instant/get-nano/#getnano","text":"[common]\\ fun getNano (): Int Returns a value in the range [0..1,000,000,000) indicating the fraction of a second that is added to getEpochSecond . [js, native]\\ [js, native]\\ fun getNano (): Int","title":"getNano"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/","text":"// wire-runtime / com.squareup.wire / Message Message \u00b6 [common, js, native]\\ abstract class Message < M : Message < M , B >, B : Message.Builder < M , B >> A protocol buffer message. [jvm]\\ abstract class Message < M : Message < M , B >, B : Message.Builder < M , B >> : Serializable A protocol buffer message. Types \u00b6 Name Summary Builder [common, js, jvm, native] [common, js, jvm, native] abstract class Builder < M : Message < M , B >, B : Message.Builder < M , B >> Superclass for protocol buffer message builders. Companion [jvm] object Companion Functions \u00b6 Name Summary encode [common, js, jvm, native] [common, js, jvm, native] fun encode (): ByteArray Encode this message as a byte[]. [jvm, common, js] [jvm] fun encode (stream: OutputStream ) [common, js, jvm] fun encode (sink: BufferedSink) Encode this message and write it to stream. encodeByteString [common, js, jvm, native] [common, js, jvm, native] fun encodeByteString (): ByteString Encode this message as a ByteString. newBuilder [common, js, jvm, native] [common, js, jvm, native] abstract fun newBuilder (): B Returns a new builder initialized with the data in this message. toString [jvm] open override fun toString (): String withoutUnknownFields [jvm] fun withoutUnknownFields (): M Returns this message with any unknown fields removed. Properties \u00b6 Name Summary adapter [common, js, native] val adapter : ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. [jvm] @ Transient @get: JvmName (name = \u201cadapter\u201d) val adapter : ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. unknownFields [common, js, native] val unknownFields : ByteString Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. [jvm] @ Transient @get: JvmName (name = \u201cunknownFields\u201d) val unknownFields : ByteString Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. Inheritors \u00b6 Name AnyMessage AndroidMessage","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#message","text":"[common, js, native]\\ abstract class Message < M : Message < M , B >, B : Message.Builder < M , B >> A protocol buffer message. [jvm]\\ abstract class Message < M : Message < M , B >, B : Message.Builder < M , B >> : Serializable A protocol buffer message.","title":"Message"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#types","text":"Name Summary Builder [common, js, jvm, native] [common, js, jvm, native] abstract class Builder < M : Message < M , B >, B : Message.Builder < M , B >> Superclass for protocol buffer message builders. Companion [jvm] object Companion","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#functions","text":"Name Summary encode [common, js, jvm, native] [common, js, jvm, native] fun encode (): ByteArray Encode this message as a byte[]. [jvm, common, js] [jvm] fun encode (stream: OutputStream ) [common, js, jvm] fun encode (sink: BufferedSink) Encode this message and write it to stream. encodeByteString [common, js, jvm, native] [common, js, jvm, native] fun encodeByteString (): ByteString Encode this message as a ByteString. newBuilder [common, js, jvm, native] [common, js, jvm, native] abstract fun newBuilder (): B Returns a new builder initialized with the data in this message. toString [jvm] open override fun toString (): String withoutUnknownFields [jvm] fun withoutUnknownFields (): M Returns this message with any unknown fields removed.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#properties","text":"Name Summary adapter [common, js, native] val adapter : ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. [jvm] @ Transient @get: JvmName (name = \u201cadapter\u201d) val adapter : ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type. unknownFields [common, js, native] val unknownFields : ByteString Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. [jvm] @ Transient @get: JvmName (name = \u201cunknownFields\u201d) val unknownFields : ByteString Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#inheritors","text":"Name AnyMessage AndroidMessage","title":"Inheritors"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/adapter/","text":"// wire-runtime / com.squareup.wire / Message / adapter adapter \u00b6 [common, js, jvm, native]\\ [common, js, native]\\ val adapter : ProtoAdapter < M > [jvm]\\ @ Transient @get: JvmName (name = \u201cadapter\u201d) val adapter : ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type.","title":"Adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/adapter/#adapter","text":"[common, js, jvm, native]\\ [common, js, native]\\ val adapter : ProtoAdapter < M > [jvm]\\ @ Transient @get: JvmName (name = \u201cadapter\u201d) val adapter : ProtoAdapter < M > The ProtoAdapter for encoding and decoding messages of this type.","title":"adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode-byte-string/","text":"// wire-runtime / com.squareup.wire / Message / encodeByteString encodeByteString \u00b6 [common, js, jvm, native]\\ [common, js, jvm, native]\\ fun encodeByteString (): ByteString Encode this message as a ByteString.","title":"Encode byte string"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode-byte-string/#encodebytestring","text":"[common, js, jvm, native]\\ [common, js, jvm, native]\\ fun encodeByteString (): ByteString Encode this message as a ByteString.","title":"encodeByteString"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode/","text":"// wire-runtime / com.squareup.wire / Message / encode encode \u00b6 [jvm, common, js]\\ [jvm]\\ fun encode (stream: OutputStream ) [common, js, jvm]\\ fun encode (sink: BufferedSink) Encode this message and write it to stream. [common, js, jvm, native]\\ [common, js, jvm, native]\\ fun encode (): ByteArray Encode this message as a byte[].","title":"Encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode/#encode","text":"[jvm, common, js]\\ [jvm]\\ fun encode (stream: OutputStream ) [common, js, jvm]\\ fun encode (sink: BufferedSink) Encode this message and write it to stream. [common, js, jvm, native]\\ [common, js, jvm, native]\\ fun encode (): ByteArray Encode this message as a byte[].","title":"encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/new-builder/","text":"// wire-runtime / com.squareup.wire / Message / newBuilder newBuilder \u00b6 [common, js, jvm, native]\\ [common, js, jvm, native]\\ abstract fun newBuilder (): B Returns a new builder initialized with the data in this message.","title":"New builder"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/new-builder/#newbuilder","text":"[common, js, jvm, native]\\ [common, js, jvm, native]\\ abstract fun newBuilder (): B Returns a new builder initialized with the data in this message.","title":"newBuilder"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/to-string/","text":"// wire-runtime / com.squareup.wire / Message / toString toString \u00b6 [jvm]\\ open override fun toString (): String","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/to-string/#tostring","text":"[jvm]\\ open override fun toString (): String","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/unknown-fields/","text":"// wire-runtime / com.squareup.wire / Message / unknownFields unknownFields \u00b6 [common, js, jvm, native]\\ [common, js, native]\\ val unknownFields : ByteString [jvm]\\ @ Transient @get: JvmName (name = \u201cunknownFields\u201d) val unknownFields : ByteString Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/unknown-fields/#unknownfields","text":"[common, js, jvm, native]\\ [common, js, native]\\ val unknownFields : ByteString [jvm]\\ @ Transient @get: JvmName (name = \u201cunknownFields\u201d) val unknownFields : ByteString Returns a byte string containing the proto encoding of this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"unknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/without-unknown-fields/","text":"// wire-runtime / com.squareup.wire / Message / withoutUnknownFields withoutUnknownFields \u00b6 [jvm]\\ fun withoutUnknownFields (): M Returns this message with any unknown fields removed.","title":"Without unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/without-unknown-fields/#withoutunknownfields","text":"[jvm]\\ fun withoutUnknownFields (): M Returns this message with any unknown fields removed.","title":"withoutUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/","text":"// wire-runtime / com.squareup.wire / Message / Builder Builder \u00b6 [common, js, jvm, native]\\ abstract class Builder < M : Message < M , B >, B : Message.Builder < M , B >> Superclass for protocol buffer message builders. Constructors \u00b6 Builder [js] fun Builder () Builder [native] fun Builder () Functions \u00b6 Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ?): Message.Builder < M , B > addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder < M , B > build [jvm] abstract fun build (): M Returns an immutable Message based on the fields that set in this builder. buildUnknownFields [jvm] fun buildUnknownFields (): ByteString Returns a byte string with this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder < M , B >","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#builder","text":"[common, js, jvm, native]\\ abstract class Builder < M : Message < M , B >, B : Message.Builder < M , B >> Superclass for protocol buffer message builders.","title":"Builder"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#constructors","text":"Builder [js] fun Builder () Builder [native] fun Builder ()","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#functions","text":"Name Summary addUnknownField [jvm] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ?): Message.Builder < M , B > addUnknownFields [jvm] fun addUnknownFields (unknownFields: ByteString): Message.Builder < M , B > build [jvm] abstract fun build (): M Returns an immutable Message based on the fields that set in this builder. buildUnknownFields [jvm] fun buildUnknownFields (): ByteString Returns a byte string with this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields. clearUnknownFields [jvm] fun clearUnknownFields (): Message.Builder < M , B >","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/-builder/","text":"// wire-runtime / com.squareup.wire / Message / Builder / Builder Builder \u00b6 [js, native]\\ [js, native]\\ fun Builder ()","title":" builder"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/-builder/#builder","text":"[js, native]\\ [js, native]\\ fun Builder ()","title":"Builder"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-field/","text":"// wire-runtime / com.squareup.wire / Message / Builder / addUnknownField addUnknownField \u00b6 [jvm]\\ fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ?): Message.Builder < M , B >","title":"Add unknown field"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-field/#addunknownfield","text":"[jvm]\\ fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding, value: Any ?): Message.Builder < M , B >","title":"addUnknownField"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-fields/","text":"// wire-runtime / com.squareup.wire / Message / Builder / addUnknownFields addUnknownFields \u00b6 [jvm]\\ fun addUnknownFields (unknownFields: ByteString): Message.Builder < M , B >","title":"Add unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-fields/#addunknownfields","text":"[jvm]\\ fun addUnknownFields (unknownFields: ByteString): Message.Builder < M , B >","title":"addUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build-unknown-fields/","text":"// wire-runtime / com.squareup.wire / Message / Builder / buildUnknownFields buildUnknownFields \u00b6 [jvm]\\ fun buildUnknownFields (): ByteString Returns a byte string with this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Build unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build-unknown-fields/#buildunknownfields","text":"[jvm]\\ fun buildUnknownFields (): ByteString Returns a byte string with this message\u2019s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"buildUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build/","text":"// wire-runtime / com.squareup.wire / Message / Builder / build build \u00b6 [jvm]\\ abstract fun build (): M Returns an immutable Message based on the fields that set in this builder.","title":"Build"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build/#build","text":"[jvm]\\ abstract fun build (): M Returns an immutable Message based on the fields that set in this builder.","title":"build"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/clear-unknown-fields/","text":"// wire-runtime / com.squareup.wire / Message / Builder / clearUnknownFields clearUnknownFields \u00b6 [jvm]\\ fun clearUnknownFields (): Message.Builder < M , B >","title":"Clear unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/clear-unknown-fields/#clearunknownfields","text":"[jvm]\\ fun clearUnknownFields (): Message.Builder < M , B >","title":"clearUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-companion/","text":"// wire-runtime / com.squareup.wire / Message / Companion Companion \u00b6 [jvm]\\ object Companion","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/","text":"// wire-runtime / com.squareup.wire / MessageSink MessageSink \u00b6 [common]\\ interface MessageSink <in T : Any > A writable stream of messages. Typical implementations will immediately encode messages and enqueue them for transmission, such as for client-to-server or server-to-client networking. But this interface is not limited to 1-1 networking use cases and implementations may persist, broadcast, validate, or take any other action with the messages. There is no flushing mechanism. Messages are flushed one-by-one as they are written. This minimizes latency at a potential cost of throughput. On its own this offers no guarantees that messages are delivered. For example, a message may accepted by write could be lost due to a network partition or crash. It is the caller\u2019s responsibility to confirm delivery and to retransmit as necessary. It is possible for a writer to saturate the transmission channel, such as when a writer writes faster than the corresponding reader can read. In such cases calls to write will block until there is capacity in the outbound channel. You may use this as a basic backpressure mechanism. You should ensure that such backpressure propagates to the originator of outbound messages. Instances of this interface are not safe for concurrent use. [js, native]\\ interface MessageSink <in T : Any > [jvm]\\ interface MessageSink <in T : Any > : Closeable Functions \u00b6 Name Summary cancel [common] abstract fun cancel () Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. [js, jvm, native] [js, jvm, native] abstract fun cancel () close [common] abstract fun close () Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream. [js, native, jvm] [js, native] abstract fun close () [jvm] abstract override fun close () write [common] abstract fun write (message: T ) Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message. [js, jvm, native] [js, jvm, native] abstract fun write (message: T )","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/#messagesink","text":"[common]\\ interface MessageSink <in T : Any > A writable stream of messages. Typical implementations will immediately encode messages and enqueue them for transmission, such as for client-to-server or server-to-client networking. But this interface is not limited to 1-1 networking use cases and implementations may persist, broadcast, validate, or take any other action with the messages. There is no flushing mechanism. Messages are flushed one-by-one as they are written. This minimizes latency at a potential cost of throughput. On its own this offers no guarantees that messages are delivered. For example, a message may accepted by write could be lost due to a network partition or crash. It is the caller\u2019s responsibility to confirm delivery and to retransmit as necessary. It is possible for a writer to saturate the transmission channel, such as when a writer writes faster than the corresponding reader can read. In such cases calls to write will block until there is capacity in the outbound channel. You may use this as a basic backpressure mechanism. You should ensure that such backpressure propagates to the originator of outbound messages. Instances of this interface are not safe for concurrent use. [js, native]\\ interface MessageSink <in T : Any > [jvm]\\ interface MessageSink <in T : Any > : Closeable","title":"MessageSink"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/#functions","text":"Name Summary cancel [common] abstract fun cancel () Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. [js, jvm, native] [js, jvm, native] abstract fun cancel () close [common] abstract fun close () Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream. [js, native, jvm] [js, native] abstract fun close () [jvm] abstract override fun close () write [common] abstract fun write (message: T ) Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message. [js, jvm, native] [js, jvm, native] abstract fun write (message: T )","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/","text":"// wire-runtime / com.squareup.wire / MessageSink / cancel cancel \u00b6 [common]\\ abstract fun cancel () Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. A stream must be closed after it is canceled. Throws \u00b6 kotlin.IllegalStateException if this stream is closed. [js, jvm, native]\\ [js, jvm, native]\\ abstract fun cancel () Throws \u00b6 kotlin.IllegalStateException if this stream is closed.","title":"Cancel"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/#cancel","text":"[common]\\ abstract fun cancel () Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. A stream must be closed after it is canceled.","title":"cancel"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/#throws","text":"kotlin.IllegalStateException if this stream is closed. [js, jvm, native]\\ [js, jvm, native]\\ abstract fun cancel ()","title":"Throws"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/#throws_1","text":"kotlin.IllegalStateException if this stream is closed.","title":"Throws"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/close/","text":"// wire-runtime / com.squareup.wire / MessageSink / close close \u00b6 [common]\\ abstract fun close () Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream. [js, native]\\ [js, native]\\ abstract fun close ()","title":"Close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/close/#close","text":"[common]\\ abstract fun close () Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream. [js, native]\\ [js, native]\\ abstract fun close ()","title":"close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/","text":"// wire-runtime / com.squareup.wire / MessageSink / write write \u00b6 [common]\\ abstract fun write (message: T ) Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message. Throws \u00b6 kotlin.IllegalStateException if this stream is closed. [js, jvm, native]\\ [js, jvm, native]\\ abstract fun write (message: T ) Throws \u00b6 kotlin.IllegalStateException if this stream is closed.","title":"Write"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/#write","text":"[common]\\ abstract fun write (message: T ) Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message.","title":"write"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/#throws","text":"kotlin.IllegalStateException if this stream is closed. [js, jvm, native]\\ [js, jvm, native]\\ abstract fun write (message: T )","title":"Throws"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/#throws_1","text":"kotlin.IllegalStateException if this stream is closed.","title":"Throws"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/","text":"// wire-runtime / com.squareup.wire / MessageSource MessageSource \u00b6 [common]\\ interface MessageSource <out T : Any > A readable stream of messages. Typical implementations will receive messages recently transmitted from a peer, such as for server-to-client or client-to-server networking. But this implementation is not limited to such networking use cases and implementations may load messages from local storage or generate messages on demand. Calls to read will block until a message becomes available. There is no mechanism to limit how long a specific read will wait, though implementations may be configured to fail if they consider a source to be unhealthy. Readers should take care to keep up with the stream of messages. A reader that takes an excessive amount of time to process a message may cause their writer to back up and suffer queueing. Instances of this interface are not safe for concurrent use. [js, native]\\ interface MessageSource <out T : Any > [jvm]\\ interface MessageSource <out T : Any > : Closeable Functions \u00b6 Name Summary close [common, js, native, jvm] [common, js, native] abstract fun close () [jvm] abstract override fun close () read [common] abstract fun read (): T ? Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream. [js, jvm, native] [js, jvm, native] abstract fun read (): T ?","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/#messagesource","text":"[common]\\ interface MessageSource <out T : Any > A readable stream of messages. Typical implementations will receive messages recently transmitted from a peer, such as for server-to-client or client-to-server networking. But this implementation is not limited to such networking use cases and implementations may load messages from local storage or generate messages on demand. Calls to read will block until a message becomes available. There is no mechanism to limit how long a specific read will wait, though implementations may be configured to fail if they consider a source to be unhealthy. Readers should take care to keep up with the stream of messages. A reader that takes an excessive amount of time to process a message may cause their writer to back up and suffer queueing. Instances of this interface are not safe for concurrent use. [js, native]\\ interface MessageSource <out T : Any > [jvm]\\ interface MessageSource <out T : Any > : Closeable","title":"MessageSource"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/#functions","text":"Name Summary close [common, js, native, jvm] [common, js, native] abstract fun close () [jvm] abstract override fun close () read [common] abstract fun read (): T ? Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream. [js, jvm, native] [js, jvm, native] abstract fun read (): T ?","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/close/","text":"// wire-runtime / com.squareup.wire / MessageSource / close close \u00b6 [common, js, native]\\ [common, js, native]\\ abstract fun close ()","title":"Close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/close/#close","text":"[common, js, native]\\ [common, js, native]\\ abstract fun close ()","title":"close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/","text":"// wire-runtime / com.squareup.wire / MessageSource / read read \u00b6 [common]\\ abstract fun read (): T ? Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream. Throws \u00b6 okio.IOException if the next message cannot be read, or if the stream was abnormally terminated by its producer. [js, jvm, native]\\ [js, jvm, native]\\ abstract fun read (): T ? Throws \u00b6 okio.IOException if the next message cannot be read, or if the stream was abnormally terminated by its producer.","title":"Read"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/#read","text":"[common]\\ abstract fun read (): T ? Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream.","title":"read"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/#throws","text":"okio.IOException if the next message cannot be read, or if the stream was abnormally terminated by its producer. [js, jvm, native]\\ [js, jvm, native]\\ abstract fun read (): T ?","title":"Throws"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/#throws_1","text":"okio.IOException if the next message cannot be read, or if the stream was abnormally terminated by its producer.","title":"Throws"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/","text":"// wire-runtime / com.squareup.wire / OneOf OneOf \u00b6 [common]\\ data class OneOf <out K : OneOf.Key < T >, T >(key: K , value: T ) A oneof\u2019s value and the key that identifies which field holds it. Wire has two different mechanisms for generating oneof code: \u201cboxed\u201d that uses this class, and \u201cflat\u201d where all oneof fields are defined inline in the declaring message. Flat oneofs This is Wire\u2019s default mechanism. Each oneof field in the schema yields a field in the generated Kotlin or Java class. At most one field has a non-null value, and callers need to manually probe each field until they find the non-null value. This is well-suited to oneofs with a small number of choices (less than 5). Boxed oneofs In this mechanism the generated class has one field that holds an instance of this. It has both a key that identifies which field is populated, and its value. If no field is set, then the OneOf box is null. This is well-suited to oneofs with a large number of choices (5 or more). This mechanism is necessary for oneofs with a very large number of options because in the other form the generated code may exceed the JVM\u2019s method size limits. Opt-in to boxed oneofs in your build by setting the boxOneOfsMinSize option. OneOfs with this many fields or more will be generated in this form. wire {\\ kotlin {\\ boxOneOfsMinSize = 10\\ }\\ } Using Boxed oneofs One challenge in using oneofs is coping with data from different schema versions that offer new unknown choices. For example, a client may receive a message from a server that sets a oneof field the client doesn\u2019t know about; or a server may read an archived message with a oneof field that has since been deleted. In either case, the oneof will be null! There is no way to differentiate between unset and set to an unknown field. Please keep this in mind when writing code to handle oneofs. In this example the address type may be absent (no value was ever set) or its type may be too new for the current code to understand. This code returns a default value: val buttonLabel = when (contact.address?.key) {\\ Contact.addressSmsNumber -> \u201cSend SMS\u201d\\ Contact.addressEmailAddress -> \u201cSend Email\u201d\\ else -> \u201cAddress Type Unknown or Unset\u201d\\ } Another approach is to crash. In this case applications need to be careful to avoid receiving data with an incompatible schema. val buttonLabel = when (contact.address?.key) {\\ Contact.addressSmsNumber -> \u201cSend SMS\u201d\\ Contact.addressEmailAddress -> \u201cSend Email\u201d\\ else -> throw IllegalStateException(\u201cunknown address!\u201d)\\ } Consider AnyMessage New schemas should consider google.protobuf.Any instead of oneof. Benefits of Any: No build-time dependency from the referencing type on the referenced type. Add new types without changing the schema Benefits of OneOf: More compact on-the-wire encoding. Approximately 1 byte of overhead for OneOf vs. 32 for the message name in an Any. All choices are cataloged a central place in the schema. Constructors \u00b6 OneOf [common] fun <out K : OneOf.Key < T >, T > OneOf (key: K , value: T ) Types \u00b6 Name Summary Key [common] abstract class Key < T >(tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean , jsonName: String ) Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class. Functions \u00b6 Name Summary encodedSizeWithTag [common] fun encodedSizeWithTag (): Int encodeWithTag [common] fun encodeWithTag (writer: ProtoWriter ) fun encodeWithTag (writer: ReverseProtoWriter ) getOrNull [common] fun < X > getOrNull (key: OneOf.Key < X >): X ? toString [common] open override fun toString (): String Properties \u00b6 Name Summary key [common] val key : K value [common] val value : T","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#oneof","text":"[common]\\ data class OneOf <out K : OneOf.Key < T >, T >(key: K , value: T ) A oneof\u2019s value and the key that identifies which field holds it. Wire has two different mechanisms for generating oneof code: \u201cboxed\u201d that uses this class, and \u201cflat\u201d where all oneof fields are defined inline in the declaring message. Flat oneofs This is Wire\u2019s default mechanism. Each oneof field in the schema yields a field in the generated Kotlin or Java class. At most one field has a non-null value, and callers need to manually probe each field until they find the non-null value. This is well-suited to oneofs with a small number of choices (less than 5). Boxed oneofs In this mechanism the generated class has one field that holds an instance of this. It has both a key that identifies which field is populated, and its value. If no field is set, then the OneOf box is null. This is well-suited to oneofs with a large number of choices (5 or more). This mechanism is necessary for oneofs with a very large number of options because in the other form the generated code may exceed the JVM\u2019s method size limits. Opt-in to boxed oneofs in your build by setting the boxOneOfsMinSize option. OneOfs with this many fields or more will be generated in this form. wire {\\ kotlin {\\ boxOneOfsMinSize = 10\\ }\\ } Using Boxed oneofs One challenge in using oneofs is coping with data from different schema versions that offer new unknown choices. For example, a client may receive a message from a server that sets a oneof field the client doesn\u2019t know about; or a server may read an archived message with a oneof field that has since been deleted. In either case, the oneof will be null! There is no way to differentiate between unset and set to an unknown field. Please keep this in mind when writing code to handle oneofs. In this example the address type may be absent (no value was ever set) or its type may be too new for the current code to understand. This code returns a default value: val buttonLabel = when (contact.address?.key) {\\ Contact.addressSmsNumber -> \u201cSend SMS\u201d\\ Contact.addressEmailAddress -> \u201cSend Email\u201d\\ else -> \u201cAddress Type Unknown or Unset\u201d\\ } Another approach is to crash. In this case applications need to be careful to avoid receiving data with an incompatible schema. val buttonLabel = when (contact.address?.key) {\\ Contact.addressSmsNumber -> \u201cSend SMS\u201d\\ Contact.addressEmailAddress -> \u201cSend Email\u201d\\ else -> throw IllegalStateException(\u201cunknown address!\u201d)\\ } Consider AnyMessage New schemas should consider google.protobuf.Any instead of oneof. Benefits of Any: No build-time dependency from the referencing type on the referenced type. Add new types without changing the schema Benefits of OneOf: More compact on-the-wire encoding. Approximately 1 byte of overhead for OneOf vs. 32 for the message name in an Any. All choices are cataloged a central place in the schema.","title":"OneOf"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#constructors","text":"OneOf [common] fun <out K : OneOf.Key < T >, T > OneOf (key: K , value: T )","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#types","text":"Name Summary Key [common] abstract class Key < T >(tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean , jsonName: String ) Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#functions","text":"Name Summary encodedSizeWithTag [common] fun encodedSizeWithTag (): Int encodeWithTag [common] fun encodeWithTag (writer: ProtoWriter ) fun encodeWithTag (writer: ReverseProtoWriter ) getOrNull [common] fun < X > getOrNull (key: OneOf.Key < X >): X ? toString [common] open override fun toString (): String","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/#properties","text":"Name Summary key [common] val key : K value [common] val value : T","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-one-of/","text":"// wire-runtime / com.squareup.wire / OneOf / OneOf OneOf \u00b6 [common]\\ fun <out K : OneOf.Key < T >, T > OneOf (key: K , value: T )","title":" one of"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-one-of/#oneof","text":"[common]\\ fun <out K : OneOf.Key < T >, T > OneOf (key: K , value: T )","title":"OneOf"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encode-with-tag/","text":"// wire-runtime / com.squareup.wire / OneOf / encodeWithTag encodeWithTag \u00b6 [common]\\ fun encodeWithTag (writer: ProtoWriter ) fun encodeWithTag (writer: ReverseProtoWriter )","title":"Encode with tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encode-with-tag/#encodewithtag","text":"[common]\\ fun encodeWithTag (writer: ProtoWriter ) fun encodeWithTag (writer: ReverseProtoWriter )","title":"encodeWithTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encoded-size-with-tag/","text":"// wire-runtime / com.squareup.wire / OneOf / encodedSizeWithTag encodedSizeWithTag \u00b6 [common]\\ fun encodedSizeWithTag (): Int","title":"Encoded size with tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/encoded-size-with-tag/#encodedsizewithtag","text":"[common]\\ fun encodedSizeWithTag (): Int","title":"encodedSizeWithTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/get-or-null/","text":"// wire-runtime / com.squareup.wire / OneOf / getOrNull getOrNull \u00b6 [common]\\ fun < X > getOrNull (key: OneOf.Key < X >): X ?","title":"Get or null"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/get-or-null/#getornull","text":"[common]\\ fun < X > getOrNull (key: OneOf.Key < X >): X ?","title":"getOrNull"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/key/","text":"// wire-runtime / com.squareup.wire / OneOf / key key \u00b6 [common]\\ val key : K","title":"Key"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/key/#key","text":"[common]\\ val key : K","title":"key"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/to-string/","text":"// wire-runtime / com.squareup.wire / OneOf / toString toString \u00b6 [common]\\ open override fun toString (): String","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/to-string/#tostring","text":"[common]\\ open override fun toString (): String","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/value/","text":"// wire-runtime / com.squareup.wire / OneOf / value value \u00b6 [common]\\ val value : T","title":"Value"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/value/#value","text":"[common]\\ val value : T","title":"value"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/","text":"// wire-runtime / com.squareup.wire / OneOf / Key Key \u00b6 [common]\\ abstract class Key < T >(tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean , jsonName: String ) Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class. Note that the field\u2019s type may not uniquely identify the field. For example: message ContactAddress {\\ string name = 1;\\ \\ oneof address {\\ string sms_number = 2;\\ string email_address = 3;\\ }\\ } Constructors \u00b6 Key [common] fun < T > Key (tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean = false, jsonName: String = \u201c\u201d) Properties \u00b6 Name Summary adapter [common] val adapter : ProtoAdapter < T > declaredName [common] val declaredName : String jsonName [common] val jsonName : String redacted [common] val redacted : Boolean = false tag [common] val tag : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/#key","text":"[common]\\ abstract class Key < T >(tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean , jsonName: String ) Identifies a field in a OneOf. Typically subclasses are generated by the Wire compiler and instances are declared as members of the referencing message class. Note that the field\u2019s type may not uniquely identify the field. For example: message ContactAddress {\\ string name = 1;\\ \\ oneof address {\\ string sms_number = 2;\\ string email_address = 3;\\ }\\ }","title":"Key"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/#constructors","text":"Key [common] fun < T > Key (tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean = false, jsonName: String = \u201c\u201d)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/#properties","text":"Name Summary adapter [common] val adapter : ProtoAdapter < T > declaredName [common] val declaredName : String jsonName [common] val jsonName : String redacted [common] val redacted : Boolean = false tag [common] val tag : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/-key/","text":"// wire-runtime / com.squareup.wire / OneOf / Key / Key Key \u00b6 [common]\\ fun < T > Key (tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean = false, jsonName: String = \u201c\u201d)","title":" key"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/-key/#key","text":"[common]\\ fun < T > Key (tag: Int , adapter: ProtoAdapter < T >, declaredName: String , redacted: Boolean = false, jsonName: String = \u201c\u201d)","title":"Key"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/adapter/","text":"// wire-runtime / com.squareup.wire / OneOf / Key / adapter adapter \u00b6 [common]\\ val adapter : ProtoAdapter < T >","title":"Adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/adapter/#adapter","text":"[common]\\ val adapter : ProtoAdapter < T >","title":"adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/declared-name/","text":"// wire-runtime / com.squareup.wire / OneOf / Key / declaredName declaredName \u00b6 [common]\\ val declaredName : String","title":"Declared name"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/declared-name/#declaredname","text":"[common]\\ val declaredName : String","title":"declaredName"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/json-name/","text":"// wire-runtime / com.squareup.wire / OneOf / Key / jsonName jsonName \u00b6 [common]\\ val jsonName : String","title":"Json name"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/json-name/#jsonname","text":"[common]\\ val jsonName : String","title":"jsonName"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/redacted/","text":"// wire-runtime / com.squareup.wire / OneOf / Key / redacted redacted \u00b6 [common]\\ val redacted : Boolean = false","title":"Redacted"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/redacted/#redacted","text":"[common]\\ val redacted : Boolean = false","title":"redacted"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/tag/","text":"// wire-runtime / com.squareup.wire / OneOf / Key / tag tag \u00b6 [common]\\ val tag : Int","title":"Tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-one-of/-key/tag/#tag","text":"[common]\\ val tag : Int","title":"tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter ProtoAdapter \u00b6 [common]\\ abstract class ProtoAdapter < E >(fieldEncoding: FieldEncoding , type: KClass <*>?, typeUrl: String ?, syntax: Syntax , identity: E ?, sourceFile: String ?) [js, jvm, native]\\ abstract class ProtoAdapter < E >(fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax, identity: E ?, sourceFile: String ?) Constructors \u00b6 ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>) ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?) ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax) ProtoAdapter [jvm] fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax, identity: E ?) ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?) ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?) ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax) ProtoAdapter [jvm] fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax, identity: E ?) ProtoAdapter [jvm] fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax, identity: E ?, sourceFile: String ?) Types \u00b6 Name Summary Companion [common, js, jvm, native] [common, js, jvm, native] object Companion EnumConstantNotFoundException [common, js, jvm, native] [common, js] class EnumConstantNotFoundException (value: Int , type: KClass < >?) : IllegalArgumentException [jvm] class EnumConstantNotFoundException (value: Int , type: KClass < >?) : IllegalArgumentException [native] class EnumConstantNotFoundException (value: Int , type: KClass <*>?) Functions \u00b6 Name Summary asPacked [common, js, native] [common, js, native] fun asPacked (): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. [jvm] fun asPacked (): ProtoAdapter < List < E >> asRepeated [common, js, native] [common, js, native] fun asRepeated (): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. [jvm] fun asRepeated (): ProtoAdapter < List < E >> decode [common, js, native] [common] abstract fun decode (reader: ProtoReader ): E [js, native] abstract fun decode (reader: ProtoReader): E Read a non-null value from reader. [jvm] abstract fun decode (reader: ProtoReader): E fun decode (stream: InputStream ): E fun decode (bytes: ByteArray ): E fun decode (source: BufferedSource): E fun decode (bytes: ByteString): E [common, js, native] [common, js, native] fun decode (bytes: ByteArray ): E [common, js] fun decode (bytes: ByteString): E Read an encoded message from bytes. [common, js] [common, js] fun decode (source: BufferedSource): E Read an encoded message from source. encode [common, js, native] [common, js, native] fun encode (value: E ): ByteArray Encode value as a byte[]. [jvm] fun encode (value: E ): ByteArray abstract fun encode (writer: ProtoWriter, value: E ) open fun encode (writer: ReverseProtoWriter, value: E ) fun encode (stream: OutputStream , value: E ) fun encode (sink: BufferedSink, value: E ) [common, js, native] [common] abstract fun encode (writer: ProtoWriter , value: E ) [js, native] abstract fun encode (writer: ProtoWriter, value: E ) [common] open fun encode (writer: ReverseProtoWriter , value: E ) [js, native] open fun encode (writer: ReverseProtoWriter, value: E ) Write non-null value to writer. [common, js] [common, js] fun encode (sink: BufferedSink, value: E ) Encode value and write it to stream. encodeByteString [common, js, native] [common, js, native] fun encodeByteString (value: E ): ByteString Encode value as a ByteString. [jvm] fun encodeByteString (value: E ): ByteString encodedSize [common, js, native] [common, js, native] abstract fun encodedSize (value: E ): Int The size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one). [jvm] abstract fun encodedSize (value: E ): Int encodedSizeWithTag [common, js, native] [common, js, native] open fun encodedSizeWithTag (tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. [jvm] open fun encodedSizeWithTag (tag: Int , value: E ?): Int encodeWithTag [common, js, native] [common] open fun encodeWithTag (writer: ProtoWriter , tag: Int , value: E ?) [js, native] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) [common] open fun encodeWithTag (writer: ReverseProtoWriter , tag: Int , value: E ?) [js, native] open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) Write tag and value to writer. If value is null this does nothing. [jvm] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) redact [common, js, native] [common, js, native] abstract fun redact (value: E ): E Returns the redacted form of value. [jvm] abstract fun redact (value: E ): E toString [common, js, native] [common, js, native] open fun toString (value: E ): String Returns a human-readable version of the given value. [jvm] open fun toString (value: E ): String Properties \u00b6 Name Summary identity [common] val identity : E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. [js, jvm, native] val identity : E ? sourceFile [common] val sourceFile : String ? Path to the file containing the protobuf definition of this type. [js, jvm, native] val sourceFile : String ? syntax [common] val syntax : Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. [js, jvm, native] val syntax : Syntax type [common, js, jvm, native] val type : KClass <*>? typeUrl [common] val typeUrl : String ? Identifies this type for inclusion in a google.protobuf.Any. This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS. [js, jvm, native] val typeUrl : String ? Inheritors \u00b6 Name EnumAdapter ProtoAdapter.Companion Extensions \u00b6 Name Summary decode [darwin] fun < E > ProtoAdapter < E >. decode (data: <ERROR CLASS>): E Read an encoded message from data.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#protoadapter","text":"[common]\\ abstract class ProtoAdapter < E >(fieldEncoding: FieldEncoding , type: KClass <*>?, typeUrl: String ?, syntax: Syntax , identity: E ?, sourceFile: String ?) [js, jvm, native]\\ abstract class ProtoAdapter < E >(fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax, identity: E ?, sourceFile: String ?)","title":"ProtoAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#constructors","text":"ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>) ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?) ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax) ProtoAdapter [jvm] fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax, identity: E ?) ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?) ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?) ProtoAdapter [jvm] fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax) ProtoAdapter [jvm] fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax, identity: E ?) ProtoAdapter [jvm] fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax, identity: E ?, sourceFile: String ?)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#types","text":"Name Summary Companion [common, js, jvm, native] [common, js, jvm, native] object Companion EnumConstantNotFoundException [common, js, jvm, native] [common, js] class EnumConstantNotFoundException (value: Int , type: KClass < >?) : IllegalArgumentException [jvm] class EnumConstantNotFoundException (value: Int , type: KClass < >?) : IllegalArgumentException [native] class EnumConstantNotFoundException (value: Int , type: KClass <*>?)","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#functions","text":"Name Summary asPacked [common, js, native] [common, js, native] fun asPacked (): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. [jvm] fun asPacked (): ProtoAdapter < List < E >> asRepeated [common, js, native] [common, js, native] fun asRepeated (): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. [jvm] fun asRepeated (): ProtoAdapter < List < E >> decode [common, js, native] [common] abstract fun decode (reader: ProtoReader ): E [js, native] abstract fun decode (reader: ProtoReader): E Read a non-null value from reader. [jvm] abstract fun decode (reader: ProtoReader): E fun decode (stream: InputStream ): E fun decode (bytes: ByteArray ): E fun decode (source: BufferedSource): E fun decode (bytes: ByteString): E [common, js, native] [common, js, native] fun decode (bytes: ByteArray ): E [common, js] fun decode (bytes: ByteString): E Read an encoded message from bytes. [common, js] [common, js] fun decode (source: BufferedSource): E Read an encoded message from source. encode [common, js, native] [common, js, native] fun encode (value: E ): ByteArray Encode value as a byte[]. [jvm] fun encode (value: E ): ByteArray abstract fun encode (writer: ProtoWriter, value: E ) open fun encode (writer: ReverseProtoWriter, value: E ) fun encode (stream: OutputStream , value: E ) fun encode (sink: BufferedSink, value: E ) [common, js, native] [common] abstract fun encode (writer: ProtoWriter , value: E ) [js, native] abstract fun encode (writer: ProtoWriter, value: E ) [common] open fun encode (writer: ReverseProtoWriter , value: E ) [js, native] open fun encode (writer: ReverseProtoWriter, value: E ) Write non-null value to writer. [common, js] [common, js] fun encode (sink: BufferedSink, value: E ) Encode value and write it to stream. encodeByteString [common, js, native] [common, js, native] fun encodeByteString (value: E ): ByteString Encode value as a ByteString. [jvm] fun encodeByteString (value: E ): ByteString encodedSize [common, js, native] [common, js, native] abstract fun encodedSize (value: E ): Int The size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one). [jvm] abstract fun encodedSize (value: E ): Int encodedSizeWithTag [common, js, native] [common, js, native] open fun encodedSizeWithTag (tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. [jvm] open fun encodedSizeWithTag (tag: Int , value: E ?): Int encodeWithTag [common, js, native] [common] open fun encodeWithTag (writer: ProtoWriter , tag: Int , value: E ?) [js, native] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) [common] open fun encodeWithTag (writer: ReverseProtoWriter , tag: Int , value: E ?) [js, native] open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) Write tag and value to writer. If value is null this does nothing. [jvm] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) redact [common, js, native] [common, js, native] abstract fun redact (value: E ): E Returns the redacted form of value. [jvm] abstract fun redact (value: E ): E toString [common, js, native] [common, js, native] open fun toString (value: E ): String Returns a human-readable version of the given value. [jvm] open fun toString (value: E ): String","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#properties","text":"Name Summary identity [common] val identity : E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. [js, jvm, native] val identity : E ? sourceFile [common] val sourceFile : String ? Path to the file containing the protobuf definition of this type. [js, jvm, native] val sourceFile : String ? syntax [common] val syntax : Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. [js, jvm, native] val syntax : Syntax type [common, js, jvm, native] val type : KClass <*>? typeUrl [common] val typeUrl : String ? Identifies this type for inclusion in a google.protobuf.Any. This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS. [js, jvm, native] val typeUrl : String ?","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#inheritors","text":"Name EnumAdapter ProtoAdapter.Companion","title":"Inheritors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#extensions","text":"Name Summary decode [darwin] fun < E > ProtoAdapter < E >. decode (data: <ERROR CLASS>): E Read an encoded message from data.","title":"Extensions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-proto-adapter/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / ProtoAdapter ProtoAdapter \u00b6 [jvm, common, js, native]\\ [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>) [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?) [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax) [jvm]\\ fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax, identity: E ?) [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?) [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?) [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax) [jvm]\\ fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax, identity: E ?) [jvm]\\ fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax, identity: E ?, sourceFile: String ?) [common]\\ fun < E > ProtoAdapter (fieldEncoding: FieldEncoding , type: KClass <*>?, typeUrl: String ?, syntax: Syntax , identity: E ? = null, sourceFile: String ? = null) [js, jvm, native]\\ fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax, identity: E ? = null, sourceFile: String ? = null)","title":" proto adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-proto-adapter/#protoadapter","text":"[jvm, common, js, native]\\ [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>) [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?) [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax) [jvm]\\ fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax, identity: E ?) [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?) [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?) [jvm]\\ fun ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax) [jvm]\\ fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax, identity: E ?) [jvm]\\ fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: Class <*>, typeUrl: String ?, syntax: Syntax, identity: E ?, sourceFile: String ?) [common]\\ fun < E > ProtoAdapter (fieldEncoding: FieldEncoding , type: KClass <*>?, typeUrl: String ?, syntax: Syntax , identity: E ? = null, sourceFile: String ? = null) [js, jvm, native]\\ fun < E > ProtoAdapter (fieldEncoding: FieldEncoding, type: KClass <*>?, typeUrl: String ?, syntax: Syntax, identity: E ? = null, sourceFile: String ? = null)","title":"ProtoAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-packed/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / asPacked asPacked \u00b6 [common, js, native]\\ [common, js, native]\\ fun asPacked (): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. [jvm]\\ fun asPacked (): ProtoAdapter < List < E >>","title":"As packed"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-packed/#aspacked","text":"[common, js, native]\\ [common, js, native]\\ fun asPacked (): ProtoAdapter < List < E >> Returns an adapter for E but as a packed, repeated value. [jvm]\\ fun asPacked (): ProtoAdapter < List < E >>","title":"asPacked"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-repeated/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / asRepeated asRepeated \u00b6 [common, js, native]\\ [common, js, native]\\ fun asRepeated (): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. Note: Repeated items are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element lists will be returned and it is the caller\u2019s responsibility to merge them into the final list. [jvm]\\ fun asRepeated (): ProtoAdapter < List < E >>","title":"As repeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-repeated/#asrepeated","text":"[common, js, native]\\ [common, js, native]\\ fun asRepeated (): ProtoAdapter < List < E >> Returns an adapter for E but as a repeated value. Note: Repeated items are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element lists will be returned and it is the caller\u2019s responsibility to merge them into the final list. [jvm]\\ fun asRepeated (): ProtoAdapter < List < E >>","title":"asRepeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/decode/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / decode decode \u00b6 [jvm]\\ fun decode (stream: InputStream ): E abstract fun decode (reader: ProtoReader): E fun decode (bytes: ByteArray ): E fun decode (bytes: ByteString): E fun decode (source: BufferedSource): E [common, js, native]\\ [common]\\ abstract fun decode (reader: ProtoReader ): E [js, native]\\ abstract fun decode (reader: ProtoReader): E Read a non-null value from reader. [common, js, native]\\ [common, js, native]\\ fun decode (bytes: ByteArray ): E [common, js]\\ fun decode (bytes: ByteString): E Read an encoded message from bytes. [common, js]\\ [common, js]\\ fun decode (source: BufferedSource): E Read an encoded message from source.","title":"Decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/decode/#decode","text":"[jvm]\\ fun decode (stream: InputStream ): E abstract fun decode (reader: ProtoReader): E fun decode (bytes: ByteArray ): E fun decode (bytes: ByteString): E fun decode (source: BufferedSource): E [common, js, native]\\ [common]\\ abstract fun decode (reader: ProtoReader ): E [js, native]\\ abstract fun decode (reader: ProtoReader): E Read a non-null value from reader. [common, js, native]\\ [common, js, native]\\ fun decode (bytes: ByteArray ): E [common, js]\\ fun decode (bytes: ByteString): E Read an encoded message from bytes. [common, js]\\ [common, js]\\ fun decode (source: BufferedSource): E Read an encoded message from source.","title":"decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-byte-string/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / encodeByteString encodeByteString \u00b6 [common, js, native]\\ [common, js, native]\\ fun encodeByteString (value: E ): ByteString Encode value as a ByteString. [jvm]\\ fun encodeByteString (value: E ): ByteString","title":"Encode byte string"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-byte-string/#encodebytestring","text":"[common, js, native]\\ [common, js, native]\\ fun encodeByteString (value: E ): ByteString Encode value as a ByteString. [jvm]\\ fun encodeByteString (value: E ): ByteString","title":"encodeByteString"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-with-tag/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / encodeWithTag encodeWithTag \u00b6 [common, js, native]\\ [common]\\ open fun encodeWithTag (writer: ProtoWriter , tag: Int , value: E ?) [js, native]\\ open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) [common]\\ open fun encodeWithTag (writer: ReverseProtoWriter , tag: Int , value: E ?) [js, native]\\ open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) Write tag and value to writer. If value is null this does nothing. [jvm]\\ open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?)","title":"Encode with tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-with-tag/#encodewithtag","text":"[common, js, native]\\ [common]\\ open fun encodeWithTag (writer: ProtoWriter , tag: Int , value: E ?) [js, native]\\ open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) [common]\\ open fun encodeWithTag (writer: ReverseProtoWriter , tag: Int , value: E ?) [js, native]\\ open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) Write tag and value to writer. If value is null this does nothing. [jvm]\\ open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?)","title":"encodeWithTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / encode encode \u00b6 [jvm]\\ fun encode (stream: OutputStream , value: E ) abstract fun encode (writer: ProtoWriter, value: E ) open fun encode (writer: ReverseProtoWriter, value: E ) fun encode (sink: BufferedSink, value: E ) fun encode (value: E ): ByteArray [common, js, native]\\ [common]\\ abstract fun encode (writer: ProtoWriter , value: E ) [js, native]\\ abstract fun encode (writer: ProtoWriter, value: E ) [common]\\ open fun encode (writer: ReverseProtoWriter , value: E ) [js, native]\\ open fun encode (writer: ReverseProtoWriter, value: E ) Write non-null value to writer. [common, js]\\ [common, js]\\ fun encode (sink: BufferedSink, value: E ) Encode value and write it to stream. [common, js, native]\\ [common, js, native]\\ fun encode (value: E ): ByteArray Encode value as a byte[].","title":"Encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode/#encode","text":"[jvm]\\ fun encode (stream: OutputStream , value: E ) abstract fun encode (writer: ProtoWriter, value: E ) open fun encode (writer: ReverseProtoWriter, value: E ) fun encode (sink: BufferedSink, value: E ) fun encode (value: E ): ByteArray [common, js, native]\\ [common]\\ abstract fun encode (writer: ProtoWriter , value: E ) [js, native]\\ abstract fun encode (writer: ProtoWriter, value: E ) [common]\\ open fun encode (writer: ReverseProtoWriter , value: E ) [js, native]\\ open fun encode (writer: ReverseProtoWriter, value: E ) Write non-null value to writer. [common, js]\\ [common, js]\\ fun encode (sink: BufferedSink, value: E ) Encode value and write it to stream. [common, js, native]\\ [common, js, native]\\ fun encode (value: E ): ByteArray Encode value as a byte[].","title":"encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size-with-tag/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / encodedSizeWithTag encodedSizeWithTag \u00b6 [common, js, native]\\ [common, js, native]\\ open fun encodedSizeWithTag (tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. [jvm]\\ open fun encodedSizeWithTag (tag: Int , value: E ?): Int","title":"Encoded size with tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size-with-tag/#encodedsizewithtag","text":"[common, js, native]\\ [common, js, native]\\ open fun encodedSizeWithTag (tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. [jvm]\\ open fun encodedSizeWithTag (tag: Int , value: E ?): Int","title":"encodedSizeWithTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / encodedSize encodedSize \u00b6 [common, js, native]\\ [common, js, native]\\ abstract fun encodedSize (value: E ): Int The size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one). [jvm]\\ abstract fun encodedSize (value: E ): Int","title":"Encoded size"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size/#encodedsize","text":"[common, js, native]\\ [common, js, native]\\ abstract fun encodedSize (value: E ): Int The size of the non-null data value. This does not include the size required for a length-delimited prefix (should the type require one). [jvm]\\ abstract fun encodedSize (value: E ): Int","title":"encodedSize"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/identity/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / identity identity \u00b6 [common]\\ val identity : E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. | TYPE | IDENTITY |\\ | :--------------------------------------------- | :---------------------------- |\\ | All numeric types (int32, float, double, etc.) | 0 |\\ | Boolean | false |\\ | String | empty string: \u201c\u201d |\\ | Bytes | empty bytes: ByteString.EMPTY |\\ | Enums | enum constant with tag 0 |\\ | Lists (repeated types) | empty list: listOf() | [js, jvm, native]\\ [js, jvm, native]\\ val identity : E ?","title":"Identity"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/identity/#identity","text":"[common]\\ val identity : E ? A special value that is used when a field is absent from an encoded proto3 message. When encoding a proto3 message, fields that hold this value will be omitted. | TYPE | IDENTITY |\\ | :--------------------------------------------- | :---------------------------- |\\ | All numeric types (int32, float, double, etc.) | 0 |\\ | Boolean | false |\\ | String | empty string: \u201c\u201d |\\ | Bytes | empty bytes: ByteString.EMPTY |\\ | Enums | enum constant with tag 0 |\\ | Lists (repeated types) | empty list: listOf() | [js, jvm, native]\\ [js, jvm, native]\\ val identity : E ?","title":"identity"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/redact/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / redact redact \u00b6 [common, js, native]\\ [common, js, native]\\ abstract fun redact (value: E ): E Returns the redacted form of value. [jvm]\\ abstract fun redact (value: E ): E","title":"Redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/redact/#redact","text":"[common, js, native]\\ [common, js, native]\\ abstract fun redact (value: E ): E Returns the redacted form of value. [jvm]\\ abstract fun redact (value: E ): E","title":"redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/source-file/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / sourceFile sourceFile \u00b6 [common]\\ val sourceFile : String ? Path to the file containing the protobuf definition of this type. [js, jvm, native]\\ [js, jvm, native]\\ val sourceFile : String ?","title":"Source file"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/source-file/#sourcefile","text":"[common]\\ val sourceFile : String ? Path to the file containing the protobuf definition of this type. [js, jvm, native]\\ [js, jvm, native]\\ val sourceFile : String ?","title":"sourceFile"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/syntax/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / syntax syntax \u00b6 [common]\\ val syntax : Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. [js, jvm, native]\\ [js, jvm, native]\\ val syntax : Syntax","title":"Syntax"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/syntax/#syntax","text":"[common]\\ val syntax : Syntax Identifies the syntax in which type is defined in the proto schema. This string contains either \u201cproto2\u201d or \u201cproto3\u201d. [js, jvm, native]\\ [js, jvm, native]\\ val syntax : Syntax","title":"syntax"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/to-string/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / toString toString \u00b6 [common, js, native]\\ [common, js, native]\\ open fun toString (value: E ): String Returns a human-readable version of the given value. [jvm]\\ open fun toString (value: E ): String","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/to-string/#tostring","text":"[common, js, native]\\ [common, js, native]\\ open fun toString (value: E ): String Returns a human-readable version of the given value. [jvm]\\ open fun toString (value: E ): String","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type-url/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / typeUrl typeUrl \u00b6 [common]\\ val typeUrl : String ? Identifies this type for inclusion in a google.protobuf.Any. This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS. [js, jvm, native]\\ [js, jvm, native]\\ val typeUrl : String ?","title":"Type url"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type-url/#typeurl","text":"[common]\\ val typeUrl : String ? Identifies this type for inclusion in a google.protobuf.Any. This is a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is either not a message (such as scalars and enums), or was code-generated before Wire 3.2 which introduced support for type URLS. [js, jvm, native]\\ [js, jvm, native]\\ val typeUrl : String ?","title":"typeUrl"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / type type \u00b6 [common, js, jvm, native]\\ [common, js, jvm, native]\\ val type : KClass <*>?","title":"Type"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type/#type","text":"[common, js, jvm, native]\\ [common, js, jvm, native]\\ val type : KClass <*>?","title":"type"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion Companion \u00b6 [common, js, jvm, native]\\ object Companion Types \u00b6 Name Summary UnsupportedTypeProtoAdapter [jvm] class UnsupportedTypeProtoAdapter : ProtoAdapter < Nothing > Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath. Functions \u00b6 Name Summary get [jvm] @ JvmStatic fun < M : Message < , *>> get (message: M ): ProtoAdapter < M > Returns the adapter for the type of Message. [jvm] @ JvmStatic fun < M > get (type: Class < M >): ProtoAdapter < M > Returns the adapter for type. [jvm] @ JvmStatic fun get (adapterString: String ): ProtoAdapter < > Returns the adapter for a given adapterString. adapterString is specified on a proto message field\u2019s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER. newEnumAdapter [jvm] @ JvmStatic fun < E : WireEnum> newEnumAdapter (type: Class < E >): EnumAdapter < E > Creates a new proto adapter for type. newMapAdapter [common, js, native] [common] @ JvmStatic fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> [js, native] fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> Creates a new proto adapter for a map using keyAdapter and valueAdapter. [jvm] @ JvmStatic fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> newMessageAdapter [jvm] @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >): ProtoAdapter < M > @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >, typeUrl: String ): ProtoAdapter < M > [jvm] @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >, typeUrl: String , syntax: Syntax): ProtoAdapter < M > Creates a new proto adapter for type. Properties \u00b6 Name Summary BOOL [common, jvm] @ JvmField val BOOL : ProtoAdapter < Boolean > [js, native] val BOOL : ProtoAdapter < Boolean > BOOL_VALUE [common, jvm] @ JvmField val BOOL_VALUE : ProtoAdapter < Boolean ?> [js, native] val BOOL_VALUE : ProtoAdapter < Boolean ?> BYTES [common, jvm] @ JvmField val BYTES : ProtoAdapter <ByteString> [js, native] val BYTES : ProtoAdapter <ByteString> BYTES_VALUE [common, jvm] @ JvmField val BYTES_VALUE : ProtoAdapter <ByteString?> [js, native] val BYTES_VALUE : ProtoAdapter <ByteString?> DOUBLE [common, jvm] @ JvmField val DOUBLE : ProtoAdapter < Double > [js, native] val DOUBLE : ProtoAdapter < Double > DOUBLE_VALUE [common, jvm] @ JvmField val DOUBLE_VALUE : ProtoAdapter < Double ?> [js, native] val DOUBLE_VALUE : ProtoAdapter < Double ?> DURATION [common, jvm] @ JvmField val DURATION : ProtoAdapter < Duration > [js, native] val DURATION : ProtoAdapter < Duration > EMPTY [common, jvm] @ JvmField val EMPTY : ProtoAdapter < Unit > [js, native] val EMPTY : ProtoAdapter < Unit > FIXED32 [common, jvm] @ JvmField val FIXED32 : ProtoAdapter < Int > [js, native] val FIXED32 : ProtoAdapter < Int > FIXED64 [common, jvm] @ JvmField val FIXED64 : ProtoAdapter < Long > [js, native] val FIXED64 : ProtoAdapter < Long > FLOAT [common, jvm] @ JvmField val FLOAT : ProtoAdapter < Float > [js, native] val FLOAT : ProtoAdapter < Float > FLOAT_VALUE [common, jvm] @ JvmField val FLOAT_VALUE : ProtoAdapter < Float ?> [js, native] val FLOAT_VALUE : ProtoAdapter < Float ?> INSTANT [common, jvm] @ JvmField val INSTANT : ProtoAdapter < Instant > [js, native] val INSTANT : ProtoAdapter < Instant > INT32 [common, jvm] @ JvmField val INT32 : ProtoAdapter < Int > [js, native] val INT32 : ProtoAdapter < Int > INT32_VALUE [common, jvm] @ JvmField val INT32_VALUE : ProtoAdapter < Int ?> [js, native] val INT32_VALUE : ProtoAdapter < Int ?> INT64 [common, jvm] @ JvmField val INT64 : ProtoAdapter < Long > [js, native] val INT64 : ProtoAdapter < Long > INT64_VALUE [common, jvm] @ JvmField val INT64_VALUE : ProtoAdapter < Long ?> [js, native] val INT64_VALUE : ProtoAdapter < Long ?> SFIXED32 [common, jvm] @ JvmField val SFIXED32 : ProtoAdapter < Int > [js, native] val SFIXED32 : ProtoAdapter < Int > SFIXED64 [common, jvm] @ JvmField val SFIXED64 : ProtoAdapter < Long > [js, native] val SFIXED64 : ProtoAdapter < Long > SINT32 [common, jvm] @ JvmField val SINT32 : ProtoAdapter < Int > [js, native] val SINT32 : ProtoAdapter < Int > SINT64 [common, jvm] @ JvmField val SINT64 : ProtoAdapter < Long > [js, native] val SINT64 : ProtoAdapter < Long > STRING [common, jvm] @ JvmField val STRING : ProtoAdapter < String > [js, native] val STRING : ProtoAdapter < String > STRING_VALUE [common, jvm] @ JvmField val STRING_VALUE : ProtoAdapter < String ?> [js, native] val STRING_VALUE : ProtoAdapter < String ?> STRUCT_LIST [common, jvm] @ JvmField val STRUCT_LIST : ProtoAdapter < List < >?> [js, native] val STRUCT_LIST : ProtoAdapter < List < >?> STRUCT_MAP [common, jvm] @ JvmField val STRUCT_MAP : ProtoAdapter < Map < String , *>?> [js, native] val STRUCT_MAP : ProtoAdapter < Map < String , *>?> STRUCT_NULL [common, jvm] @ JvmField val STRUCT_NULL : ProtoAdapter < Nothing ?> [js, native] val STRUCT_NULL : ProtoAdapter < Nothing ?> STRUCT_VALUE [common, jvm] @ JvmField val STRUCT_VALUE : ProtoAdapter < Any ?> [js, native] val STRUCT_VALUE : ProtoAdapter < Any ?> UINT32 [common, jvm] @ JvmField val UINT32 : ProtoAdapter < Int > [js, native] val UINT32 : ProtoAdapter < Int > UINT32_VALUE [common, jvm] @ JvmField val UINT32_VALUE : ProtoAdapter < Int ?> [js, native] val UINT32_VALUE : ProtoAdapter < Int ?> UINT64 [common] @ JvmField val UINT64 : ProtoAdapter < Long > Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON. [js, native] val UINT64 : ProtoAdapter < Long > Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON. [jvm] @ JvmField val UINT64 : ProtoAdapter < Long > UINT64_VALUE [common, jvm] @ JvmField val UINT64_VALUE : ProtoAdapter < Long ?> [js, native] val UINT64_VALUE : ProtoAdapter < Long ?>","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/#companion","text":"[common, js, jvm, native]\\ object Companion","title":"Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/#types","text":"Name Summary UnsupportedTypeProtoAdapter [jvm] class UnsupportedTypeProtoAdapter : ProtoAdapter < Nothing > Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/#functions","text":"Name Summary get [jvm] @ JvmStatic fun < M : Message < , *>> get (message: M ): ProtoAdapter < M > Returns the adapter for the type of Message. [jvm] @ JvmStatic fun < M > get (type: Class < M >): ProtoAdapter < M > Returns the adapter for type. [jvm] @ JvmStatic fun get (adapterString: String ): ProtoAdapter < > Returns the adapter for a given adapterString. adapterString is specified on a proto message field\u2019s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER. newEnumAdapter [jvm] @ JvmStatic fun < E : WireEnum> newEnumAdapter (type: Class < E >): EnumAdapter < E > Creates a new proto adapter for type. newMapAdapter [common, js, native] [common] @ JvmStatic fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> [js, native] fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> Creates a new proto adapter for a map using keyAdapter and valueAdapter. [jvm] @ JvmStatic fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> newMessageAdapter [jvm] @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >): ProtoAdapter < M > @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >, typeUrl: String ): ProtoAdapter < M > [jvm] @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >, typeUrl: String , syntax: Syntax): ProtoAdapter < M > Creates a new proto adapter for type.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/#properties","text":"Name Summary BOOL [common, jvm] @ JvmField val BOOL : ProtoAdapter < Boolean > [js, native] val BOOL : ProtoAdapter < Boolean > BOOL_VALUE [common, jvm] @ JvmField val BOOL_VALUE : ProtoAdapter < Boolean ?> [js, native] val BOOL_VALUE : ProtoAdapter < Boolean ?> BYTES [common, jvm] @ JvmField val BYTES : ProtoAdapter <ByteString> [js, native] val BYTES : ProtoAdapter <ByteString> BYTES_VALUE [common, jvm] @ JvmField val BYTES_VALUE : ProtoAdapter <ByteString?> [js, native] val BYTES_VALUE : ProtoAdapter <ByteString?> DOUBLE [common, jvm] @ JvmField val DOUBLE : ProtoAdapter < Double > [js, native] val DOUBLE : ProtoAdapter < Double > DOUBLE_VALUE [common, jvm] @ JvmField val DOUBLE_VALUE : ProtoAdapter < Double ?> [js, native] val DOUBLE_VALUE : ProtoAdapter < Double ?> DURATION [common, jvm] @ JvmField val DURATION : ProtoAdapter < Duration > [js, native] val DURATION : ProtoAdapter < Duration > EMPTY [common, jvm] @ JvmField val EMPTY : ProtoAdapter < Unit > [js, native] val EMPTY : ProtoAdapter < Unit > FIXED32 [common, jvm] @ JvmField val FIXED32 : ProtoAdapter < Int > [js, native] val FIXED32 : ProtoAdapter < Int > FIXED64 [common, jvm] @ JvmField val FIXED64 : ProtoAdapter < Long > [js, native] val FIXED64 : ProtoAdapter < Long > FLOAT [common, jvm] @ JvmField val FLOAT : ProtoAdapter < Float > [js, native] val FLOAT : ProtoAdapter < Float > FLOAT_VALUE [common, jvm] @ JvmField val FLOAT_VALUE : ProtoAdapter < Float ?> [js, native] val FLOAT_VALUE : ProtoAdapter < Float ?> INSTANT [common, jvm] @ JvmField val INSTANT : ProtoAdapter < Instant > [js, native] val INSTANT : ProtoAdapter < Instant > INT32 [common, jvm] @ JvmField val INT32 : ProtoAdapter < Int > [js, native] val INT32 : ProtoAdapter < Int > INT32_VALUE [common, jvm] @ JvmField val INT32_VALUE : ProtoAdapter < Int ?> [js, native] val INT32_VALUE : ProtoAdapter < Int ?> INT64 [common, jvm] @ JvmField val INT64 : ProtoAdapter < Long > [js, native] val INT64 : ProtoAdapter < Long > INT64_VALUE [common, jvm] @ JvmField val INT64_VALUE : ProtoAdapter < Long ?> [js, native] val INT64_VALUE : ProtoAdapter < Long ?> SFIXED32 [common, jvm] @ JvmField val SFIXED32 : ProtoAdapter < Int > [js, native] val SFIXED32 : ProtoAdapter < Int > SFIXED64 [common, jvm] @ JvmField val SFIXED64 : ProtoAdapter < Long > [js, native] val SFIXED64 : ProtoAdapter < Long > SINT32 [common, jvm] @ JvmField val SINT32 : ProtoAdapter < Int > [js, native] val SINT32 : ProtoAdapter < Int > SINT64 [common, jvm] @ JvmField val SINT64 : ProtoAdapter < Long > [js, native] val SINT64 : ProtoAdapter < Long > STRING [common, jvm] @ JvmField val STRING : ProtoAdapter < String > [js, native] val STRING : ProtoAdapter < String > STRING_VALUE [common, jvm] @ JvmField val STRING_VALUE : ProtoAdapter < String ?> [js, native] val STRING_VALUE : ProtoAdapter < String ?> STRUCT_LIST [common, jvm] @ JvmField val STRUCT_LIST : ProtoAdapter < List < >?> [js, native] val STRUCT_LIST : ProtoAdapter < List < >?> STRUCT_MAP [common, jvm] @ JvmField val STRUCT_MAP : ProtoAdapter < Map < String , *>?> [js, native] val STRUCT_MAP : ProtoAdapter < Map < String , *>?> STRUCT_NULL [common, jvm] @ JvmField val STRUCT_NULL : ProtoAdapter < Nothing ?> [js, native] val STRUCT_NULL : ProtoAdapter < Nothing ?> STRUCT_VALUE [common, jvm] @ JvmField val STRUCT_VALUE : ProtoAdapter < Any ?> [js, native] val STRUCT_VALUE : ProtoAdapter < Any ?> UINT32 [common, jvm] @ JvmField val UINT32 : ProtoAdapter < Int > [js, native] val UINT32 : ProtoAdapter < Int > UINT32_VALUE [common, jvm] @ JvmField val UINT32_VALUE : ProtoAdapter < Int ?> [js, native] val UINT32_VALUE : ProtoAdapter < Int ?> UINT64 [common] @ JvmField val UINT64 : ProtoAdapter < Long > Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON. [js, native] val UINT64 : ProtoAdapter < Long > Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON. [jvm] @ JvmField val UINT64 : ProtoAdapter < Long > UINT64_VALUE [common, jvm] @ JvmField val UINT64_VALUE : ProtoAdapter < Long ?> [js, native] val UINT64_VALUE : ProtoAdapter < Long ?>","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-o-o-l/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / BOOL BOOL \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val BOOL : ProtoAdapter < Boolean > [js, native]\\ val BOOL : ProtoAdapter < Boolean >","title":" b o o l"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-o-o-l/#bool","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val BOOL : ProtoAdapter < Boolean > [js, native]\\ val BOOL : ProtoAdapter < Boolean >","title":"BOOL"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-o-o-l_-v-a-l-u-e/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / BOOL_VALUE BOOL_VALUE \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val BOOL_VALUE : ProtoAdapter < Boolean ?> [js, native]\\ val BOOL_VALUE : ProtoAdapter < Boolean ?>","title":" b o o l  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-o-o-l_-v-a-l-u-e/#bool_value","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val BOOL_VALUE : ProtoAdapter < Boolean ?> [js, native]\\ val BOOL_VALUE : ProtoAdapter < Boolean ?>","title":"BOOL_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-y-t-e-s/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / BYTES BYTES \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val BYTES : ProtoAdapter <ByteString> [js, native]\\ val BYTES : ProtoAdapter <ByteString>","title":" b y t e s"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-y-t-e-s/#bytes","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val BYTES : ProtoAdapter <ByteString> [js, native]\\ val BYTES : ProtoAdapter <ByteString>","title":"BYTES"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-y-t-e-s_-v-a-l-u-e/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / BYTES_VALUE BYTES_VALUE \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val BYTES_VALUE : ProtoAdapter <ByteString?> [js, native]\\ val BYTES_VALUE : ProtoAdapter <ByteString?>","title":" b y t e s  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-b-y-t-e-s_-v-a-l-u-e/#bytes_value","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val BYTES_VALUE : ProtoAdapter <ByteString?> [js, native]\\ val BYTES_VALUE : ProtoAdapter <ByteString?>","title":"BYTES_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-o-u-b-l-e/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / DOUBLE DOUBLE \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val DOUBLE : ProtoAdapter < Double > [js, native]\\ val DOUBLE : ProtoAdapter < Double >","title":" d o u b l e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-o-u-b-l-e/#double","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val DOUBLE : ProtoAdapter < Double > [js, native]\\ val DOUBLE : ProtoAdapter < Double >","title":"DOUBLE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-o-u-b-l-e_-v-a-l-u-e/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / DOUBLE_VALUE DOUBLE_VALUE \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val DOUBLE_VALUE : ProtoAdapter < Double ?> [js, native]\\ val DOUBLE_VALUE : ProtoAdapter < Double ?>","title":" d o u b l e  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-o-u-b-l-e_-v-a-l-u-e/#double_value","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val DOUBLE_VALUE : ProtoAdapter < Double ?> [js, native]\\ val DOUBLE_VALUE : ProtoAdapter < Double ?>","title":"DOUBLE_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-u-r-a-t-i-o-n/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / DURATION DURATION \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val DURATION : ProtoAdapter < Duration > [js, native]\\ val DURATION : ProtoAdapter < Duration >","title":" d u r a t i o n"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-d-u-r-a-t-i-o-n/#duration","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val DURATION : ProtoAdapter < Duration > [js, native]\\ val DURATION : ProtoAdapter < Duration >","title":"DURATION"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-e-m-p-t-y/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / EMPTY EMPTY \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val EMPTY : ProtoAdapter < Unit > [js, native]\\ val EMPTY : ProtoAdapter < Unit >","title":" e m p t y"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-e-m-p-t-y/#empty","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val EMPTY : ProtoAdapter < Unit > [js, native]\\ val EMPTY : ProtoAdapter < Unit >","title":"EMPTY"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-i-x-e-d32/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / FIXED32 FIXED32 \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val FIXED32 : ProtoAdapter < Int > [js, native]\\ val FIXED32 : ProtoAdapter < Int >","title":" f i x e d32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-i-x-e-d32/#fixed32","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val FIXED32 : ProtoAdapter < Int > [js, native]\\ val FIXED32 : ProtoAdapter < Int >","title":"FIXED32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-i-x-e-d64/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / FIXED64 FIXED64 \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val FIXED64 : ProtoAdapter < Long > [js, native]\\ val FIXED64 : ProtoAdapter < Long >","title":" f i x e d64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-i-x-e-d64/#fixed64","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val FIXED64 : ProtoAdapter < Long > [js, native]\\ val FIXED64 : ProtoAdapter < Long >","title":"FIXED64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-l-o-a-t/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / FLOAT FLOAT \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val FLOAT : ProtoAdapter < Float > [js, native]\\ val FLOAT : ProtoAdapter < Float >","title":" f l o a t"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-l-o-a-t/#float","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val FLOAT : ProtoAdapter < Float > [js, native]\\ val FLOAT : ProtoAdapter < Float >","title":"FLOAT"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-l-o-a-t_-v-a-l-u-e/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / FLOAT_VALUE FLOAT_VALUE \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val FLOAT_VALUE : ProtoAdapter < Float ?> [js, native]\\ val FLOAT_VALUE : ProtoAdapter < Float ?>","title":" f l o a t  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-f-l-o-a-t_-v-a-l-u-e/#float_value","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val FLOAT_VALUE : ProtoAdapter < Float ?> [js, native]\\ val FLOAT_VALUE : ProtoAdapter < Float ?>","title":"FLOAT_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-s-t-a-n-t/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / INSTANT INSTANT \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val INSTANT : ProtoAdapter < Instant > [js, native]\\ val INSTANT : ProtoAdapter < Instant >","title":" i n s t a n t"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-s-t-a-n-t/#instant","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val INSTANT : ProtoAdapter < Instant > [js, native]\\ val INSTANT : ProtoAdapter < Instant >","title":"INSTANT"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t32/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / INT32 INT32 \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val INT32 : ProtoAdapter < Int > [js, native]\\ val INT32 : ProtoAdapter < Int >","title":" i n t32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t32/#int32","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val INT32 : ProtoAdapter < Int > [js, native]\\ val INT32 : ProtoAdapter < Int >","title":"INT32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t32_-v-a-l-u-e/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / INT32_VALUE INT32_VALUE \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val INT32_VALUE : ProtoAdapter < Int ?> [js, native]\\ val INT32_VALUE : ProtoAdapter < Int ?>","title":" i n t32  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t32_-v-a-l-u-e/#int32_value","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val INT32_VALUE : ProtoAdapter < Int ?> [js, native]\\ val INT32_VALUE : ProtoAdapter < Int ?>","title":"INT32_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t64/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / INT64 INT64 \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val INT64 : ProtoAdapter < Long > [js, native]\\ val INT64 : ProtoAdapter < Long >","title":" i n t64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t64/#int64","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val INT64 : ProtoAdapter < Long > [js, native]\\ val INT64 : ProtoAdapter < Long >","title":"INT64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t64_-v-a-l-u-e/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / INT64_VALUE INT64_VALUE \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val INT64_VALUE : ProtoAdapter < Long ?> [js, native]\\ val INT64_VALUE : ProtoAdapter < Long ?>","title":" i n t64  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-i-n-t64_-v-a-l-u-e/#int64_value","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val INT64_VALUE : ProtoAdapter < Long ?> [js, native]\\ val INT64_VALUE : ProtoAdapter < Long ?>","title":"INT64_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-f-i-x-e-d32/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / SFIXED32 SFIXED32 \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val SFIXED32 : ProtoAdapter < Int > [js, native]\\ val SFIXED32 : ProtoAdapter < Int >","title":" s f i x e d32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-f-i-x-e-d32/#sfixed32","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val SFIXED32 : ProtoAdapter < Int > [js, native]\\ val SFIXED32 : ProtoAdapter < Int >","title":"SFIXED32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-f-i-x-e-d64/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / SFIXED64 SFIXED64 \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val SFIXED64 : ProtoAdapter < Long > [js, native]\\ val SFIXED64 : ProtoAdapter < Long >","title":" s f i x e d64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-f-i-x-e-d64/#sfixed64","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val SFIXED64 : ProtoAdapter < Long > [js, native]\\ val SFIXED64 : ProtoAdapter < Long >","title":"SFIXED64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-i-n-t32/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / SINT32 SINT32 \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val SINT32 : ProtoAdapter < Int > [js, native]\\ val SINT32 : ProtoAdapter < Int >","title":" s i n t32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-i-n-t32/#sint32","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val SINT32 : ProtoAdapter < Int > [js, native]\\ val SINT32 : ProtoAdapter < Int >","title":"SINT32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-i-n-t64/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / SINT64 SINT64 \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val SINT64 : ProtoAdapter < Long > [js, native]\\ val SINT64 : ProtoAdapter < Long >","title":" s i n t64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-i-n-t64/#sint64","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val SINT64 : ProtoAdapter < Long > [js, native]\\ val SINT64 : ProtoAdapter < Long >","title":"SINT64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-i-n-g/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / STRING STRING \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRING : ProtoAdapter < String > [js, native]\\ val STRING : ProtoAdapter < String >","title":" s t r i n g"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-i-n-g/#string","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRING : ProtoAdapter < String > [js, native]\\ val STRING : ProtoAdapter < String >","title":"STRING"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-i-n-g_-v-a-l-u-e/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / STRING_VALUE STRING_VALUE \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRING_VALUE : ProtoAdapter < String ?> [js, native]\\ val STRING_VALUE : ProtoAdapter < String ?>","title":" s t r i n g  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-i-n-g_-v-a-l-u-e/#string_value","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRING_VALUE : ProtoAdapter < String ?> [js, native]\\ val STRING_VALUE : ProtoAdapter < String ?>","title":"STRING_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-l-i-s-t/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / STRUCT_LIST STRUCT_LIST \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRUCT_LIST : ProtoAdapter < List <*>?> [js, native]\\ val STRUCT_LIST : ProtoAdapter < List <*>?>","title":" s t r u c t  l i s t"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-l-i-s-t/#struct_list","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRUCT_LIST : ProtoAdapter < List <*>?> [js, native]\\ val STRUCT_LIST : ProtoAdapter < List <*>?>","title":"STRUCT_LIST"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-m-a-p/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / STRUCT_MAP STRUCT_MAP \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRUCT_MAP : ProtoAdapter < Map < String , *>?> [js, native]\\ val STRUCT_MAP : ProtoAdapter < Map < String , *>?>","title":" s t r u c t  m a p"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-m-a-p/#struct_map","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRUCT_MAP : ProtoAdapter < Map < String , *>?> [js, native]\\ val STRUCT_MAP : ProtoAdapter < Map < String , *>?>","title":"STRUCT_MAP"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-n-u-l-l/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / STRUCT_NULL STRUCT_NULL \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRUCT_NULL : ProtoAdapter < Nothing ?> [js, native]\\ val STRUCT_NULL : ProtoAdapter < Nothing ?>","title":" s t r u c t  n u l l"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-n-u-l-l/#struct_null","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRUCT_NULL : ProtoAdapter < Nothing ?> [js, native]\\ val STRUCT_NULL : ProtoAdapter < Nothing ?>","title":"STRUCT_NULL"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-v-a-l-u-e/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / STRUCT_VALUE STRUCT_VALUE \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRUCT_VALUE : ProtoAdapter < Any ?> [js, native]\\ val STRUCT_VALUE : ProtoAdapter < Any ?>","title":" s t r u c t  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-s-t-r-u-c-t_-v-a-l-u-e/#struct_value","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val STRUCT_VALUE : ProtoAdapter < Any ?> [js, native]\\ val STRUCT_VALUE : ProtoAdapter < Any ?>","title":"STRUCT_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t32/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / UINT32 UINT32 \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val UINT32 : ProtoAdapter < Int > [js, native]\\ val UINT32 : ProtoAdapter < Int >","title":" u i n t32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t32/#uint32","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val UINT32 : ProtoAdapter < Int > [js, native]\\ val UINT32 : ProtoAdapter < Int >","title":"UINT32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t32_-v-a-l-u-e/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / UINT32_VALUE UINT32_VALUE \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val UINT32_VALUE : ProtoAdapter < Int ?> [js, native]\\ val UINT32_VALUE : ProtoAdapter < Int ?>","title":" u i n t32  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t32_-v-a-l-u-e/#uint32_value","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val UINT32_VALUE : ProtoAdapter < Int ?> [js, native]\\ val UINT32_VALUE : ProtoAdapter < Int ?>","title":"UINT32_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t64/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / UINT64 UINT64 \u00b6 [common, js, native]\\ [common]\\ @ JvmField val UINT64 : ProtoAdapter < Long > [js, native]\\ val UINT64 : ProtoAdapter < Long > Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON. [jvm]\\ @ JvmField val UINT64 : ProtoAdapter < Long >","title":" u i n t64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t64/#uint64","text":"[common, js, native]\\ [common]\\ @ JvmField val UINT64 : ProtoAdapter < Long > [js, native]\\ val UINT64 : ProtoAdapter < Long > Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON. [jvm]\\ @ JvmField val UINT64 : ProtoAdapter < Long >","title":"UINT64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t64_-v-a-l-u-e/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / UINT64_VALUE UINT64_VALUE \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val UINT64_VALUE : ProtoAdapter < Long ?> [js, native]\\ val UINT64_VALUE : ProtoAdapter < Long ?>","title":" u i n t64  v a l u e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-u-i-n-t64_-v-a-l-u-e/#uint64_value","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val UINT64_VALUE : ProtoAdapter < Long ?> [js, native]\\ val UINT64_VALUE : ProtoAdapter < Long ?>","title":"UINT64_VALUE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/get/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / get get \u00b6 [jvm]\\ @ JvmStatic fun < M : Message <*, *>> get (message: M ): ProtoAdapter < M > Returns the adapter for the type of Message. [jvm]\\ @ JvmStatic fun < M > get (type: Class < M >): ProtoAdapter < M > Returns the adapter for type. [jvm]\\ @ JvmStatic fun get (adapterString: String ): ProtoAdapter <*> Returns the adapter for a given adapterString. adapterString is specified on a proto message field\u2019s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER.","title":"Get"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/get/#get","text":"[jvm]\\ @ JvmStatic fun < M : Message <*, *>> get (message: M ): ProtoAdapter < M > Returns the adapter for the type of Message. [jvm]\\ @ JvmStatic fun < M > get (type: Class < M >): ProtoAdapter < M > Returns the adapter for type. [jvm]\\ @ JvmStatic fun get (adapterString: String ): ProtoAdapter <*> Returns the adapter for a given adapterString. adapterString is specified on a proto message field\u2019s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER.","title":"get"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-enum-adapter/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / newEnumAdapter newEnumAdapter \u00b6 [jvm]\\ @ JvmStatic fun < E : WireEnum> newEnumAdapter (type: Class < E >): EnumAdapter < E > Creates a new proto adapter for type.","title":"New enum adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-enum-adapter/#newenumadapter","text":"[jvm]\\ @ JvmStatic fun < E : WireEnum> newEnumAdapter (type: Class < E >): EnumAdapter < E > Creates a new proto adapter for type.","title":"newEnumAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-map-adapter/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / newMapAdapter newMapAdapter \u00b6 [common, js, native]\\ [common]\\ @ JvmStatic fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> [js, native]\\ fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> Creates a new proto adapter for a map using keyAdapter and valueAdapter. Note: Map entries are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element maps will be returned and it is the caller\u2019s responsibility to merge them into the final map. [jvm]\\ @ JvmStatic fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >>","title":"New map adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-map-adapter/#newmapadapter","text":"[common, js, native]\\ [common]\\ @ JvmStatic fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> [js, native]\\ fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >> Creates a new proto adapter for a map using keyAdapter and valueAdapter. Note: Map entries are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element maps will be returned and it is the caller\u2019s responsibility to merge them into the final map. [jvm]\\ @ JvmStatic fun < K , V > newMapAdapter (keyAdapter: ProtoAdapter < K >, valueAdapter: ProtoAdapter < V >): ProtoAdapter < Map < K , V >>","title":"newMapAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-message-adapter/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / newMessageAdapter newMessageAdapter \u00b6 [jvm]\\ @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >): ProtoAdapter < M > @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >, typeUrl: String ): ProtoAdapter < M > [jvm]\\ @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >, typeUrl: String , syntax: Syntax): ProtoAdapter < M > Creates a new proto adapter for type.","title":"New message adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/new-message-adapter/#newmessageadapter","text":"[jvm]\\ @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >): ProtoAdapter < M > @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >, typeUrl: String ): ProtoAdapter < M > [jvm]\\ @ JvmStatic fun < M : Message < M , B >, B : Message.Builder < M , B >> newMessageAdapter (type: Class < M >, typeUrl: String , syntax: Syntax): ProtoAdapter < M > Creates a new proto adapter for type.","title":"newMessageAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / UnsupportedTypeProtoAdapter UnsupportedTypeProtoAdapter \u00b6 [jvm]\\ class UnsupportedTypeProtoAdapter : ProtoAdapter < Nothing > Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath. Constructors \u00b6 UnsupportedTypeProtoAdapter [jvm] fun UnsupportedTypeProtoAdapter () Functions \u00b6 Name Summary asPacked [jvm] fun asPacked (): ProtoAdapter < List < Nothing >> asRepeated [jvm] fun asRepeated (): ProtoAdapter < List < Nothing >> decode [jvm] open override fun decode (reader: ProtoReader): Nothing fun decode (stream: InputStream ): Nothing fun decode (bytes: ByteArray ): Nothing fun decode (source: BufferedSource): Nothing fun decode (bytes: ByteString): Nothing encode [jvm] fun encode (value: Nothing ): ByteArray open override fun encode (writer: ProtoWriter, value: Nothing ): Nothing open override fun encode (writer: ReverseProtoWriter, value: Nothing ): Nothing fun encode (stream: OutputStream , value: Nothing ) fun encode (sink: BufferedSink, value: Nothing ) encodeByteString [jvm] fun encodeByteString (value: Nothing ): ByteString encodedSize [jvm] open override fun encodedSize (value: Nothing ): Nothing encodedSizeWithTag [jvm] open fun encodedSizeWithTag (tag: Int , value: Nothing ?): Int encodeWithTag [jvm] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: Nothing ?) open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: Nothing ?) redact [jvm] open override fun redact (value: Nothing ): Nothing toString [jvm] open fun toString (value: Nothing ): String Properties \u00b6 Name Summary identity [jvm] val identity : Nothing ? sourceFile [jvm] val sourceFile : String ? syntax [jvm] val syntax : Syntax type [jvm] val type : KClass <*>? typeUrl [jvm] val typeUrl : String ?","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/#unsupportedtypeprotoadapter","text":"[jvm]\\ class UnsupportedTypeProtoAdapter : ProtoAdapter < Nothing > Stub ProtoAdapter for Wire types which are typeliased to java.time types on the JVM such as Duration and Instant . This proto adapter is used when the corresponding java.time type is missing from the JVM classpath.","title":"UnsupportedTypeProtoAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/#constructors","text":"UnsupportedTypeProtoAdapter [jvm] fun UnsupportedTypeProtoAdapter ()","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/#functions","text":"Name Summary asPacked [jvm] fun asPacked (): ProtoAdapter < List < Nothing >> asRepeated [jvm] fun asRepeated (): ProtoAdapter < List < Nothing >> decode [jvm] open override fun decode (reader: ProtoReader): Nothing fun decode (stream: InputStream ): Nothing fun decode (bytes: ByteArray ): Nothing fun decode (source: BufferedSource): Nothing fun decode (bytes: ByteString): Nothing encode [jvm] fun encode (value: Nothing ): ByteArray open override fun encode (writer: ProtoWriter, value: Nothing ): Nothing open override fun encode (writer: ReverseProtoWriter, value: Nothing ): Nothing fun encode (stream: OutputStream , value: Nothing ) fun encode (sink: BufferedSink, value: Nothing ) encodeByteString [jvm] fun encodeByteString (value: Nothing ): ByteString encodedSize [jvm] open override fun encodedSize (value: Nothing ): Nothing encodedSizeWithTag [jvm] open fun encodedSizeWithTag (tag: Int , value: Nothing ?): Int encodeWithTag [jvm] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: Nothing ?) open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: Nothing ?) redact [jvm] open override fun redact (value: Nothing ): Nothing toString [jvm] open fun toString (value: Nothing ): String","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/#properties","text":"Name Summary identity [jvm] val identity : Nothing ? sourceFile [jvm] val sourceFile : String ? syntax [jvm] val syntax : Syntax type [jvm] val type : KClass <*>? typeUrl [jvm] val typeUrl : String ?","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/-unsupported-type-proto-adapter/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / UnsupportedTypeProtoAdapter / UnsupportedTypeProtoAdapter UnsupportedTypeProtoAdapter \u00b6 [jvm]\\ fun UnsupportedTypeProtoAdapter ()","title":" unsupported type proto adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/-unsupported-type-proto-adapter/#unsupportedtypeprotoadapter","text":"[jvm]\\ fun UnsupportedTypeProtoAdapter ()","title":"UnsupportedTypeProtoAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/decode/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / UnsupportedTypeProtoAdapter / decode decode \u00b6 [jvm]\\ open override fun decode (reader: ProtoReader): Nothing","title":"Decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/decode/#decode","text":"[jvm]\\ open override fun decode (reader: ProtoReader): Nothing","title":"decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/encode/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / UnsupportedTypeProtoAdapter / encode encode \u00b6 [jvm]\\ open override fun encode (writer: ProtoWriter, value: Nothing ): Nothing open override fun encode (writer: ReverseProtoWriter, value: Nothing ): Nothing","title":"Encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/encode/#encode","text":"[jvm]\\ open override fun encode (writer: ProtoWriter, value: Nothing ): Nothing open override fun encode (writer: ReverseProtoWriter, value: Nothing ): Nothing","title":"encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/encoded-size/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / UnsupportedTypeProtoAdapter / encodedSize encodedSize \u00b6 [jvm]\\ open override fun encodedSize (value: Nothing ): Nothing","title":"Encoded size"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/encoded-size/#encodedsize","text":"[jvm]\\ open override fun encodedSize (value: Nothing ): Nothing","title":"encodedSize"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/redact/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / Companion / UnsupportedTypeProtoAdapter / redact redact \u00b6 [jvm]\\ open override fun redact (value: Nothing ): Nothing","title":"Redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-companion/-unsupported-type-proto-adapter/redact/#redact","text":"[jvm]\\ open override fun redact (value: Nothing ): Nothing","title":"redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / EnumConstantNotFoundException EnumConstantNotFoundException \u00b6 [common, js]\\ class EnumConstantNotFoundException (value: Int , type: KClass <*>?) : IllegalArgumentException [jvm]\\ class EnumConstantNotFoundException (value: Int , type: KClass <*>?) : IllegalArgumentException [native]\\ class EnumConstantNotFoundException (value: Int , type: KClass <*>?) Constructors \u00b6 EnumConstantNotFoundException [jvm] fun EnumConstantNotFoundException (value: Int , type: Class <*>) Functions \u00b6 Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [common] open val cause : Throwable ? cause [js] open val cause : Throwable ? cause [jvm] open val cause : Throwable ? message [common] open val message : String ? message [js] open val message : String ? message [jvm] open val message : String ? value [common, jvm] @ JvmField val value : Int [js, native] val value : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#enumconstantnotfoundexception","text":"[common, js]\\ class EnumConstantNotFoundException (value: Int , type: KClass <*>?) : IllegalArgumentException [jvm]\\ class EnumConstantNotFoundException (value: Int , type: KClass <*>?) : IllegalArgumentException [native]\\ class EnumConstantNotFoundException (value: Int , type: KClass <*>?)","title":"EnumConstantNotFoundException"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#constructors","text":"EnumConstantNotFoundException [jvm] fun EnumConstantNotFoundException (value: Int , type: Class <*>)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#functions","text":"Name Summary addSuppressed [jvm] fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] open fun getLocalizedMessage (): String getStackTrace [jvm] open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] fun getSuppressed (): Array < Throwable > initCause [jvm] open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#properties","text":"Name Summary cause [common] open val cause : Throwable ? cause [js] open val cause : Throwable ? cause [jvm] open val cause : Throwable ? message [common] open val message : String ? message [js] open val message : String ? message [jvm] open val message : String ? value [common, jvm] @ JvmField val value : Int [js, native] val value : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/-enum-constant-not-found-exception/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / EnumConstantNotFoundException / EnumConstantNotFoundException EnumConstantNotFoundException \u00b6 [jvm, common, js, native]\\ [jvm]\\ fun EnumConstantNotFoundException (value: Int , type: Class <*>) [common, js, jvm, native]\\ fun EnumConstantNotFoundException (value: Int , type: KClass <*>?)","title":" enum constant not found exception"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/-enum-constant-not-found-exception/#enumconstantnotfoundexception","text":"[jvm, common, js, native]\\ [jvm]\\ fun EnumConstantNotFoundException (value: Int , type: Class <*>) [common, js, jvm, native]\\ fun EnumConstantNotFoundException (value: Int , type: KClass <*>?)","title":"EnumConstantNotFoundException"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/value/","text":"// wire-runtime / com.squareup.wire / ProtoAdapter / EnumConstantNotFoundException / value value \u00b6 [common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val value : Int [js, native]\\ val value : Int","title":"Value"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/value/#value","text":"[common, js, jvm, native]\\ [common, jvm]\\ @ JvmField val value : Int [js, native]\\ val value : Int","title":"value"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/","text":"// wire-runtime / com.squareup.wire / ProtoReader ProtoReader \u00b6 [common]\\ class ProtoReader (source: BufferedSource) Reads and decodes protocol message fields. Constructors \u00b6 ProtoReader [common] fun ProtoReader (source: BufferedSource) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary addUnknownField [common] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding , value: Any ?) Store an already read field temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. beginMessage [common] fun beginMessage (): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method. endMessageAndGetUnknownFields [common] fun endMessageAndGetUnknownFields (token: Long ): ByteString End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage . forEachTag [common] @ JvmName (name = \u201c-forEachTag\u201d) inline fun forEachTag (tagHandler: ( Int ) -> Any ): ByteString Reads each tag, handles it, and returns a byte string with the unknown fields. nextTag [common] fun nextTag (): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups. peekFieldEncoding [common] fun peekFieldEncoding (): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method. readBytes [common] fun readBytes (): ByteString Reads a bytes field value from the stream. The length is read from the stream prior to the actual data. readFixed32 [common] fun readFixed32 (): Int Reads a 32-bit little-endian integer from the stream. readFixed64 [common] fun readFixed64 (): Long Reads a 64-bit little-endian integer from the stream. readString [common] fun readString (): String Reads a string field value from the stream. readUnknownField [common] fun readUnknownField (tag: Int ) Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. readVarint32 [common] fun readVarint32 (): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits. readVarint64 [common] fun readVarint64 (): Long Reads a raw varint up to 64 bits in length from the stream. skip [common] fun skip () Skips the current field\u2019s value. This is only safe to call immediately following a call to nextTag .","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#protoreader","text":"[common]\\ class ProtoReader (source: BufferedSource) Reads and decodes protocol message fields.","title":"ProtoReader"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#constructors","text":"ProtoReader [common] fun ProtoReader (source: BufferedSource)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#functions","text":"Name Summary addUnknownField [common] fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding , value: Any ?) Store an already read field temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. beginMessage [common] fun beginMessage (): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method. endMessageAndGetUnknownFields [common] fun endMessageAndGetUnknownFields (token: Long ): ByteString End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage . forEachTag [common] @ JvmName (name = \u201c-forEachTag\u201d) inline fun forEachTag (tagHandler: ( Int ) -> Any ): ByteString Reads each tag, handles it, and returns a byte string with the unknown fields. nextTag [common] fun nextTag (): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups. peekFieldEncoding [common] fun peekFieldEncoding (): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method. readBytes [common] fun readBytes (): ByteString Reads a bytes field value from the stream. The length is read from the stream prior to the actual data. readFixed32 [common] fun readFixed32 (): Int Reads a 32-bit little-endian integer from the stream. readFixed64 [common] fun readFixed64 (): Long Reads a 64-bit little-endian integer from the stream. readString [common] fun readString (): String Reads a string field value from the stream. readUnknownField [common] fun readUnknownField (tag: Int ) Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. readVarint32 [common] fun readVarint32 (): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits. readVarint64 [common] fun readVarint64 (): Long Reads a raw varint up to 64 bits in length from the stream. skip [common] fun skip () Skips the current field\u2019s value. This is only safe to call immediately following a call to nextTag .","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-proto-reader/","text":"// wire-runtime / com.squareup.wire / ProtoReader / ProtoReader ProtoReader \u00b6 [common]\\ fun ProtoReader (source: BufferedSource)","title":" proto reader"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-proto-reader/#protoreader","text":"[common]\\ fun ProtoReader (source: BufferedSource)","title":"ProtoReader"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/add-unknown-field/","text":"// wire-runtime / com.squareup.wire / ProtoReader / addUnknownField addUnknownField \u00b6 [common]\\ fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding , value: Any ?) Store an already read field temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.","title":"Add unknown field"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/add-unknown-field/#addunknownfield","text":"[common]\\ fun addUnknownField (tag: Int , fieldEncoding: FieldEncoding , value: Any ?) Store an already read field temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.","title":"addUnknownField"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/begin-message/","text":"// wire-runtime / com.squareup.wire / ProtoReader / beginMessage beginMessage \u00b6 [common]\\ fun beginMessage (): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method.","title":"Begin message"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/begin-message/#beginmessage","text":"[common]\\ fun beginMessage (): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method.","title":"beginMessage"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/","text":"// wire-runtime / com.squareup.wire / ProtoReader / endMessageAndGetUnknownFields endMessageAndGetUnknownFields \u00b6 [common]\\ fun endMessageAndGetUnknownFields (token: Long ): ByteString End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage . Parameters \u00b6 common token value returned from the corresponding call to beginMessage .","title":"End message and get unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/#endmessageandgetunknownfields","text":"[common]\\ fun endMessageAndGetUnknownFields (token: Long ): ByteString End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage .","title":"endMessageAndGetUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/#parameters","text":"common token value returned from the corresponding call to beginMessage .","title":"Parameters"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/for-each-tag/","text":"// wire-runtime / com.squareup.wire / ProtoReader / forEachTag forEachTag \u00b6 [common]\\ @ JvmName (name = \u201c-forEachTag\u201d) inline fun forEachTag (tagHandler: ( Int ) -> Any ): ByteString Reads each tag, handles it, and returns a byte string with the unknown fields.","title":"For each tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/for-each-tag/#foreachtag","text":"[common]\\ @ JvmName (name = \u201c-forEachTag\u201d) inline fun forEachTag (tagHandler: ( Int ) -> Any ): ByteString Reads each tag, handles it, and returns a byte string with the unknown fields.","title":"forEachTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/next-tag/","text":"// wire-runtime / com.squareup.wire / ProtoReader / nextTag nextTag \u00b6 [common]\\ fun nextTag (): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups.","title":"Next tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/next-tag/#nexttag","text":"[common]\\ fun nextTag (): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups.","title":"nextTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/peek-field-encoding/","text":"// wire-runtime / com.squareup.wire / ProtoReader / peekFieldEncoding peekFieldEncoding \u00b6 [common]\\ fun peekFieldEncoding (): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method.","title":"Peek field encoding"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/peek-field-encoding/#peekfieldencoding","text":"[common]\\ fun peekFieldEncoding (): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method.","title":"peekFieldEncoding"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-bytes/","text":"// wire-runtime / com.squareup.wire / ProtoReader / readBytes readBytes \u00b6 [common]\\ fun readBytes (): ByteString Reads a bytes field value from the stream. The length is read from the stream prior to the actual data.","title":"Read bytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-bytes/#readbytes","text":"[common]\\ fun readBytes (): ByteString Reads a bytes field value from the stream. The length is read from the stream prior to the actual data.","title":"readBytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed32/","text":"// wire-runtime / com.squareup.wire / ProtoReader / readFixed32 readFixed32 \u00b6 [common]\\ fun readFixed32 (): Int Reads a 32-bit little-endian integer from the stream.","title":"Read fixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed32/#readfixed32","text":"[common]\\ fun readFixed32 (): Int Reads a 32-bit little-endian integer from the stream.","title":"readFixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed64/","text":"// wire-runtime / com.squareup.wire / ProtoReader / readFixed64 readFixed64 \u00b6 [common]\\ fun readFixed64 (): Long Reads a 64-bit little-endian integer from the stream.","title":"Read fixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed64/#readfixed64","text":"[common]\\ fun readFixed64 (): Long Reads a 64-bit little-endian integer from the stream.","title":"readFixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-string/","text":"// wire-runtime / com.squareup.wire / ProtoReader / readString readString \u00b6 [common]\\ fun readString (): String Reads a string field value from the stream.","title":"Read string"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-string/#readstring","text":"[common]\\ fun readString (): String Reads a string field value from the stream.","title":"readString"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-unknown-field/","text":"// wire-runtime / com.squareup.wire / ProtoReader / readUnknownField readUnknownField \u00b6 [common]\\ fun readUnknownField (tag: Int ) Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.","title":"Read unknown field"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-unknown-field/#readunknownfield","text":"[common]\\ fun readUnknownField (tag: Int ) Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.","title":"readUnknownField"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint32/","text":"// wire-runtime / com.squareup.wire / ProtoReader / readVarint32 readVarint32 \u00b6 [common]\\ fun readVarint32 (): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits.","title":"Read varint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint32/#readvarint32","text":"[common]\\ fun readVarint32 (): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits.","title":"readVarint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint64/","text":"// wire-runtime / com.squareup.wire / ProtoReader / readVarint64 readVarint64 \u00b6 [common]\\ fun readVarint64 (): Long Reads a raw varint up to 64 bits in length from the stream.","title":"Read varint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint64/#readvarint64","text":"[common]\\ fun readVarint64 (): Long Reads a raw varint up to 64 bits in length from the stream.","title":"readVarint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/skip/","text":"// wire-runtime / com.squareup.wire / ProtoReader / skip skip \u00b6 [common]\\ fun skip () Skips the current field\u2019s value. This is only safe to call immediately following a call to nextTag .","title":"Skip"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/skip/#skip","text":"[common]\\ fun skip () Skips the current field\u2019s value. This is only safe to call immediately following a call to nextTag .","title":"skip"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-companion/","text":"// wire-runtime / com.squareup.wire / ProtoReader / Companion Companion \u00b6 [common]\\ object Companion","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/","text":"// wire-runtime / com.squareup.wire / ProtoWriter ProtoWriter \u00b6 [common]\\ class ProtoWriter (sink: BufferedSink) Utilities for encoding and writing protocol message fields. Constructors \u00b6 ProtoWriter [common] fun ProtoWriter (sink: BufferedSink) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary writeBytes [common] fun writeBytes (value: ByteString) writeFixed32 [common] fun writeFixed32 (value: Int ) Write a little-endian 32-bit integer. writeFixed64 [common] fun writeFixed64 (value: Long ) Write a little-endian 64-bit integer. writeString [common] fun writeString (value: String ) writeTag [common] fun writeTag (fieldNumber: Int , fieldEncoding: FieldEncoding ) Encode and write a tag. writeVarint32 [common] fun writeVarint32 (value: Int ) Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative. writeVarint64 [common] fun writeVarint64 (value: Long ) Encode and write a varint.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#protowriter","text":"[common]\\ class ProtoWriter (sink: BufferedSink) Utilities for encoding and writing protocol message fields.","title":"ProtoWriter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#constructors","text":"ProtoWriter [common] fun ProtoWriter (sink: BufferedSink)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#functions","text":"Name Summary writeBytes [common] fun writeBytes (value: ByteString) writeFixed32 [common] fun writeFixed32 (value: Int ) Write a little-endian 32-bit integer. writeFixed64 [common] fun writeFixed64 (value: Long ) Write a little-endian 64-bit integer. writeString [common] fun writeString (value: String ) writeTag [common] fun writeTag (fieldNumber: Int , fieldEncoding: FieldEncoding ) Encode and write a tag. writeVarint32 [common] fun writeVarint32 (value: Int ) Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative. writeVarint64 [common] fun writeVarint64 (value: Long ) Encode and write a varint.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-proto-writer/","text":"// wire-runtime / com.squareup.wire / ProtoWriter / ProtoWriter ProtoWriter \u00b6 [common]\\ fun ProtoWriter (sink: BufferedSink)","title":" proto writer"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-proto-writer/#protowriter","text":"[common]\\ fun ProtoWriter (sink: BufferedSink)","title":"ProtoWriter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-bytes/","text":"// wire-runtime / com.squareup.wire / ProtoWriter / writeBytes writeBytes \u00b6 [common]\\ fun writeBytes (value: ByteString)","title":"Write bytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-bytes/#writebytes","text":"[common]\\ fun writeBytes (value: ByteString)","title":"writeBytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed32/","text":"// wire-runtime / com.squareup.wire / ProtoWriter / writeFixed32 writeFixed32 \u00b6 [common]\\ fun writeFixed32 (value: Int ) Write a little-endian 32-bit integer.","title":"Write fixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed32/#writefixed32","text":"[common]\\ fun writeFixed32 (value: Int ) Write a little-endian 32-bit integer.","title":"writeFixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed64/","text":"// wire-runtime / com.squareup.wire / ProtoWriter / writeFixed64 writeFixed64 \u00b6 [common]\\ fun writeFixed64 (value: Long ) Write a little-endian 64-bit integer.","title":"Write fixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed64/#writefixed64","text":"[common]\\ fun writeFixed64 (value: Long ) Write a little-endian 64-bit integer.","title":"writeFixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-string/","text":"// wire-runtime / com.squareup.wire / ProtoWriter / writeString writeString \u00b6 [common]\\ fun writeString (value: String )","title":"Write string"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-string/#writestring","text":"[common]\\ fun writeString (value: String )","title":"writeString"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-tag/","text":"// wire-runtime / com.squareup.wire / ProtoWriter / writeTag writeTag \u00b6 [common]\\ fun writeTag (fieldNumber: Int , fieldEncoding: FieldEncoding ) Encode and write a tag.","title":"Write tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-tag/#writetag","text":"[common]\\ fun writeTag (fieldNumber: Int , fieldEncoding: FieldEncoding ) Encode and write a tag.","title":"writeTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint32/","text":"// wire-runtime / com.squareup.wire / ProtoWriter / writeVarint32 writeVarint32 \u00b6 [common]\\ fun writeVarint32 (value: Int ) Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative.","title":"Write varint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint32/#writevarint32","text":"[common]\\ fun writeVarint32 (value: Int ) Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative.","title":"writeVarint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint64/","text":"// wire-runtime / com.squareup.wire / ProtoWriter / writeVarint64 writeVarint64 \u00b6 [common]\\ fun writeVarint64 (value: Long ) Encode and write a varint.","title":"Write varint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint64/#writevarint64","text":"[common]\\ fun writeVarint64 (value: Long ) Encode and write a varint.","title":"writeVarint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-companion/","text":"// wire-runtime / com.squareup.wire / ProtoWriter / Companion Companion \u00b6 [common]\\ object Companion","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/","text":"// wire-runtime / com.squareup.wire / ReverseProtoWriter ReverseProtoWriter \u00b6 [common]\\ class ReverseProtoWriter Encodes protocol buffer message fields from back-to-front for efficiency. Callers should write data in the opposite order that the data will be read. One significant benefit of writing messages in reverse order is that length prefixes can be computed in constant time. Get the length of a message by subtracting the byteCount before writing it from byteCount after writing it. Utilities for encoding and writing protocol message fields. Constructors \u00b6 ReverseProtoWriter [common] fun ReverseProtoWriter () Functions \u00b6 Name Summary writeBytes [common] fun writeBytes (value: ByteString) writeFixed32 [common] fun writeFixed32 (value: Int ) Write a little-endian 32-bit integer. writeFixed64 [common] fun writeFixed64 (value: Long ) Write a little-endian 64-bit integer. writeString [common] fun writeString (value: String ) writeTag [common] fun writeTag (fieldNumber: Int , fieldEncoding: FieldEncoding ) Encode and write a tag. writeTo [common] fun writeTo (sink: BufferedSink) writeVarint32 [common] fun writeVarint32 (value: Int ) Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative. writeVarint64 [common] fun writeVarint64 (value: Long ) Encode and write a varint. Properties \u00b6 Name Summary byteCount [common] val byteCount : Int The total number of bytes emitted thus far.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/#reverseprotowriter","text":"[common]\\ class ReverseProtoWriter Encodes protocol buffer message fields from back-to-front for efficiency. Callers should write data in the opposite order that the data will be read. One significant benefit of writing messages in reverse order is that length prefixes can be computed in constant time. Get the length of a message by subtracting the byteCount before writing it from byteCount after writing it. Utilities for encoding and writing protocol message fields.","title":"ReverseProtoWriter"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/#constructors","text":"ReverseProtoWriter [common] fun ReverseProtoWriter ()","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/#functions","text":"Name Summary writeBytes [common] fun writeBytes (value: ByteString) writeFixed32 [common] fun writeFixed32 (value: Int ) Write a little-endian 32-bit integer. writeFixed64 [common] fun writeFixed64 (value: Long ) Write a little-endian 64-bit integer. writeString [common] fun writeString (value: String ) writeTag [common] fun writeTag (fieldNumber: Int , fieldEncoding: FieldEncoding ) Encode and write a tag. writeTo [common] fun writeTo (sink: BufferedSink) writeVarint32 [common] fun writeVarint32 (value: Int ) Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative. writeVarint64 [common] fun writeVarint64 (value: Long ) Encode and write a varint.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/#properties","text":"Name Summary byteCount [common] val byteCount : Int The total number of bytes emitted thus far.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/-reverse-proto-writer/","text":"// wire-runtime / com.squareup.wire / ReverseProtoWriter / ReverseProtoWriter ReverseProtoWriter \u00b6 [common]\\ fun ReverseProtoWriter ()","title":" reverse proto writer"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/-reverse-proto-writer/#reverseprotowriter","text":"[common]\\ fun ReverseProtoWriter ()","title":"ReverseProtoWriter"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/byte-count/","text":"// wire-runtime / com.squareup.wire / ReverseProtoWriter / byteCount byteCount \u00b6 [common]\\ val byteCount : Int The total number of bytes emitted thus far.","title":"Byte count"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/byte-count/#bytecount","text":"[common]\\ val byteCount : Int The total number of bytes emitted thus far.","title":"byteCount"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-bytes/","text":"// wire-runtime / com.squareup.wire / ReverseProtoWriter / writeBytes writeBytes \u00b6 [common]\\ fun writeBytes (value: ByteString)","title":"Write bytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-bytes/#writebytes","text":"[common]\\ fun writeBytes (value: ByteString)","title":"writeBytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-fixed32/","text":"// wire-runtime / com.squareup.wire / ReverseProtoWriter / writeFixed32 writeFixed32 \u00b6 [common]\\ fun writeFixed32 (value: Int ) Write a little-endian 32-bit integer.","title":"Write fixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-fixed32/#writefixed32","text":"[common]\\ fun writeFixed32 (value: Int ) Write a little-endian 32-bit integer.","title":"writeFixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-fixed64/","text":"// wire-runtime / com.squareup.wire / ReverseProtoWriter / writeFixed64 writeFixed64 \u00b6 [common]\\ fun writeFixed64 (value: Long ) Write a little-endian 64-bit integer.","title":"Write fixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-fixed64/#writefixed64","text":"[common]\\ fun writeFixed64 (value: Long ) Write a little-endian 64-bit integer.","title":"writeFixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-string/","text":"// wire-runtime / com.squareup.wire / ReverseProtoWriter / writeString writeString \u00b6 [common]\\ fun writeString (value: String )","title":"Write string"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-string/#writestring","text":"[common]\\ fun writeString (value: String )","title":"writeString"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-tag/","text":"// wire-runtime / com.squareup.wire / ReverseProtoWriter / writeTag writeTag \u00b6 [common]\\ fun writeTag (fieldNumber: Int , fieldEncoding: FieldEncoding ) Encode and write a tag.","title":"Write tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-tag/#writetag","text":"[common]\\ fun writeTag (fieldNumber: Int , fieldEncoding: FieldEncoding ) Encode and write a tag.","title":"writeTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-to/","text":"// wire-runtime / com.squareup.wire / ReverseProtoWriter / writeTo writeTo \u00b6 [common]\\ fun writeTo (sink: BufferedSink)","title":"Write to"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-to/#writeto","text":"[common]\\ fun writeTo (sink: BufferedSink)","title":"writeTo"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-varint32/","text":"// wire-runtime / com.squareup.wire / ReverseProtoWriter / writeVarint32 writeVarint32 \u00b6 [common]\\ fun writeVarint32 (value: Int ) Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative.","title":"Write varint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-varint32/#writevarint32","text":"[common]\\ fun writeVarint32 (value: Int ) Encode and write a varint. value is treated as unsigned, so it won\u2019t be sign-extended if negative.","title":"writeVarint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-varint64/","text":"// wire-runtime / com.squareup.wire / ReverseProtoWriter / writeVarint64 writeVarint64 \u00b6 [common]\\ fun writeVarint64 (value: Long ) Encode and write a varint.","title":"Write varint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-reverse-proto-writer/write-varint64/#writevarint64","text":"[common]\\ fun writeVarint64 (value: Long ) Encode and write a varint.","title":"writeVarint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/","text":"// wire-runtime / com.squareup.wire / RuntimeEnumAdapter RuntimeEnumAdapter \u00b6 [jvm]\\ class RuntimeEnumAdapter < E : WireEnum> : EnumAdapter < E > Converts values of an enum to and from integers using reflection. Constructors \u00b6 RuntimeEnumAdapter [jvm] fun < E : WireEnum> RuntimeEnumAdapter (javaType: Class < E >) Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary asPacked [jvm] fun asPacked (): ProtoAdapter < List < E >> asRepeated [jvm] fun asRepeated (): ProtoAdapter < List < E >> decode [jvm] open override fun decode (reader: ProtoReader): E fun decode (stream: InputStream ): E fun decode (bytes: ByteArray ): E fun decode (source: BufferedSource): E fun decode (bytes: ByteString): E encode [jvm] fun encode (value: E ): ByteArray open override fun encode (writer: ProtoWriter, value: E ) open override fun encode (writer: ReverseProtoWriter, value: E ) fun encode (stream: OutputStream , value: E ) fun encode (sink: BufferedSink, value: E ) encodeByteString [jvm] fun encodeByteString (value: E ): ByteString encodedSize [jvm] open override fun encodedSize (value: E ): Int encodedSizeWithTag [jvm] open fun encodedSizeWithTag (tag: Int , value: E ?): Int encodeWithTag [jvm] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int redact [jvm] open override fun redact (value: E ): E toString [jvm] open fun toString (value: E ): String Properties \u00b6 Name Summary identity [jvm] val identity : E ? sourceFile [jvm] val sourceFile : String ? syntax [jvm] val syntax : Syntax type [jvm] val type : KClass <*>? typeUrl [jvm] val typeUrl : String ?","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#runtimeenumadapter","text":"[jvm]\\ class RuntimeEnumAdapter < E : WireEnum> : EnumAdapter < E > Converts values of an enum to and from integers using reflection.","title":"RuntimeEnumAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#constructors","text":"RuntimeEnumAdapter [jvm] fun < E : WireEnum> RuntimeEnumAdapter (javaType: Class < E >)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#functions","text":"Name Summary asPacked [jvm] fun asPacked (): ProtoAdapter < List < E >> asRepeated [jvm] fun asRepeated (): ProtoAdapter < List < E >> decode [jvm] open override fun decode (reader: ProtoReader): E fun decode (stream: InputStream ): E fun decode (bytes: ByteArray ): E fun decode (source: BufferedSource): E fun decode (bytes: ByteString): E encode [jvm] fun encode (value: E ): ByteArray open override fun encode (writer: ProtoWriter, value: E ) open override fun encode (writer: ReverseProtoWriter, value: E ) fun encode (stream: OutputStream , value: E ) fun encode (sink: BufferedSink, value: E ) encodeByteString [jvm] fun encodeByteString (value: E ): ByteString encodedSize [jvm] open override fun encodedSize (value: E ): Int encodedSizeWithTag [jvm] open fun encodedSizeWithTag (tag: Int , value: E ?): Int encodeWithTag [jvm] open fun encodeWithTag (writer: ProtoWriter, tag: Int , value: E ?) open fun encodeWithTag (writer: ReverseProtoWriter, tag: Int , value: E ?) equals [jvm] open operator override fun equals (other: Any ?): Boolean hashCode [jvm] open override fun hashCode (): Int redact [jvm] open override fun redact (value: E ): E toString [jvm] open fun toString (value: E ): String","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/#properties","text":"Name Summary identity [jvm] val identity : E ? sourceFile [jvm] val sourceFile : String ? syntax [jvm] val syntax : Syntax type [jvm] val type : KClass <*>? typeUrl [jvm] val typeUrl : String ?","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-runtime-enum-adapter/","text":"// wire-runtime / com.squareup.wire / RuntimeEnumAdapter / RuntimeEnumAdapter RuntimeEnumAdapter \u00b6 [jvm]\\ fun < E : WireEnum> RuntimeEnumAdapter (javaType: Class < E >)","title":" runtime enum adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-runtime-enum-adapter/#runtimeenumadapter","text":"[jvm]\\ fun < E : WireEnum> RuntimeEnumAdapter (javaType: Class < E >)","title":"RuntimeEnumAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/equals/","text":"// wire-runtime / com.squareup.wire / RuntimeEnumAdapter / equals equals \u00b6 [jvm]\\ open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/equals/#equals","text":"[jvm]\\ open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/hash-code/","text":"// wire-runtime / com.squareup.wire / RuntimeEnumAdapter / hashCode hashCode \u00b6 [jvm]\\ open override fun hashCode (): Int","title":"Hash code"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/hash-code/#hashcode","text":"[jvm]\\ open override fun hashCode (): Int","title":"hashCode"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-companion/","text":"// wire-runtime / com.squareup.wire / RuntimeEnumAdapter / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary create [jvm] @ JvmStatic fun < E : WireEnum> create (enumType: Class < E >): RuntimeEnumAdapter < E >","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-companion/#functions","text":"Name Summary create [jvm] @ JvmStatic fun < E : WireEnum> create (enumType: Class < E >): RuntimeEnumAdapter < E >","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-companion/create/","text":"// wire-runtime / com.squareup.wire / RuntimeEnumAdapter / Companion / create create \u00b6 [jvm]\\ @ JvmStatic fun < E : WireEnum> create (enumType: Class < E >): RuntimeEnumAdapter < E >","title":"Create"},{"location":"3.x/wire-runtime/com.squareup.wire/-runtime-enum-adapter/-companion/create/#create","text":"[jvm]\\ @ JvmStatic fun < E : WireEnum> create (enumType: Class < E >): RuntimeEnumAdapter < E >","title":"create"},{"location":"3.x/wire-runtime/com.squareup.wire/-service/","text":"// wire-runtime / com.squareup.wire / Service Service \u00b6 [common]\\ interface Service","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-service/#service","text":"[common]\\ interface Service","title":"Service"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/","text":"// wire-runtime / com.squareup.wire / Syntax Syntax \u00b6 [common]\\ enum Syntax : Enum < Syntax > Syntax version. Entries \u00b6 PROTO_3 [common] PROTO_3 (\u201cproto3\u201d) PROTO_2 [common] PROTO_2 (\u201cproto2\u201d) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary toString [common] open override fun toString (): String Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#syntax","text":"[common]\\ enum Syntax : Enum < Syntax > Syntax version.","title":"Syntax"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#entries","text":"PROTO_3 [common] PROTO_3 (\u201cproto3\u201d) PROTO_2 [common] PROTO_2 (\u201cproto2\u201d)","title":"Entries"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#functions","text":"Name Summary toString [common] open override fun toString (): String","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/to-string/","text":"// wire-runtime / com.squareup.wire / Syntax / toString toString \u00b6 [common]\\ open override fun toString (): String","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/to-string/#tostring","text":"[common]\\ open override fun toString (): String","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-companion/","text":"// wire-runtime / com.squareup.wire / Syntax / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary get [common] operator fun get (string: String ): Syntax","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-companion/#functions","text":"Name Summary get [common] operator fun get (string: String ): Syntax","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-companion/get/","text":"// wire-runtime / com.squareup.wire / Syntax / Companion / get get \u00b6 [common]\\ operator fun get (string: String ): Syntax","title":"Get"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-companion/get/#get","text":"[common]\\ operator fun get (string: String ): Syntax","title":"get"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_2/","text":"// wire-runtime / com.squareup.wire / Syntax / PROTO_2 PROTO_2 \u00b6 [common]\\ PROTO_2 (\u201cproto2\u201d) Functions \u00b6 Name Summary toString [common] open override fun toString (): String Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_2/#proto_2","text":"[common]\\ PROTO_2 (\u201cproto2\u201d)","title":"PROTO_2"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_2/#functions","text":"Name Summary toString [common] open override fun toString (): String","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_2/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_3/","text":"// wire-runtime / com.squareup.wire / Syntax / PROTO_3 PROTO_3 \u00b6 [common]\\ PROTO_3 (\u201cproto3\u201d) Functions \u00b6 Name Summary toString [common] open override fun toString (): String Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_3/#proto_3","text":"[common]\\ PROTO_3 (\u201cproto3\u201d)","title":"PROTO_3"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_3/#functions","text":"Name Summary toString [common] open override fun toString (): String","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-syntax/-p-r-o-t-o_3/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/","text":"// wire-runtime / com.squareup.wire / WireEnum WireEnum \u00b6 [common]\\ interface WireEnum Interface for generated Enum values to help serialization and deserialization. Properties \u00b6 Name Summary value [common] abstract val value : Int The tag value of an enum constant.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/#wireenum","text":"[common]\\ interface WireEnum Interface for generated Enum values to help serialization and deserialization.","title":"WireEnum"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/#properties","text":"Name Summary value [common] abstract val value : Int The tag value of an enum constant.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/value/","text":"// wire-runtime / com.squareup.wire / WireEnum / value value \u00b6 [common]\\ abstract val value : Int The tag value of an enum constant.","title":"Value"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/value/#value","text":"[common]\\ abstract val value : Int The tag value of an enum constant.","title":"value"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/","text":"// wire-runtime / com.squareup.wire / WireEnumConstant WireEnumConstant \u00b6 [common]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class WireEnumConstant (declaredName: String ) Annotates generated WireEnum fields with metadata for serialization and deserialization. Constructors \u00b6 WireEnumConstant [common] fun WireEnumConstant (declaredName: String = \u201c\u201d) Properties \u00b6 Name Summary declaredName [common] val declaredName : String Name of this constant as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto constant named final generated in Java will be renamed to final_.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/#wireenumconstant","text":"[common]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class WireEnumConstant (declaredName: String ) Annotates generated WireEnum fields with metadata for serialization and deserialization.","title":"WireEnumConstant"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/#constructors","text":"WireEnumConstant [common] fun WireEnumConstant (declaredName: String = \u201c\u201d)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/#properties","text":"Name Summary declaredName [common] val declaredName : String Name of this constant as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto constant named final generated in Java will be renamed to final_.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/-wire-enum-constant/","text":"// wire-runtime / com.squareup.wire / WireEnumConstant / WireEnumConstant WireEnumConstant \u00b6 [common]\\ fun WireEnumConstant (declaredName: String = \u201c\u201d)","title":" wire enum constant"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/-wire-enum-constant/#wireenumconstant","text":"[common]\\ fun WireEnumConstant (declaredName: String = \u201c\u201d)","title":"WireEnumConstant"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/declared-name/","text":"// wire-runtime / com.squareup.wire / WireEnumConstant / declaredName declaredName \u00b6 [common]\\ val declaredName : String Name of this constant as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto constant named final generated in Java will be renamed to final_.","title":"Declared name"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum-constant/declared-name/#declaredname","text":"[common]\\ val declaredName : String Name of this constant as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto constant named final generated in Java will be renamed to final_.","title":"declaredName"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/","text":"// wire-runtime / com.squareup.wire / WireField WireField \u00b6 [common]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class WireField (tag: Int , keyAdapter: String , adapter: String , label: WireField.Label , redacted: Boolean , declaredName: String , jsonName: String , oneofName: String ) Annotates generated Message fields with metadata for serialization and deserialization. Constructors \u00b6 WireField [common] fun WireField (tag: Int , keyAdapter: String = \u201c\u201d, adapter: String , label: WireField.Label = Label.OPTIONAL, redacted: Boolean = false, declaredName: String = \u201c\u201d, jsonName: String = \u201c\u201d, oneofName: String = \u201c\u201d) Types \u00b6 Name Summary Label [common] enum Label : Enum < WireField.Label > A protocol buffer label. Properties \u00b6 Name Summary adapter [common] val adapter : String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name. declaredName [common] val declaredName : String Name of this field as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto field named final generated in Java will be renamed to final_. jsonName [common] val jsonName : String Name representing this field as it should be used in JSON. This value is set to a non-empty string only when the json name differs from the name as declared in the proto schema. keyAdapter [common] val keyAdapter : String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s keys. This only applies to maps. See adapter for a description of the value format. label [common] val label : WireField.Label The field\u2019s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , Label.PACKED , or Label.OMIT_IDENTITY . Defaults to Label.OPTIONAL . oneofName [common] val oneofName : String Name of the oneof this field belongs to. This value is set to a non-empty string only if the field is part of a oneof. redacted [common] val redacted : Boolean = false Redacted fields are omitted from toString() to protect sensitive data. Defaults to false. tag [common] val tag : Int The tag number used to store the field\u2019s value.","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#wirefield","text":"[common]\\ @ Target (allowedTargets = [ AnnotationTarget.FIELD ]) annotation class WireField (tag: Int , keyAdapter: String , adapter: String , label: WireField.Label , redacted: Boolean , declaredName: String , jsonName: String , oneofName: String ) Annotates generated Message fields with metadata for serialization and deserialization.","title":"WireField"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#constructors","text":"WireField [common] fun WireField (tag: Int , keyAdapter: String = \u201c\u201d, adapter: String , label: WireField.Label = Label.OPTIONAL, redacted: Boolean = false, declaredName: String = \u201c\u201d, jsonName: String = \u201c\u201d, oneofName: String = \u201c\u201d)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#types","text":"Name Summary Label [common] enum Label : Enum < WireField.Label > A protocol buffer label.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#properties","text":"Name Summary adapter [common] val adapter : String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name. declaredName [common] val declaredName : String Name of this field as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto field named final generated in Java will be renamed to final_. jsonName [common] val jsonName : String Name representing this field as it should be used in JSON. This value is set to a non-empty string only when the json name differs from the name as declared in the proto schema. keyAdapter [common] val keyAdapter : String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s keys. This only applies to maps. See adapter for a description of the value format. label [common] val label : WireField.Label The field\u2019s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , Label.PACKED , or Label.OMIT_IDENTITY . Defaults to Label.OPTIONAL . oneofName [common] val oneofName : String Name of the oneof this field belongs to. This value is set to a non-empty string only if the field is part of a oneof. redacted [common] val redacted : Boolean = false Redacted fields are omitted from toString() to protect sensitive data. Defaults to false. tag [common] val tag : Int The tag number used to store the field\u2019s value.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-wire-field/","text":"// wire-runtime / com.squareup.wire / WireField / WireField WireField \u00b6 [common]\\ fun WireField (tag: Int , keyAdapter: String = \u201c\u201d, adapter: String , label: WireField.Label = Label.OPTIONAL, redacted: Boolean = false, declaredName: String = \u201c\u201d, jsonName: String = \u201c\u201d, oneofName: String = \u201c\u201d)","title":" wire field"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-wire-field/#wirefield","text":"[common]\\ fun WireField (tag: Int , keyAdapter: String = \u201c\u201d, adapter: String , label: WireField.Label = Label.OPTIONAL, redacted: Boolean = false, declaredName: String = \u201c\u201d, jsonName: String = \u201c\u201d, oneofName: String = \u201c\u201d)","title":"WireField"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/adapter/","text":"// wire-runtime / com.squareup.wire / WireField / adapter adapter \u00b6 [common]\\ val adapter : String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name.","title":"Adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/adapter/#adapter","text":"[common]\\ val adapter : String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name.","title":"adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/declared-name/","text":"// wire-runtime / com.squareup.wire / WireField / declaredName declaredName \u00b6 [common]\\ val declaredName : String Name of this field as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto field named final generated in Java will be renamed to final_.","title":"Declared name"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/declared-name/#declaredname","text":"[common]\\ val declaredName : String Name of this field as declared in the proto schema. This value is set to a non-empty string only when the declared name differs from the generated one; for instance, a proto field named final generated in Java will be renamed to final_.","title":"declaredName"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/json-name/","text":"// wire-runtime / com.squareup.wire / WireField / jsonName jsonName \u00b6 [common]\\ val jsonName : String Name representing this field as it should be used in JSON. This value is set to a non-empty string only when the json name differs from the name as declared in the proto schema.","title":"Json name"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/json-name/#jsonname","text":"[common]\\ val jsonName : String Name representing this field as it should be used in JSON. This value is set to a non-empty string only when the json name differs from the name as declared in the proto schema.","title":"jsonName"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/key-adapter/","text":"// wire-runtime / com.squareup.wire / WireField / keyAdapter keyAdapter \u00b6 [common]\\ val keyAdapter : String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s keys. This only applies to maps. See adapter for a description of the value format.","title":"Key adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/key-adapter/#keyadapter","text":"[common]\\ val keyAdapter : String Reference to the static field that holds a ProtoAdapter that can encode and decode this field\u2019s keys. This only applies to maps. See adapter for a description of the value format.","title":"keyAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/label/","text":"// wire-runtime / com.squareup.wire / WireField / label label \u00b6 [common]\\ val label : WireField.Label The field\u2019s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , Label.PACKED , or Label.OMIT_IDENTITY . Defaults to Label.OPTIONAL .","title":"Label"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/label/#label","text":"[common]\\ val label : WireField.Label The field\u2019s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , Label.PACKED , or Label.OMIT_IDENTITY . Defaults to Label.OPTIONAL .","title":"label"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/oneof-name/","text":"// wire-runtime / com.squareup.wire / WireField / oneofName oneofName \u00b6 [common]\\ val oneofName : String Name of the oneof this field belongs to. This value is set to a non-empty string only if the field is part of a oneof.","title":"Oneof name"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/oneof-name/#oneofname","text":"[common]\\ val oneofName : String Name of the oneof this field belongs to. This value is set to a non-empty string only if the field is part of a oneof.","title":"oneofName"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/redacted/","text":"// wire-runtime / com.squareup.wire / WireField / redacted redacted \u00b6 [common]\\ val redacted : Boolean = false Redacted fields are omitted from toString() to protect sensitive data. Defaults to false.","title":"Redacted"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/redacted/#redacted","text":"[common]\\ val redacted : Boolean = false Redacted fields are omitted from toString() to protect sensitive data. Defaults to false.","title":"redacted"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/tag/","text":"// wire-runtime / com.squareup.wire / WireField / tag tag \u00b6 [common]\\ val tag : Int The tag number used to store the field\u2019s value.","title":"Tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/tag/#tag","text":"[common]\\ val tag : Int The tag number used to store the field\u2019s value.","title":"tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/","text":"// wire-runtime / com.squareup.wire / WireField / Label Label \u00b6 [common]\\ enum Label : Enum < WireField.Label > A protocol buffer label. Entries \u00b6 OMIT_IDENTITY [common] OMIT_IDENTITY () Special label to define proto3 fields which should not be emitted if their value is equal to their type\u2019s respective identity value. E.g.: a field of type int32 will not get emitted if its value is 0. PACKED [common] PACKED () Implies REPEATED . ONE_OF [common] ONE_OF () REPEATED [common] REPEATED () OPTIONAL [common] OPTIONAL () REQUIRED [common] REQUIRED () Properties \u00b6 Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#label","text":"[common]\\ enum Label : Enum < WireField.Label > A protocol buffer label.","title":"Label"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#entries","text":"OMIT_IDENTITY [common] OMIT_IDENTITY () Special label to define proto3 fields which should not be emitted if their value is equal to their type\u2019s respective identity value. E.g.: a field of type int32 will not get emitted if its value is 0. PACKED [common] PACKED () Implies REPEATED . ONE_OF [common] ONE_OF () REPEATED [common] REPEATED () OPTIONAL [common] OPTIONAL () REQUIRED [common] REQUIRED ()","title":"Entries"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#properties","text":"Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-one-of/","text":"// wire-runtime / com.squareup.wire / WireField / Label / isOneOf isOneOf \u00b6 [common]\\ @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean","title":"Is one of"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-one-of/#isoneof","text":"[common]\\ @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean","title":"isOneOf"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-packed/","text":"// wire-runtime / com.squareup.wire / WireField / Label / isPacked isPacked \u00b6 [common]\\ @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean","title":"Is packed"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-packed/#ispacked","text":"[common]\\ @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean","title":"isPacked"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-repeated/","text":"// wire-runtime / com.squareup.wire / WireField / Label / isRepeated isRepeated \u00b6 [common]\\ @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean","title":"Is repeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-repeated/#isrepeated","text":"[common]\\ @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean","title":"isRepeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-m-i-t_-i-d-e-n-t-i-t-y/","text":"// wire-runtime / com.squareup.wire / WireField / Label / OMIT_IDENTITY OMIT_IDENTITY \u00b6 [common]\\ OMIT_IDENTITY () Special label to define proto3 fields which should not be emitted if their value is equal to their type\u2019s respective identity value. E.g.: a field of type int32 will not get emitted if its value is 0. Properties \u00b6 Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-m-i-t_-i-d-e-n-t-i-t-y/#omit_identity","text":"[common]\\ OMIT_IDENTITY () Special label to define proto3 fields which should not be emitted if their value is equal to their type\u2019s respective identity value. E.g.: a field of type int32 will not get emitted if its value is 0.","title":"OMIT_IDENTITY"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-m-i-t_-i-d-e-n-t-i-t-y/#properties","text":"Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/","text":"// wire-runtime / com.squareup.wire / WireField / Label / ONE_OF ONE_OF \u00b6 [common]\\ ONE_OF () Properties \u00b6 Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/#one_of","text":"[common]\\ ONE_OF ()","title":"ONE_OF"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/#properties","text":"Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/","text":"// wire-runtime / com.squareup.wire / WireField / Label / OPTIONAL OPTIONAL \u00b6 [common]\\ OPTIONAL () Properties \u00b6 Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/#optional","text":"[common]\\ OPTIONAL ()","title":"OPTIONAL"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/#properties","text":"Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/","text":"// wire-runtime / com.squareup.wire / WireField / Label / PACKED PACKED \u00b6 [common]\\ PACKED () Implies REPEATED . Properties \u00b6 Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/#packed","text":"[common]\\ PACKED () Implies REPEATED .","title":"PACKED"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/#properties","text":"Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/","text":"// wire-runtime / com.squareup.wire / WireField / Label / REPEATED REPEATED \u00b6 [common]\\ REPEATED () Properties \u00b6 Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/#repeated","text":"[common]\\ REPEATED ()","title":"REPEATED"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/#properties","text":"Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/","text":"// wire-runtime / com.squareup.wire / WireField / Label / REQUIRED REQUIRED \u00b6 [common]\\ REQUIRED () Properties \u00b6 Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/#required","text":"[common]\\ REQUIRED ()","title":"REQUIRED"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/#properties","text":"Name Summary isOneOf [common] @get: JvmName (name = \u201cisOneOf\u201d) val isOneOf : Boolean isPacked [common] @get: JvmName (name = \u201cisPacked\u201d) val isPacked : Boolean isRepeated [common] @get: JvmName (name = \u201cisRepeated\u201d) val isRepeated : Boolean name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/","text":"// wire-runtime / com.squareup.wire / WireRpc WireRpc \u00b6 [common]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class WireRpc (path: String , requestAdapter: String , responseAdapter: String , sourceFile: String ) For gRPC actions the path is formatted as /<service name>/<method name>. The path of the proto service below is /squareup.helloworld.Greeter/SayHello. package squareup.helloworld;\\ \\ service Greeter {\\ rpc SayHello (HelloRequest) returns (HelloReply) {}\\ } Constructors \u00b6 WireRpc [common] fun WireRpc (path: String , requestAdapter: String , responseAdapter: String , sourceFile: String = \u201c\u201d) Properties \u00b6 Name Summary path [common] val path : String requestAdapter [common] val requestAdapter : String responseAdapter [common] val responseAdapter : String sourceFile [common] val sourceFile : String","title":"Index"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#wirerpc","text":"[common]\\ @ Target (allowedTargets = [ AnnotationTarget.FUNCTION ]) annotation class WireRpc (path: String , requestAdapter: String , responseAdapter: String , sourceFile: String ) For gRPC actions the path is formatted as /<service name>/<method name>. The path of the proto service below is /squareup.helloworld.Greeter/SayHello. package squareup.helloworld;\\ \\ service Greeter {\\ rpc SayHello (HelloRequest) returns (HelloReply) {}\\ }","title":"WireRpc"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#constructors","text":"WireRpc [common] fun WireRpc (path: String , requestAdapter: String , responseAdapter: String , sourceFile: String = \u201c\u201d)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#properties","text":"Name Summary path [common] val path : String requestAdapter [common] val requestAdapter : String responseAdapter [common] val responseAdapter : String sourceFile [common] val sourceFile : String","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/-wire-rpc/","text":"// wire-runtime / com.squareup.wire / WireRpc / WireRpc WireRpc \u00b6 [common]\\ fun WireRpc (path: String , requestAdapter: String , responseAdapter: String , sourceFile: String = \u201c\u201d)","title":" wire rpc"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/-wire-rpc/#wirerpc","text":"[common]\\ fun WireRpc (path: String , requestAdapter: String , responseAdapter: String , sourceFile: String = \u201c\u201d)","title":"WireRpc"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/path/","text":"// wire-runtime / com.squareup.wire / WireRpc / path path \u00b6 [common]\\ val path : String","title":"Path"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/path/#path","text":"[common]\\ val path : String","title":"path"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/request-adapter/","text":"// wire-runtime / com.squareup.wire / WireRpc / requestAdapter requestAdapter \u00b6 [common]\\ val requestAdapter : String","title":"Request adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/request-adapter/#requestadapter","text":"[common]\\ val requestAdapter : String","title":"requestAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/response-adapter/","text":"// wire-runtime / com.squareup.wire / WireRpc / responseAdapter responseAdapter \u00b6 [common]\\ val responseAdapter : String","title":"Response adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/response-adapter/#responseadapter","text":"[common]\\ val responseAdapter : String","title":"responseAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/source-file/","text":"// wire-runtime / com.squareup.wire / WireRpc / sourceFile sourceFile \u00b6 [common]\\ val sourceFile : String","title":"Source file"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/source-file/#sourcefile","text":"[common]\\ val sourceFile : String","title":"sourceFile"},{"location":"3.x/wire-schema/com.squareup.wire/","text":"// wire-schema / com.squareup.wire Package com.squareup.wire \u00b6 Types \u00b6 Name Summary WireLogger [common] interface WireLogger Logger class used by com.squareup.wire.schema.WireRun and com.squareup.wire.schema.Target.SchemaHandler to log information related to processing the protobuf Schema .","title":"wire-schema"},{"location":"3.x/wire-schema/com.squareup.wire/#package-comsquareupwire","text":"","title":"Package com.squareup.wire"},{"location":"3.x/wire-schema/com.squareup.wire/#types","text":"Name Summary WireLogger [common] interface WireLogger Logger class used by com.squareup.wire.schema.WireRun and com.squareup.wire.schema.Target.SchemaHandler to log information related to processing the protobuf Schema .","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/","text":"// wire-schema / com.squareup.wire / WireLogger WireLogger \u00b6 [common]\\ interface WireLogger Logger class used by com.squareup.wire.schema.WireRun and com.squareup.wire.schema.Target.SchemaHandler to log information related to processing the protobuf Schema . Functions \u00b6 Name Summary artifactHandled [common] abstract fun artifactHandled (outputPath: Path, qualifiedName: String , targetName: String ) This is called when an artifact is handled by a com.squareup.wire.schema.Target.SchemaHandler. artifactSkipped [common] abstract fun artifactSkipped (type: ProtoType , targetName: String ) This is called when an artifact has been passed down to a com.squareup.wire.schema.Target.SchemaHandler but has been skipped. This is useful for dry-runs. unusedExcludesInTarget [common] abstract fun unusedExcludesInTarget (unusedExcludes: Set < String >) This is called if some excludes values have not been used by the target they were defined in. Note that excludes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused excludes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target. unusedIncludesInTarget [common] abstract fun unusedIncludesInTarget (unusedIncludes: Set < String >) This is called if some includes values have not been used by the target they were defined in. Note that includes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused includes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target. unusedPrunes [common] abstract fun unusedPrunes (unusedPrunes: Set < String >) This is called if some prune values have not been used when Wire pruned the schema model. Note that prune should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused prunes can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader prune value is already defined. unusedRoots [common] abstract fun unusedRoots (unusedRoots: Set < String >) This is called if some root values have not been used when Wire pruned the schema model. Note that root should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused roots can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader root value is already defined.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/#wirelogger","text":"[common]\\ interface WireLogger Logger class used by com.squareup.wire.schema.WireRun and com.squareup.wire.schema.Target.SchemaHandler to log information related to processing the protobuf Schema .","title":"WireLogger"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/#functions","text":"Name Summary artifactHandled [common] abstract fun artifactHandled (outputPath: Path, qualifiedName: String , targetName: String ) This is called when an artifact is handled by a com.squareup.wire.schema.Target.SchemaHandler. artifactSkipped [common] abstract fun artifactSkipped (type: ProtoType , targetName: String ) This is called when an artifact has been passed down to a com.squareup.wire.schema.Target.SchemaHandler but has been skipped. This is useful for dry-runs. unusedExcludesInTarget [common] abstract fun unusedExcludesInTarget (unusedExcludes: Set < String >) This is called if some excludes values have not been used by the target they were defined in. Note that excludes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused excludes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target. unusedIncludesInTarget [common] abstract fun unusedIncludesInTarget (unusedIncludes: Set < String >) This is called if some includes values have not been used by the target they were defined in. Note that includes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused includes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target. unusedPrunes [common] abstract fun unusedPrunes (unusedPrunes: Set < String >) This is called if some prune values have not been used when Wire pruned the schema model. Note that prune should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused prunes can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader prune value is already defined. unusedRoots [common] abstract fun unusedRoots (unusedRoots: Set < String >) This is called if some root values have not been used when Wire pruned the schema model. Note that root should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused roots can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader root value is already defined.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-handled/","text":"// wire-schema / com.squareup.wire / WireLogger / artifactHandled artifactHandled \u00b6 [common]\\ abstract fun artifactHandled (outputPath: Path, qualifiedName: String , targetName: String ) This is called when an artifact is handled by a com.squareup.wire.schema.Target.SchemaHandler. Parameters \u00b6 common outputPath is the path where the artifact is written on disk. qualifiedName is the file path when generating a .proto file, the type or service name prefixed with its package name when generating a .java or .kt file, and the type name when generating a .swift file. targetName is used to identify the concerned target. For com.squareup.wire.schema.JavaTarget, the name will be \u201cJava\u201d. For com.squareup.wire.schema.KotlinTarget, the name will be \u201cKotlin\u201d. For com.squareup.wire.schema.SwiftTarget, the name will be \u201cSwift\u201d. For com.squareup.wire.schema.ProtoTarget, the name will be \u201cProto\u201d.","title":"Artifact handled"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-handled/#artifacthandled","text":"[common]\\ abstract fun artifactHandled (outputPath: Path, qualifiedName: String , targetName: String ) This is called when an artifact is handled by a com.squareup.wire.schema.Target.SchemaHandler.","title":"artifactHandled"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-handled/#parameters","text":"common outputPath is the path where the artifact is written on disk. qualifiedName is the file path when generating a .proto file, the type or service name prefixed with its package name when generating a .java or .kt file, and the type name when generating a .swift file. targetName is used to identify the concerned target. For com.squareup.wire.schema.JavaTarget, the name will be \u201cJava\u201d. For com.squareup.wire.schema.KotlinTarget, the name will be \u201cKotlin\u201d. For com.squareup.wire.schema.SwiftTarget, the name will be \u201cSwift\u201d. For com.squareup.wire.schema.ProtoTarget, the name will be \u201cProto\u201d.","title":"Parameters"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-skipped/","text":"// wire-schema / com.squareup.wire / WireLogger / artifactSkipped artifactSkipped \u00b6 [common]\\ abstract fun artifactSkipped (type: ProtoType , targetName: String ) This is called when an artifact has been passed down to a com.squareup.wire.schema.Target.SchemaHandler but has been skipped. This is useful for dry-runs. Parameters \u00b6 common type is the unique identifier for the skipped type. targetName is used to identify the concerned target. For com.squareup.wire.schema.JavaTarget, the name will be \u201cJava\u201d. For com.squareup.wire.schema.KotlinTarget, the name will be \u201cKotlin\u201d. For com.squareup.wire.schema.SwiftTarget, the name will be \u201cSwift\u201d. For com.squareup.wire.schema.ProtoTarget, the name will be \u201cProto\u201d.","title":"Artifact skipped"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-skipped/#artifactskipped","text":"[common]\\ abstract fun artifactSkipped (type: ProtoType , targetName: String ) This is called when an artifact has been passed down to a com.squareup.wire.schema.Target.SchemaHandler but has been skipped. This is useful for dry-runs.","title":"artifactSkipped"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/artifact-skipped/#parameters","text":"common type is the unique identifier for the skipped type. targetName is used to identify the concerned target. For com.squareup.wire.schema.JavaTarget, the name will be \u201cJava\u201d. For com.squareup.wire.schema.KotlinTarget, the name will be \u201cKotlin\u201d. For com.squareup.wire.schema.SwiftTarget, the name will be \u201cSwift\u201d. For com.squareup.wire.schema.ProtoTarget, the name will be \u201cProto\u201d.","title":"Parameters"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-excludes-in-target/","text":"// wire-schema / com.squareup.wire / WireLogger / unusedExcludesInTarget unusedExcludesInTarget \u00b6 [common]\\ abstract fun unusedExcludesInTarget (unusedExcludes: Set < String >) This is called if some excludes values have not been used by the target they were defined in. Note that excludes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused excludes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target.","title":"Unused excludes in target"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-excludes-in-target/#unusedexcludesintarget","text":"[common]\\ abstract fun unusedExcludesInTarget (unusedExcludes: Set < String >) This is called if some excludes values have not been used by the target they were defined in. Note that excludes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused excludes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target.","title":"unusedExcludesInTarget"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-includes-in-target/","text":"// wire-schema / com.squareup.wire / WireLogger / unusedIncludesInTarget unusedIncludesInTarget \u00b6 [common]\\ abstract fun unusedIncludesInTarget (unusedIncludes: Set < String >) This is called if some includes values have not been used by the target they were defined in. Note that includes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused includes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target.","title":"Unused includes in target"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-includes-in-target/#unusedincludesintarget","text":"[common]\\ abstract fun unusedIncludesInTarget (unusedIncludes: Set < String >) This is called if some includes values have not been used by the target they were defined in. Note that includes should contain package names (suffixed with .*) and type names only. It should not contain member names, nor file paths. Unused includes can happen if the referenced type or service isn\u2019t part of the parsed and pruned schema model, or has already been consumed by another preceding target.","title":"unusedIncludesInTarget"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-prunes/","text":"// wire-schema / com.squareup.wire / WireLogger / unusedPrunes unusedPrunes \u00b6 [common]\\ abstract fun unusedPrunes (unusedPrunes: Set < String >) This is called if some prune values have not been used when Wire pruned the schema model. Note that prune should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused prunes can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader prune value is already defined.","title":"Unused prunes"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-prunes/#unusedprunes","text":"[common]\\ abstract fun unusedPrunes (unusedPrunes: Set < String >) This is called if some prune values have not been used when Wire pruned the schema model. Note that prune should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused prunes can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader prune value is already defined.","title":"unusedPrunes"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-roots/","text":"// wire-schema / com.squareup.wire / WireLogger / unusedRoots unusedRoots \u00b6 [common]\\ abstract fun unusedRoots (unusedRoots: Set < String >) This is called if some root values have not been used when Wire pruned the schema model. Note that root should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused roots can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader root value is already defined.","title":"Unused roots"},{"location":"3.x/wire-schema/com.squareup.wire/-wire-logger/unused-roots/#unusedroots","text":"[common]\\ abstract fun unusedRoots (unusedRoots: Set < String >) This is called if some root values have not been used when Wire pruned the schema model. Note that root should contain package names (suffixed with .*), type names, and member names only. It should not contain file paths. Unused roots can happen if the referenced type or service isn\u2019t part of any .proto files defined in either com.squareup.wire.schema.WireRun.sourcePath or com.squareup.wire.schema.WireRun.protoPath, or if a broader root value is already defined.","title":"unusedRoots"},{"location":"3.x/wire-schema/com.squareup.wire.schema/","text":"// wire-schema / com.squareup.wire.schema Package com.squareup.wire.schema \u00b6 Types \u00b6 Name Summary AdapterConstant [jvm] data class AdapterConstant (javaClassName: ClassName, kotlinClassName: ClassName, memberName: String ) A constant field that identifies a ProtoAdapter. This should be a string like like com.squareup.dinosaurs.Dinosaur#ADAPTER with a fully qualified class name, a #, and a field name. ClaimedDefinitions [common] class ClaimedDefinitions ClaimedDefinitions tracks handled objects: Type s, Service s, and Field s. A SchemaHandler is to first check if an object has already been claimed; if yes, it is not to handle it. Otherwise, the SchemaHandler is to handle the object and claim it. It is an error for a SchemaHandler to handle an object which has already been claimed. ClaimedPaths [common] class ClaimedPaths ClaimedPaths tracks generated files\u2019 Paths. Schema handlers who generate files are to claim each generated file\u2019s path. It is an error to generate different Type s or Service s to the same file and ClaimedPaths will throw when generation conflicts happen. CoreLoader [common, js] [common] object CoreLoader : Loader [js] object CoreLoader : Loader [jvm] object CoreLoader : Loader A loader that can only load built-in .proto files: EmittingRules [common] class EmittingRules A set of rules that describes which types to generate. EnclosingType [common] data class EnclosingType (location: Location , type: ProtoType , documentation: String , nestedTypes: List < Type >, syntax: Syntax) : Type An empty type which only holds nested types. EnumConstant [common] data class EnumConstant (location: Location , name: String , tag: Int , documentation: String , options: Options ) EnumType [common] data class EnumType (type: ProtoType , location: Location , documentation: String , name: String , constants: List < EnumConstant >, reserveds: List < Reserved >, options: Options , syntax: Syntax) : Type ErrorCollector [common] class ErrorCollector Collects errors to be reported as a batch. Errors include both a detail message plus context of where they occurred within the schema. Extend [common] data class Extend (location: Location , documentation: String , name: String , fields: List < Field >) Extensions [common] data class Extensions (location: Location , documentation: String , values: List < Any >) Field [common] data class Field (packageName: String ?, location: Location , label: Field.Label ?, name: String , documentation: String , tag: Int , default: String ?, elementType: String , options: Options , isExtension: Boolean , isOneOf: Boolean , declaredJsonName: String ?) LinkedOptionEntry [common] data class LinkedOptionEntry (optionElement: OptionElement , protoMember: ProtoMember , value: Any ?) Linker [common] class Linker Links local field types and option types to the corresponding declarations. Loader [common] interface Loader Loads other files as needed by their import path. Location [common] data class Location (base: String , path: String , line: Int , column: Int ) Locates a .proto file, or a position within a .proto file, on the file system. This includes a base directory or a .jar file, and a path relative to that base. MarkSet [common] class MarkSet (pruningRules: PruningRules ) A mark set is used in three phases: MessageType [common] data class MessageType (type: ProtoType , location: Location , documentation: String , name: String , declaredFields: List < Field >, extensionFields: MutableList < Field >, oneOfs: List < OneOf >, nestedTypes: List < Type >, extensionsList: List < Extensions >, reserveds: List < Reserved >, options: Options , syntax: Syntax) : Type Multimap [common, js, jvm] [common, js] interface Multimap < K , V > [jvm] typealias Multimap = Multimap< K , V > OneOf [common] data class OneOf (name: String , documentation: String , fields: List < Field >) Options [common] class Options (optionType: ProtoType , optionElements: List < OptionElement >) A set of options declared on a message declaration, field declaration, enum declaration, enum constant declaration, service declaration, RPC method declaration, or proto file declaration. Options values may be arbitrary protocol buffer messages, but must be valid protocol buffer messages. Profile [common, js] [common] class Profile (profileFiles: List < ProfileFileElement >) [js] class Profile (profileFiles: List <ProfileFileElement>) [jvm] class Profile (profileFiles: List <ProfileFileElement>) Describes how to map .proto to .java. A single repository of .proto files may have multiple profiles; for example a project may target both Android and Java. ProfileLoader [common] interface ProfileLoader ProtoFile [common] data class ProtoFile (location: Location , imports: List < String >, publicImports: List < String >, packageName: String ?, types: List < Type >, services: List < Service >, extendList: List < Extend >, options: Options , syntax: Syntax?) ProtoMember [common] class ProtoMember Identifies a field, enum or RPC on a declaring type. Members are encoded as strings containing a type name, a hash, and a member name, like squareup.dinosaurs.Dinosaur#length_meters. ProtoType [common] class ProtoType Names a protocol buffer message, enumerated type, service, map, or a scalar. This class models a fully-qualified name using the protocol buffer package. Pruner [common] class Pruner (schema: Schema , pruningRules: PruningRules ) Creates a new schema that contains only the types selected by the pruning rules, including their transitive dependencies. PruningRules [common] class PruningRules A set of rules that describes which types and members to retain and which to remove. Reserved [common] data class Reserved (location: Location , documentation: String , values: List < Any >) Rpc [common] data class Rpc (location: Location , name: String , documentation: String , requestTypeElement: String , responseTypeElement: String , requestStreaming: Boolean , responseStreaming: Boolean , options: Options ) Schema [common] class Schema A collection of .proto files that describe a set of messages. A schema is linked : each field\u2019s type name is resolved to the corresponding type definition. SchemaException [common] class SchemaException (errors: List < String >) : RuntimeException SchemaHandler [common] abstract class SchemaHandler A SchemaHandler s Schema ! SchemaLoader [common] class SchemaLoader : Loader , ProfileLoader Load proto files and their transitive dependencies and parse them. Keep track of which files were loaded from where so that we can use that information later when deciding what to generate. [js, jvm] [js, jvm] class SchemaLoader : Loader, ProfileLoader Service [common] data class Service (type: ProtoType , location: Location , documentation: String , name: String , rpcs: List < Rpc >, options: Options ) SyntaxRules [common] interface SyntaxRules A set of rules which defines schema requirements for a specific Syntax. Type [common] sealed class Type Functions \u00b6 Name Summary isWireRuntimeProto [common] fun isWireRuntimeProto (location: Location ): Boolean [common] fun isWireRuntimeProto (path: String ): Boolean Returns true if path is bundled in the wire runtime. Properties \u00b6 Name Summary WIRE_RUNTIME_JAR [common] const val WIRE_RUNTIME_JAR : String A special base directory used for Wire\u2019s built-in .proto files.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/#package-comsquareupwireschema","text":"","title":"Package com.squareup.wire.schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema/#types","text":"Name Summary AdapterConstant [jvm] data class AdapterConstant (javaClassName: ClassName, kotlinClassName: ClassName, memberName: String ) A constant field that identifies a ProtoAdapter. This should be a string like like com.squareup.dinosaurs.Dinosaur#ADAPTER with a fully qualified class name, a #, and a field name. ClaimedDefinitions [common] class ClaimedDefinitions ClaimedDefinitions tracks handled objects: Type s, Service s, and Field s. A SchemaHandler is to first check if an object has already been claimed; if yes, it is not to handle it. Otherwise, the SchemaHandler is to handle the object and claim it. It is an error for a SchemaHandler to handle an object which has already been claimed. ClaimedPaths [common] class ClaimedPaths ClaimedPaths tracks generated files\u2019 Paths. Schema handlers who generate files are to claim each generated file\u2019s path. It is an error to generate different Type s or Service s to the same file and ClaimedPaths will throw when generation conflicts happen. CoreLoader [common, js] [common] object CoreLoader : Loader [js] object CoreLoader : Loader [jvm] object CoreLoader : Loader A loader that can only load built-in .proto files: EmittingRules [common] class EmittingRules A set of rules that describes which types to generate. EnclosingType [common] data class EnclosingType (location: Location , type: ProtoType , documentation: String , nestedTypes: List < Type >, syntax: Syntax) : Type An empty type which only holds nested types. EnumConstant [common] data class EnumConstant (location: Location , name: String , tag: Int , documentation: String , options: Options ) EnumType [common] data class EnumType (type: ProtoType , location: Location , documentation: String , name: String , constants: List < EnumConstant >, reserveds: List < Reserved >, options: Options , syntax: Syntax) : Type ErrorCollector [common] class ErrorCollector Collects errors to be reported as a batch. Errors include both a detail message plus context of where they occurred within the schema. Extend [common] data class Extend (location: Location , documentation: String , name: String , fields: List < Field >) Extensions [common] data class Extensions (location: Location , documentation: String , values: List < Any >) Field [common] data class Field (packageName: String ?, location: Location , label: Field.Label ?, name: String , documentation: String , tag: Int , default: String ?, elementType: String , options: Options , isExtension: Boolean , isOneOf: Boolean , declaredJsonName: String ?) LinkedOptionEntry [common] data class LinkedOptionEntry (optionElement: OptionElement , protoMember: ProtoMember , value: Any ?) Linker [common] class Linker Links local field types and option types to the corresponding declarations. Loader [common] interface Loader Loads other files as needed by their import path. Location [common] data class Location (base: String , path: String , line: Int , column: Int ) Locates a .proto file, or a position within a .proto file, on the file system. This includes a base directory or a .jar file, and a path relative to that base. MarkSet [common] class MarkSet (pruningRules: PruningRules ) A mark set is used in three phases: MessageType [common] data class MessageType (type: ProtoType , location: Location , documentation: String , name: String , declaredFields: List < Field >, extensionFields: MutableList < Field >, oneOfs: List < OneOf >, nestedTypes: List < Type >, extensionsList: List < Extensions >, reserveds: List < Reserved >, options: Options , syntax: Syntax) : Type Multimap [common, js, jvm] [common, js] interface Multimap < K , V > [jvm] typealias Multimap = Multimap< K , V > OneOf [common] data class OneOf (name: String , documentation: String , fields: List < Field >) Options [common] class Options (optionType: ProtoType , optionElements: List < OptionElement >) A set of options declared on a message declaration, field declaration, enum declaration, enum constant declaration, service declaration, RPC method declaration, or proto file declaration. Options values may be arbitrary protocol buffer messages, but must be valid protocol buffer messages. Profile [common, js] [common] class Profile (profileFiles: List < ProfileFileElement >) [js] class Profile (profileFiles: List <ProfileFileElement>) [jvm] class Profile (profileFiles: List <ProfileFileElement>) Describes how to map .proto to .java. A single repository of .proto files may have multiple profiles; for example a project may target both Android and Java. ProfileLoader [common] interface ProfileLoader ProtoFile [common] data class ProtoFile (location: Location , imports: List < String >, publicImports: List < String >, packageName: String ?, types: List < Type >, services: List < Service >, extendList: List < Extend >, options: Options , syntax: Syntax?) ProtoMember [common] class ProtoMember Identifies a field, enum or RPC on a declaring type. Members are encoded as strings containing a type name, a hash, and a member name, like squareup.dinosaurs.Dinosaur#length_meters. ProtoType [common] class ProtoType Names a protocol buffer message, enumerated type, service, map, or a scalar. This class models a fully-qualified name using the protocol buffer package. Pruner [common] class Pruner (schema: Schema , pruningRules: PruningRules ) Creates a new schema that contains only the types selected by the pruning rules, including their transitive dependencies. PruningRules [common] class PruningRules A set of rules that describes which types and members to retain and which to remove. Reserved [common] data class Reserved (location: Location , documentation: String , values: List < Any >) Rpc [common] data class Rpc (location: Location , name: String , documentation: String , requestTypeElement: String , responseTypeElement: String , requestStreaming: Boolean , responseStreaming: Boolean , options: Options ) Schema [common] class Schema A collection of .proto files that describe a set of messages. A schema is linked : each field\u2019s type name is resolved to the corresponding type definition. SchemaException [common] class SchemaException (errors: List < String >) : RuntimeException SchemaHandler [common] abstract class SchemaHandler A SchemaHandler s Schema ! SchemaLoader [common] class SchemaLoader : Loader , ProfileLoader Load proto files and their transitive dependencies and parse them. Keep track of which files were loaded from where so that we can use that information later when deciding what to generate. [js, jvm] [js, jvm] class SchemaLoader : Loader, ProfileLoader Service [common] data class Service (type: ProtoType , location: Location , documentation: String , name: String , rpcs: List < Rpc >, options: Options ) SyntaxRules [common] interface SyntaxRules A set of rules which defines schema requirements for a specific Syntax. Type [common] sealed class Type","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/#functions","text":"Name Summary isWireRuntimeProto [common] fun isWireRuntimeProto (location: Location ): Boolean [common] fun isWireRuntimeProto (path: String ): Boolean Returns true if path is bundled in the wire runtime.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/#properties","text":"Name Summary WIRE_RUNTIME_JAR [common] const val WIRE_RUNTIME_JAR : String A special base directory used for Wire\u2019s built-in .proto files.","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-w-i-r-e_-r-u-n-t-i-m-e_-j-a-r/","text":"// wire-schema / com.squareup.wire.schema / WIRE_RUNTIME_JAR WIRE_RUNTIME_JAR \u00b6 [common]\\ const val WIRE_RUNTIME_JAR : String A special base directory used for Wire\u2019s built-in .proto files.","title":" w i r e  r u n t i m e  j a r"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-w-i-r-e_-r-u-n-t-i-m-e_-j-a-r/#wire_runtime_jar","text":"[common]\\ const val WIRE_RUNTIME_JAR : String A special base directory used for Wire\u2019s built-in .proto files.","title":"WIRE_RUNTIME_JAR"},{"location":"3.x/wire-schema/com.squareup.wire.schema/is-wire-runtime-proto/","text":"// wire-schema / com.squareup.wire.schema / isWireRuntimeProto isWireRuntimeProto \u00b6 [common]\\ fun isWireRuntimeProto (location: Location ): Boolean [common]\\ fun isWireRuntimeProto (path: String ): Boolean Returns true if path is bundled in the wire runtime.","title":"Is wire runtime proto"},{"location":"3.x/wire-schema/com.squareup.wire.schema/is-wire-runtime-proto/#iswireruntimeproto","text":"[common]\\ fun isWireRuntimeProto (location: Location ): Boolean [common]\\ fun isWireRuntimeProto (path: String ): Boolean Returns true if path is bundled in the wire runtime.","title":"isWireRuntimeProto"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/","text":"// wire-schema / com.squareup.wire.schema / AdapterConstant AdapterConstant \u00b6 [jvm]\\ data class AdapterConstant (javaClassName: ClassName, kotlinClassName: ClassName, memberName: String ) A constant field that identifies a ProtoAdapter. This should be a string like like com.squareup.dinosaurs.Dinosaur#ADAPTER with a fully qualified class name, a #, and a field name. Constructors \u00b6 AdapterConstant [jvm] fun AdapterConstant (javaClassName: ClassName, kotlinClassName: ClassName, memberName: String ) Types \u00b6 Name Summary Companion [jvm] object Companion Properties \u00b6 Name Summary javaClassName [jvm] @ JvmField val javaClassName : ClassName kotlinClassName [jvm] @ JvmField val kotlinClassName : ClassName memberName [jvm] @ JvmField val memberName : String","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/#adapterconstant","text":"[jvm]\\ data class AdapterConstant (javaClassName: ClassName, kotlinClassName: ClassName, memberName: String ) A constant field that identifies a ProtoAdapter. This should be a string like like com.squareup.dinosaurs.Dinosaur#ADAPTER with a fully qualified class name, a #, and a field name.","title":"AdapterConstant"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/#constructors","text":"AdapterConstant [jvm] fun AdapterConstant (javaClassName: ClassName, kotlinClassName: ClassName, memberName: String )","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/#properties","text":"Name Summary javaClassName [jvm] @ JvmField val javaClassName : ClassName kotlinClassName [jvm] @ JvmField val kotlinClassName : ClassName memberName [jvm] @ JvmField val memberName : String","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-adapter-constant/","text":"// wire-schema / com.squareup.wire.schema / AdapterConstant / AdapterConstant AdapterConstant \u00b6 [jvm]\\ fun AdapterConstant (javaClassName: ClassName, kotlinClassName: ClassName, memberName: String )","title":" adapter constant"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-adapter-constant/#adapterconstant","text":"[jvm]\\ fun AdapterConstant (javaClassName: ClassName, kotlinClassName: ClassName, memberName: String )","title":"AdapterConstant"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/java-class-name/","text":"// wire-schema / com.squareup.wire.schema / AdapterConstant / javaClassName javaClassName \u00b6 [jvm]\\ @ JvmField val javaClassName : ClassName","title":"Java class name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/java-class-name/#javaclassname","text":"[jvm]\\ @ JvmField val javaClassName : ClassName","title":"javaClassName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/kotlin-class-name/","text":"// wire-schema / com.squareup.wire.schema / AdapterConstant / kotlinClassName kotlinClassName \u00b6 [jvm]\\ @ JvmField val kotlinClassName : ClassName","title":"Kotlin class name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/kotlin-class-name/#kotlinclassname","text":"[jvm]\\ @ JvmField val kotlinClassName : ClassName","title":"kotlinClassName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/member-name/","text":"// wire-schema / com.squareup.wire.schema / AdapterConstant / memberName memberName \u00b6 [jvm]\\ @ JvmField val memberName : String","title":"Member name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/member-name/#membername","text":"[jvm]\\ @ JvmField val memberName : String","title":"memberName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-companion/","text":"// wire-schema / com.squareup.wire.schema / AdapterConstant / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary invoke [jvm] operator fun invoke (adapter: String ): AdapterConstant","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-companion/#functions","text":"Name Summary invoke [jvm] operator fun invoke (adapter: String ): AdapterConstant","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-companion/invoke/","text":"// wire-schema / com.squareup.wire.schema / AdapterConstant / Companion / invoke invoke \u00b6 [jvm]\\ operator fun invoke (adapter: String ): AdapterConstant","title":"Invoke"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-adapter-constant/-companion/invoke/#invoke","text":"[jvm]\\ operator fun invoke (adapter: String ): AdapterConstant","title":"invoke"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/","text":"// wire-schema / com.squareup.wire.schema / ClaimedDefinitions ClaimedDefinitions \u00b6 [common]\\ class ClaimedDefinitions ClaimedDefinitions tracks handled objects: Type s, Service s, and Field s. A SchemaHandler is to first check if an object has already been claimed; if yes, it is not to handle it. Otherwise, the SchemaHandler is to handle the object and claim it. It is an error for a SchemaHandler to handle an object which has already been claimed. Constructors \u00b6 ClaimedDefinitions [common] fun ClaimedDefinitions () Functions \u00b6 Name Summary claim [common] fun claim (member: ProtoMember ) Tracks that member has been handled. [common] fun claim (type: ProtoType ) fun claim (type: Type ) Tracks that type has been handled. [common] fun claim (service: Service ) Tracks that service has been handled. contains [common] operator fun contains (member: ProtoMember ): Boolean Returns true if member has already been handled. [common] operator fun contains (type: ProtoType ): Boolean operator fun contains (type: Type ): Boolean Returns true if type has already been handled. [common] operator fun contains (service: Service ): Boolean Returns true if service has already been handled.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/#claimeddefinitions","text":"[common]\\ class ClaimedDefinitions ClaimedDefinitions tracks handled objects: Type s, Service s, and Field s. A SchemaHandler is to first check if an object has already been claimed; if yes, it is not to handle it. Otherwise, the SchemaHandler is to handle the object and claim it. It is an error for a SchemaHandler to handle an object which has already been claimed.","title":"ClaimedDefinitions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/#constructors","text":"ClaimedDefinitions [common] fun ClaimedDefinitions ()","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/#functions","text":"Name Summary claim [common] fun claim (member: ProtoMember ) Tracks that member has been handled. [common] fun claim (type: ProtoType ) fun claim (type: Type ) Tracks that type has been handled. [common] fun claim (service: Service ) Tracks that service has been handled. contains [common] operator fun contains (member: ProtoMember ): Boolean Returns true if member has already been handled. [common] operator fun contains (type: ProtoType ): Boolean operator fun contains (type: Type ): Boolean Returns true if type has already been handled. [common] operator fun contains (service: Service ): Boolean Returns true if service has already been handled.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/-claimed-definitions/","text":"// wire-schema / com.squareup.wire.schema / ClaimedDefinitions / ClaimedDefinitions ClaimedDefinitions \u00b6 [common]\\ fun ClaimedDefinitions ()","title":" claimed definitions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/-claimed-definitions/#claimeddefinitions","text":"[common]\\ fun ClaimedDefinitions ()","title":"ClaimedDefinitions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/claim/","text":"// wire-schema / com.squareup.wire.schema / ClaimedDefinitions / claim claim \u00b6 [common]\\ fun claim (type: ProtoType ) fun claim (type: Type ) Tracks that type has been handled. [common]\\ fun claim (member: ProtoMember ) Tracks that member has been handled. [common]\\ fun claim (service: Service ) Tracks that service has been handled.","title":"Claim"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/claim/#claim","text":"[common]\\ fun claim (type: ProtoType ) fun claim (type: Type ) Tracks that type has been handled. [common]\\ fun claim (member: ProtoMember ) Tracks that member has been handled. [common]\\ fun claim (service: Service ) Tracks that service has been handled.","title":"claim"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/contains/","text":"// wire-schema / com.squareup.wire.schema / ClaimedDefinitions / contains contains \u00b6 [common]\\ operator fun contains (type: ProtoType ): Boolean operator fun contains (type: Type ): Boolean Returns true if type has already been handled. [common]\\ operator fun contains (member: ProtoMember ): Boolean Returns true if member has already been handled. [common]\\ operator fun contains (service: Service ): Boolean Returns true if service has already been handled.","title":"Contains"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-definitions/contains/#contains","text":"[common]\\ operator fun contains (type: ProtoType ): Boolean operator fun contains (type: Type ): Boolean Returns true if type has already been handled. [common]\\ operator fun contains (member: ProtoMember ): Boolean Returns true if member has already been handled. [common]\\ operator fun contains (service: Service ): Boolean Returns true if service has already been handled.","title":"contains"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/","text":"// wire-schema / com.squareup.wire.schema / ClaimedPaths ClaimedPaths \u00b6 [common]\\ class ClaimedPaths ClaimedPaths tracks generated files\u2019 Paths. Schema handlers who generate files are to claim each generated file\u2019s path. It is an error to generate different Type s or Service s to the same file and ClaimedPaths will throw when generation conflicts happen. Constructors \u00b6 ClaimedPaths [common] fun ClaimedPaths () Functions \u00b6 Name Summary claim [common] fun claim (path: Path, service: Service ) Tracks that service has been generated to path . [common] fun claim (path: Path, type: Type ) Tracks that type has been generated to path .","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/#claimedpaths","text":"[common]\\ class ClaimedPaths ClaimedPaths tracks generated files\u2019 Paths. Schema handlers who generate files are to claim each generated file\u2019s path. It is an error to generate different Type s or Service s to the same file and ClaimedPaths will throw when generation conflicts happen.","title":"ClaimedPaths"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/#constructors","text":"ClaimedPaths [common] fun ClaimedPaths ()","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/#functions","text":"Name Summary claim [common] fun claim (path: Path, service: Service ) Tracks that service has been generated to path . [common] fun claim (path: Path, type: Type ) Tracks that type has been generated to path .","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/-claimed-paths/","text":"// wire-schema / com.squareup.wire.schema / ClaimedPaths / ClaimedPaths ClaimedPaths \u00b6 [common]\\ fun ClaimedPaths ()","title":" claimed paths"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/-claimed-paths/#claimedpaths","text":"[common]\\ fun ClaimedPaths ()","title":"ClaimedPaths"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/claim/","text":"// wire-schema / com.squareup.wire.schema / ClaimedPaths / claim claim \u00b6 [common]\\ fun claim (path: Path, type: Type ) Tracks that type has been generated to path . [common]\\ fun claim (path: Path, service: Service ) Tracks that service has been generated to path .","title":"Claim"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-claimed-paths/claim/#claim","text":"[common]\\ fun claim (path: Path, type: Type ) Tracks that type has been generated to path . [common]\\ fun claim (path: Path, service: Service ) Tracks that service has been generated to path .","title":"claim"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/","text":"// wire-schema / com.squareup.wire.schema / CoreLoader CoreLoader \u00b6 [common]\\ object CoreLoader : Loader [js]\\ object CoreLoader : Loader [jvm]\\ object CoreLoader : Loader A loader that can only load built-in .proto files: Google's protobuf descriptor, which defines standard options like default, deprecated, and java_package. Wire's extensions, which defines since and until options. If the user has provided their own version of these protos, those are preferred. Functions \u00b6 Name Summary load [js, jvm, common] [js] open override fun load (path: String ): ProtoFile [jvm] open override fun load (path: String ): ProtoFile [common] abstract fun load (path: String ): ProtoFile withErrors [js] open override fun withErrors (errors: ErrorCollector): CoreLoader Returns a new loader that reports failures to errors . [jvm] open override fun withErrors (errors: ErrorCollector): CoreLoader Returns a new loader that reports failures to errors . [common] abstract fun withErrors (errors: ErrorCollector ): Loader Returns a new loader that reports failures to errors .","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/#coreloader","text":"[common]\\ object CoreLoader : Loader [js]\\ object CoreLoader : Loader [jvm]\\ object CoreLoader : Loader A loader that can only load built-in .proto files: Google's protobuf descriptor, which defines standard options like default, deprecated, and java_package. Wire's extensions, which defines since and until options. If the user has provided their own version of these protos, those are preferred.","title":"CoreLoader"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/#functions","text":"Name Summary load [js, jvm, common] [js] open override fun load (path: String ): ProtoFile [jvm] open override fun load (path: String ): ProtoFile [common] abstract fun load (path: String ): ProtoFile withErrors [js] open override fun withErrors (errors: ErrorCollector): CoreLoader Returns a new loader that reports failures to errors . [jvm] open override fun withErrors (errors: ErrorCollector): CoreLoader Returns a new loader that reports failures to errors . [common] abstract fun withErrors (errors: ErrorCollector ): Loader Returns a new loader that reports failures to errors .","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjs%5Dload/","text":"// wire-schema / com.squareup.wire.schema / CoreLoader / [js]load load \u00b6 [js]\\ open override fun load (path: String ): ProtoFile","title":"[js]load"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjs%5Dload/#load","text":"[js]\\ open override fun load (path: String ): ProtoFile","title":"load"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjs%5Dwith-errors/","text":"// wire-schema / com.squareup.wire.schema / CoreLoader / [js]withErrors withErrors \u00b6 [js]\\ open override fun withErrors (errors: ErrorCollector): CoreLoader Returns a new loader that reports failures to errors .","title":"[js]with errors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjs%5Dwith-errors/#witherrors","text":"[js]\\ open override fun withErrors (errors: ErrorCollector): CoreLoader Returns a new loader that reports failures to errors .","title":"withErrors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjvm%5Dload/","text":"// wire-schema / com.squareup.wire.schema / CoreLoader / [jvm]load load \u00b6 [jvm]\\ open override fun load (path: String ): ProtoFile","title":"[jvm]load"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjvm%5Dload/#load","text":"[jvm]\\ open override fun load (path: String ): ProtoFile","title":"load"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjvm%5Dwith-errors/","text":"// wire-schema / com.squareup.wire.schema / CoreLoader / [jvm]withErrors withErrors \u00b6 [jvm]\\ open override fun withErrors (errors: ErrorCollector): CoreLoader Returns a new loader that reports failures to errors .","title":"[jvm]with errors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-core-loader/%5Bjvm%5Dwith-errors/#witherrors","text":"[jvm]\\ open override fun withErrors (errors: ErrorCollector): CoreLoader Returns a new loader that reports failures to errors .","title":"withErrors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules EmittingRules \u00b6 [common]\\ class EmittingRules A set of rules that describes which types to generate. Despite the builder, instances of this class are not safe for concurrent use. Identifier Matching \u00b6 Identifiers in this set may be in the following forms: Package names, followed by .*, like squareup.protos.person.*. This matches types and services defined in the package and its descendant packages. Fully qualified type and service names, like squareup.protos.person.Person. Identifiers should not contain member names. This set has included identifiers and excluded identifiers , with the most precise identifier taking precedence over the other ones. For instance, if there is one included identifier a.Movie along an excluded identifier a.*, the type a.Movie is considered included in the set. If the includes set is empty, that implies that all elements should be included. Use this to exclude unwanted types and members without also including everything else. Constructors \u00b6 EmittingRules [common] fun EmittingRules () Types \u00b6 Name Summary Builder [common] class Builder Companion [common] object Companion Functions \u00b6 Name Summary includes [common] fun includes (type: ProtoType ): Boolean Returns true if type should be generated. unusedExcludes [common] fun unusedExcludes (): Set < String > unusedIncludes [common] fun unusedIncludes (): Set < String > Properties \u00b6 Name Summary isEmpty [common] val isEmpty : Boolean","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#emittingrules","text":"[common]\\ class EmittingRules A set of rules that describes which types to generate. Despite the builder, instances of this class are not safe for concurrent use.","title":"EmittingRules"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#identifier-matching","text":"Identifiers in this set may be in the following forms: Package names, followed by .*, like squareup.protos.person.*. This matches types and services defined in the package and its descendant packages. Fully qualified type and service names, like squareup.protos.person.Person. Identifiers should not contain member names. This set has included identifiers and excluded identifiers , with the most precise identifier taking precedence over the other ones. For instance, if there is one included identifier a.Movie along an excluded identifier a.*, the type a.Movie is considered included in the set. If the includes set is empty, that implies that all elements should be included. Use this to exclude unwanted types and members without also including everything else.","title":"Identifier Matching"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#constructors","text":"EmittingRules [common] fun EmittingRules ()","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#types","text":"Name Summary Builder [common] class Builder Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#functions","text":"Name Summary includes [common] fun includes (type: ProtoType ): Boolean Returns true if type should be generated. unusedExcludes [common] fun unusedExcludes (): Set < String > unusedIncludes [common] fun unusedIncludes (): Set < String >","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/#properties","text":"Name Summary isEmpty [common] val isEmpty : Boolean","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-emitting-rules/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules / EmittingRules EmittingRules \u00b6 [common]\\ fun EmittingRules ()","title":" emitting rules"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-emitting-rules/#emittingrules","text":"[common]\\ fun EmittingRules ()","title":"EmittingRules"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/includes/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules / includes includes \u00b6 [common]\\ fun includes (type: ProtoType ): Boolean Returns true if type should be generated.","title":"Includes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/includes/#includes","text":"[common]\\ fun includes (type: ProtoType ): Boolean Returns true if type should be generated.","title":"includes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/is-empty/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules / isEmpty isEmpty \u00b6 [common]\\ val isEmpty : Boolean","title":"Is empty"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/is-empty/#isempty","text":"[common]\\ val isEmpty : Boolean","title":"isEmpty"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/unused-excludes/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules / unusedExcludes unusedExcludes \u00b6 [common]\\ fun unusedExcludes (): Set < String >","title":"Unused excludes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/unused-excludes/#unusedexcludes","text":"[common]\\ fun unusedExcludes (): Set < String >","title":"unusedExcludes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/unused-includes/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules / unusedIncludes unusedIncludes \u00b6 [common]\\ fun unusedIncludes (): Set < String >","title":"Unused includes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/unused-includes/#unusedincludes","text":"[common]\\ fun unusedIncludes (): Set < String >","title":"unusedIncludes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules / Builder Builder \u00b6 [common]\\ class Builder Functions \u00b6 Name Summary build [common] fun build (): EmittingRules exclude [common] fun exclude (identifier: String ): EmittingRules.Builder fun exclude (identifiers: Iterable < String >): EmittingRules.Builder include [common] fun include (identifier: String ): EmittingRules.Builder fun include (identifiers: Iterable < String >): EmittingRules.Builder","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/#builder","text":"[common]\\ class Builder","title":"Builder"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/#functions","text":"Name Summary build [common] fun build (): EmittingRules exclude [common] fun exclude (identifier: String ): EmittingRules.Builder fun exclude (identifiers: Iterable < String >): EmittingRules.Builder include [common] fun include (identifier: String ): EmittingRules.Builder fun include (identifiers: Iterable < String >): EmittingRules.Builder","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/-builder/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules / Builder / Builder Builder \u00b6 [common]\\ fun Builder ()","title":" builder"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/-builder/#builder","text":"[common]\\ fun Builder ()","title":"Builder"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/build/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules / Builder / build build \u00b6 [common]\\ fun build (): EmittingRules","title":"Build"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/build/#build","text":"[common]\\ fun build (): EmittingRules","title":"build"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/exclude/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules / Builder / exclude exclude \u00b6 [common]\\ fun exclude (identifiers: Iterable < String >): EmittingRules.Builder fun exclude (identifier: String ): EmittingRules.Builder","title":"Exclude"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/exclude/#exclude","text":"[common]\\ fun exclude (identifiers: Iterable < String >): EmittingRules.Builder fun exclude (identifier: String ): EmittingRules.Builder","title":"exclude"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/include/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules / Builder / include include \u00b6 [common]\\ fun include (identifier: String ): EmittingRules.Builder fun include (identifiers: Iterable < String >): EmittingRules.Builder","title":"Include"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-builder/include/#include","text":"[common]\\ fun include (identifier: String ): EmittingRules.Builder fun include (identifiers: Iterable < String >): EmittingRules.Builder","title":"include"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-companion/","text":"// wire-schema / com.squareup.wire.schema / EmittingRules / Companion Companion \u00b6 [common]\\ object Companion","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-emitting-rules/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType EnclosingType \u00b6 [common]\\ data class EnclosingType (location: Location , type: ProtoType , documentation: String , nestedTypes: List < Type >, syntax: Syntax) : Type An empty type which only holds nested types. Constructors \u00b6 EnclosingType [common] fun EnclosingType (location: Location , type: ProtoType , documentation: String , nestedTypes: List < Type >, syntax: Syntax) Functions \u00b6 Name Summary linkMembers [common] open override fun linkMembers (linker: Linker ) linkOptions [common] open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ? retainLinked [common] open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. toElement [common] fun toElement (): MessageElement typesAndNestedTypes [common] fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are linked to the type. validate [common] open override fun validate (linker: Linker , syntaxRules: SyntaxRules ) Properties \u00b6 Name Summary documentation [common] open override val documentation : String location [common] open override val location : Location nestedTypes [common] open override val nestedTypes : List < Type > options [common] open override val options : Options syntax [common] open override val syntax : Syntax type [common] open override val type : ProtoType","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/#enclosingtype","text":"[common]\\ data class EnclosingType (location: Location , type: ProtoType , documentation: String , nestedTypes: List < Type >, syntax: Syntax) : Type An empty type which only holds nested types.","title":"EnclosingType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/#constructors","text":"EnclosingType [common] fun EnclosingType (location: Location , type: ProtoType , documentation: String , nestedTypes: List < Type >, syntax: Syntax)","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/#functions","text":"Name Summary linkMembers [common] open override fun linkMembers (linker: Linker ) linkOptions [common] open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ? retainLinked [common] open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. toElement [common] fun toElement (): MessageElement typesAndNestedTypes [common] fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are linked to the type. validate [common] open override fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/#properties","text":"Name Summary documentation [common] open override val documentation : String location [common] open override val location : Location nestedTypes [common] open override val nestedTypes : List < Type > options [common] open override val options : Options syntax [common] open override val syntax : Syntax type [common] open override val type : ProtoType","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/-enclosing-type/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / EnclosingType EnclosingType \u00b6 [common]\\ fun EnclosingType (location: Location , type: ProtoType , documentation: String , nestedTypes: List < Type >, syntax: Syntax)","title":" enclosing type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/-enclosing-type/#enclosingtype","text":"[common]\\ fun EnclosingType (location: Location , type: ProtoType , documentation: String , nestedTypes: List < Type >, syntax: Syntax)","title":"EnclosingType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/documentation/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / documentation documentation \u00b6 [common]\\ open override val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/documentation/#documentation","text":"[common]\\ open override val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/link-members/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / linkMembers linkMembers \u00b6 [common]\\ open override fun linkMembers (linker: Linker )","title":"Link members"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/link-members/#linkmembers","text":"[common]\\ open override fun linkMembers (linker: Linker )","title":"linkMembers"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/link-options/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / linkOptions linkOptions \u00b6 [common]\\ open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"Link options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/link-options/#linkoptions","text":"[common]\\ open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"linkOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/location/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / location location \u00b6 [common]\\ open override val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/location/#location","text":"[common]\\ open override val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/nested-types/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / nestedTypes nestedTypes \u00b6 [common]\\ open override val nestedTypes : List < Type >","title":"Nested types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/nested-types/#nestedtypes","text":"[common]\\ open override val nestedTypes : List < Type >","title":"nestedTypes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/options/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / options options \u00b6 [common]\\ open override val options : Options","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/options/#options","text":"[common]\\ open override val options : Options","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/retain-all/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / retainAll retainAll \u00b6 [common]\\ open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ?","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/retain-all/#retainall","text":"[common]\\ open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ?","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/retain-linked/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / retainLinked retainLinked \u00b6 [common]\\ open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.","title":"Retain linked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/retain-linked/#retainlinked","text":"[common]\\ open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.","title":"retainLinked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/syntax/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / syntax syntax \u00b6 [common]\\ open override val syntax : Syntax","title":"Syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/syntax/#syntax","text":"[common]\\ open override val syntax : Syntax","title":"syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/to-element/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / toElement toElement \u00b6 [common]\\ fun toElement (): MessageElement","title":"To element"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/to-element/#toelement","text":"[common]\\ fun toElement (): MessageElement","title":"toElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/type/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / type type \u00b6 [common]\\ open override val type : ProtoType","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/type/#type","text":"[common]\\ open override val type : ProtoType","title":"type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/validate/","text":"// wire-schema / com.squareup.wire.schema / EnclosingType / validate validate \u00b6 [common]\\ open override fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enclosing-type/validate/#validate","text":"[common]\\ open override fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/","text":"// wire-schema / com.squareup.wire.schema / EnumConstant EnumConstant \u00b6 [common]\\ data class EnumConstant (location: Location , name: String , tag: Int , documentation: String , options: Options ) Types \u00b6 Name Summary Companion [common] object Companion Properties \u00b6 Name Summary documentation [common] val documentation : String isDeprecated [common] val isDeprecated : Boolean location [common] val location : Location name [common] val name : String options [common] val options : Options tag [common] val tag : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/#enumconstant","text":"[common]\\ data class EnumConstant (location: Location , name: String , tag: Int , documentation: String , options: Options )","title":"EnumConstant"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/#properties","text":"Name Summary documentation [common] val documentation : String isDeprecated [common] val isDeprecated : Boolean location [common] val location : Location name [common] val name : String options [common] val options : Options tag [common] val tag : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/-enum-constant/","text":"// wire-schema / com.squareup.wire.schema / EnumConstant / EnumConstant EnumConstant \u00b6 [common]\\ fun EnumConstant (location: Location , name: String , tag: Int , documentation: String , options: Options )","title":" enum constant"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/-enum-constant/#enumconstant","text":"[common]\\ fun EnumConstant (location: Location , name: String , tag: Int , documentation: String , options: Options )","title":"EnumConstant"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/documentation/","text":"// wire-schema / com.squareup.wire.schema / EnumConstant / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/is-deprecated/","text":"// wire-schema / com.squareup.wire.schema / EnumConstant / isDeprecated isDeprecated \u00b6 [common]\\ val isDeprecated : Boolean","title":"Is deprecated"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/is-deprecated/#isdeprecated","text":"[common]\\ val isDeprecated : Boolean","title":"isDeprecated"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/location/","text":"// wire-schema / com.squareup.wire.schema / EnumConstant / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/name/","text":"// wire-schema / com.squareup.wire.schema / EnumConstant / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/options/","text":"// wire-schema / com.squareup.wire.schema / EnumConstant / options options \u00b6 [common]\\ val options : Options","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/options/#options","text":"[common]\\ val options : Options","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/tag/","text":"// wire-schema / com.squareup.wire.schema / EnumConstant / tag tag \u00b6 [common]\\ val tag : Int","title":"Tag"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/tag/#tag","text":"[common]\\ val tag : Int","title":"tag"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/-companion/","text":"// wire-schema / com.squareup.wire.schema / EnumConstant / Companion Companion \u00b6 [common]\\ object Companion","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-constant/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/","text":"// wire-schema / com.squareup.wire.schema / EnumType EnumType \u00b6 [common]\\ data class EnumType (type: ProtoType , location: Location , documentation: String , name: String , constants: List < EnumConstant >, reserveds: List < Reserved >, options: Options , syntax: Syntax) : Type Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary allowAlias [common] fun allowAlias (): Boolean constant [common] fun constant (tag: Int ): EnumConstant ? Returns the constant tagged tag, or null if this enum has no such constant. [common] fun constant (name: String ): EnumConstant ? Returns the constant named name, or null if this enum has no such constant. linkMembers [common] open override fun linkMembers (linker: Linker ) linkOptions [common] open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ? retainLinked [common] open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. toElement [common] fun toElement (): EnumElement typesAndNestedTypes [common] fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are linked to the type. validate [common] open override fun validate (linker: Linker , syntaxRules: SyntaxRules ) Properties \u00b6 Name Summary constants [common] val constants : List < EnumConstant > documentation [common] open override val documentation : String isDeprecated [common] val isDeprecated : Boolean location [common] open override val location : Location name [common] val name : String nestedTypes [common] open override val nestedTypes : List < Type > options [common] open override val options : Options syntax [common] open override val syntax : Syntax type [common] open override val type : ProtoType","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/#enumtype","text":"[common]\\ data class EnumType (type: ProtoType , location: Location , documentation: String , name: String , constants: List < EnumConstant >, reserveds: List < Reserved >, options: Options , syntax: Syntax) : Type","title":"EnumType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/#functions","text":"Name Summary allowAlias [common] fun allowAlias (): Boolean constant [common] fun constant (tag: Int ): EnumConstant ? Returns the constant tagged tag, or null if this enum has no such constant. [common] fun constant (name: String ): EnumConstant ? Returns the constant named name, or null if this enum has no such constant. linkMembers [common] open override fun linkMembers (linker: Linker ) linkOptions [common] open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ? retainLinked [common] open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. toElement [common] fun toElement (): EnumElement typesAndNestedTypes [common] fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are linked to the type. validate [common] open override fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/#properties","text":"Name Summary constants [common] val constants : List < EnumConstant > documentation [common] open override val documentation : String isDeprecated [common] val isDeprecated : Boolean location [common] open override val location : Location name [common] val name : String nestedTypes [common] open override val nestedTypes : List < Type > options [common] open override val options : Options syntax [common] open override val syntax : Syntax type [common] open override val type : ProtoType","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-enum-type/","text":"// wire-schema / com.squareup.wire.schema / EnumType / EnumType EnumType \u00b6 [common]\\ fun EnumType (type: ProtoType , location: Location , documentation: String , name: String , constants: List < EnumConstant >, reserveds: List < Reserved >, options: Options , syntax: Syntax)","title":" enum type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-enum-type/#enumtype","text":"[common]\\ fun EnumType (type: ProtoType , location: Location , documentation: String , name: String , constants: List < EnumConstant >, reserveds: List < Reserved >, options: Options , syntax: Syntax)","title":"EnumType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/allow-alias/","text":"// wire-schema / com.squareup.wire.schema / EnumType / allowAlias allowAlias \u00b6 [common]\\ fun allowAlias (): Boolean","title":"Allow alias"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/allow-alias/#allowalias","text":"[common]\\ fun allowAlias (): Boolean","title":"allowAlias"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/constant/","text":"// wire-schema / com.squareup.wire.schema / EnumType / constant constant \u00b6 [common]\\ fun constant (name: String ): EnumConstant ? Returns the constant named name, or null if this enum has no such constant. [common]\\ fun constant (tag: Int ): EnumConstant ? Returns the constant tagged tag, or null if this enum has no such constant.","title":"Constant"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/constant/#constant","text":"[common]\\ fun constant (name: String ): EnumConstant ? Returns the constant named name, or null if this enum has no such constant. [common]\\ fun constant (tag: Int ): EnumConstant ? Returns the constant tagged tag, or null if this enum has no such constant.","title":"constant"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/constants/","text":"// wire-schema / com.squareup.wire.schema / EnumType / constants constants \u00b6 [common]\\ val constants : List < EnumConstant >","title":"Constants"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/constants/#constants","text":"[common]\\ val constants : List < EnumConstant >","title":"constants"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/documentation/","text":"// wire-schema / com.squareup.wire.schema / EnumType / documentation documentation \u00b6 [common]\\ open override val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/documentation/#documentation","text":"[common]\\ open override val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/is-deprecated/","text":"// wire-schema / com.squareup.wire.schema / EnumType / isDeprecated isDeprecated \u00b6 [common]\\ val isDeprecated : Boolean","title":"Is deprecated"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/is-deprecated/#isdeprecated","text":"[common]\\ val isDeprecated : Boolean","title":"isDeprecated"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/link-members/","text":"// wire-schema / com.squareup.wire.schema / EnumType / linkMembers linkMembers \u00b6 [common]\\ open override fun linkMembers (linker: Linker )","title":"Link members"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/link-members/#linkmembers","text":"[common]\\ open override fun linkMembers (linker: Linker )","title":"linkMembers"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/link-options/","text":"// wire-schema / com.squareup.wire.schema / EnumType / linkOptions linkOptions \u00b6 [common]\\ open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"Link options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/link-options/#linkoptions","text":"[common]\\ open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"linkOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/location/","text":"// wire-schema / com.squareup.wire.schema / EnumType / location location \u00b6 [common]\\ open override val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/location/#location","text":"[common]\\ open override val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/name/","text":"// wire-schema / com.squareup.wire.schema / EnumType / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/nested-types/","text":"// wire-schema / com.squareup.wire.schema / EnumType / nestedTypes nestedTypes \u00b6 [common]\\ open override val nestedTypes : List < Type >","title":"Nested types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/nested-types/#nestedtypes","text":"[common]\\ open override val nestedTypes : List < Type >","title":"nestedTypes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/options/","text":"// wire-schema / com.squareup.wire.schema / EnumType / options options \u00b6 [common]\\ open override val options : Options","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/options/#options","text":"[common]\\ open override val options : Options","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/retain-all/","text":"// wire-schema / com.squareup.wire.schema / EnumType / retainAll retainAll \u00b6 [common]\\ open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ?","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/retain-all/#retainall","text":"[common]\\ open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ?","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/retain-linked/","text":"// wire-schema / com.squareup.wire.schema / EnumType / retainLinked retainLinked \u00b6 [common]\\ open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.","title":"Retain linked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/retain-linked/#retainlinked","text":"[common]\\ open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.","title":"retainLinked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/syntax/","text":"// wire-schema / com.squareup.wire.schema / EnumType / syntax syntax \u00b6 [common]\\ open override val syntax : Syntax","title":"Syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/syntax/#syntax","text":"[common]\\ open override val syntax : Syntax","title":"syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/to-element/","text":"// wire-schema / com.squareup.wire.schema / EnumType / toElement toElement \u00b6 [common]\\ fun toElement (): EnumElement","title":"To element"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/to-element/#toelement","text":"[common]\\ fun toElement (): EnumElement","title":"toElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/type/","text":"// wire-schema / com.squareup.wire.schema / EnumType / type type \u00b6 [common]\\ open override val type : ProtoType","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/type/#type","text":"[common]\\ open override val type : ProtoType","title":"type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/validate/","text":"// wire-schema / com.squareup.wire.schema / EnumType / validate validate \u00b6 [common]\\ open override fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/validate/#validate","text":"[common]\\ open override fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-companion/","text":"// wire-schema / com.squareup.wire.schema / EnumType / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary fromElement [common] @ JvmStatic fun fromElement (protoType: ProtoType , enumElement: EnumElement , syntax: Syntax): EnumType","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-companion/#functions","text":"Name Summary fromElement [common] @ JvmStatic fun fromElement (protoType: ProtoType , enumElement: EnumElement , syntax: Syntax): EnumType","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-companion/from-element/","text":"// wire-schema / com.squareup.wire.schema / EnumType / Companion / fromElement fromElement \u00b6 [common]\\ @ JvmStatic fun fromElement (protoType: ProtoType , enumElement: EnumElement , syntax: Syntax): EnumType","title":"From element"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-enum-type/-companion/from-element/#fromelement","text":"[common]\\ @ JvmStatic fun fromElement (protoType: ProtoType , enumElement: EnumElement , syntax: Syntax): EnumType","title":"fromElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/","text":"// wire-schema / com.squareup.wire.schema / ErrorCollector ErrorCollector \u00b6 [common]\\ class ErrorCollector Collects errors to be reported as a batch. Errors include both a detail message plus context of where they occurred within the schema. Constructors \u00b6 ErrorCollector [common] fun ErrorCollector () Functions \u00b6 Name Summary at [common] fun at (additionalContext: Any ): ErrorCollector Returns a copy of this error collector that includes additionalContext in error messages reported to it. The current and returned instance both contribute errors to the same list. plusAssign [common] operator fun plusAssign (message: String ) Add message as an error to this collector. throwIfNonEmpty [common] fun throwIfNonEmpty ()","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/#errorcollector","text":"[common]\\ class ErrorCollector Collects errors to be reported as a batch. Errors include both a detail message plus context of where they occurred within the schema.","title":"ErrorCollector"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/#constructors","text":"ErrorCollector [common] fun ErrorCollector ()","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/#functions","text":"Name Summary at [common] fun at (additionalContext: Any ): ErrorCollector Returns a copy of this error collector that includes additionalContext in error messages reported to it. The current and returned instance both contribute errors to the same list. plusAssign [common] operator fun plusAssign (message: String ) Add message as an error to this collector. throwIfNonEmpty [common] fun throwIfNonEmpty ()","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/-error-collector/","text":"// wire-schema / com.squareup.wire.schema / ErrorCollector / ErrorCollector ErrorCollector \u00b6 [common]\\ fun ErrorCollector ()","title":" error collector"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/-error-collector/#errorcollector","text":"[common]\\ fun ErrorCollector ()","title":"ErrorCollector"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/at/","text":"// wire-schema / com.squareup.wire.schema / ErrorCollector / at at \u00b6 [common]\\ fun at (additionalContext: Any ): ErrorCollector Returns a copy of this error collector that includes additionalContext in error messages reported to it. The current and returned instance both contribute errors to the same list.","title":"At"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/at/#at","text":"[common]\\ fun at (additionalContext: Any ): ErrorCollector Returns a copy of this error collector that includes additionalContext in error messages reported to it. The current and returned instance both contribute errors to the same list.","title":"at"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/plus-assign/","text":"// wire-schema / com.squareup.wire.schema / ErrorCollector / plusAssign plusAssign \u00b6 [common]\\ operator fun plusAssign (message: String ) Add message as an error to this collector.","title":"Plus assign"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/plus-assign/#plusassign","text":"[common]\\ operator fun plusAssign (message: String ) Add message as an error to this collector.","title":"plusAssign"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/throw-if-non-empty/","text":"// wire-schema / com.squareup.wire.schema / ErrorCollector / throwIfNonEmpty throwIfNonEmpty \u00b6 [common]\\ fun throwIfNonEmpty ()","title":"Throw if non empty"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-error-collector/throw-if-non-empty/#throwifnonempty","text":"[common]\\ fun throwIfNonEmpty ()","title":"throwIfNonEmpty"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/","text":"// wire-schema / com.squareup.wire.schema / Extend Extend \u00b6 [common]\\ data class Extend (location: Location , documentation: String , name: String , fields: List < Field >) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary link [common] fun link (linker: Linker ) linkOptions [common] fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) member [common] fun member (field: Field ): ProtoMember retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet ): Extend ? retainLinked [common] fun retainLinked (linkedFields: Set < Field >): Extend ? validate [common] fun validate (linker: Linker , syntaxRules: SyntaxRules ) Properties \u00b6 Name Summary documentation [common] val documentation : String fields [common] val fields : List < Field > location [common] val location : Location name [common] val name : String type [common] var type : ProtoType ? = null","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/#extend","text":"[common]\\ data class Extend (location: Location , documentation: String , name: String , fields: List < Field >)","title":"Extend"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/#functions","text":"Name Summary link [common] fun link (linker: Linker ) linkOptions [common] fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) member [common] fun member (field: Field ): ProtoMember retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet ): Extend ? retainLinked [common] fun retainLinked (linkedFields: Set < Field >): Extend ? validate [common] fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/#properties","text":"Name Summary documentation [common] val documentation : String fields [common] val fields : List < Field > location [common] val location : Location name [common] val name : String type [common] var type : ProtoType ? = null","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-extend/","text":"// wire-schema / com.squareup.wire.schema / Extend / Extend Extend \u00b6 [common]\\ fun Extend (location: Location , documentation: String , name: String , fields: List < Field >)","title":" extend"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-extend/#extend","text":"[common]\\ fun Extend (location: Location , documentation: String , name: String , fields: List < Field >)","title":"Extend"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/documentation/","text":"// wire-schema / com.squareup.wire.schema / Extend / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/fields/","text":"// wire-schema / com.squareup.wire.schema / Extend / fields fields \u00b6 [common]\\ val fields : List < Field >","title":"Fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/fields/#fields","text":"[common]\\ val fields : List < Field >","title":"fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/link-options/","text":"// wire-schema / com.squareup.wire.schema / Extend / linkOptions linkOptions \u00b6 [common]\\ fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"Link options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/link-options/#linkoptions","text":"[common]\\ fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"linkOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/link/","text":"// wire-schema / com.squareup.wire.schema / Extend / link link \u00b6 [common]\\ fun link (linker: Linker )","title":"Link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/link/#link","text":"[common]\\ fun link (linker: Linker )","title":"link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/location/","text":"// wire-schema / com.squareup.wire.schema / Extend / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/member/","text":"// wire-schema / com.squareup.wire.schema / Extend / member member \u00b6 [common]\\ fun member (field: Field ): ProtoMember","title":"Member"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/member/#member","text":"[common]\\ fun member (field: Field ): ProtoMember","title":"member"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/name/","text":"// wire-schema / com.squareup.wire.schema / Extend / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/retain-all/","text":"// wire-schema / com.squareup.wire.schema / Extend / retainAll retainAll \u00b6 [common]\\ fun retainAll (schema: Schema , markSet: MarkSet ): Extend ?","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/retain-all/#retainall","text":"[common]\\ fun retainAll (schema: Schema , markSet: MarkSet ): Extend ?","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/retain-linked/","text":"// wire-schema / com.squareup.wire.schema / Extend / retainLinked retainLinked \u00b6 [common]\\ fun retainLinked (linkedFields: Set < Field >): Extend ?","title":"Retain linked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/retain-linked/#retainlinked","text":"[common]\\ fun retainLinked (linkedFields: Set < Field >): Extend ?","title":"retainLinked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/type/","text":"// wire-schema / com.squareup.wire.schema / Extend / type type \u00b6 [common]\\ var type : ProtoType ? = null","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/type/#type","text":"[common]\\ var type : ProtoType ? = null","title":"type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/validate/","text":"// wire-schema / com.squareup.wire.schema / Extend / validate validate \u00b6 [common]\\ fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/validate/#validate","text":"[common]\\ fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/","text":"// wire-schema / com.squareup.wire.schema / Extend / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary fromElements [common] @ JvmStatic fun fromElements (packageName: String ?, extendElements: List < ExtendElement >): List < Extend > toElements [common] @ JvmStatic fun toElements (extendList: List < Extend >): List < ExtendElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/#functions","text":"Name Summary fromElements [common] @ JvmStatic fun fromElements (packageName: String ?, extendElements: List < ExtendElement >): List < Extend > toElements [common] @ JvmStatic fun toElements (extendList: List < Extend >): List < ExtendElement >","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/from-elements/","text":"// wire-schema / com.squareup.wire.schema / Extend / Companion / fromElements fromElements \u00b6 [common]\\ @ JvmStatic fun fromElements (packageName: String ?, extendElements: List < ExtendElement >): List < Extend >","title":"From elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/from-elements/#fromelements","text":"[common]\\ @ JvmStatic fun fromElements (packageName: String ?, extendElements: List < ExtendElement >): List < Extend >","title":"fromElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/to-elements/","text":"// wire-schema / com.squareup.wire.schema / Extend / Companion / toElements toElements \u00b6 [common]\\ @ JvmStatic fun toElements (extendList: List < Extend >): List < ExtendElement >","title":"To elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extend/-companion/to-elements/#toelements","text":"[common]\\ @ JvmStatic fun toElements (extendList: List < Extend >): List < ExtendElement >","title":"toElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/","text":"// wire-schema / com.squareup.wire.schema / Extensions Extensions \u00b6 [common]\\ data class Extensions (location: Location , documentation: String , values: List < Any >) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary validate [common] fun validate (linker: Linker ) Properties \u00b6 Name Summary documentation [common] val documentation : String location [common] val location : Location values [common] val values : List < Any >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/#extensions","text":"[common]\\ data class Extensions (location: Location , documentation: String , values: List < Any >)","title":"Extensions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/#functions","text":"Name Summary validate [common] fun validate (linker: Linker )","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/#properties","text":"Name Summary documentation [common] val documentation : String location [common] val location : Location values [common] val values : List < Any >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-extensions/","text":"// wire-schema / com.squareup.wire.schema / Extensions / Extensions Extensions \u00b6 [common]\\ fun Extensions (location: Location , documentation: String , values: List < Any >)","title":" extensions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-extensions/#extensions","text":"[common]\\ fun Extensions (location: Location , documentation: String , values: List < Any >)","title":"Extensions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/documentation/","text":"// wire-schema / com.squareup.wire.schema / Extensions / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/location/","text":"// wire-schema / com.squareup.wire.schema / Extensions / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/validate/","text":"// wire-schema / com.squareup.wire.schema / Extensions / validate validate \u00b6 [common]\\ fun validate (linker: Linker )","title":"Validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/validate/#validate","text":"[common]\\ fun validate (linker: Linker )","title":"validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/values/","text":"// wire-schema / com.squareup.wire.schema / Extensions / values values \u00b6 [common]\\ val values : List < Any >","title":"Values"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/values/#values","text":"[common]\\ val values : List < Any >","title":"values"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/","text":"// wire-schema / com.squareup.wire.schema / Extensions / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary fromElements [common] @ JvmStatic fun fromElements (elements: List < ExtensionsElement >): List < Extensions > toElements [common] @ JvmStatic fun toElements (extensions: List < Extensions >): List < ExtensionsElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/#functions","text":"Name Summary fromElements [common] @ JvmStatic fun fromElements (elements: List < ExtensionsElement >): List < Extensions > toElements [common] @ JvmStatic fun toElements (extensions: List < Extensions >): List < ExtensionsElement >","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/from-elements/","text":"// wire-schema / com.squareup.wire.schema / Extensions / Companion / fromElements fromElements \u00b6 [common]\\ @ JvmStatic fun fromElements (elements: List < ExtensionsElement >): List < Extensions >","title":"From elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/from-elements/#fromelements","text":"[common]\\ @ JvmStatic fun fromElements (elements: List < ExtensionsElement >): List < Extensions >","title":"fromElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/to-elements/","text":"// wire-schema / com.squareup.wire.schema / Extensions / Companion / toElements toElements \u00b6 [common]\\ @ JvmStatic fun toElements (extensions: List < Extensions >): List < ExtensionsElement >","title":"To elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-extensions/-companion/to-elements/#toelements","text":"[common]\\ @ JvmStatic fun toElements (extensions: List < Extensions >): List < ExtensionsElement >","title":"toElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/","text":"// wire-schema / com.squareup.wire.schema / Field Field \u00b6 [common]\\ data class Field (packageName: String ?, location: Location , label: Field.Label ?, name: String , documentation: String , tag: Int , default: String ?, elementType: String , options: Options , isExtension: Boolean , isOneOf: Boolean , declaredJsonName: String ?) Types \u00b6 Name Summary Companion [common] object Companion EncodeMode [common] enum EncodeMode : Enum < Field.EncodeMode > Label [common] enum Label : Enum < Field.Label > Functions \u00b6 Name Summary link [common] fun link (linker: Linker ) linkOptions [common] fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType ): Field ? toString [common] open override fun toString (): String validate [common] fun validate (linker: Linker , syntaxRules: SyntaxRules ) Properties \u00b6 Name Summary declaredJsonName [common] val declaredJsonName : String ? default [common] val default : String ? documentation [common] val documentation : String encodeMode [common] var encodeMode : Field.EncodeMode ? = null isDeprecated [common] val isDeprecated : Boolean isExtension [common] val isExtension : Boolean isOneOf [common] val isOneOf : Boolean isPacked [common] val isPacked : Boolean isRedacted [common] var isRedacted : Boolean = false isRepeated [common] val isRepeated : Boolean isRequired [common] val isRequired : Boolean jsonName [common] var jsonName : String ? = null label [common] val label : Field.Label ? May be null for proto3 fields, one-of\u2019s, or maps. location [common] val location : Location name [common] val name : String options [common] val options : Options packageName [common] val packageName : String ? qualifiedName [common] val qualifiedName : String Returns this field\u2019s name, prefixed with its package name. Uniquely identifies extension fields, such as in options. tag [common] val tag : Int type [common] var type : ProtoType ? = null","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/#field","text":"[common]\\ data class Field (packageName: String ?, location: Location , label: Field.Label ?, name: String , documentation: String , tag: Int , default: String ?, elementType: String , options: Options , isExtension: Boolean , isOneOf: Boolean , declaredJsonName: String ?)","title":"Field"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/#types","text":"Name Summary Companion [common] object Companion EncodeMode [common] enum EncodeMode : Enum < Field.EncodeMode > Label [common] enum Label : Enum < Field.Label >","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/#functions","text":"Name Summary link [common] fun link (linker: Linker ) linkOptions [common] fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType ): Field ? toString [common] open override fun toString (): String validate [common] fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/#properties","text":"Name Summary declaredJsonName [common] val declaredJsonName : String ? default [common] val default : String ? documentation [common] val documentation : String encodeMode [common] var encodeMode : Field.EncodeMode ? = null isDeprecated [common] val isDeprecated : Boolean isExtension [common] val isExtension : Boolean isOneOf [common] val isOneOf : Boolean isPacked [common] val isPacked : Boolean isRedacted [common] var isRedacted : Boolean = false isRepeated [common] val isRepeated : Boolean isRequired [common] val isRequired : Boolean jsonName [common] var jsonName : String ? = null label [common] val label : Field.Label ? May be null for proto3 fields, one-of\u2019s, or maps. location [common] val location : Location name [common] val name : String options [common] val options : Options packageName [common] val packageName : String ? qualifiedName [common] val qualifiedName : String Returns this field\u2019s name, prefixed with its package name. Uniquely identifies extension fields, such as in options. tag [common] val tag : Int type [common] var type : ProtoType ? = null","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-field/","text":"// wire-schema / com.squareup.wire.schema / Field / Field Field \u00b6 [common]\\ fun Field (packageName: String ?, location: Location , label: Field.Label ?, name: String , documentation: String , tag: Int , default: String ?, elementType: String , options: Options , isExtension: Boolean , isOneOf: Boolean , declaredJsonName: String ?)","title":" field"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-field/#field","text":"[common]\\ fun Field (packageName: String ?, location: Location , label: Field.Label ?, name: String , documentation: String , tag: Int , default: String ?, elementType: String , options: Options , isExtension: Boolean , isOneOf: Boolean , declaredJsonName: String ?)","title":"Field"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/declared-json-name/","text":"// wire-schema / com.squareup.wire.schema / Field / declaredJsonName declaredJsonName \u00b6 [common]\\ val declaredJsonName : String ?","title":"Declared json name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/declared-json-name/#declaredjsonname","text":"[common]\\ val declaredJsonName : String ?","title":"declaredJsonName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/default/","text":"// wire-schema / com.squareup.wire.schema / Field / default default \u00b6 [common]\\ val default : String ?","title":"Default"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/default/#default","text":"[common]\\ val default : String ?","title":"default"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/documentation/","text":"// wire-schema / com.squareup.wire.schema / Field / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/encode-mode/","text":"// wire-schema / com.squareup.wire.schema / Field / encodeMode encodeMode \u00b6 [common]\\ var encodeMode : Field.EncodeMode ? = null","title":"Encode mode"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/encode-mode/#encodemode","text":"[common]\\ var encodeMode : Field.EncodeMode ? = null","title":"encodeMode"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-deprecated/","text":"// wire-schema / com.squareup.wire.schema / Field / isDeprecated isDeprecated \u00b6 [common]\\ val isDeprecated : Boolean","title":"Is deprecated"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-deprecated/#isdeprecated","text":"[common]\\ val isDeprecated : Boolean","title":"isDeprecated"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-extension/","text":"// wire-schema / com.squareup.wire.schema / Field / isExtension isExtension \u00b6 [common]\\ val isExtension : Boolean","title":"Is extension"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-extension/#isextension","text":"[common]\\ val isExtension : Boolean","title":"isExtension"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-one-of/","text":"// wire-schema / com.squareup.wire.schema / Field / isOneOf isOneOf \u00b6 [common]\\ val isOneOf : Boolean","title":"Is one of"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-one-of/#isoneof","text":"[common]\\ val isOneOf : Boolean","title":"isOneOf"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-packed/","text":"// wire-schema / com.squareup.wire.schema / Field / isPacked isPacked \u00b6 [common]\\ val isPacked : Boolean","title":"Is packed"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-packed/#ispacked","text":"[common]\\ val isPacked : Boolean","title":"isPacked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-redacted/","text":"// wire-schema / com.squareup.wire.schema / Field / isRedacted isRedacted \u00b6 [common]\\ var isRedacted : Boolean = false","title":"Is redacted"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-redacted/#isredacted","text":"[common]\\ var isRedacted : Boolean = false","title":"isRedacted"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-repeated/","text":"// wire-schema / com.squareup.wire.schema / Field / isRepeated isRepeated \u00b6 [common]\\ val isRepeated : Boolean","title":"Is repeated"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-repeated/#isrepeated","text":"[common]\\ val isRepeated : Boolean","title":"isRepeated"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-required/","text":"// wire-schema / com.squareup.wire.schema / Field / isRequired isRequired \u00b6 [common]\\ val isRequired : Boolean","title":"Is required"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/is-required/#isrequired","text":"[common]\\ val isRequired : Boolean","title":"isRequired"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/json-name/","text":"// wire-schema / com.squareup.wire.schema / Field / jsonName jsonName \u00b6 [common]\\ var jsonName : String ? = null","title":"Json name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/json-name/#jsonname","text":"[common]\\ var jsonName : String ? = null","title":"jsonName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/label/","text":"// wire-schema / com.squareup.wire.schema / Field / label label \u00b6 [common]\\ val label : Field.Label ? May be null for proto3 fields, one-of\u2019s, or maps.","title":"Label"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/label/#label","text":"[common]\\ val label : Field.Label ? May be null for proto3 fields, one-of\u2019s, or maps.","title":"label"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/link-options/","text":"// wire-schema / com.squareup.wire.schema / Field / linkOptions linkOptions \u00b6 [common]\\ fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"Link options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/link-options/#linkoptions","text":"[common]\\ fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"linkOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/link/","text":"// wire-schema / com.squareup.wire.schema / Field / link link \u00b6 [common]\\ fun link (linker: Linker )","title":"Link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/link/#link","text":"[common]\\ fun link (linker: Linker )","title":"link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/location/","text":"// wire-schema / com.squareup.wire.schema / Field / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/name/","text":"// wire-schema / com.squareup.wire.schema / Field / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/options/","text":"// wire-schema / com.squareup.wire.schema / Field / options options \u00b6 [common]\\ val options : Options","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/options/#options","text":"[common]\\ val options : Options","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/package-name/","text":"// wire-schema / com.squareup.wire.schema / Field / packageName packageName \u00b6 [common]\\ val packageName : String ?","title":"Package name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/package-name/#packagename","text":"[common]\\ val packageName : String ?","title":"packageName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/qualified-name/","text":"// wire-schema / com.squareup.wire.schema / Field / qualifiedName qualifiedName \u00b6 [common]\\ val qualifiedName : String Returns this field\u2019s name, prefixed with its package name. Uniquely identifies extension fields, such as in options.","title":"Qualified name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/qualified-name/#qualifiedname","text":"[common]\\ val qualifiedName : String Returns this field\u2019s name, prefixed with its package name. Uniquely identifies extension fields, such as in options.","title":"qualifiedName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/retain-all/","text":"// wire-schema / com.squareup.wire.schema / Field / retainAll retainAll \u00b6 [common]\\ fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType ): Field ?","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/retain-all/#retainall","text":"[common]\\ fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType ): Field ?","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/tag/","text":"// wire-schema / com.squareup.wire.schema / Field / tag tag \u00b6 [common]\\ val tag : Int","title":"Tag"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/tag/#tag","text":"[common]\\ val tag : Int","title":"tag"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/to-string/","text":"// wire-schema / com.squareup.wire.schema / Field / toString toString \u00b6 [common]\\ open override fun toString (): String","title":"To string"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/to-string/#tostring","text":"[common]\\ open override fun toString (): String","title":"toString"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/type/","text":"// wire-schema / com.squareup.wire.schema / Field / type type \u00b6 [common]\\ var type : ProtoType ? = null","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/type/#type","text":"[common]\\ var type : ProtoType ? = null","title":"type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/validate/","text":"// wire-schema / com.squareup.wire.schema / Field / validate validate \u00b6 [common]\\ fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/validate/#validate","text":"[common]\\ fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/","text":"// wire-schema / com.squareup.wire.schema / Field / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary fromElements [common] @ JvmStatic fun fromElements (packageName: String ?, fieldElements: List < FieldElement >, extension: Boolean , oneOf: Boolean ): List < Field > retainAll [common] @ JvmStatic fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType , fields: Collection < Field >): List < Field > retainLinked [common] @ JvmStatic fun retainLinked (fields: List < Field >): List < Field > toElements [common] @ JvmStatic fun toElements (fields: List < Field >): List < FieldElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/#functions","text":"Name Summary fromElements [common] @ JvmStatic fun fromElements (packageName: String ?, fieldElements: List < FieldElement >, extension: Boolean , oneOf: Boolean ): List < Field > retainAll [common] @ JvmStatic fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType , fields: Collection < Field >): List < Field > retainLinked [common] @ JvmStatic fun retainLinked (fields: List < Field >): List < Field > toElements [common] @ JvmStatic fun toElements (fields: List < Field >): List < FieldElement >","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/from-elements/","text":"// wire-schema / com.squareup.wire.schema / Field / Companion / fromElements fromElements \u00b6 [common]\\ @ JvmStatic fun fromElements (packageName: String ?, fieldElements: List < FieldElement >, extension: Boolean , oneOf: Boolean ): List < Field >","title":"From elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/from-elements/#fromelements","text":"[common]\\ @ JvmStatic fun fromElements (packageName: String ?, fieldElements: List < FieldElement >, extension: Boolean , oneOf: Boolean ): List < Field >","title":"fromElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/retain-all/","text":"// wire-schema / com.squareup.wire.schema / Field / Companion / retainAll retainAll \u00b6 [common]\\ @ JvmStatic fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType , fields: Collection < Field >): List < Field >","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/retain-all/#retainall","text":"[common]\\ @ JvmStatic fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType , fields: Collection < Field >): List < Field >","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/retain-linked/","text":"// wire-schema / com.squareup.wire.schema / Field / Companion / retainLinked retainLinked \u00b6 [common]\\ @ JvmStatic fun retainLinked (fields: List < Field >): List < Field >","title":"Retain linked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/retain-linked/#retainlinked","text":"[common]\\ @ JvmStatic fun retainLinked (fields: List < Field >): List < Field >","title":"retainLinked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/to-elements/","text":"// wire-schema / com.squareup.wire.schema / Field / Companion / toElements toElements \u00b6 [common]\\ @ JvmStatic fun toElements (fields: List < Field >): List < FieldElement >","title":"To elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-companion/to-elements/#toelements","text":"[common]\\ @ JvmStatic fun toElements (fields: List < Field >): List < FieldElement >","title":"toElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/","text":"// wire-schema / com.squareup.wire.schema / Field / EncodeMode EncodeMode \u00b6 [common]\\ enum EncodeMode : Enum < Field.EncodeMode > Entries \u00b6 MAP [common] MAP () Map. PACKED [common] PACKED () Packed encoded list. REPEATED [common] REPEATED () List. OMIT_IDENTITY [common] OMIT_IDENTITY () Non-repeated fields in proto3. Identity can be 0, false, \u201c\u201d, or null. REQUIRED [common] REQUIRED () Required from proto2. NULL_IF_ABSENT [common] NULL_IF_ABSENT () Optional, or OneOf from proto2. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/#encodemode","text":"[common]\\ enum EncodeMode : Enum < Field.EncodeMode >","title":"EncodeMode"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/#entries","text":"MAP [common] MAP () Map. PACKED [common] PACKED () Packed encoded list. REPEATED [common] REPEATED () List. OMIT_IDENTITY [common] OMIT_IDENTITY () Non-repeated fields in proto3. Identity can be 0, false, \u201c\u201d, or null. REQUIRED [common] REQUIRED () Required from proto2. NULL_IF_ABSENT [common] NULL_IF_ABSENT () Optional, or OneOf from proto2.","title":"Entries"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-m-a-p/","text":"// wire-schema / com.squareup.wire.schema / Field / EncodeMode / MAP MAP \u00b6 [common]\\ MAP () Map. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-m-a-p/#map","text":"[common]\\ MAP () Map.","title":"MAP"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-m-a-p/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-n-u-l-l_-i-f_-a-b-s-e-n-t/","text":"// wire-schema / com.squareup.wire.schema / Field / EncodeMode / NULL_IF_ABSENT NULL_IF_ABSENT \u00b6 [common]\\ NULL_IF_ABSENT () Optional, or OneOf from proto2. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-n-u-l-l_-i-f_-a-b-s-e-n-t/#null_if_absent","text":"[common]\\ NULL_IF_ABSENT () Optional, or OneOf from proto2.","title":"NULL_IF_ABSENT"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-n-u-l-l_-i-f_-a-b-s-e-n-t/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-o-m-i-t_-i-d-e-n-t-i-t-y/","text":"// wire-schema / com.squareup.wire.schema / Field / EncodeMode / OMIT_IDENTITY OMIT_IDENTITY \u00b6 [common]\\ OMIT_IDENTITY () Non-repeated fields in proto3. Identity can be 0, false, \u201c\u201d, or null. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-o-m-i-t_-i-d-e-n-t-i-t-y/#omit_identity","text":"[common]\\ OMIT_IDENTITY () Non-repeated fields in proto3. Identity can be 0, false, \u201c\u201d, or null.","title":"OMIT_IDENTITY"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-o-m-i-t_-i-d-e-n-t-i-t-y/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-p-a-c-k-e-d/","text":"// wire-schema / com.squareup.wire.schema / Field / EncodeMode / PACKED PACKED \u00b6 [common]\\ PACKED () Packed encoded list. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-p-a-c-k-e-d/#packed","text":"[common]\\ PACKED () Packed encoded list.","title":"PACKED"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-p-a-c-k-e-d/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-p-e-a-t-e-d/","text":"// wire-schema / com.squareup.wire.schema / Field / EncodeMode / REPEATED REPEATED \u00b6 [common]\\ REPEATED () List. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-p-e-a-t-e-d/#repeated","text":"[common]\\ REPEATED () List.","title":"REPEATED"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-p-e-a-t-e-d/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-q-u-i-r-e-d/","text":"// wire-schema / com.squareup.wire.schema / Field / EncodeMode / REQUIRED REQUIRED \u00b6 [common]\\ REQUIRED () Required from proto2. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-q-u-i-r-e-d/#required","text":"[common]\\ REQUIRED () Required from proto2.","title":"REQUIRED"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-encode-mode/-r-e-q-u-i-r-e-d/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/","text":"// wire-schema / com.squareup.wire.schema / Field / Label Label \u00b6 [common]\\ enum Label : Enum < Field.Label > Entries \u00b6 ONE_OF [common] ONE_OF () Indicates the field is a member of a oneof block. REPEATED [common] REPEATED () REQUIRED [common] REQUIRED () OPTIONAL [common] OPTIONAL () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/#label","text":"[common]\\ enum Label : Enum < Field.Label >","title":"Label"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/#entries","text":"ONE_OF [common] ONE_OF () Indicates the field is a member of a oneof block. REPEATED [common] REPEATED () REQUIRED [common] REQUIRED () OPTIONAL [common] OPTIONAL ()","title":"Entries"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-n-e_-o-f/","text":"// wire-schema / com.squareup.wire.schema / Field / Label / ONE_OF ONE_OF \u00b6 [common]\\ ONE_OF () Indicates the field is a member of a oneof block. Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-n-e_-o-f/#one_of","text":"[common]\\ ONE_OF () Indicates the field is a member of a oneof block.","title":"ONE_OF"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-n-e_-o-f/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-p-t-i-o-n-a-l/","text":"// wire-schema / com.squareup.wire.schema / Field / Label / OPTIONAL OPTIONAL \u00b6 [common]\\ OPTIONAL () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-p-t-i-o-n-a-l/#optional","text":"[common]\\ OPTIONAL ()","title":"OPTIONAL"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-o-p-t-i-o-n-a-l/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-p-e-a-t-e-d/","text":"// wire-schema / com.squareup.wire.schema / Field / Label / REPEATED REPEATED \u00b6 [common]\\ REPEATED () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-p-e-a-t-e-d/#repeated","text":"[common]\\ REPEATED ()","title":"REPEATED"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-p-e-a-t-e-d/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-q-u-i-r-e-d/","text":"// wire-schema / com.squareup.wire.schema / Field / Label / REQUIRED REQUIRED \u00b6 [common]\\ REQUIRED () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-q-u-i-r-e-d/#required","text":"[common]\\ REQUIRED ()","title":"REQUIRED"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-field/-label/-r-e-q-u-i-r-e-d/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/","text":"// wire-schema / com.squareup.wire.schema / LinkedOptionEntry LinkedOptionEntry \u00b6 [common]\\ data class LinkedOptionEntry (optionElement: OptionElement , protoMember: ProtoMember , value: Any ?) Properties \u00b6 Name Summary optionElement [common] val optionElement : OptionElement protoMember [common] val protoMember : ProtoMember value [common] val value : Any ?","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/#linkedoptionentry","text":"[common]\\ data class LinkedOptionEntry (optionElement: OptionElement , protoMember: ProtoMember , value: Any ?)","title":"LinkedOptionEntry"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/#properties","text":"Name Summary optionElement [common] val optionElement : OptionElement protoMember [common] val protoMember : ProtoMember value [common] val value : Any ?","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/-linked-option-entry/","text":"// wire-schema / com.squareup.wire.schema / LinkedOptionEntry / LinkedOptionEntry LinkedOptionEntry \u00b6 [common]\\ fun LinkedOptionEntry (optionElement: OptionElement , protoMember: ProtoMember , value: Any ?)","title":" linked option entry"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/-linked-option-entry/#linkedoptionentry","text":"[common]\\ fun LinkedOptionEntry (optionElement: OptionElement , protoMember: ProtoMember , value: Any ?)","title":"LinkedOptionEntry"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/option-element/","text":"// wire-schema / com.squareup.wire.schema / LinkedOptionEntry / optionElement optionElement \u00b6 [common]\\ val optionElement : OptionElement","title":"Option element"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/option-element/#optionelement","text":"[common]\\ val optionElement : OptionElement","title":"optionElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/proto-member/","text":"// wire-schema / com.squareup.wire.schema / LinkedOptionEntry / protoMember protoMember \u00b6 [common]\\ val protoMember : ProtoMember","title":"Proto member"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/proto-member/#protomember","text":"[common]\\ val protoMember : ProtoMember","title":"protoMember"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/value/","text":"// wire-schema / com.squareup.wire.schema / LinkedOptionEntry / value value \u00b6 [common]\\ val value : Any ?","title":"Value"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linked-option-entry/value/#value","text":"[common]\\ val value : Any ?","title":"value"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/","text":"// wire-schema / com.squareup.wire.schema / Linker Linker \u00b6 [common]\\ class Linker Links local field types and option types to the corresponding declarations. Constructors \u00b6 Linker [common] fun Linker (loader: Loader , errors: ErrorCollector , permitPackageCycles: Boolean , loadExhaustively: Boolean ) Functions \u00b6 Name Summary addType [common] fun addType (protoType: ProtoType , type: Type ) Adds type . dereference [common] fun dereference (protoType: ProtoType , field: String ): Field ? Returns the field named field on the message type of protoType . get [common] fun get (protoType: ProtoType ): Type ? Returns the type or null if it doesn\u2019t exist. getForOptions [common] fun getForOptions (protoType: ProtoType ): Type ? Returns the type or null if it doesn\u2019t exist. Before this returns it ensures members are linked so that options may dereference them. link [common] fun link (sourceProtoFiles: Iterable < ProtoFile >): Schema Link all features of all files in sourceProtoFiles to create a schema. This will also partially link any imported files necessary. packageName [common] fun packageName (): String ? Returns the current package name from the context stack. request [common] fun request (field: Field ) Mark a field as used in an option so its file is retained in the schema. resolve [common] fun < T > resolve (name: String , map: Map < String , T >): T ? resolveMessageType [common] fun resolveMessageType (name: String ): ProtoType Returns the type name for the relative or fully-qualified name name . resolveType [common] fun resolveType (name: String ): ProtoType Returns the type name for the scalar, relative or fully-qualified name name . validateEnumConstantNameUniqueness [common] fun validateEnumConstantNameUniqueness (nestedTypes: Iterable < Type >) validateFields [common] fun validateFields (fields: Iterable < Field >, reserveds: List < Reserved >, syntaxRules: SyntaxRules ) Validate that the tags of fields are unique and in range, that proto3 message cannot reference proto2 enums. validateImportForPath [common] fun validateImportForPath (location: Location , requiredImport: String ) validateImportForType [common] fun validateImportForType (location: Location , type: ProtoType ) withContext [common] fun withContext (context: Any ): Linker Returns a new linker that uses context to resolve type names and report errors. Properties \u00b6 Name Summary errors [common] val errors : ErrorCollector Errors accumulated by this load. loadExhaustively [common] val loadExhaustively : Boolean","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/#linker","text":"[common]\\ class Linker Links local field types and option types to the corresponding declarations.","title":"Linker"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/#constructors","text":"Linker [common] fun Linker (loader: Loader , errors: ErrorCollector , permitPackageCycles: Boolean , loadExhaustively: Boolean )","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/#functions","text":"Name Summary addType [common] fun addType (protoType: ProtoType , type: Type ) Adds type . dereference [common] fun dereference (protoType: ProtoType , field: String ): Field ? Returns the field named field on the message type of protoType . get [common] fun get (protoType: ProtoType ): Type ? Returns the type or null if it doesn\u2019t exist. getForOptions [common] fun getForOptions (protoType: ProtoType ): Type ? Returns the type or null if it doesn\u2019t exist. Before this returns it ensures members are linked so that options may dereference them. link [common] fun link (sourceProtoFiles: Iterable < ProtoFile >): Schema Link all features of all files in sourceProtoFiles to create a schema. This will also partially link any imported files necessary. packageName [common] fun packageName (): String ? Returns the current package name from the context stack. request [common] fun request (field: Field ) Mark a field as used in an option so its file is retained in the schema. resolve [common] fun < T > resolve (name: String , map: Map < String , T >): T ? resolveMessageType [common] fun resolveMessageType (name: String ): ProtoType Returns the type name for the relative or fully-qualified name name . resolveType [common] fun resolveType (name: String ): ProtoType Returns the type name for the scalar, relative or fully-qualified name name . validateEnumConstantNameUniqueness [common] fun validateEnumConstantNameUniqueness (nestedTypes: Iterable < Type >) validateFields [common] fun validateFields (fields: Iterable < Field >, reserveds: List < Reserved >, syntaxRules: SyntaxRules ) Validate that the tags of fields are unique and in range, that proto3 message cannot reference proto2 enums. validateImportForPath [common] fun validateImportForPath (location: Location , requiredImport: String ) validateImportForType [common] fun validateImportForType (location: Location , type: ProtoType ) withContext [common] fun withContext (context: Any ): Linker Returns a new linker that uses context to resolve type names and report errors.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/#properties","text":"Name Summary errors [common] val errors : ErrorCollector Errors accumulated by this load. loadExhaustively [common] val loadExhaustively : Boolean","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/-linker/","text":"// wire-schema / com.squareup.wire.schema / Linker / Linker Linker \u00b6 [common]\\ fun Linker (loader: Loader , errors: ErrorCollector , permitPackageCycles: Boolean , loadExhaustively: Boolean )","title":" linker"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/-linker/#linker","text":"[common]\\ fun Linker (loader: Loader , errors: ErrorCollector , permitPackageCycles: Boolean , loadExhaustively: Boolean )","title":"Linker"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/add-type/","text":"// wire-schema / com.squareup.wire.schema / Linker / addType addType \u00b6 [common]\\ fun addType (protoType: ProtoType , type: Type ) Adds type .","title":"Add type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/add-type/#addtype","text":"[common]\\ fun addType (protoType: ProtoType , type: Type ) Adds type .","title":"addType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/dereference/","text":"// wire-schema / com.squareup.wire.schema / Linker / dereference dereference \u00b6 [common]\\ fun dereference (protoType: ProtoType , field: String ): Field ? Returns the field named field on the message type of protoType .","title":"Dereference"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/dereference/#dereference","text":"[common]\\ fun dereference (protoType: ProtoType , field: String ): Field ? Returns the field named field on the message type of protoType .","title":"dereference"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/errors/","text":"// wire-schema / com.squareup.wire.schema / Linker / errors errors \u00b6 [common]\\ val errors : ErrorCollector Errors accumulated by this load.","title":"Errors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/errors/#errors","text":"[common]\\ val errors : ErrorCollector Errors accumulated by this load.","title":"errors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/get-for-options/","text":"// wire-schema / com.squareup.wire.schema / Linker / getForOptions getForOptions \u00b6 [common]\\ fun getForOptions (protoType: ProtoType ): Type ? Returns the type or null if it doesn\u2019t exist. Before this returns it ensures members are linked so that options may dereference them.","title":"Get for options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/get-for-options/#getforoptions","text":"[common]\\ fun getForOptions (protoType: ProtoType ): Type ? Returns the type or null if it doesn\u2019t exist. Before this returns it ensures members are linked so that options may dereference them.","title":"getForOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/get/","text":"// wire-schema / com.squareup.wire.schema / Linker / get get \u00b6 [common]\\ fun get (protoType: ProtoType ): Type ? Returns the type or null if it doesn\u2019t exist.","title":"Get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/get/#get","text":"[common]\\ fun get (protoType: ProtoType ): Type ? Returns the type or null if it doesn\u2019t exist.","title":"get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/link/","text":"// wire-schema / com.squareup.wire.schema / Linker / link link \u00b6 [common]\\ fun link (sourceProtoFiles: Iterable < ProtoFile >): Schema Link all features of all files in sourceProtoFiles to create a schema. This will also partially link any imported files necessary.","title":"Link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/link/#link","text":"[common]\\ fun link (sourceProtoFiles: Iterable < ProtoFile >): Schema Link all features of all files in sourceProtoFiles to create a schema. This will also partially link any imported files necessary.","title":"link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/load-exhaustively/","text":"// wire-schema / com.squareup.wire.schema / Linker / loadExhaustively loadExhaustively \u00b6 [common]\\ val loadExhaustively : Boolean","title":"Load exhaustively"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/load-exhaustively/#loadexhaustively","text":"[common]\\ val loadExhaustively : Boolean","title":"loadExhaustively"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/package-name/","text":"// wire-schema / com.squareup.wire.schema / Linker / packageName packageName \u00b6 [common]\\ fun packageName (): String ? Returns the current package name from the context stack.","title":"Package name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/package-name/#packagename","text":"[common]\\ fun packageName (): String ? Returns the current package name from the context stack.","title":"packageName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/request/","text":"// wire-schema / com.squareup.wire.schema / Linker / request request \u00b6 [common]\\ fun request (field: Field ) Mark a field as used in an option so its file is retained in the schema.","title":"Request"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/request/#request","text":"[common]\\ fun request (field: Field ) Mark a field as used in an option so its file is retained in the schema.","title":"request"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve-message-type/","text":"// wire-schema / com.squareup.wire.schema / Linker / resolveMessageType resolveMessageType \u00b6 [common]\\ fun resolveMessageType (name: String ): ProtoType Returns the type name for the relative or fully-qualified name name .","title":"Resolve message type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve-message-type/#resolvemessagetype","text":"[common]\\ fun resolveMessageType (name: String ): ProtoType Returns the type name for the relative or fully-qualified name name .","title":"resolveMessageType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve-type/","text":"// wire-schema / com.squareup.wire.schema / Linker / resolveType resolveType \u00b6 [common]\\ fun resolveType (name: String ): ProtoType Returns the type name for the scalar, relative or fully-qualified name name .","title":"Resolve type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve-type/#resolvetype","text":"[common]\\ fun resolveType (name: String ): ProtoType Returns the type name for the scalar, relative or fully-qualified name name .","title":"resolveType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve/","text":"// wire-schema / com.squareup.wire.schema / Linker / resolve resolve \u00b6 [common]\\ fun < T > resolve (name: String , map: Map < String , T >): T ?","title":"Resolve"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/resolve/#resolve","text":"[common]\\ fun < T > resolve (name: String , map: Map < String , T >): T ?","title":"resolve"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-enum-constant-name-uniqueness/","text":"// wire-schema / com.squareup.wire.schema / Linker / validateEnumConstantNameUniqueness validateEnumConstantNameUniqueness \u00b6 [common]\\ fun validateEnumConstantNameUniqueness (nestedTypes: Iterable < Type >)","title":"Validate enum constant name uniqueness"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-enum-constant-name-uniqueness/#validateenumconstantnameuniqueness","text":"[common]\\ fun validateEnumConstantNameUniqueness (nestedTypes: Iterable < Type >)","title":"validateEnumConstantNameUniqueness"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-fields/","text":"// wire-schema / com.squareup.wire.schema / Linker / validateFields validateFields \u00b6 [common]\\ fun validateFields (fields: Iterable < Field >, reserveds: List < Reserved >, syntaxRules: SyntaxRules ) Validate that the tags of fields are unique and in range, that proto3 message cannot reference proto2 enums.","title":"Validate fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-fields/#validatefields","text":"[common]\\ fun validateFields (fields: Iterable < Field >, reserveds: List < Reserved >, syntaxRules: SyntaxRules ) Validate that the tags of fields are unique and in range, that proto3 message cannot reference proto2 enums.","title":"validateFields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-import-for-path/","text":"// wire-schema / com.squareup.wire.schema / Linker / validateImportForPath validateImportForPath \u00b6 [common]\\ fun validateImportForPath (location: Location , requiredImport: String )","title":"Validate import for path"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-import-for-path/#validateimportforpath","text":"[common]\\ fun validateImportForPath (location: Location , requiredImport: String )","title":"validateImportForPath"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-import-for-type/","text":"// wire-schema / com.squareup.wire.schema / Linker / validateImportForType validateImportForType \u00b6 [common]\\ fun validateImportForType (location: Location , type: ProtoType )","title":"Validate import for type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/validate-import-for-type/#validateimportfortype","text":"[common]\\ fun validateImportForType (location: Location , type: ProtoType )","title":"validateImportForType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/with-context/","text":"// wire-schema / com.squareup.wire.schema / Linker / withContext withContext \u00b6 [common]\\ fun withContext (context: Any ): Linker Returns a new linker that uses context to resolve type names and report errors.","title":"With context"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-linker/with-context/#withcontext","text":"[common]\\ fun withContext (context: Any ): Linker Returns a new linker that uses context to resolve type names and report errors.","title":"withContext"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/","text":"// wire-schema / com.squareup.wire.schema / Loader Loader \u00b6 [common]\\ interface Loader Loads other files as needed by their import path. Functions \u00b6 Name Summary load [common] abstract fun load (path: String ): ProtoFile withErrors [common] abstract fun withErrors (errors: ErrorCollector ): Loader Returns a new loader that reports failures to errors . Inheritors \u00b6 Name CoreLoader SchemaLoader","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/#loader","text":"[common]\\ interface Loader Loads other files as needed by their import path.","title":"Loader"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/#functions","text":"Name Summary load [common] abstract fun load (path: String ): ProtoFile withErrors [common] abstract fun withErrors (errors: ErrorCollector ): Loader Returns a new loader that reports failures to errors .","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/#inheritors","text":"Name CoreLoader SchemaLoader","title":"Inheritors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/load/","text":"// wire-schema / com.squareup.wire.schema / Loader / load load \u00b6 [common]\\ abstract fun load (path: String ): ProtoFile","title":"Load"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/load/#load","text":"[common]\\ abstract fun load (path: String ): ProtoFile","title":"load"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/with-errors/","text":"// wire-schema / com.squareup.wire.schema / Loader / withErrors withErrors \u00b6 [common]\\ abstract fun withErrors (errors: ErrorCollector ): Loader Returns a new loader that reports failures to errors .","title":"With errors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-loader/with-errors/#witherrors","text":"[common]\\ abstract fun withErrors (errors: ErrorCollector ): Loader Returns a new loader that reports failures to errors .","title":"withErrors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/","text":"// wire-schema / com.squareup.wire.schema / Location Location \u00b6 [common]\\ data class Location (base: String , path: String , line: Int , column: Int ) Locates a .proto file, or a position within a .proto file, on the file system. This includes a base directory or a .jar file, and a path relative to that base. Constructors \u00b6 Location [common] fun Location (base: String , path: String , line: Int = -1, column: Int = -1) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary at [common] fun at (line: Int , column: Int ): Location toString [common] open override fun toString (): String withoutBase [common] fun withoutBase (): Location Returns a copy of this location with an empty base. withPathOnly [common] fun withPathOnly (): Location Returns a copy of this location including only its path. Properties \u00b6 Name Summary base [common] val base : String The base of this location; typically a directory or .jar file. column [common] val column : Int The column on the line of this location, or -1 for no specific column. line [common] val line : Int The line number of this location, or -1 for no specific line number. path [common] val path : String The path to this location relative to base .","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/#location","text":"[common]\\ data class Location (base: String , path: String , line: Int , column: Int ) Locates a .proto file, or a position within a .proto file, on the file system. This includes a base directory or a .jar file, and a path relative to that base.","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/#constructors","text":"Location [common] fun Location (base: String , path: String , line: Int = -1, column: Int = -1)","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/#functions","text":"Name Summary at [common] fun at (line: Int , column: Int ): Location toString [common] open override fun toString (): String withoutBase [common] fun withoutBase (): Location Returns a copy of this location with an empty base. withPathOnly [common] fun withPathOnly (): Location Returns a copy of this location including only its path.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/#properties","text":"Name Summary base [common] val base : String The base of this location; typically a directory or .jar file. column [common] val column : Int The column on the line of this location, or -1 for no specific column. line [common] val line : Int The line number of this location, or -1 for no specific line number. path [common] val path : String The path to this location relative to base .","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-location/","text":"// wire-schema / com.squareup.wire.schema / Location / Location Location \u00b6 [common]\\ fun Location (base: String , path: String , line: Int = -1, column: Int = -1)","title":" location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-location/#location","text":"[common]\\ fun Location (base: String , path: String , line: Int = -1, column: Int = -1)","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/at/","text":"// wire-schema / com.squareup.wire.schema / Location / at at \u00b6 [common]\\ fun at (line: Int , column: Int ): Location","title":"At"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/at/#at","text":"[common]\\ fun at (line: Int , column: Int ): Location","title":"at"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/base/","text":"// wire-schema / com.squareup.wire.schema / Location / base base \u00b6 [common]\\ val base : String The base of this location; typically a directory or .jar file.","title":"Base"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/base/#base","text":"[common]\\ val base : String The base of this location; typically a directory or .jar file.","title":"base"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/column/","text":"// wire-schema / com.squareup.wire.schema / Location / column column \u00b6 [common]\\ val column : Int The column on the line of this location, or -1 for no specific column.","title":"Column"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/column/#column","text":"[common]\\ val column : Int The column on the line of this location, or -1 for no specific column.","title":"column"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/line/","text":"// wire-schema / com.squareup.wire.schema / Location / line line \u00b6 [common]\\ val line : Int The line number of this location, or -1 for no specific line number.","title":"Line"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/line/#line","text":"[common]\\ val line : Int The line number of this location, or -1 for no specific line number.","title":"line"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/path/","text":"// wire-schema / com.squareup.wire.schema / Location / path path \u00b6 [common]\\ val path : String The path to this location relative to base .","title":"Path"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/path/#path","text":"[common]\\ val path : String The path to this location relative to base .","title":"path"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/to-string/","text":"// wire-schema / com.squareup.wire.schema / Location / toString toString \u00b6 [common]\\ open override fun toString (): String","title":"To string"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/to-string/#tostring","text":"[common]\\ open override fun toString (): String","title":"toString"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/with-path-only/","text":"// wire-schema / com.squareup.wire.schema / Location / withPathOnly withPathOnly \u00b6 [common]\\ fun withPathOnly (): Location Returns a copy of this location including only its path.","title":"With path only"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/with-path-only/#withpathonly","text":"[common]\\ fun withPathOnly (): Location Returns a copy of this location including only its path.","title":"withPathOnly"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/without-base/","text":"// wire-schema / com.squareup.wire.schema / Location / withoutBase withoutBase \u00b6 [common]\\ fun withoutBase (): Location Returns a copy of this location with an empty base.","title":"Without base"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/without-base/#withoutbase","text":"[common]\\ fun withoutBase (): Location Returns a copy of this location with an empty base.","title":"withoutBase"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-companion/","text":"// wire-schema / com.squareup.wire.schema / Location / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary get [common] @ JvmStatic fun get (path: String ): Location @ JvmStatic fun get (base: String , path: String ): Location","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-companion/#functions","text":"Name Summary get [common] @ JvmStatic fun get (path: String ): Location @ JvmStatic fun get (base: String , path: String ): Location","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-companion/get/","text":"// wire-schema / com.squareup.wire.schema / Location / Companion / get get \u00b6 [common]\\ @ JvmStatic fun get (path: String ): Location @ JvmStatic fun get (base: String , path: String ): Location","title":"Get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-location/-companion/get/#get","text":"[common]\\ @ JvmStatic fun get (path: String ): Location @ JvmStatic fun get (base: String , path: String ): Location","title":"get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/","text":"// wire-schema / com.squareup.wire.schema / MarkSet MarkSet \u00b6 [common]\\ class MarkSet (pruningRules: PruningRules ) A mark set is used in three phases: Marking root types and root members. These are the identifiers specifically identified by the user in the includes set. In this phase it is an error to mark a type that is excluded, or to mark both a type and one of its members. Marking members transitively reachable by those roots. In this phase if a member is visited, the member's enclosing type is marked instead, unless it is of a type that has a specific member already marked. Retaining which members and types have been marked. Constructors \u00b6 MarkSet [common] fun MarkSet (pruningRules: PruningRules ) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary contains [common] operator fun contains (protoMember: ProtoMember ): Boolean Returns true if member is marked and should be retained. [common] operator fun contains (type: ProtoType ): Boolean Returns true if type is marked and should be retained. mark [common] fun mark (protoMember: ProtoMember ): Boolean Marks a member as transitively reachable by the includes set. Returns true if the mark is new, the member will be retained, and reachable objects should be traversed. [common] fun mark (type: ProtoType ): Boolean fun mark (type: ProtoType , reference: ProtoMember ): Boolean Marks a type as transitively reachable by the includes set. Returns true if the mark is new, the type will be retained, and reachable objects should be traversed. root [common] fun root (protoMember: ProtoMember ) Marks protoMember, throwing if it is explicitly excluded. This implicitly excludes other members of the same type. [common] fun root (type: ProtoType ) Marks type, throwing if it is explicitly excluded. Properties \u00b6 Name Summary members [common] val members : MutableMap < ProtoType , MutableSet < ProtoMember >> The members to retain. Any member not in here should be pruned! pruningRules [common] val pruningRules : PruningRules types [common] val types : MutableSet < ProtoType > The types to retain. We may retain a type but not all of its members.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/#markset","text":"[common]\\ class MarkSet (pruningRules: PruningRules ) A mark set is used in three phases: Marking root types and root members. These are the identifiers specifically identified by the user in the includes set. In this phase it is an error to mark a type that is excluded, or to mark both a type and one of its members. Marking members transitively reachable by those roots. In this phase if a member is visited, the member's enclosing type is marked instead, unless it is of a type that has a specific member already marked. Retaining which members and types have been marked.","title":"MarkSet"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/#constructors","text":"MarkSet [common] fun MarkSet (pruningRules: PruningRules )","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/#functions","text":"Name Summary contains [common] operator fun contains (protoMember: ProtoMember ): Boolean Returns true if member is marked and should be retained. [common] operator fun contains (type: ProtoType ): Boolean Returns true if type is marked and should be retained. mark [common] fun mark (protoMember: ProtoMember ): Boolean Marks a member as transitively reachable by the includes set. Returns true if the mark is new, the member will be retained, and reachable objects should be traversed. [common] fun mark (type: ProtoType ): Boolean fun mark (type: ProtoType , reference: ProtoMember ): Boolean Marks a type as transitively reachable by the includes set. Returns true if the mark is new, the type will be retained, and reachable objects should be traversed. root [common] fun root (protoMember: ProtoMember ) Marks protoMember, throwing if it is explicitly excluded. This implicitly excludes other members of the same type. [common] fun root (type: ProtoType ) Marks type, throwing if it is explicitly excluded.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/#properties","text":"Name Summary members [common] val members : MutableMap < ProtoType , MutableSet < ProtoMember >> The members to retain. Any member not in here should be pruned! pruningRules [common] val pruningRules : PruningRules types [common] val types : MutableSet < ProtoType > The types to retain. We may retain a type but not all of its members.","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/-mark-set/","text":"// wire-schema / com.squareup.wire.schema / MarkSet / MarkSet MarkSet \u00b6 [common]\\ fun MarkSet (pruningRules: PruningRules )","title":" mark set"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/-mark-set/#markset","text":"[common]\\ fun MarkSet (pruningRules: PruningRules )","title":"MarkSet"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/contains/","text":"// wire-schema / com.squareup.wire.schema / MarkSet / contains contains \u00b6 [common]\\ operator fun contains (type: ProtoType ): Boolean Returns true if type is marked and should be retained. [common]\\ operator fun contains (protoMember: ProtoMember ): Boolean Returns true if member is marked and should be retained.","title":"Contains"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/contains/#contains","text":"[common]\\ operator fun contains (type: ProtoType ): Boolean Returns true if type is marked and should be retained. [common]\\ operator fun contains (protoMember: ProtoMember ): Boolean Returns true if member is marked and should be retained.","title":"contains"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/mark/","text":"// wire-schema / com.squareup.wire.schema / MarkSet / mark mark \u00b6 [common]\\ fun mark (type: ProtoType , reference: ProtoMember ): Boolean Marks a type as transitively reachable by the includes set. Returns true if the mark is new, the type will be retained, and reachable objects should be traversed. If there is an exclude for type , non-root members referencing it will be pruned. The type itself will also be pruned unless it is referenced by a root member. [common]\\ fun mark (type: ProtoType ): Boolean Marks a type as transitively reachable by the includes set. Returns true if the mark is new, the type will be retained, and reachable objects should be traversed. [common]\\ fun mark (protoMember: ProtoMember ): Boolean Marks a member as transitively reachable by the includes set. Returns true if the mark is new, the member will be retained, and reachable objects should be traversed.","title":"Mark"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/mark/#mark","text":"[common]\\ fun mark (type: ProtoType , reference: ProtoMember ): Boolean Marks a type as transitively reachable by the includes set. Returns true if the mark is new, the type will be retained, and reachable objects should be traversed. If there is an exclude for type , non-root members referencing it will be pruned. The type itself will also be pruned unless it is referenced by a root member. [common]\\ fun mark (type: ProtoType ): Boolean Marks a type as transitively reachable by the includes set. Returns true if the mark is new, the type will be retained, and reachable objects should be traversed. [common]\\ fun mark (protoMember: ProtoMember ): Boolean Marks a member as transitively reachable by the includes set. Returns true if the mark is new, the member will be retained, and reachable objects should be traversed.","title":"mark"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/members/","text":"// wire-schema / com.squareup.wire.schema / MarkSet / members members \u00b6 [common]\\ val members : MutableMap < ProtoType , MutableSet < ProtoMember >> The members to retain. Any member not in here should be pruned!","title":"Members"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/members/#members","text":"[common]\\ val members : MutableMap < ProtoType , MutableSet < ProtoMember >> The members to retain. Any member not in here should be pruned!","title":"members"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/pruning-rules/","text":"// wire-schema / com.squareup.wire.schema / MarkSet / pruningRules pruningRules \u00b6 [common]\\ val pruningRules : PruningRules","title":"Pruning rules"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/pruning-rules/#pruningrules","text":"[common]\\ val pruningRules : PruningRules","title":"pruningRules"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/root/","text":"// wire-schema / com.squareup.wire.schema / MarkSet / root root \u00b6 [common]\\ fun root (protoMember: ProtoMember ) Marks protoMember, throwing if it is explicitly excluded. This implicitly excludes other members of the same type. [common]\\ fun root (type: ProtoType ) Marks type, throwing if it is explicitly excluded.","title":"Root"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/root/#root","text":"[common]\\ fun root (protoMember: ProtoMember ) Marks protoMember, throwing if it is explicitly excluded. This implicitly excludes other members of the same type. [common]\\ fun root (type: ProtoType ) Marks type, throwing if it is explicitly excluded.","title":"root"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/types/","text":"// wire-schema / com.squareup.wire.schema / MarkSet / types types \u00b6 [common]\\ val types : MutableSet < ProtoType > The types to retain. We may retain a type but not all of its members.","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/types/#types","text":"[common]\\ val types : MutableSet < ProtoType > The types to retain. We may retain a type but not all of its members.","title":"types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/-companion/","text":"// wire-schema / com.squareup.wire.schema / MarkSet / Companion Companion \u00b6 [common]\\ object Companion","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-mark-set/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/","text":"// wire-schema / com.squareup.wire.schema / MessageType MessageType \u00b6 [common]\\ data class MessageType (type: ProtoType , location: Location , documentation: String , name: String , declaredFields: List < Field >, extensionFields: MutableList < Field >, oneOfs: List < OneOf >, nestedTypes: List < Type >, extensionsList: List < Extensions >, reserveds: List < Reserved >, options: Options , syntax: Syntax) : Type Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary addExtensionFields [common] fun addExtensionFields (fields: List < Field >) extensionField [common] fun extensionField (qualifiedName: String ): Field ? Returns the field with the qualified name qualifiedName , or null if this type has no such field. extensionFieldsMap [common] fun extensionFieldsMap (): Map < String , Field > field [common] fun field (tag: Int ): Field ? Returns the field tagged tag , or null if this type has no such field. [common] fun field (name: String ): Field ? Returns the field named name , or null if this type has no such field. linkMembers [common] open override fun linkMembers (linker: Linker ) linkOptions [common] open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ? retainLinked [common] open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. toElement [common] fun toElement (): MessageElement typesAndNestedTypes [common] fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are linked to the type. validate [common] open override fun validate (linker: Linker , syntaxRules: SyntaxRules ) Properties \u00b6 Name Summary declaredFields [common] val declaredFields : List < Field > documentation [common] open override val documentation : String extensionFields [common] val extensionFields : MutableList < Field > extensionsList [common] val extensionsList : List < Extensions > fields [common] @get: JvmName (name = \u201cfields\u201d) val fields : List < Field > fieldsAndOneOfFields [common] val fieldsAndOneOfFields : List < Field > isDeprecated [common] val isDeprecated : Boolean location [common] open override val location : Location nestedTypes [common] open override val nestedTypes : List < Type > oneOfs [common] val oneOfs : List < OneOf > options [common] open override val options : Options requiredFields [common] val requiredFields : List < Field > syntax [common] open override val syntax : Syntax type [common] open override val type : ProtoType","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/#messagetype","text":"[common]\\ data class MessageType (type: ProtoType , location: Location , documentation: String , name: String , declaredFields: List < Field >, extensionFields: MutableList < Field >, oneOfs: List < OneOf >, nestedTypes: List < Type >, extensionsList: List < Extensions >, reserveds: List < Reserved >, options: Options , syntax: Syntax) : Type","title":"MessageType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/#functions","text":"Name Summary addExtensionFields [common] fun addExtensionFields (fields: List < Field >) extensionField [common] fun extensionField (qualifiedName: String ): Field ? Returns the field with the qualified name qualifiedName , or null if this type has no such field. extensionFieldsMap [common] fun extensionFieldsMap (): Map < String , Field > field [common] fun field (tag: Int ): Field ? Returns the field tagged tag , or null if this type has no such field. [common] fun field (name: String ): Field ? Returns the field named name , or null if this type has no such field. linkMembers [common] open override fun linkMembers (linker: Linker ) linkOptions [common] open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ? retainLinked [common] open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. toElement [common] fun toElement (): MessageElement typesAndNestedTypes [common] fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are linked to the type. validate [common] open override fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/#properties","text":"Name Summary declaredFields [common] val declaredFields : List < Field > documentation [common] open override val documentation : String extensionFields [common] val extensionFields : MutableList < Field > extensionsList [common] val extensionsList : List < Extensions > fields [common] @get: JvmName (name = \u201cfields\u201d) val fields : List < Field > fieldsAndOneOfFields [common] val fieldsAndOneOfFields : List < Field > isDeprecated [common] val isDeprecated : Boolean location [common] open override val location : Location nestedTypes [common] open override val nestedTypes : List < Type > oneOfs [common] val oneOfs : List < OneOf > options [common] open override val options : Options requiredFields [common] val requiredFields : List < Field > syntax [common] open override val syntax : Syntax type [common] open override val type : ProtoType","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-message-type/","text":"// wire-schema / com.squareup.wire.schema / MessageType / MessageType MessageType \u00b6 [common]\\ fun MessageType (type: ProtoType , location: Location , documentation: String , name: String , declaredFields: List < Field >, extensionFields: MutableList < Field >, oneOfs: List < OneOf >, nestedTypes: List < Type >, extensionsList: List < Extensions >, reserveds: List < Reserved >, options: Options , syntax: Syntax)","title":" message type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-message-type/#messagetype","text":"[common]\\ fun MessageType (type: ProtoType , location: Location , documentation: String , name: String , declaredFields: List < Field >, extensionFields: MutableList < Field >, oneOfs: List < OneOf >, nestedTypes: List < Type >, extensionsList: List < Extensions >, reserveds: List < Reserved >, options: Options , syntax: Syntax)","title":"MessageType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/add-extension-fields/","text":"// wire-schema / com.squareup.wire.schema / MessageType / addExtensionFields addExtensionFields \u00b6 [common]\\ fun addExtensionFields (fields: List < Field >)","title":"Add extension fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/add-extension-fields/#addextensionfields","text":"[common]\\ fun addExtensionFields (fields: List < Field >)","title":"addExtensionFields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/declared-fields/","text":"// wire-schema / com.squareup.wire.schema / MessageType / declaredFields declaredFields \u00b6 [common]\\ val declaredFields : List < Field >","title":"Declared fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/declared-fields/#declaredfields","text":"[common]\\ val declaredFields : List < Field >","title":"declaredFields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/documentation/","text":"// wire-schema / com.squareup.wire.schema / MessageType / documentation documentation \u00b6 [common]\\ open override val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/documentation/#documentation","text":"[common]\\ open override val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-field/","text":"// wire-schema / com.squareup.wire.schema / MessageType / extensionField extensionField \u00b6 [common]\\ fun extensionField (qualifiedName: String ): Field ? Returns the field with the qualified name qualifiedName , or null if this type has no such field.","title":"Extension field"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-field/#extensionfield","text":"[common]\\ fun extensionField (qualifiedName: String ): Field ? Returns the field with the qualified name qualifiedName , or null if this type has no such field.","title":"extensionField"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-fields-map/","text":"// wire-schema / com.squareup.wire.schema / MessageType / extensionFieldsMap extensionFieldsMap \u00b6 [common]\\ fun extensionFieldsMap (): Map < String , Field >","title":"Extension fields map"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-fields-map/#extensionfieldsmap","text":"[common]\\ fun extensionFieldsMap (): Map < String , Field >","title":"extensionFieldsMap"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-fields/","text":"// wire-schema / com.squareup.wire.schema / MessageType / extensionFields extensionFields \u00b6 [common]\\ val extensionFields : MutableList < Field >","title":"Extension fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extension-fields/#extensionfields","text":"[common]\\ val extensionFields : MutableList < Field >","title":"extensionFields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extensions-list/","text":"// wire-schema / com.squareup.wire.schema / MessageType / extensionsList extensionsList \u00b6 [common]\\ val extensionsList : List < Extensions >","title":"Extensions list"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/extensions-list/#extensionslist","text":"[common]\\ val extensionsList : List < Extensions >","title":"extensionsList"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/field/","text":"// wire-schema / com.squareup.wire.schema / MessageType / field field \u00b6 [common]\\ fun field (name: String ): Field ? Returns the field named name , or null if this type has no such field. [common]\\ fun field (tag: Int ): Field ? Returns the field tagged tag , or null if this type has no such field.","title":"Field"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/field/#field","text":"[common]\\ fun field (name: String ): Field ? Returns the field named name , or null if this type has no such field. [common]\\ fun field (tag: Int ): Field ? Returns the field tagged tag , or null if this type has no such field.","title":"field"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/fields-and-one-of-fields/","text":"// wire-schema / com.squareup.wire.schema / MessageType / fieldsAndOneOfFields fieldsAndOneOfFields \u00b6 [common]\\ val fieldsAndOneOfFields : List < Field >","title":"Fields and one of fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/fields-and-one-of-fields/#fieldsandoneoffields","text":"[common]\\ val fieldsAndOneOfFields : List < Field >","title":"fieldsAndOneOfFields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/fields/","text":"// wire-schema / com.squareup.wire.schema / MessageType / fields fields \u00b6 [common]\\ @get: JvmName (name = \u201cfields\u201d) val fields : List < Field >","title":"Fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/fields/#fields","text":"[common]\\ @get: JvmName (name = \u201cfields\u201d) val fields : List < Field >","title":"fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/is-deprecated/","text":"// wire-schema / com.squareup.wire.schema / MessageType / isDeprecated isDeprecated \u00b6 [common]\\ val isDeprecated : Boolean","title":"Is deprecated"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/is-deprecated/#isdeprecated","text":"[common]\\ val isDeprecated : Boolean","title":"isDeprecated"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/link-members/","text":"// wire-schema / com.squareup.wire.schema / MessageType / linkMembers linkMembers \u00b6 [common]\\ open override fun linkMembers (linker: Linker )","title":"Link members"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/link-members/#linkmembers","text":"[common]\\ open override fun linkMembers (linker: Linker )","title":"linkMembers"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/link-options/","text":"// wire-schema / com.squareup.wire.schema / MessageType / linkOptions linkOptions \u00b6 [common]\\ open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"Link options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/link-options/#linkoptions","text":"[common]\\ open override fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"linkOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/location/","text":"// wire-schema / com.squareup.wire.schema / MessageType / location location \u00b6 [common]\\ open override val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/location/#location","text":"[common]\\ open override val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/nested-types/","text":"// wire-schema / com.squareup.wire.schema / MessageType / nestedTypes nestedTypes \u00b6 [common]\\ open override val nestedTypes : List < Type >","title":"Nested types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/nested-types/#nestedtypes","text":"[common]\\ open override val nestedTypes : List < Type >","title":"nestedTypes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/one-ofs/","text":"// wire-schema / com.squareup.wire.schema / MessageType / oneOfs oneOfs \u00b6 [common]\\ val oneOfs : List < OneOf >","title":"One ofs"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/one-ofs/#oneofs","text":"[common]\\ val oneOfs : List < OneOf >","title":"oneOfs"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/options/","text":"// wire-schema / com.squareup.wire.schema / MessageType / options options \u00b6 [common]\\ open override val options : Options","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/options/#options","text":"[common]\\ open override val options : Options","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/required-fields/","text":"// wire-schema / com.squareup.wire.schema / MessageType / requiredFields requiredFields \u00b6 [common]\\ val requiredFields : List < Field >","title":"Required fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/required-fields/#requiredfields","text":"[common]\\ val requiredFields : List < Field >","title":"requiredFields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/retain-all/","text":"// wire-schema / com.squareup.wire.schema / MessageType / retainAll retainAll \u00b6 [common]\\ open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ?","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/retain-all/#retainall","text":"[common]\\ open override fun retainAll (schema: Schema , markSet: MarkSet ): Type ?","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/retain-linked/","text":"// wire-schema / com.squareup.wire.schema / MessageType / retainLinked retainLinked \u00b6 [common]\\ open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.","title":"Retain linked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/retain-linked/#retainlinked","text":"[common]\\ open override fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.","title":"retainLinked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/syntax/","text":"// wire-schema / com.squareup.wire.schema / MessageType / syntax syntax \u00b6 [common]\\ open override val syntax : Syntax","title":"Syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/syntax/#syntax","text":"[common]\\ open override val syntax : Syntax","title":"syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/to-element/","text":"// wire-schema / com.squareup.wire.schema / MessageType / toElement toElement \u00b6 [common]\\ fun toElement (): MessageElement","title":"To element"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/to-element/#toelement","text":"[common]\\ fun toElement (): MessageElement","title":"toElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/type/","text":"// wire-schema / com.squareup.wire.schema / MessageType / type type \u00b6 [common]\\ open override val type : ProtoType","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/type/#type","text":"[common]\\ open override val type : ProtoType","title":"type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/validate/","text":"// wire-schema / com.squareup.wire.schema / MessageType / validate validate \u00b6 [common]\\ open override fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/validate/#validate","text":"[common]\\ open override fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-companion/","text":"// wire-schema / com.squareup.wire.schema / MessageType / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary fromElement [common] @ JvmStatic fun fromElement (packageName: String ?, protoType: ProtoType , messageElement: MessageElement , syntax: Syntax): MessageType","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-companion/#functions","text":"Name Summary fromElement [common] @ JvmStatic fun fromElement (packageName: String ?, protoType: ProtoType , messageElement: MessageElement , syntax: Syntax): MessageType","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-companion/from-element/","text":"// wire-schema / com.squareup.wire.schema / MessageType / Companion / fromElement fromElement \u00b6 [common]\\ @ JvmStatic fun fromElement (packageName: String ?, protoType: ProtoType , messageElement: MessageElement , syntax: Syntax): MessageType","title":"From element"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-message-type/-companion/from-element/#fromelement","text":"[common]\\ @ JvmStatic fun fromElement (packageName: String ?, protoType: ProtoType , messageElement: MessageElement , syntax: Syntax): MessageType","title":"fromElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/","text":"// wire-schema / com.squareup.wire.schema / Multimap Multimap \u00b6 [common, js]\\ interface Multimap < K , V > [jvm]\\ typealias Multimap = Multimap< K , V > Functions \u00b6 Name Summary asMap [common, js] [common, js] abstract fun asMap (): Map < K , Collection < V >> containsKey [common, js] [common, js] abstract fun containsKey (key: Any ?): Boolean containsValue [common, js] [common, js] abstract fun containsValue (value: Any ?): Boolean get [common, js] [common, js] abstract operator fun get (key: K ?): Collection < V > isEmpty [common, js] [common, js] abstract fun isEmpty (): Boolean size [common, js] [common, js] abstract fun size (): Int values [common, js] [common, js] abstract fun values (): Collection < V >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/#multimap","text":"[common, js]\\ interface Multimap < K , V > [jvm]\\ typealias Multimap = Multimap< K , V >","title":"Multimap"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/#functions","text":"Name Summary asMap [common, js] [common, js] abstract fun asMap (): Map < K , Collection < V >> containsKey [common, js] [common, js] abstract fun containsKey (key: Any ?): Boolean containsValue [common, js] [common, js] abstract fun containsValue (value: Any ?): Boolean get [common, js] [common, js] abstract operator fun get (key: K ?): Collection < V > isEmpty [common, js] [common, js] abstract fun isEmpty (): Boolean size [common, js] [common, js] abstract fun size (): Int values [common, js] [common, js] abstract fun values (): Collection < V >","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/as-map/","text":"// wire-schema / com.squareup.wire.schema / Multimap / asMap asMap \u00b6 [common, js]\\ [common, js]\\ abstract fun asMap (): Map < K , Collection < V >>","title":"As map"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/as-map/#asmap","text":"[common, js]\\ [common, js]\\ abstract fun asMap (): Map < K , Collection < V >>","title":"asMap"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/contains-key/","text":"// wire-schema / com.squareup.wire.schema / Multimap / containsKey containsKey \u00b6 [common, js]\\ [common, js]\\ abstract fun containsKey (key: Any ?): Boolean","title":"Contains key"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/contains-key/#containskey","text":"[common, js]\\ [common, js]\\ abstract fun containsKey (key: Any ?): Boolean","title":"containsKey"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/contains-value/","text":"// wire-schema / com.squareup.wire.schema / Multimap / containsValue containsValue \u00b6 [common, js]\\ [common, js]\\ abstract fun containsValue (value: Any ?): Boolean","title":"Contains value"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/contains-value/#containsvalue","text":"[common, js]\\ [common, js]\\ abstract fun containsValue (value: Any ?): Boolean","title":"containsValue"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/get/","text":"// wire-schema / com.squareup.wire.schema / Multimap / get get \u00b6 [common, js]\\ [common, js]\\ abstract operator fun get (key: K ?): Collection < V >","title":"Get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/get/#get","text":"[common, js]\\ [common, js]\\ abstract operator fun get (key: K ?): Collection < V >","title":"get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/is-empty/","text":"// wire-schema / com.squareup.wire.schema / Multimap / isEmpty isEmpty \u00b6 [common, js]\\ [common, js]\\ abstract fun isEmpty (): Boolean","title":"Is empty"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/is-empty/#isempty","text":"[common, js]\\ [common, js]\\ abstract fun isEmpty (): Boolean","title":"isEmpty"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/size/","text":"// wire-schema / com.squareup.wire.schema / Multimap / size size \u00b6 [common, js]\\ [common, js]\\ abstract fun size (): Int","title":"Size"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/size/#size","text":"[common, js]\\ [common, js]\\ abstract fun size (): Int","title":"size"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/values/","text":"// wire-schema / com.squareup.wire.schema / Multimap / values values \u00b6 [common, js]\\ [common, js]\\ abstract fun values (): Collection < V >","title":"Values"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-multimap/values/#values","text":"[common, js]\\ [common, js]\\ abstract fun values (): Collection < V >","title":"values"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/","text":"// wire-schema / com.squareup.wire.schema / OneOf OneOf \u00b6 [common]\\ data class OneOf (name: String , documentation: String , fields: List < Field >) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary link [common] fun link (linker: Linker ) linkOptions [common] fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType ): OneOf ? retainLinked [common] fun retainLinked (): OneOf ? Properties \u00b6 Name Summary documentation [common] val documentation : String fields [common] val fields : List < Field > name [common] val name : String","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/#oneof","text":"[common]\\ data class OneOf (name: String , documentation: String , fields: List < Field >)","title":"OneOf"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/#functions","text":"Name Summary link [common] fun link (linker: Linker ) linkOptions [common] fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType ): OneOf ? retainLinked [common] fun retainLinked (): OneOf ?","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/#properties","text":"Name Summary documentation [common] val documentation : String fields [common] val fields : List < Field > name [common] val name : String","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-one-of/","text":"// wire-schema / com.squareup.wire.schema / OneOf / OneOf OneOf \u00b6 [common]\\ fun OneOf (name: String , documentation: String , fields: List < Field >)","title":" one of"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-one-of/#oneof","text":"[common]\\ fun OneOf (name: String , documentation: String , fields: List < Field >)","title":"OneOf"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/documentation/","text":"// wire-schema / com.squareup.wire.schema / OneOf / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/fields/","text":"// wire-schema / com.squareup.wire.schema / OneOf / fields fields \u00b6 [common]\\ val fields : List < Field >","title":"Fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/fields/#fields","text":"[common]\\ val fields : List < Field >","title":"fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/link-options/","text":"// wire-schema / com.squareup.wire.schema / OneOf / linkOptions linkOptions \u00b6 [common]\\ fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"Link options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/link-options/#linkoptions","text":"[common]\\ fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"linkOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/link/","text":"// wire-schema / com.squareup.wire.schema / OneOf / link link \u00b6 [common]\\ fun link (linker: Linker )","title":"Link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/link/#link","text":"[common]\\ fun link (linker: Linker )","title":"link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/name/","text":"// wire-schema / com.squareup.wire.schema / OneOf / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/retain-all/","text":"// wire-schema / com.squareup.wire.schema / OneOf / retainAll retainAll \u00b6 [common]\\ fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType ): OneOf ?","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/retain-all/#retainall","text":"[common]\\ fun retainAll (schema: Schema , markSet: MarkSet , enclosingType: ProtoType ): OneOf ?","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/retain-linked/","text":"// wire-schema / com.squareup.wire.schema / OneOf / retainLinked retainLinked \u00b6 [common]\\ fun retainLinked (): OneOf ?","title":"Retain linked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/retain-linked/#retainlinked","text":"[common]\\ fun retainLinked (): OneOf ?","title":"retainLinked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/","text":"// wire-schema / com.squareup.wire.schema / OneOf / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary fromElements [common] @ JvmStatic fun fromElements (packageName: String ?, elements: List < OneOfElement >, extension: Boolean ): List < OneOf > toElements [common] @ JvmStatic fun toElements (oneOfs: List < OneOf >): List < OneOfElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/#functions","text":"Name Summary fromElements [common] @ JvmStatic fun fromElements (packageName: String ?, elements: List < OneOfElement >, extension: Boolean ): List < OneOf > toElements [common] @ JvmStatic fun toElements (oneOfs: List < OneOf >): List < OneOfElement >","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/from-elements/","text":"// wire-schema / com.squareup.wire.schema / OneOf / Companion / fromElements fromElements \u00b6 [common]\\ @ JvmStatic fun fromElements (packageName: String ?, elements: List < OneOfElement >, extension: Boolean ): List < OneOf >","title":"From elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/from-elements/#fromelements","text":"[common]\\ @ JvmStatic fun fromElements (packageName: String ?, elements: List < OneOfElement >, extension: Boolean ): List < OneOf >","title":"fromElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/to-elements/","text":"// wire-schema / com.squareup.wire.schema / OneOf / Companion / toElements toElements \u00b6 [common]\\ @ JvmStatic fun toElements (oneOfs: List < OneOf >): List < OneOfElement >","title":"To elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-one-of/-companion/to-elements/#toelements","text":"[common]\\ @ JvmStatic fun toElements (oneOfs: List < OneOf >): List < OneOfElement >","title":"toElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/","text":"// wire-schema / com.squareup.wire.schema / Options Options \u00b6 [common]\\ class Options (optionType: ProtoType , optionElements: List < OptionElement >) A set of options declared on a message declaration, field declaration, enum declaration, enum constant declaration, service declaration, RPC method declaration, or proto file declaration. Options values may be arbitrary protocol buffer messages, but must be valid protocol buffer messages. Constructors \u00b6 Options [common] fun Options (optionType: ProtoType , optionElements: List < OptionElement >) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary fields [common] fun fields (): Multimap < ProtoType , ProtoMember > fun fields (pruningRules: PruningRules ): Multimap < ProtoType , ProtoMember > get [common] fun get (protoMember: ProtoMember ): Any ? link [common] fun link (linker: Linker , location: Location , validate: Boolean ) optionMatches [common] fun optionMatches (namePattern: String , valuePattern: String ): Boolean Returns true if any of the options in entries matches both of the regular expressions provided: its name matches the option\u2019s name and its value matches the option\u2019s value. retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet ): Options retainLinked [common] fun retainLinked (): Options Properties \u00b6 Name Summary elements [common] val elements : List < OptionElement > map [common] val map : Map < ProtoMember , Any ?>","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/#options","text":"[common]\\ class Options (optionType: ProtoType , optionElements: List < OptionElement >) A set of options declared on a message declaration, field declaration, enum declaration, enum constant declaration, service declaration, RPC method declaration, or proto file declaration. Options values may be arbitrary protocol buffer messages, but must be valid protocol buffer messages.","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/#constructors","text":"Options [common] fun Options (optionType: ProtoType , optionElements: List < OptionElement >)","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/#functions","text":"Name Summary fields [common] fun fields (): Multimap < ProtoType , ProtoMember > fun fields (pruningRules: PruningRules ): Multimap < ProtoType , ProtoMember > get [common] fun get (protoMember: ProtoMember ): Any ? link [common] fun link (linker: Linker , location: Location , validate: Boolean ) optionMatches [common] fun optionMatches (namePattern: String , valuePattern: String ): Boolean Returns true if any of the options in entries matches both of the regular expressions provided: its name matches the option\u2019s name and its value matches the option\u2019s value. retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet ): Options retainLinked [common] fun retainLinked (): Options","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/#properties","text":"Name Summary elements [common] val elements : List < OptionElement > map [common] val map : Map < ProtoMember , Any ?>","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-options/","text":"// wire-schema / com.squareup.wire.schema / Options / Options Options \u00b6 [common]\\ fun Options (optionType: ProtoType , optionElements: List < OptionElement >)","title":" options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-options/#options","text":"[common]\\ fun Options (optionType: ProtoType , optionElements: List < OptionElement >)","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/elements/","text":"// wire-schema / com.squareup.wire.schema / Options / elements elements \u00b6 [common]\\ val elements : List < OptionElement >","title":"Elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/elements/#elements","text":"[common]\\ val elements : List < OptionElement >","title":"elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/fields/","text":"// wire-schema / com.squareup.wire.schema / Options / fields fields \u00b6 [common]\\ fun fields (): Multimap < ProtoType , ProtoMember > fun fields (pruningRules: PruningRules ): Multimap < ProtoType , ProtoMember >","title":"Fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/fields/#fields","text":"[common]\\ fun fields (): Multimap < ProtoType , ProtoMember > fun fields (pruningRules: PruningRules ): Multimap < ProtoType , ProtoMember >","title":"fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/get/","text":"// wire-schema / com.squareup.wire.schema / Options / get get \u00b6 [common]\\ fun get (protoMember: ProtoMember ): Any ?","title":"Get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/get/#get","text":"[common]\\ fun get (protoMember: ProtoMember ): Any ?","title":"get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/link/","text":"// wire-schema / com.squareup.wire.schema / Options / link link \u00b6 [common]\\ fun link (linker: Linker , location: Location , validate: Boolean )","title":"Link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/link/#link","text":"[common]\\ fun link (linker: Linker , location: Location , validate: Boolean )","title":"link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/map/","text":"// wire-schema / com.squareup.wire.schema / Options / map map \u00b6 [common]\\ val map : Map < ProtoMember , Any ?>","title":"Map"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/map/#map","text":"[common]\\ val map : Map < ProtoMember , Any ?>","title":"map"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/option-matches/","text":"// wire-schema / com.squareup.wire.schema / Options / optionMatches optionMatches \u00b6 [common]\\ fun optionMatches (namePattern: String , valuePattern: String ): Boolean Returns true if any of the options in entries matches both of the regular expressions provided: its name matches the option\u2019s name and its value matches the option\u2019s value.","title":"Option matches"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/option-matches/#optionmatches","text":"[common]\\ fun optionMatches (namePattern: String , valuePattern: String ): Boolean Returns true if any of the options in entries matches both of the regular expressions provided: its name matches the option\u2019s name and its value matches the option\u2019s value.","title":"optionMatches"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/retain-all/","text":"// wire-schema / com.squareup.wire.schema / Options / retainAll retainAll \u00b6 [common]\\ fun retainAll (schema: Schema , markSet: MarkSet ): Options","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/retain-all/#retainall","text":"[common]\\ fun retainAll (schema: Schema , markSet: MarkSet ): Options","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/retain-linked/","text":"// wire-schema / com.squareup.wire.schema / Options / retainLinked retainLinked \u00b6 [common]\\ fun retainLinked (): Options","title":"Retain linked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/retain-linked/#retainlinked","text":"[common]\\ fun retainLinked (): Options","title":"retainLinked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/","text":"// wire-schema / com.squareup.wire.schema / Options / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary resolveFieldPath [common] fun resolveFieldPath (name: String , fullyQualifiedNames: Set < String ?>): Array < String >? Given a path like a.b.c.d and a set of paths like {a.b.c, a.f.g, h.j}, this returns the original path split on dots such that the first element is in the set. For the above example it would return the array [a.b.c, d]. Properties \u00b6 Name Summary ENUM_OPTIONS [common] @ JvmField val ENUM_OPTIONS : ProtoType ENUM_VALUE_OPTIONS [common] @ JvmField val ENUM_VALUE_OPTIONS : ProtoType FIELD_OPTIONS [common] @ JvmField val FIELD_OPTIONS : ProtoType FILE_OPTIONS [common] @ JvmField val FILE_OPTIONS : ProtoType GOOGLE_PROTOBUF_OPTION_TYPES [common] val GOOGLE_PROTOBUF_OPTION_TYPES : Array < ProtoType > MESSAGE_OPTIONS [common] @ JvmField val MESSAGE_OPTIONS : ProtoType METHOD_OPTIONS [common] @ JvmField val METHOD_OPTIONS : ProtoType ONEOF_OPTIONS [common] @ JvmField val ONEOF_OPTIONS : ProtoType SERVICE_OPTIONS [common] @ JvmField val SERVICE_OPTIONS : ProtoType","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/#functions","text":"Name Summary resolveFieldPath [common] fun resolveFieldPath (name: String , fullyQualifiedNames: Set < String ?>): Array < String >? Given a path like a.b.c.d and a set of paths like {a.b.c, a.f.g, h.j}, this returns the original path split on dots such that the first element is in the set. For the above example it would return the array [a.b.c, d].","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/#properties","text":"Name Summary ENUM_OPTIONS [common] @ JvmField val ENUM_OPTIONS : ProtoType ENUM_VALUE_OPTIONS [common] @ JvmField val ENUM_VALUE_OPTIONS : ProtoType FIELD_OPTIONS [common] @ JvmField val FIELD_OPTIONS : ProtoType FILE_OPTIONS [common] @ JvmField val FILE_OPTIONS : ProtoType GOOGLE_PROTOBUF_OPTION_TYPES [common] val GOOGLE_PROTOBUF_OPTION_TYPES : Array < ProtoType > MESSAGE_OPTIONS [common] @ JvmField val MESSAGE_OPTIONS : ProtoType METHOD_OPTIONS [common] @ JvmField val METHOD_OPTIONS : ProtoType ONEOF_OPTIONS [common] @ JvmField val ONEOF_OPTIONS : ProtoType SERVICE_OPTIONS [common] @ JvmField val SERVICE_OPTIONS : ProtoType","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-e-n-u-m_-o-p-t-i-o-n-s/","text":"// wire-schema / com.squareup.wire.schema / Options / Companion / ENUM_OPTIONS ENUM_OPTIONS \u00b6 [common]\\ @ JvmField val ENUM_OPTIONS : ProtoType","title":" e n u m  o p t i o n s"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-e-n-u-m_-o-p-t-i-o-n-s/#enum_options","text":"[common]\\ @ JvmField val ENUM_OPTIONS : ProtoType","title":"ENUM_OPTIONS"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-e-n-u-m_-v-a-l-u-e_-o-p-t-i-o-n-s/","text":"// wire-schema / com.squareup.wire.schema / Options / Companion / ENUM_VALUE_OPTIONS ENUM_VALUE_OPTIONS \u00b6 [common]\\ @ JvmField val ENUM_VALUE_OPTIONS : ProtoType","title":" e n u m  v a l u e  o p t i o n s"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-e-n-u-m_-v-a-l-u-e_-o-p-t-i-o-n-s/#enum_value_options","text":"[common]\\ @ JvmField val ENUM_VALUE_OPTIONS : ProtoType","title":"ENUM_VALUE_OPTIONS"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-f-i-e-l-d_-o-p-t-i-o-n-s/","text":"// wire-schema / com.squareup.wire.schema / Options / Companion / FIELD_OPTIONS FIELD_OPTIONS \u00b6 [common]\\ @ JvmField val FIELD_OPTIONS : ProtoType","title":" f i e l d  o p t i o n s"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-f-i-e-l-d_-o-p-t-i-o-n-s/#field_options","text":"[common]\\ @ JvmField val FIELD_OPTIONS : ProtoType","title":"FIELD_OPTIONS"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-f-i-l-e_-o-p-t-i-o-n-s/","text":"// wire-schema / com.squareup.wire.schema / Options / Companion / FILE_OPTIONS FILE_OPTIONS \u00b6 [common]\\ @ JvmField val FILE_OPTIONS : ProtoType","title":" f i l e  o p t i o n s"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-f-i-l-e_-o-p-t-i-o-n-s/#file_options","text":"[common]\\ @ JvmField val FILE_OPTIONS : ProtoType","title":"FILE_OPTIONS"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-g-o-o-g-l-e_-p-r-o-t-o-b-u-f_-o-p-t-i-o-n_-t-y-p-e-s/","text":"// wire-schema / com.squareup.wire.schema / Options / Companion / GOOGLE_PROTOBUF_OPTION_TYPES GOOGLE_PROTOBUF_OPTION_TYPES \u00b6 [common]\\ val GOOGLE_PROTOBUF_OPTION_TYPES : Array < ProtoType >","title":" g o o g l e  p r o t o b u f  o p t i o n  t y p e s"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-g-o-o-g-l-e_-p-r-o-t-o-b-u-f_-o-p-t-i-o-n_-t-y-p-e-s/#google_protobuf_option_types","text":"[common]\\ val GOOGLE_PROTOBUF_OPTION_TYPES : Array < ProtoType >","title":"GOOGLE_PROTOBUF_OPTION_TYPES"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-m-e-s-s-a-g-e_-o-p-t-i-o-n-s/","text":"// wire-schema / com.squareup.wire.schema / Options / Companion / MESSAGE_OPTIONS MESSAGE_OPTIONS \u00b6 [common]\\ @ JvmField val MESSAGE_OPTIONS : ProtoType","title":" m e s s a g e  o p t i o n s"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-m-e-s-s-a-g-e_-o-p-t-i-o-n-s/#message_options","text":"[common]\\ @ JvmField val MESSAGE_OPTIONS : ProtoType","title":"MESSAGE_OPTIONS"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-m-e-t-h-o-d_-o-p-t-i-o-n-s/","text":"// wire-schema / com.squareup.wire.schema / Options / Companion / METHOD_OPTIONS METHOD_OPTIONS \u00b6 [common]\\ @ JvmField val METHOD_OPTIONS : ProtoType","title":" m e t h o d  o p t i o n s"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-m-e-t-h-o-d_-o-p-t-i-o-n-s/#method_options","text":"[common]\\ @ JvmField val METHOD_OPTIONS : ProtoType","title":"METHOD_OPTIONS"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-o-n-e-o-f_-o-p-t-i-o-n-s/","text":"// wire-schema / com.squareup.wire.schema / Options / Companion / ONEOF_OPTIONS ONEOF_OPTIONS \u00b6 [common]\\ @ JvmField val ONEOF_OPTIONS : ProtoType","title":" o n e o f  o p t i o n s"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-o-n-e-o-f_-o-p-t-i-o-n-s/#oneof_options","text":"[common]\\ @ JvmField val ONEOF_OPTIONS : ProtoType","title":"ONEOF_OPTIONS"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-s-e-r-v-i-c-e_-o-p-t-i-o-n-s/","text":"// wire-schema / com.squareup.wire.schema / Options / Companion / SERVICE_OPTIONS SERVICE_OPTIONS \u00b6 [common]\\ @ JvmField val SERVICE_OPTIONS : ProtoType","title":" s e r v i c e  o p t i o n s"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/-s-e-r-v-i-c-e_-o-p-t-i-o-n-s/#service_options","text":"[common]\\ @ JvmField val SERVICE_OPTIONS : ProtoType","title":"SERVICE_OPTIONS"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/resolve-field-path/","text":"// wire-schema / com.squareup.wire.schema / Options / Companion / resolveFieldPath resolveFieldPath \u00b6 [common]\\ fun resolveFieldPath (name: String , fullyQualifiedNames: Set < String ?>): Array < String >? Given a path like a.b.c.d and a set of paths like {a.b.c, a.f.g, h.j}, this returns the original path split on dots such that the first element is in the set. For the above example it would return the array [a.b.c, d]. Typically the input path is a package name like a.b, followed by a dot and a sequence of field names. The first field name is an extension field; subsequent field names make a path within that extension. https://developers.google.com/protocol-buffers/docs/overview?hl=en#packages_and_name_resolution Names can be prefixed with a . when the search should start from the outermost scope. Note that a single input may yield multiple possible answers, such as when package names and field names collide. This method prefers shorter package names though that is an implementation detail.","title":"Resolve field path"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-options/-companion/resolve-field-path/#resolvefieldpath","text":"[common]\\ fun resolveFieldPath (name: String , fullyQualifiedNames: Set < String ?>): Array < String >? Given a path like a.b.c.d and a set of paths like {a.b.c, a.f.g, h.j}, this returns the original path split on dots such that the first element is in the set. For the above example it would return the array [a.b.c, d]. Typically the input path is a package name like a.b, followed by a dot and a sequence of field names. The first field name is an extension field; subsequent field names make a path within that extension. https://developers.google.com/protocol-buffers/docs/overview?hl=en#packages_and_name_resolution Names can be prefixed with a . when the search should start from the outermost scope. Note that a single input may yield multiple possible answers, such as when package names and field names collide. This method prefers shorter package names though that is an implementation detail.","title":"resolveFieldPath"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/","text":"// wire-schema / com.squareup.wire.schema / Profile Profile \u00b6 [common]\\ class Profile (profileFiles: List < ProfileFileElement >) [js]\\ class Profile (profileFiles: List <ProfileFileElement>) [jvm]\\ class Profile (profileFiles: List <ProfileFileElement>) Describes how to map .proto to .java. A single repository of .proto files may have multiple profiles; for example a project may target both Android and Java. Constructors \u00b6 Profile [common] fun Profile (profileFiles: List < ProfileFileElement > = emptyList()) [js, jvm] fun Profile (profileFiles: List <ProfileFileElement> = emptyList()) Functions \u00b6 Name Summary getAdapter [jvm] fun getAdapter (type: ProtoType): AdapterConstant ? javaTarget [jvm] fun javaTarget (type: ProtoType): TypeName? kotlinTarget [jvm] fun kotlinTarget (type: ProtoType): TypeName?","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/#profile","text":"[common]\\ class Profile (profileFiles: List < ProfileFileElement >) [js]\\ class Profile (profileFiles: List <ProfileFileElement>) [jvm]\\ class Profile (profileFiles: List <ProfileFileElement>) Describes how to map .proto to .java. A single repository of .proto files may have multiple profiles; for example a project may target both Android and Java.","title":"Profile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/#constructors","text":"Profile [common] fun Profile (profileFiles: List < ProfileFileElement > = emptyList()) [js, jvm] fun Profile (profileFiles: List <ProfileFileElement> = emptyList())","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/#functions","text":"Name Summary getAdapter [jvm] fun getAdapter (type: ProtoType): AdapterConstant ? javaTarget [jvm] fun javaTarget (type: ProtoType): TypeName? kotlinTarget [jvm] fun kotlinTarget (type: ProtoType): TypeName?","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/-profile/","text":"// wire-schema / com.squareup.wire.schema / Profile / Profile Profile \u00b6 [common, js, jvm]\\ [common]\\ fun Profile (profileFiles: List < ProfileFileElement > = emptyList()) [js, jvm]\\ fun Profile (profileFiles: List <ProfileFileElement> = emptyList())","title":" profile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/-profile/#profile","text":"[common, js, jvm]\\ [common]\\ fun Profile (profileFiles: List < ProfileFileElement > = emptyList()) [js, jvm]\\ fun Profile (profileFiles: List <ProfileFileElement> = emptyList())","title":"Profile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/get-adapter/","text":"// wire-schema / com.squareup.wire.schema / Profile / getAdapter getAdapter \u00b6 [jvm]\\ fun getAdapter (type: ProtoType): AdapterConstant ?","title":"Get adapter"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/get-adapter/#getadapter","text":"[jvm]\\ fun getAdapter (type: ProtoType): AdapterConstant ?","title":"getAdapter"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/java-target/","text":"// wire-schema / com.squareup.wire.schema / Profile / javaTarget javaTarget \u00b6 [jvm]\\ fun javaTarget (type: ProtoType): TypeName?","title":"Java target"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/java-target/#javatarget","text":"[jvm]\\ fun javaTarget (type: ProtoType): TypeName?","title":"javaTarget"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/kotlin-target/","text":"// wire-schema / com.squareup.wire.schema / Profile / kotlinTarget kotlinTarget \u00b6 [jvm]\\ fun kotlinTarget (type: ProtoType): TypeName?","title":"Kotlin target"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile/kotlin-target/#kotlintarget","text":"[jvm]\\ fun kotlinTarget (type: ProtoType): TypeName?","title":"kotlinTarget"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/","text":"// wire-schema / com.squareup.wire.schema / ProfileLoader ProfileLoader \u00b6 [common]\\ interface ProfileLoader Functions \u00b6 Name Summary loadProfile [common] abstract fun loadProfile (name: String , schema: Schema ): Profile Inheritors \u00b6 Name SchemaLoader","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/#profileloader","text":"[common]\\ interface ProfileLoader","title":"ProfileLoader"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/#functions","text":"Name Summary loadProfile [common] abstract fun loadProfile (name: String , schema: Schema ): Profile","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/#inheritors","text":"Name SchemaLoader","title":"Inheritors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/load-profile/","text":"// wire-schema / com.squareup.wire.schema / ProfileLoader / loadProfile loadProfile \u00b6 [common]\\ abstract fun loadProfile (name: String , schema: Schema ): Profile","title":"Load profile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-profile-loader/load-profile/#loadprofile","text":"[common]\\ abstract fun loadProfile (name: String , schema: Schema ): Profile","title":"loadProfile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile ProtoFile \u00b6 [common]\\ data class ProtoFile (location: Location , imports: List < String >, publicImports: List < String >, packageName: String ?, types: List < Type >, services: List < Service >, extendList: List < Extend >, options: Options , syntax: Syntax?) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary javaPackage [common] fun javaPackage (): String ? linkOptions [common] fun linkOptions (linker: Linker , validate: Boolean ) name [common] fun name (): String Returns the name of this proto file, like simple_message for squareup/protos/person/simple_message.proto. retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet ): ProtoFile Returns a new proto file that omits types, services, extensions, and options not in pruningRules. retainImports [common] fun retainImports (retained: List < ProtoFile >): ProtoFile Returns a new proto file that omits unnecessary imports. retainLinked [common] fun retainLinked (linkedTypes: Set < ProtoType >, linkedFields: Set < Field >): ProtoFile Return a copy of this file with only the marked types. toElement [common] fun toElement (): ProtoFileElement toSchema [common] fun toSchema (): String toString [common] open override fun toString (): String typesAndNestedTypes [common] fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are found in the proto file. wirePackage [common] fun wirePackage (): String ? Properties \u00b6 Name Summary extendList [common] val extendList : List < Extend > imports [common] val imports : List < String > location [common] val location : Location options [common] val options : Options packageName [common] val packageName : String ? publicImports [common] val publicImports : List < String > services [common] val services : List < Service > syntax [common] val syntax : Syntax? types [common] val types : List < Type >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/#protofile","text":"[common]\\ data class ProtoFile (location: Location , imports: List < String >, publicImports: List < String >, packageName: String ?, types: List < Type >, services: List < Service >, extendList: List < Extend >, options: Options , syntax: Syntax?)","title":"ProtoFile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/#functions","text":"Name Summary javaPackage [common] fun javaPackage (): String ? linkOptions [common] fun linkOptions (linker: Linker , validate: Boolean ) name [common] fun name (): String Returns the name of this proto file, like simple_message for squareup/protos/person/simple_message.proto. retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet ): ProtoFile Returns a new proto file that omits types, services, extensions, and options not in pruningRules. retainImports [common] fun retainImports (retained: List < ProtoFile >): ProtoFile Returns a new proto file that omits unnecessary imports. retainLinked [common] fun retainLinked (linkedTypes: Set < ProtoType >, linkedFields: Set < Field >): ProtoFile Return a copy of this file with only the marked types. toElement [common] fun toElement (): ProtoFileElement toSchema [common] fun toSchema (): String toString [common] open override fun toString (): String typesAndNestedTypes [common] fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are found in the proto file. wirePackage [common] fun wirePackage (): String ?","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/#properties","text":"Name Summary extendList [common] val extendList : List < Extend > imports [common] val imports : List < String > location [common] val location : Location options [common] val options : Options packageName [common] val packageName : String ? publicImports [common] val publicImports : List < String > services [common] val services : List < Service > syntax [common] val syntax : Syntax? types [common] val types : List < Type >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-proto-file/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / ProtoFile ProtoFile \u00b6 [common]\\ fun ProtoFile (location: Location , imports: List < String >, publicImports: List < String >, packageName: String ?, types: List < Type >, services: List < Service >, extendList: List < Extend >, options: Options , syntax: Syntax?)","title":" proto file"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-proto-file/#protofile","text":"[common]\\ fun ProtoFile (location: Location , imports: List < String >, publicImports: List < String >, packageName: String ?, types: List < Type >, services: List < Service >, extendList: List < Extend >, options: Options , syntax: Syntax?)","title":"ProtoFile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/extend-list/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / extendList extendList \u00b6 [common]\\ val extendList : List < Extend >","title":"Extend list"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/extend-list/#extendlist","text":"[common]\\ val extendList : List < Extend >","title":"extendList"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/imports/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / imports imports \u00b6 [common]\\ val imports : List < String >","title":"Imports"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/imports/#imports","text":"[common]\\ val imports : List < String >","title":"imports"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/java-package/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / javaPackage javaPackage \u00b6 [common]\\ fun javaPackage (): String ?","title":"Java package"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/java-package/#javapackage","text":"[common]\\ fun javaPackage (): String ?","title":"javaPackage"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/link-options/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / linkOptions linkOptions \u00b6 [common]\\ fun linkOptions (linker: Linker , validate: Boolean )","title":"Link options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/link-options/#linkoptions","text":"[common]\\ fun linkOptions (linker: Linker , validate: Boolean )","title":"linkOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/location/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/name/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / name name \u00b6 [common]\\ fun name (): String Returns the name of this proto file, like simple_message for squareup/protos/person/simple_message.proto.","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/name/#name","text":"[common]\\ fun name (): String Returns the name of this proto file, like simple_message for squareup/protos/person/simple_message.proto.","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/options/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / options options \u00b6 [common]\\ val options : Options","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/options/#options","text":"[common]\\ val options : Options","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/package-name/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / packageName packageName \u00b6 [common]\\ val packageName : String ?","title":"Package name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/package-name/#packagename","text":"[common]\\ val packageName : String ?","title":"packageName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/public-imports/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / publicImports publicImports \u00b6 [common]\\ val publicImports : List < String >","title":"Public imports"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/public-imports/#publicimports","text":"[common]\\ val publicImports : List < String >","title":"publicImports"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-all/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / retainAll retainAll \u00b6 [common]\\ fun retainAll (schema: Schema , markSet: MarkSet ): ProtoFile Returns a new proto file that omits types, services, extensions, and options not in pruningRules.","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-all/#retainall","text":"[common]\\ fun retainAll (schema: Schema , markSet: MarkSet ): ProtoFile Returns a new proto file that omits types, services, extensions, and options not in pruningRules.","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-imports/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / retainImports retainImports \u00b6 [common]\\ fun retainImports (retained: List < ProtoFile >): ProtoFile Returns a new proto file that omits unnecessary imports.","title":"Retain imports"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-imports/#retainimports","text":"[common]\\ fun retainImports (retained: List < ProtoFile >): ProtoFile Returns a new proto file that omits unnecessary imports.","title":"retainImports"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-linked/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / retainLinked retainLinked \u00b6 [common]\\ fun retainLinked (linkedTypes: Set < ProtoType >, linkedFields: Set < Field >): ProtoFile Return a copy of this file with only the marked types.","title":"Retain linked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/retain-linked/#retainlinked","text":"[common]\\ fun retainLinked (linkedTypes: Set < ProtoType >, linkedFields: Set < Field >): ProtoFile Return a copy of this file with only the marked types.","title":"retainLinked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/services/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / services services \u00b6 [common]\\ val services : List < Service >","title":"Services"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/services/#services","text":"[common]\\ val services : List < Service >","title":"services"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/syntax/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / syntax syntax \u00b6 [common]\\ val syntax : Syntax?","title":"Syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/syntax/#syntax","text":"[common]\\ val syntax : Syntax?","title":"syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-element/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / toElement toElement \u00b6 [common]\\ fun toElement (): ProtoFileElement","title":"To element"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-element/#toelement","text":"[common]\\ fun toElement (): ProtoFileElement","title":"toElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-schema/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-string/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / toString toString \u00b6 [common]\\ open override fun toString (): String","title":"To string"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/to-string/#tostring","text":"[common]\\ open override fun toString (): String","title":"toString"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/types-and-nested-types/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / typesAndNestedTypes typesAndNestedTypes \u00b6 [common]\\ fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are found in the proto file.","title":"Types and nested types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/types-and-nested-types/#typesandnestedtypes","text":"[common]\\ fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are found in the proto file.","title":"typesAndNestedTypes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/types/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / types types \u00b6 [common]\\ val types : List < Type >","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/types/#types","text":"[common]\\ val types : List < Type >","title":"types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/wire-package/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / wirePackage wirePackage \u00b6 [common]\\ fun wirePackage (): String ?","title":"Wire package"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/wire-package/#wirepackage","text":"[common]\\ fun wirePackage (): String ?","title":"wirePackage"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary get [common] fun get (protoFileElement: ProtoFileElement ): ProtoFile Properties \u00b6 Name Summary JAVA_PACKAGE [common] val JAVA_PACKAGE : ProtoMember WIRE_PACKAGE [common] val WIRE_PACKAGE : ProtoMember","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/#functions","text":"Name Summary get [common] fun get (protoFileElement: ProtoFileElement ): ProtoFile","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/#properties","text":"Name Summary JAVA_PACKAGE [common] val JAVA_PACKAGE : ProtoMember WIRE_PACKAGE [common] val WIRE_PACKAGE : ProtoMember","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/-j-a-v-a_-p-a-c-k-a-g-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / Companion / JAVA_PACKAGE JAVA_PACKAGE \u00b6 [common]\\ val JAVA_PACKAGE : ProtoMember","title":" j a v a  p a c k a g e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/-j-a-v-a_-p-a-c-k-a-g-e/#java_package","text":"[common]\\ val JAVA_PACKAGE : ProtoMember","title":"JAVA_PACKAGE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/-w-i-r-e_-p-a-c-k-a-g-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / Companion / WIRE_PACKAGE WIRE_PACKAGE \u00b6 [common]\\ val WIRE_PACKAGE : ProtoMember","title":" w i r e  p a c k a g e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/-w-i-r-e_-p-a-c-k-a-g-e/#wire_package","text":"[common]\\ val WIRE_PACKAGE : ProtoMember","title":"WIRE_PACKAGE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/get/","text":"// wire-schema / com.squareup.wire.schema / ProtoFile / Companion / get get \u00b6 [common]\\ fun get (protoFileElement: ProtoFileElement ): ProtoFile","title":"Get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-file/-companion/get/#get","text":"[common]\\ fun get (protoFileElement: ProtoFileElement ): ProtoFile","title":"get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/","text":"// wire-schema / com.squareup.wire.schema / ProtoMember ProtoMember \u00b6 [common]\\ class ProtoMember Identifies a field, enum or RPC on a declaring type. Members are encoded as strings containing a type name, a hash, and a member name, like squareup.dinosaurs.Dinosaur#length_meters. A member\u2019s name is typically a simple name like \u201clength_meters\u201d or \u201cpacked\u201d. If the member field is an extension to its type, that name is prefixed with its enclosing package. This yields a member name with two packages, like google.protobuf.FieldOptions#squareup.units.unit. Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary equals [common] open operator override fun equals (other: Any ?): Boolean hashCode [common] open override fun hashCode (): Int toString [common] open override fun toString (): String Properties \u00b6 Name Summary member [common] val member : String simpleName [common] val simpleName : String type [common] val type : ProtoType","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/#protomember","text":"[common]\\ class ProtoMember Identifies a field, enum or RPC on a declaring type. Members are encoded as strings containing a type name, a hash, and a member name, like squareup.dinosaurs.Dinosaur#length_meters. A member\u2019s name is typically a simple name like \u201clength_meters\u201d or \u201cpacked\u201d. If the member field is an extension to its type, that name is prefixed with its enclosing package. This yields a member name with two packages, like google.protobuf.FieldOptions#squareup.units.unit.","title":"ProtoMember"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/#functions","text":"Name Summary equals [common] open operator override fun equals (other: Any ?): Boolean hashCode [common] open override fun hashCode (): Int toString [common] open override fun toString (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/#properties","text":"Name Summary member [common] val member : String simpleName [common] val simpleName : String type [common] val type : ProtoType","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/equals/","text":"// wire-schema / com.squareup.wire.schema / ProtoMember / equals equals \u00b6 [common]\\ open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/equals/#equals","text":"[common]\\ open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/hash-code/","text":"// wire-schema / com.squareup.wire.schema / ProtoMember / hashCode hashCode \u00b6 [common]\\ open override fun hashCode (): Int","title":"Hash code"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/hash-code/#hashcode","text":"[common]\\ open override fun hashCode (): Int","title":"hashCode"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/member/","text":"// wire-schema / com.squareup.wire.schema / ProtoMember / member member \u00b6 [common]\\ val member : String","title":"Member"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/member/#member","text":"[common]\\ val member : String","title":"member"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/simple-name/","text":"// wire-schema / com.squareup.wire.schema / ProtoMember / simpleName simpleName \u00b6 [common]\\ val simpleName : String","title":"Simple name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/simple-name/#simplename","text":"[common]\\ val simpleName : String","title":"simpleName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/to-string/","text":"// wire-schema / com.squareup.wire.schema / ProtoMember / toString toString \u00b6 [common]\\ open override fun toString (): String","title":"To string"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/to-string/#tostring","text":"[common]\\ open override fun toString (): String","title":"toString"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/type/","text":"// wire-schema / com.squareup.wire.schema / ProtoMember / type type \u00b6 [common]\\ val type : ProtoType","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/type/#type","text":"[common]\\ val type : ProtoType","title":"type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/-companion/","text":"// wire-schema / com.squareup.wire.schema / ProtoMember / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary get [common] @ JvmStatic fun get (typeAndMember: String ): ProtoMember @ JvmStatic fun get (type: ProtoType , field: Field ): ProtoMember @ JvmStatic fun get (type: ProtoType , member: String ): ProtoMember","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/-companion/#functions","text":"Name Summary get [common] @ JvmStatic fun get (typeAndMember: String ): ProtoMember @ JvmStatic fun get (type: ProtoType , field: Field ): ProtoMember @ JvmStatic fun get (type: ProtoType , member: String ): ProtoMember","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/-companion/get/","text":"// wire-schema / com.squareup.wire.schema / ProtoMember / Companion / get get \u00b6 [common]\\ @ JvmStatic fun get (typeAndMember: String ): ProtoMember @ JvmStatic fun get (type: ProtoType , member: String ): ProtoMember @ JvmStatic fun get (type: ProtoType , field: Field ): ProtoMember","title":"Get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-member/-companion/get/#get","text":"[common]\\ @ JvmStatic fun get (typeAndMember: String ): ProtoMember @ JvmStatic fun get (type: ProtoType , member: String ): ProtoMember @ JvmStatic fun get (type: ProtoType , field: Field ): ProtoMember","title":"get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/","text":"// wire-schema / com.squareup.wire.schema / ProtoType ProtoType \u00b6 [common]\\ class ProtoType Names a protocol buffer message, enumerated type, service, map, or a scalar. This class models a fully-qualified name using the protocol buffer package. Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary equals [common] open operator override fun equals (other: Any ?): Boolean hashCode [common] open override fun hashCode (): Int nestedType [common] fun nestedType (name: String ?): ProtoType toString [common] open override fun toString (): String Properties \u00b6 Name Summary enclosingTypeOrPackage [common] val enclosingTypeOrPackage : String ? Returns the enclosing type, or null if this type is not nested in another type. isMap [common] val isMap : Boolean isScalar [common] val isScalar : Boolean isWrapper [common] val isWrapper : Boolean True if this type is defined in google/protobuf/wrappers.proto. keyType [common] val keyType : ProtoType ? The type of the map\u2019s keys. Only present when isMap is true. simpleName [common] val simpleName : String typeUrl [common] val typeUrl : String ? Returns a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is a scalar or a map. Note that this returns a non-null string for enums because it doesn\u2019t know if the named type is a message or an enum. valueType [common] val valueType : ProtoType ? The type of the map\u2019s values. Only present when isMap is true.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/#prototype","text":"[common]\\ class ProtoType Names a protocol buffer message, enumerated type, service, map, or a scalar. This class models a fully-qualified name using the protocol buffer package.","title":"ProtoType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/#functions","text":"Name Summary equals [common] open operator override fun equals (other: Any ?): Boolean hashCode [common] open override fun hashCode (): Int nestedType [common] fun nestedType (name: String ?): ProtoType toString [common] open override fun toString (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/#properties","text":"Name Summary enclosingTypeOrPackage [common] val enclosingTypeOrPackage : String ? Returns the enclosing type, or null if this type is not nested in another type. isMap [common] val isMap : Boolean isScalar [common] val isScalar : Boolean isWrapper [common] val isWrapper : Boolean True if this type is defined in google/protobuf/wrappers.proto. keyType [common] val keyType : ProtoType ? The type of the map\u2019s keys. Only present when isMap is true. simpleName [common] val simpleName : String typeUrl [common] val typeUrl : String ? Returns a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is a scalar or a map. Note that this returns a non-null string for enums because it doesn\u2019t know if the named type is a message or an enum. valueType [common] val valueType : ProtoType ? The type of the map\u2019s values. Only present when isMap is true.","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/enclosing-type-or-package/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / enclosingTypeOrPackage enclosingTypeOrPackage \u00b6 [common]\\ val enclosingTypeOrPackage : String ? Returns the enclosing type, or null if this type is not nested in another type.","title":"Enclosing type or package"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/enclosing-type-or-package/#enclosingtypeorpackage","text":"[common]\\ val enclosingTypeOrPackage : String ? Returns the enclosing type, or null if this type is not nested in another type.","title":"enclosingTypeOrPackage"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/equals/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / equals equals \u00b6 [common]\\ open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/equals/#equals","text":"[common]\\ open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/hash-code/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / hashCode hashCode \u00b6 [common]\\ open override fun hashCode (): Int","title":"Hash code"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/hash-code/#hashcode","text":"[common]\\ open override fun hashCode (): Int","title":"hashCode"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-map/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / isMap isMap \u00b6 [common]\\ val isMap : Boolean","title":"Is map"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-map/#ismap","text":"[common]\\ val isMap : Boolean","title":"isMap"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-scalar/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / isScalar isScalar \u00b6 [common]\\ val isScalar : Boolean","title":"Is scalar"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-scalar/#isscalar","text":"[common]\\ val isScalar : Boolean","title":"isScalar"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-wrapper/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / isWrapper isWrapper \u00b6 [common]\\ val isWrapper : Boolean True if this type is defined in google/protobuf/wrappers.proto.","title":"Is wrapper"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/is-wrapper/#iswrapper","text":"[common]\\ val isWrapper : Boolean True if this type is defined in google/protobuf/wrappers.proto.","title":"isWrapper"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/key-type/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / keyType keyType \u00b6 [common]\\ val keyType : ProtoType ? The type of the map\u2019s keys. Only present when isMap is true.","title":"Key type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/key-type/#keytype","text":"[common]\\ val keyType : ProtoType ? The type of the map\u2019s keys. Only present when isMap is true.","title":"keyType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/nested-type/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / nestedType nestedType \u00b6 [common]\\ fun nestedType (name: String ?): ProtoType","title":"Nested type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/nested-type/#nestedtype","text":"[common]\\ fun nestedType (name: String ?): ProtoType","title":"nestedType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/simple-name/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / simpleName simpleName \u00b6 [common]\\ val simpleName : String","title":"Simple name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/simple-name/#simplename","text":"[common]\\ val simpleName : String","title":"simpleName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/to-string/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / toString toString \u00b6 [common]\\ open override fun toString (): String","title":"To string"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/to-string/#tostring","text":"[common]\\ open override fun toString (): String","title":"toString"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/type-url/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / typeUrl typeUrl \u00b6 [common]\\ val typeUrl : String ? Returns a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is a scalar or a map. Note that this returns a non-null string for enums because it doesn\u2019t know if the named type is a message or an enum.","title":"Type url"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/type-url/#typeurl","text":"[common]\\ val typeUrl : String ? Returns a string like \u201ctype.googleapis.com/packagename.messagename\u201d or null if this type is a scalar or a map. Note that this returns a non-null string for enums because it doesn\u2019t know if the named type is a message or an enum.","title":"typeUrl"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/value-type/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / valueType valueType \u00b6 [common]\\ val valueType : ProtoType ? The type of the map\u2019s values. Only present when isMap is true.","title":"Value type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/value-type/#valuetype","text":"[common]\\ val valueType : ProtoType ? The type of the map\u2019s values. Only present when isMap is true.","title":"valueType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary get [common] @ JvmStatic fun get (name: String ?): ProtoType @ JvmStatic fun get (enclosingTypeOrPackage: String ?, typeName: String ): ProtoType @ JvmStatic fun get (keyType: ProtoType , valueType: ProtoType , name: String ): ProtoType Properties \u00b6 Name Summary ANY [common] @ JvmField val ANY : ProtoType BOOL [common] @ JvmField val BOOL : ProtoType BOOL_VALUE [common] @ JvmField val BOOL_VALUE : ProtoType BYTES [common] @ JvmField val BYTES : ProtoType BYTES_VALUE [common] @ JvmField val BYTES_VALUE : ProtoType DOUBLE [common] @ JvmField val DOUBLE : ProtoType DOUBLE_VALUE [common] @ JvmField val DOUBLE_VALUE : ProtoType DURATION [common] @ JvmField val DURATION : ProtoType EMPTY [common] @ JvmField val EMPTY : ProtoType FIXED32 [common] @ JvmField val FIXED32 : ProtoType FIXED64 [common] @ JvmField val FIXED64 : ProtoType FLOAT [common] @ JvmField val FLOAT : ProtoType FLOAT_VALUE [common] @ JvmField val FLOAT_VALUE : ProtoType INT32 [common] @ JvmField val INT32 : ProtoType INT32_VALUE [common] @ JvmField val INT32_VALUE : ProtoType INT64 [common] @ JvmField val INT64 : ProtoType INT64_VALUE [common] @ JvmField val INT64_VALUE : ProtoType SFIXED32 [common] @ JvmField val SFIXED32 : ProtoType SFIXED64 [common] @ JvmField val SFIXED64 : ProtoType SINT32 [common] @ JvmField val SINT32 : ProtoType SINT64 [common] @ JvmField val SINT64 : ProtoType STRING [common] @ JvmField val STRING : ProtoType STRING_VALUE [common] @ JvmField val STRING_VALUE : ProtoType STRUCT_LIST [common] @ JvmField val STRUCT_LIST : ProtoType STRUCT_MAP [common] @ JvmField val STRUCT_MAP : ProtoType STRUCT_NULL [common] @ JvmField val STRUCT_NULL : ProtoType STRUCT_VALUE [common] @ JvmField val STRUCT_VALUE : ProtoType TIMESTAMP [common] @ JvmField val TIMESTAMP : ProtoType UINT32 [common] @ JvmField val UINT32 : ProtoType UINT32_VALUE [common] @ JvmField val UINT32_VALUE : ProtoType UINT64 [common] @ JvmField val UINT64 : ProtoType UINT64_VALUE [common] @ JvmField val UINT64_VALUE : ProtoType","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/#functions","text":"Name Summary get [common] @ JvmStatic fun get (name: String ?): ProtoType @ JvmStatic fun get (enclosingTypeOrPackage: String ?, typeName: String ): ProtoType @ JvmStatic fun get (keyType: ProtoType , valueType: ProtoType , name: String ): ProtoType","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/#properties","text":"Name Summary ANY [common] @ JvmField val ANY : ProtoType BOOL [common] @ JvmField val BOOL : ProtoType BOOL_VALUE [common] @ JvmField val BOOL_VALUE : ProtoType BYTES [common] @ JvmField val BYTES : ProtoType BYTES_VALUE [common] @ JvmField val BYTES_VALUE : ProtoType DOUBLE [common] @ JvmField val DOUBLE : ProtoType DOUBLE_VALUE [common] @ JvmField val DOUBLE_VALUE : ProtoType DURATION [common] @ JvmField val DURATION : ProtoType EMPTY [common] @ JvmField val EMPTY : ProtoType FIXED32 [common] @ JvmField val FIXED32 : ProtoType FIXED64 [common] @ JvmField val FIXED64 : ProtoType FLOAT [common] @ JvmField val FLOAT : ProtoType FLOAT_VALUE [common] @ JvmField val FLOAT_VALUE : ProtoType INT32 [common] @ JvmField val INT32 : ProtoType INT32_VALUE [common] @ JvmField val INT32_VALUE : ProtoType INT64 [common] @ JvmField val INT64 : ProtoType INT64_VALUE [common] @ JvmField val INT64_VALUE : ProtoType SFIXED32 [common] @ JvmField val SFIXED32 : ProtoType SFIXED64 [common] @ JvmField val SFIXED64 : ProtoType SINT32 [common] @ JvmField val SINT32 : ProtoType SINT64 [common] @ JvmField val SINT64 : ProtoType STRING [common] @ JvmField val STRING : ProtoType STRING_VALUE [common] @ JvmField val STRING_VALUE : ProtoType STRUCT_LIST [common] @ JvmField val STRUCT_LIST : ProtoType STRUCT_MAP [common] @ JvmField val STRUCT_MAP : ProtoType STRUCT_NULL [common] @ JvmField val STRUCT_NULL : ProtoType STRUCT_VALUE [common] @ JvmField val STRUCT_VALUE : ProtoType TIMESTAMP [common] @ JvmField val TIMESTAMP : ProtoType UINT32 [common] @ JvmField val UINT32 : ProtoType UINT32_VALUE [common] @ JvmField val UINT32_VALUE : ProtoType UINT64 [common] @ JvmField val UINT64 : ProtoType UINT64_VALUE [common] @ JvmField val UINT64_VALUE : ProtoType","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-a-n-y/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / ANY ANY \u00b6 [common]\\ @ JvmField val ANY : ProtoType","title":" a n y"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-a-n-y/#any","text":"[common]\\ @ JvmField val ANY : ProtoType","title":"ANY"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-o-o-l/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / BOOL BOOL \u00b6 [common]\\ @ JvmField val BOOL : ProtoType","title":" b o o l"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-o-o-l/#bool","text":"[common]\\ @ JvmField val BOOL : ProtoType","title":"BOOL"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-o-o-l_-v-a-l-u-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / BOOL_VALUE BOOL_VALUE \u00b6 [common]\\ @ JvmField val BOOL_VALUE : ProtoType","title":" b o o l  v a l u e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-o-o-l_-v-a-l-u-e/#bool_value","text":"[common]\\ @ JvmField val BOOL_VALUE : ProtoType","title":"BOOL_VALUE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-y-t-e-s/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / BYTES BYTES \u00b6 [common]\\ @ JvmField val BYTES : ProtoType","title":" b y t e s"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-y-t-e-s/#bytes","text":"[common]\\ @ JvmField val BYTES : ProtoType","title":"BYTES"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-y-t-e-s_-v-a-l-u-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / BYTES_VALUE BYTES_VALUE \u00b6 [common]\\ @ JvmField val BYTES_VALUE : ProtoType","title":" b y t e s  v a l u e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-b-y-t-e-s_-v-a-l-u-e/#bytes_value","text":"[common]\\ @ JvmField val BYTES_VALUE : ProtoType","title":"BYTES_VALUE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-o-u-b-l-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / DOUBLE DOUBLE \u00b6 [common]\\ @ JvmField val DOUBLE : ProtoType","title":" d o u b l e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-o-u-b-l-e/#double","text":"[common]\\ @ JvmField val DOUBLE : ProtoType","title":"DOUBLE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-o-u-b-l-e_-v-a-l-u-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / DOUBLE_VALUE DOUBLE_VALUE \u00b6 [common]\\ @ JvmField val DOUBLE_VALUE : ProtoType","title":" d o u b l e  v a l u e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-o-u-b-l-e_-v-a-l-u-e/#double_value","text":"[common]\\ @ JvmField val DOUBLE_VALUE : ProtoType","title":"DOUBLE_VALUE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-u-r-a-t-i-o-n/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / DURATION DURATION \u00b6 [common]\\ @ JvmField val DURATION : ProtoType","title":" d u r a t i o n"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-d-u-r-a-t-i-o-n/#duration","text":"[common]\\ @ JvmField val DURATION : ProtoType","title":"DURATION"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-e-m-p-t-y/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / EMPTY EMPTY \u00b6 [common]\\ @ JvmField val EMPTY : ProtoType","title":" e m p t y"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-e-m-p-t-y/#empty","text":"[common]\\ @ JvmField val EMPTY : ProtoType","title":"EMPTY"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-i-x-e-d32/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / FIXED32 FIXED32 \u00b6 [common]\\ @ JvmField val FIXED32 : ProtoType","title":" f i x e d32"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-i-x-e-d32/#fixed32","text":"[common]\\ @ JvmField val FIXED32 : ProtoType","title":"FIXED32"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-i-x-e-d64/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / FIXED64 FIXED64 \u00b6 [common]\\ @ JvmField val FIXED64 : ProtoType","title":" f i x e d64"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-i-x-e-d64/#fixed64","text":"[common]\\ @ JvmField val FIXED64 : ProtoType","title":"FIXED64"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-l-o-a-t/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / FLOAT FLOAT \u00b6 [common]\\ @ JvmField val FLOAT : ProtoType","title":" f l o a t"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-l-o-a-t/#float","text":"[common]\\ @ JvmField val FLOAT : ProtoType","title":"FLOAT"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-l-o-a-t_-v-a-l-u-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / FLOAT_VALUE FLOAT_VALUE \u00b6 [common]\\ @ JvmField val FLOAT_VALUE : ProtoType","title":" f l o a t  v a l u e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-f-l-o-a-t_-v-a-l-u-e/#float_value","text":"[common]\\ @ JvmField val FLOAT_VALUE : ProtoType","title":"FLOAT_VALUE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t32/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / INT32 INT32 \u00b6 [common]\\ @ JvmField val INT32 : ProtoType","title":" i n t32"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t32/#int32","text":"[common]\\ @ JvmField val INT32 : ProtoType","title":"INT32"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t32_-v-a-l-u-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / INT32_VALUE INT32_VALUE \u00b6 [common]\\ @ JvmField val INT32_VALUE : ProtoType","title":" i n t32  v a l u e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t32_-v-a-l-u-e/#int32_value","text":"[common]\\ @ JvmField val INT32_VALUE : ProtoType","title":"INT32_VALUE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t64/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / INT64 INT64 \u00b6 [common]\\ @ JvmField val INT64 : ProtoType","title":" i n t64"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t64/#int64","text":"[common]\\ @ JvmField val INT64 : ProtoType","title":"INT64"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t64_-v-a-l-u-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / INT64_VALUE INT64_VALUE \u00b6 [common]\\ @ JvmField val INT64_VALUE : ProtoType","title":" i n t64  v a l u e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-i-n-t64_-v-a-l-u-e/#int64_value","text":"[common]\\ @ JvmField val INT64_VALUE : ProtoType","title":"INT64_VALUE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-f-i-x-e-d32/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / SFIXED32 SFIXED32 \u00b6 [common]\\ @ JvmField val SFIXED32 : ProtoType","title":" s f i x e d32"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-f-i-x-e-d32/#sfixed32","text":"[common]\\ @ JvmField val SFIXED32 : ProtoType","title":"SFIXED32"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-f-i-x-e-d64/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / SFIXED64 SFIXED64 \u00b6 [common]\\ @ JvmField val SFIXED64 : ProtoType","title":" s f i x e d64"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-f-i-x-e-d64/#sfixed64","text":"[common]\\ @ JvmField val SFIXED64 : ProtoType","title":"SFIXED64"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-i-n-t32/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / SINT32 SINT32 \u00b6 [common]\\ @ JvmField val SINT32 : ProtoType","title":" s i n t32"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-i-n-t32/#sint32","text":"[common]\\ @ JvmField val SINT32 : ProtoType","title":"SINT32"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-i-n-t64/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / SINT64 SINT64 \u00b6 [common]\\ @ JvmField val SINT64 : ProtoType","title":" s i n t64"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-i-n-t64/#sint64","text":"[common]\\ @ JvmField val SINT64 : ProtoType","title":"SINT64"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-i-n-g/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / STRING STRING \u00b6 [common]\\ @ JvmField val STRING : ProtoType","title":" s t r i n g"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-i-n-g/#string","text":"[common]\\ @ JvmField val STRING : ProtoType","title":"STRING"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-i-n-g_-v-a-l-u-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / STRING_VALUE STRING_VALUE \u00b6 [common]\\ @ JvmField val STRING_VALUE : ProtoType","title":" s t r i n g  v a l u e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-i-n-g_-v-a-l-u-e/#string_value","text":"[common]\\ @ JvmField val STRING_VALUE : ProtoType","title":"STRING_VALUE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-l-i-s-t/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / STRUCT_LIST STRUCT_LIST \u00b6 [common]\\ @ JvmField val STRUCT_LIST : ProtoType","title":" s t r u c t  l i s t"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-l-i-s-t/#struct_list","text":"[common]\\ @ JvmField val STRUCT_LIST : ProtoType","title":"STRUCT_LIST"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-m-a-p/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / STRUCT_MAP STRUCT_MAP \u00b6 [common]\\ @ JvmField val STRUCT_MAP : ProtoType","title":" s t r u c t  m a p"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-m-a-p/#struct_map","text":"[common]\\ @ JvmField val STRUCT_MAP : ProtoType","title":"STRUCT_MAP"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-n-u-l-l/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / STRUCT_NULL STRUCT_NULL \u00b6 [common]\\ @ JvmField val STRUCT_NULL : ProtoType","title":" s t r u c t  n u l l"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-n-u-l-l/#struct_null","text":"[common]\\ @ JvmField val STRUCT_NULL : ProtoType","title":"STRUCT_NULL"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-v-a-l-u-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / STRUCT_VALUE STRUCT_VALUE \u00b6 [common]\\ @ JvmField val STRUCT_VALUE : ProtoType","title":" s t r u c t  v a l u e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-s-t-r-u-c-t_-v-a-l-u-e/#struct_value","text":"[common]\\ @ JvmField val STRUCT_VALUE : ProtoType","title":"STRUCT_VALUE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-t-i-m-e-s-t-a-m-p/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / TIMESTAMP TIMESTAMP \u00b6 [common]\\ @ JvmField val TIMESTAMP : ProtoType","title":" t i m e s t a m p"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-t-i-m-e-s-t-a-m-p/#timestamp","text":"[common]\\ @ JvmField val TIMESTAMP : ProtoType","title":"TIMESTAMP"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t32/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / UINT32 UINT32 \u00b6 [common]\\ @ JvmField val UINT32 : ProtoType","title":" u i n t32"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t32/#uint32","text":"[common]\\ @ JvmField val UINT32 : ProtoType","title":"UINT32"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t32_-v-a-l-u-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / UINT32_VALUE UINT32_VALUE \u00b6 [common]\\ @ JvmField val UINT32_VALUE : ProtoType","title":" u i n t32  v a l u e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t32_-v-a-l-u-e/#uint32_value","text":"[common]\\ @ JvmField val UINT32_VALUE : ProtoType","title":"UINT32_VALUE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t64/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / UINT64 UINT64 \u00b6 [common]\\ @ JvmField val UINT64 : ProtoType","title":" u i n t64"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t64/#uint64","text":"[common]\\ @ JvmField val UINT64 : ProtoType","title":"UINT64"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t64_-v-a-l-u-e/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / UINT64_VALUE UINT64_VALUE \u00b6 [common]\\ @ JvmField val UINT64_VALUE : ProtoType","title":" u i n t64  v a l u e"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/-u-i-n-t64_-v-a-l-u-e/#uint64_value","text":"[common]\\ @ JvmField val UINT64_VALUE : ProtoType","title":"UINT64_VALUE"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/get/","text":"// wire-schema / com.squareup.wire.schema / ProtoType / Companion / get get \u00b6 [common]\\ @ JvmStatic fun get (enclosingTypeOrPackage: String ?, typeName: String ): ProtoType @ JvmStatic fun get (name: String ?): ProtoType @ JvmStatic fun get (keyType: ProtoType , valueType: ProtoType , name: String ): ProtoType","title":"Get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-proto-type/-companion/get/#get","text":"[common]\\ @ JvmStatic fun get (enclosingTypeOrPackage: String ?, typeName: String ): ProtoType @ JvmStatic fun get (name: String ?): ProtoType @ JvmStatic fun get (keyType: ProtoType , valueType: ProtoType , name: String ): ProtoType","title":"get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/","text":"// wire-schema / com.squareup.wire.schema / Pruner Pruner \u00b6 [common]\\ class Pruner (schema: Schema , pruningRules: PruningRules ) Creates a new schema that contains only the types selected by the pruning rules, including their transitive dependencies. Constructors \u00b6 Pruner [common] fun Pruner (schema: Schema , pruningRules: PruningRules ) Functions \u00b6 Name Summary prune [common] fun prune (): Schema","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/#pruner","text":"[common]\\ class Pruner (schema: Schema , pruningRules: PruningRules ) Creates a new schema that contains only the types selected by the pruning rules, including their transitive dependencies.","title":"Pruner"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/#constructors","text":"Pruner [common] fun Pruner (schema: Schema , pruningRules: PruningRules )","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/#functions","text":"Name Summary prune [common] fun prune (): Schema","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/-pruner/","text":"// wire-schema / com.squareup.wire.schema / Pruner / Pruner Pruner \u00b6 [common]\\ fun Pruner (schema: Schema , pruningRules: PruningRules )","title":" pruner"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/-pruner/#pruner","text":"[common]\\ fun Pruner (schema: Schema , pruningRules: PruningRules )","title":"Pruner"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/prune/","text":"// wire-schema / com.squareup.wire.schema / Pruner / prune prune \u00b6 [common]\\ fun prune (): Schema","title":"Prune"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruner/prune/#prune","text":"[common]\\ fun prune (): Schema","title":"prune"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/","text":"// wire-schema / com.squareup.wire.schema / PruningRules PruningRules \u00b6 [common]\\ class PruningRules A set of rules that describes which types and members to retain and which to remove. Members may be pruned using either their identifier (package, type name, member name) or their version (since and until options). Despite the builder, instances of this class are not safe for concurrent use. Identifier Matching \u00b6 If a member is a root in the set, its type is implicitly also considered a root. A type that is a root without a specific member implicitly set all of that type\u2019s members as roots, but not its nested types. Identifiers in this set may be in the following forms: Package names, followed by .*, like squareup.protos.person.*. This matches types and services defined in the package and its descendant packages. Fully qualified type and service names, like squareup.protos.person.Person. Fully qualified member names, which are type names followed by a '#', followed by a member name, like squareup.protos.person.Person#address. Members may be fields, enum constants or RPCs. An identifier set populated with Movie and Actor#name contains all members of Movie (such as Movie#name and Movie#release_date). It contains the type Actor and one member Actor#name, but not Actor#birth_date or Actor#oscar_count. This set has root identifiers and prune identifiers , with the most precise identifier taking precedence over the other ones. For instance, if there is one root identifier a.Movie along a pruning identifier a.*, the type a.Movie is considered a root. If the roots set is empty, that implies that all elements are considered roots. Use this to prune unwanted types and members without also marking everything else as roots. Version Matching \u00b6 Members may be declared with wire.since and wire.until options. For example, these options declare a field age that was replaced with birth_date in version \u201c5.0\u201d: optional int32 age = 3 [(wire.until) = \u201c5.0\u201d];\\ optional Date birth_date = 4 [(wire.since) = \u201c5.0\u201d]; Client code should typically target a single version. In this example, versions <= \u201c4.0\u201d will have the age field only and versions >= \u201c5.0\u201d will have the birth_date field only. One can target a single version using only . Service code that supports many clients should support the union of versions of all supported clients. Such code will have both the age and birth_date fields. Types \u00b6 Name Summary Builder [common] class Builder Companion [common] object Companion Functions \u00b6 Name Summary isEnumConstantRetainedVersion [common] fun isEnumConstantRetainedVersion (options: Options ): Boolean Returns true unless options specifies a version that is outside of the configured range. isFieldRetainedVersion [common] fun isFieldRetainedVersion (options: Options ): Boolean Returns true unless options specifies a version that is outside of the configured range. isRoot [common] fun isRoot (protoMember: ProtoMember ): Boolean Returns true if protoMember is a root. [common] fun isRoot (type: ProtoType ): Boolean Returns true if type is a root. prunes [common] fun prunes (protoMember: ProtoMember ): Boolean Returns true if protoMember should be pruned. [common] fun prunes (type: ProtoType ): Boolean Returns true if type should be pruned, even if it is a transitive dependency of a root. In that case, the referring member is also pruned. unusedPrunes [common] fun unusedPrunes (): Set < String > unusedRoots [common] fun unusedRoots (): Set < String > Properties \u00b6 Name Summary isEmpty [common] val isEmpty : Boolean only [common] val only : String ? prunes [common] val prunes : Set < String > roots [common] val roots : Set < String > since [common] val since : String ? until [common] val until : String ?","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#pruningrules","text":"[common]\\ class PruningRules A set of rules that describes which types and members to retain and which to remove. Members may be pruned using either their identifier (package, type name, member name) or their version (since and until options). Despite the builder, instances of this class are not safe for concurrent use.","title":"PruningRules"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#identifier-matching","text":"If a member is a root in the set, its type is implicitly also considered a root. A type that is a root without a specific member implicitly set all of that type\u2019s members as roots, but not its nested types. Identifiers in this set may be in the following forms: Package names, followed by .*, like squareup.protos.person.*. This matches types and services defined in the package and its descendant packages. Fully qualified type and service names, like squareup.protos.person.Person. Fully qualified member names, which are type names followed by a '#', followed by a member name, like squareup.protos.person.Person#address. Members may be fields, enum constants or RPCs. An identifier set populated with Movie and Actor#name contains all members of Movie (such as Movie#name and Movie#release_date). It contains the type Actor and one member Actor#name, but not Actor#birth_date or Actor#oscar_count. This set has root identifiers and prune identifiers , with the most precise identifier taking precedence over the other ones. For instance, if there is one root identifier a.Movie along a pruning identifier a.*, the type a.Movie is considered a root. If the roots set is empty, that implies that all elements are considered roots. Use this to prune unwanted types and members without also marking everything else as roots.","title":"Identifier Matching"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#version-matching","text":"Members may be declared with wire.since and wire.until options. For example, these options declare a field age that was replaced with birth_date in version \u201c5.0\u201d: optional int32 age = 3 [(wire.until) = \u201c5.0\u201d];\\ optional Date birth_date = 4 [(wire.since) = \u201c5.0\u201d]; Client code should typically target a single version. In this example, versions <= \u201c4.0\u201d will have the age field only and versions >= \u201c5.0\u201d will have the birth_date field only. One can target a single version using only . Service code that supports many clients should support the union of versions of all supported clients. Such code will have both the age and birth_date fields.","title":"Version Matching"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#types","text":"Name Summary Builder [common] class Builder Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#functions","text":"Name Summary isEnumConstantRetainedVersion [common] fun isEnumConstantRetainedVersion (options: Options ): Boolean Returns true unless options specifies a version that is outside of the configured range. isFieldRetainedVersion [common] fun isFieldRetainedVersion (options: Options ): Boolean Returns true unless options specifies a version that is outside of the configured range. isRoot [common] fun isRoot (protoMember: ProtoMember ): Boolean Returns true if protoMember is a root. [common] fun isRoot (type: ProtoType ): Boolean Returns true if type is a root. prunes [common] fun prunes (protoMember: ProtoMember ): Boolean Returns true if protoMember should be pruned. [common] fun prunes (type: ProtoType ): Boolean Returns true if type should be pruned, even if it is a transitive dependency of a root. In that case, the referring member is also pruned. unusedPrunes [common] fun unusedPrunes (): Set < String > unusedRoots [common] fun unusedRoots (): Set < String >","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/#properties","text":"Name Summary isEmpty [common] val isEmpty : Boolean only [common] val only : String ? prunes [common] val prunes : Set < String > roots [common] val roots : Set < String > since [common] val since : String ? until [common] val until : String ?","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-empty/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / isEmpty isEmpty \u00b6 [common]\\ val isEmpty : Boolean","title":"Is empty"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-empty/#isempty","text":"[common]\\ val isEmpty : Boolean","title":"isEmpty"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-enum-constant-retained-version/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / isEnumConstantRetainedVersion isEnumConstantRetainedVersion \u00b6 [common]\\ fun isEnumConstantRetainedVersion (options: Options ): Boolean Returns true unless options specifies a version that is outside of the configured range.","title":"Is enum constant retained version"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-enum-constant-retained-version/#isenumconstantretainedversion","text":"[common]\\ fun isEnumConstantRetainedVersion (options: Options ): Boolean Returns true unless options specifies a version that is outside of the configured range.","title":"isEnumConstantRetainedVersion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-field-retained-version/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / isFieldRetainedVersion isFieldRetainedVersion \u00b6 [common]\\ fun isFieldRetainedVersion (options: Options ): Boolean Returns true unless options specifies a version that is outside of the configured range.","title":"Is field retained version"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-field-retained-version/#isfieldretainedversion","text":"[common]\\ fun isFieldRetainedVersion (options: Options ): Boolean Returns true unless options specifies a version that is outside of the configured range.","title":"isFieldRetainedVersion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-root/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / isRoot isRoot \u00b6 [common]\\ fun isRoot (type: ProtoType ): Boolean Returns true if type is a root. [common]\\ fun isRoot (protoMember: ProtoMember ): Boolean Returns true if protoMember is a root.","title":"Is root"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/is-root/#isroot","text":"[common]\\ fun isRoot (type: ProtoType ): Boolean Returns true if type is a root. [common]\\ fun isRoot (protoMember: ProtoMember ): Boolean Returns true if protoMember is a root.","title":"isRoot"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/only/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / only only \u00b6 [common]\\ val only : String ?","title":"Only"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/only/#only","text":"[common]\\ val only : String ?","title":"only"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/prunes/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / prunes prunes \u00b6 [common]\\ fun prunes (type: ProtoType ): Boolean Returns true if type should be pruned, even if it is a transitive dependency of a root. In that case, the referring member is also pruned. [common]\\ fun prunes (protoMember: ProtoMember ): Boolean Returns true if protoMember should be pruned. [common]\\ val prunes : Set < String >","title":"Prunes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/prunes/#prunes","text":"[common]\\ fun prunes (type: ProtoType ): Boolean Returns true if type should be pruned, even if it is a transitive dependency of a root. In that case, the referring member is also pruned. [common]\\ fun prunes (protoMember: ProtoMember ): Boolean Returns true if protoMember should be pruned. [common]\\ val prunes : Set < String >","title":"prunes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/roots/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / roots roots \u00b6 [common]\\ val roots : Set < String >","title":"Roots"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/roots/#roots","text":"[common]\\ val roots : Set < String >","title":"roots"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/since/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / since since \u00b6 [common]\\ val since : String ?","title":"Since"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/since/#since","text":"[common]\\ val since : String ?","title":"since"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/until/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / until until \u00b6 [common]\\ val until : String ?","title":"Until"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/until/#until","text":"[common]\\ val until : String ?","title":"until"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/unused-prunes/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / unusedPrunes unusedPrunes \u00b6 [common]\\ fun unusedPrunes (): Set < String >","title":"Unused prunes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/unused-prunes/#unusedprunes","text":"[common]\\ fun unusedPrunes (): Set < String >","title":"unusedPrunes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/unused-roots/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / unusedRoots unusedRoots \u00b6 [common]\\ fun unusedRoots (): Set < String >","title":"Unused roots"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/unused-roots/#unusedroots","text":"[common]\\ fun unusedRoots (): Set < String >","title":"unusedRoots"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / Builder Builder \u00b6 [common]\\ class Builder Functions \u00b6 Name Summary addRoot [common] fun addRoot (identifier: String ): PruningRules.Builder fun addRoot (identifiers: Iterable < String >): PruningRules.Builder build [common] fun build (): PruningRules only [common] fun only (only: String ?): PruningRules.Builder The only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained. prune [common] fun prune (identifier: String ): PruningRules.Builder fun prune (identifiers: Iterable < String >): PruningRules.Builder since [common] fun since (since: String ?): PruningRules.Builder The exclusive lower bound of the version range. Fields with until values greater than this are retained. until [common] fun until (until: String ?): PruningRules.Builder The inclusive upper bound of the version range. Fields with since values less than or equal to this are retained.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/#builder","text":"[common]\\ class Builder","title":"Builder"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/#functions","text":"Name Summary addRoot [common] fun addRoot (identifier: String ): PruningRules.Builder fun addRoot (identifiers: Iterable < String >): PruningRules.Builder build [common] fun build (): PruningRules only [common] fun only (only: String ?): PruningRules.Builder The only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained. prune [common] fun prune (identifier: String ): PruningRules.Builder fun prune (identifiers: Iterable < String >): PruningRules.Builder since [common] fun since (since: String ?): PruningRules.Builder The exclusive lower bound of the version range. Fields with until values greater than this are retained. until [common] fun until (until: String ?): PruningRules.Builder The inclusive upper bound of the version range. Fields with since values less than or equal to this are retained.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/-builder/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / Builder / Builder Builder \u00b6 [common]\\ fun Builder ()","title":" builder"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/-builder/#builder","text":"[common]\\ fun Builder ()","title":"Builder"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/add-root/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / Builder / addRoot addRoot \u00b6 [common]\\ fun addRoot (identifier: String ): PruningRules.Builder fun addRoot (identifiers: Iterable < String >): PruningRules.Builder","title":"Add root"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/add-root/#addroot","text":"[common]\\ fun addRoot (identifier: String ): PruningRules.Builder fun addRoot (identifiers: Iterable < String >): PruningRules.Builder","title":"addRoot"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/build/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / Builder / build build \u00b6 [common]\\ fun build (): PruningRules","title":"Build"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/build/#build","text":"[common]\\ fun build (): PruningRules","title":"build"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/only/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / Builder / only only \u00b6 [common]\\ fun only (only: String ?): PruningRules.Builder The only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained.","title":"Only"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/only/#only","text":"[common]\\ fun only (only: String ?): PruningRules.Builder The only version of the version range. Fields with until values greater than this, as well as fields with since values less than or equal to this, are retained.","title":"only"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/prune/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / Builder / prune prune \u00b6 [common]\\ fun prune (identifier: String ): PruningRules.Builder fun prune (identifiers: Iterable < String >): PruningRules.Builder","title":"Prune"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/prune/#prune","text":"[common]\\ fun prune (identifier: String ): PruningRules.Builder fun prune (identifiers: Iterable < String >): PruningRules.Builder","title":"prune"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/since/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / Builder / since since \u00b6 [common]\\ fun since (since: String ?): PruningRules.Builder The exclusive lower bound of the version range. Fields with until values greater than this are retained.","title":"Since"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/since/#since","text":"[common]\\ fun since (since: String ?): PruningRules.Builder The exclusive lower bound of the version range. Fields with until values greater than this are retained.","title":"since"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/until/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / Builder / until until \u00b6 [common]\\ fun until (until: String ?): PruningRules.Builder The inclusive upper bound of the version range. Fields with since values less than or equal to this are retained.","title":"Until"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-builder/until/#until","text":"[common]\\ fun until (until: String ?): PruningRules.Builder The inclusive upper bound of the version range. Fields with since values less than or equal to this are retained.","title":"until"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-companion/","text":"// wire-schema / com.squareup.wire.schema / PruningRules / Companion Companion \u00b6 [common]\\ object Companion","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-pruning-rules/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/","text":"// wire-schema / com.squareup.wire.schema / Reserved Reserved \u00b6 [common]\\ data class Reserved (location: Location , documentation: String , values: List < Any >) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary matchesName [common] fun matchesName (name: String ): Boolean matchesTag [common] fun matchesTag (tag: Int ): Boolean Properties \u00b6 Name Summary documentation [common] val documentation : String location [common] val location : Location values [common] val values : List < Any >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/#reserved","text":"[common]\\ data class Reserved (location: Location , documentation: String , values: List < Any >)","title":"Reserved"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/#functions","text":"Name Summary matchesName [common] fun matchesName (name: String ): Boolean matchesTag [common] fun matchesTag (tag: Int ): Boolean","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/#properties","text":"Name Summary documentation [common] val documentation : String location [common] val location : Location values [common] val values : List < Any >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-reserved/","text":"// wire-schema / com.squareup.wire.schema / Reserved / Reserved Reserved \u00b6 [common]\\ fun Reserved (location: Location , documentation: String , values: List < Any >)","title":" reserved"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-reserved/#reserved","text":"[common]\\ fun Reserved (location: Location , documentation: String , values: List < Any >)","title":"Reserved"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/documentation/","text":"// wire-schema / com.squareup.wire.schema / Reserved / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/location/","text":"// wire-schema / com.squareup.wire.schema / Reserved / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/matches-name/","text":"// wire-schema / com.squareup.wire.schema / Reserved / matchesName matchesName \u00b6 [common]\\ fun matchesName (name: String ): Boolean","title":"Matches name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/matches-name/#matchesname","text":"[common]\\ fun matchesName (name: String ): Boolean","title":"matchesName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/matches-tag/","text":"// wire-schema / com.squareup.wire.schema / Reserved / matchesTag matchesTag \u00b6 [common]\\ fun matchesTag (tag: Int ): Boolean","title":"Matches tag"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/matches-tag/#matchestag","text":"[common]\\ fun matchesTag (tag: Int ): Boolean","title":"matchesTag"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/values/","text":"// wire-schema / com.squareup.wire.schema / Reserved / values values \u00b6 [common]\\ val values : List < Any >","title":"Values"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/values/#values","text":"[common]\\ val values : List < Any >","title":"values"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/","text":"// wire-schema / com.squareup.wire.schema / Reserved / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary fromElements [common] @ JvmStatic fun fromElements (elements: List < ReservedElement >): List < Reserved > toElements [common] @ JvmStatic fun toElements (reserveds: List < Reserved >): List < ReservedElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/#functions","text":"Name Summary fromElements [common] @ JvmStatic fun fromElements (elements: List < ReservedElement >): List < Reserved > toElements [common] @ JvmStatic fun toElements (reserveds: List < Reserved >): List < ReservedElement >","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/from-elements/","text":"// wire-schema / com.squareup.wire.schema / Reserved / Companion / fromElements fromElements \u00b6 [common]\\ @ JvmStatic fun fromElements (elements: List < ReservedElement >): List < Reserved >","title":"From elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/from-elements/#fromelements","text":"[common]\\ @ JvmStatic fun fromElements (elements: List < ReservedElement >): List < Reserved >","title":"fromElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/to-elements/","text":"// wire-schema / com.squareup.wire.schema / Reserved / Companion / toElements toElements \u00b6 [common]\\ @ JvmStatic fun toElements (reserveds: List < Reserved >): List < ReservedElement >","title":"To elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-reserved/-companion/to-elements/#toelements","text":"[common]\\ @ JvmStatic fun toElements (reserveds: List < Reserved >): List < ReservedElement >","title":"toElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/","text":"// wire-schema / com.squareup.wire.schema / Rpc Rpc \u00b6 [common]\\ data class Rpc (location: Location , name: String , documentation: String , requestTypeElement: String , responseTypeElement: String , requestStreaming: Boolean , responseStreaming: Boolean , options: Options ) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary link [common] fun link (linker: Linker ) linkOptions [common] fun linkOptions (linker: Linker , validate: Boolean ) retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet ): Rpc ? validate [common] fun validate (linker: Linker ) Properties \u00b6 Name Summary documentation [common] val documentation : String location [common] val location : Location name [common] val name : String options [common] val options : Options requestStreaming [common] val requestStreaming : Boolean requestType [common] var requestType : ProtoType ? = null responseStreaming [common] val responseStreaming : Boolean responseType [common] var responseType : ProtoType ? = null","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/#rpc","text":"[common]\\ data class Rpc (location: Location , name: String , documentation: String , requestTypeElement: String , responseTypeElement: String , requestStreaming: Boolean , responseStreaming: Boolean , options: Options )","title":"Rpc"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/#functions","text":"Name Summary link [common] fun link (linker: Linker ) linkOptions [common] fun linkOptions (linker: Linker , validate: Boolean ) retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet ): Rpc ? validate [common] fun validate (linker: Linker )","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/#properties","text":"Name Summary documentation [common] val documentation : String location [common] val location : Location name [common] val name : String options [common] val options : Options requestStreaming [common] val requestStreaming : Boolean requestType [common] var requestType : ProtoType ? = null responseStreaming [common] val responseStreaming : Boolean responseType [common] var responseType : ProtoType ? = null","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-rpc/","text":"// wire-schema / com.squareup.wire.schema / Rpc / Rpc Rpc \u00b6 [common]\\ fun Rpc (location: Location , name: String , documentation: String , requestTypeElement: String , responseTypeElement: String , requestStreaming: Boolean , responseStreaming: Boolean , options: Options )","title":" rpc"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-rpc/#rpc","text":"[common]\\ fun Rpc (location: Location , name: String , documentation: String , requestTypeElement: String , responseTypeElement: String , requestStreaming: Boolean , responseStreaming: Boolean , options: Options )","title":"Rpc"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/documentation/","text":"// wire-schema / com.squareup.wire.schema / Rpc / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/link-options/","text":"// wire-schema / com.squareup.wire.schema / Rpc / linkOptions linkOptions \u00b6 [common]\\ fun linkOptions (linker: Linker , validate: Boolean )","title":"Link options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/link-options/#linkoptions","text":"[common]\\ fun linkOptions (linker: Linker , validate: Boolean )","title":"linkOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/link/","text":"// wire-schema / com.squareup.wire.schema / Rpc / link link \u00b6 [common]\\ fun link (linker: Linker )","title":"Link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/link/#link","text":"[common]\\ fun link (linker: Linker )","title":"link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/location/","text":"// wire-schema / com.squareup.wire.schema / Rpc / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/name/","text":"// wire-schema / com.squareup.wire.schema / Rpc / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/options/","text":"// wire-schema / com.squareup.wire.schema / Rpc / options options \u00b6 [common]\\ val options : Options","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/options/#options","text":"[common]\\ val options : Options","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/request-streaming/","text":"// wire-schema / com.squareup.wire.schema / Rpc / requestStreaming requestStreaming \u00b6 [common]\\ val requestStreaming : Boolean","title":"Request streaming"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/request-streaming/#requeststreaming","text":"[common]\\ val requestStreaming : Boolean","title":"requestStreaming"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/request-type/","text":"// wire-schema / com.squareup.wire.schema / Rpc / requestType requestType \u00b6 [common]\\ var requestType : ProtoType ? = null","title":"Request type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/request-type/#requesttype","text":"[common]\\ var requestType : ProtoType ? = null","title":"requestType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/response-streaming/","text":"// wire-schema / com.squareup.wire.schema / Rpc / responseStreaming responseStreaming \u00b6 [common]\\ val responseStreaming : Boolean","title":"Response streaming"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/response-streaming/#responsestreaming","text":"[common]\\ val responseStreaming : Boolean","title":"responseStreaming"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/response-type/","text":"// wire-schema / com.squareup.wire.schema / Rpc / responseType responseType \u00b6 [common]\\ var responseType : ProtoType ? = null","title":"Response type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/response-type/#responsetype","text":"[common]\\ var responseType : ProtoType ? = null","title":"responseType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/retain-all/","text":"// wire-schema / com.squareup.wire.schema / Rpc / retainAll retainAll \u00b6 [common]\\ fun retainAll (schema: Schema , markSet: MarkSet ): Rpc ?","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/retain-all/#retainall","text":"[common]\\ fun retainAll (schema: Schema , markSet: MarkSet ): Rpc ?","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/validate/","text":"// wire-schema / com.squareup.wire.schema / Rpc / validate validate \u00b6 [common]\\ fun validate (linker: Linker )","title":"Validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/validate/#validate","text":"[common]\\ fun validate (linker: Linker )","title":"validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/","text":"// wire-schema / com.squareup.wire.schema / Rpc / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary fromElements [common] @ JvmStatic fun fromElements (elements: List < RpcElement >): List < Rpc > toElements [common] @ JvmStatic fun toElements (rpcs: List < Rpc >): List < RpcElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/#functions","text":"Name Summary fromElements [common] @ JvmStatic fun fromElements (elements: List < RpcElement >): List < Rpc > toElements [common] @ JvmStatic fun toElements (rpcs: List < Rpc >): List < RpcElement >","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/from-elements/","text":"// wire-schema / com.squareup.wire.schema / Rpc / Companion / fromElements fromElements \u00b6 [common]\\ @ JvmStatic fun fromElements (elements: List < RpcElement >): List < Rpc >","title":"From elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/from-elements/#fromelements","text":"[common]\\ @ JvmStatic fun fromElements (elements: List < RpcElement >): List < Rpc >","title":"fromElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/to-elements/","text":"// wire-schema / com.squareup.wire.schema / Rpc / Companion / toElements toElements \u00b6 [common]\\ @ JvmStatic fun toElements (rpcs: List < Rpc >): List < RpcElement >","title":"To elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-rpc/-companion/to-elements/#toelements","text":"[common]\\ @ JvmStatic fun toElements (rpcs: List < Rpc >): List < RpcElement >","title":"toElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/","text":"// wire-schema / com.squareup.wire.schema / Schema Schema \u00b6 [common]\\ class Schema A collection of .proto files that describe a set of messages. A schema is linked : each field\u2019s type name is resolved to the corresponding type definition. Use SchemaLoader to load a schema from source files. Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary getField [common] fun getField (protoMember: ProtoMember ): Field ? Returns the field for protoMember , or null if this schema defines no such field. [common] fun getField (protoType: ProtoType , memberName: String ): Field ? Returns the field for protoType and memberName , or null if this schema defines no such field. [common] fun getField (typeName: String , memberName: String ): Field ? Returns the field with the fully qualified typeName and memberName , or null if this schema defines no such field. getService [common] fun getService (protoType: ProtoType ): Service ? Returns the service for protoType , or null if this schema defines no such service. [common] fun getService (name: String ): Service ? Returns the service with the fully qualified name name , or null if this schema defines no such service. getType [common] fun getType (protoType: ProtoType ): Type ? Returns the type for protoType , or null if this schema defines no such type. [common] fun getType (name: String ): Type ? Returns the type with the fully qualified name name , or null if this schema defines no such type. isExtensionField [common] fun isExtensionField (protoMember: ProtoMember ): Boolean protoAdapter [common] fun protoAdapter (typeName: String , includeUnknown: Boolean ): ProtoAdapter< Any > Returns a wire adapter for the message or enum type named typeName . The returned type adapter doesn\u2019t have model classes to encode and decode from, so instead it uses scalar types ( String , ByteString, Integer, etc.), maps , and lists . It can both encode and decode these objects. Map keys are field names. protoFile [common] fun protoFile (protoType: ProtoType ): ProtoFile ? Returns the proto file containing this protoType , or null if there isn\u2019t such file. [common] fun protoFile (path: String ): ProtoFile ? fun protoFile (path: Path): ProtoFile ? Returns the proto file at path , or null if this schema has no such file. prune [common] fun prune (pruningRules: PruningRules ): Schema Returns a copy of this schema that retains only the types and services selected by pruningRules , plus their transitive dependencies. Properties \u00b6 Name Summary protoFiles [common] val protoFiles : List < ProtoFile > types [common] val types : Set < ProtoType > Extensions \u00b6 Name Summary withStubs [common] fun Schema . withStubs (typesToStub: Set < ProtoType >): Schema Replace types in this schema which are present in typesToStub with empty shells that have no outward references. This has to be done in this module so that we can access the internal constructor to avoid re-linking.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/#schema","text":"[common]\\ class Schema A collection of .proto files that describe a set of messages. A schema is linked : each field\u2019s type name is resolved to the corresponding type definition. Use SchemaLoader to load a schema from source files.","title":"Schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/#functions","text":"Name Summary getField [common] fun getField (protoMember: ProtoMember ): Field ? Returns the field for protoMember , or null if this schema defines no such field. [common] fun getField (protoType: ProtoType , memberName: String ): Field ? Returns the field for protoType and memberName , or null if this schema defines no such field. [common] fun getField (typeName: String , memberName: String ): Field ? Returns the field with the fully qualified typeName and memberName , or null if this schema defines no such field. getService [common] fun getService (protoType: ProtoType ): Service ? Returns the service for protoType , or null if this schema defines no such service. [common] fun getService (name: String ): Service ? Returns the service with the fully qualified name name , or null if this schema defines no such service. getType [common] fun getType (protoType: ProtoType ): Type ? Returns the type for protoType , or null if this schema defines no such type. [common] fun getType (name: String ): Type ? Returns the type with the fully qualified name name , or null if this schema defines no such type. isExtensionField [common] fun isExtensionField (protoMember: ProtoMember ): Boolean protoAdapter [common] fun protoAdapter (typeName: String , includeUnknown: Boolean ): ProtoAdapter< Any > Returns a wire adapter for the message or enum type named typeName . The returned type adapter doesn\u2019t have model classes to encode and decode from, so instead it uses scalar types ( String , ByteString, Integer, etc.), maps , and lists . It can both encode and decode these objects. Map keys are field names. protoFile [common] fun protoFile (protoType: ProtoType ): ProtoFile ? Returns the proto file containing this protoType , or null if there isn\u2019t such file. [common] fun protoFile (path: String ): ProtoFile ? fun protoFile (path: Path): ProtoFile ? Returns the proto file at path , or null if this schema has no such file. prune [common] fun prune (pruningRules: PruningRules ): Schema Returns a copy of this schema that retains only the types and services selected by pruningRules , plus their transitive dependencies.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/#properties","text":"Name Summary protoFiles [common] val protoFiles : List < ProtoFile > types [common] val types : Set < ProtoType >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/#extensions","text":"Name Summary withStubs [common] fun Schema . withStubs (typesToStub: Set < ProtoType >): Schema Replace types in this schema which are present in typesToStub with empty shells that have no outward references. This has to be done in this module so that we can access the internal constructor to avoid re-linking.","title":"Extensions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-field/","text":"// wire-schema / com.squareup.wire.schema / Schema / getField getField \u00b6 [common]\\ fun getField (protoMember: ProtoMember ): Field ? Returns the field for protoMember , or null if this schema defines no such field. [common]\\ fun getField (typeName: String , memberName: String ): Field ? Returns the field with the fully qualified typeName and memberName , or null if this schema defines no such field. [common]\\ fun getField (protoType: ProtoType , memberName: String ): Field ? Returns the field for protoType and memberName , or null if this schema defines no such field.","title":"Get field"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-field/#getfield","text":"[common]\\ fun getField (protoMember: ProtoMember ): Field ? Returns the field for protoMember , or null if this schema defines no such field. [common]\\ fun getField (typeName: String , memberName: String ): Field ? Returns the field with the fully qualified typeName and memberName , or null if this schema defines no such field. [common]\\ fun getField (protoType: ProtoType , memberName: String ): Field ? Returns the field for protoType and memberName , or null if this schema defines no such field.","title":"getField"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-service/","text":"// wire-schema / com.squareup.wire.schema / Schema / getService getService \u00b6 [common]\\ fun getService (name: String ): Service ? Returns the service with the fully qualified name name , or null if this schema defines no such service. [common]\\ fun getService (protoType: ProtoType ): Service ? Returns the service for protoType , or null if this schema defines no such service.","title":"Get service"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-service/#getservice","text":"[common]\\ fun getService (name: String ): Service ? Returns the service with the fully qualified name name , or null if this schema defines no such service. [common]\\ fun getService (protoType: ProtoType ): Service ? Returns the service for protoType , or null if this schema defines no such service.","title":"getService"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-type/","text":"// wire-schema / com.squareup.wire.schema / Schema / getType getType \u00b6 [common]\\ fun getType (name: String ): Type ? Returns the type with the fully qualified name name , or null if this schema defines no such type. [common]\\ fun getType (protoType: ProtoType ): Type ? Returns the type for protoType , or null if this schema defines no such type.","title":"Get type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/get-type/#gettype","text":"[common]\\ fun getType (name: String ): Type ? Returns the type with the fully qualified name name , or null if this schema defines no such type. [common]\\ fun getType (protoType: ProtoType ): Type ? Returns the type for protoType , or null if this schema defines no such type.","title":"getType"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/is-extension-field/","text":"// wire-schema / com.squareup.wire.schema / Schema / isExtensionField isExtensionField \u00b6 [common]\\ fun isExtensionField (protoMember: ProtoMember ): Boolean","title":"Is extension field"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/is-extension-field/#isextensionfield","text":"[common]\\ fun isExtensionField (protoMember: ProtoMember ): Boolean","title":"isExtensionField"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-adapter/","text":"// wire-schema / com.squareup.wire.schema / Schema / protoAdapter protoAdapter \u00b6 [common]\\ fun protoAdapter (typeName: String , includeUnknown: Boolean ): ProtoAdapter< Any > Returns a wire adapter for the message or enum type named typeName . The returned type adapter doesn\u2019t have model classes to encode and decode from, so instead it uses scalar types ( String , ByteString, Integer, etc.), maps , and lists . It can both encode and decode these objects. Map keys are field names. Parameters \u00b6 common includeUnknown true to include values for unknown tags in the returned model. Map keys for such values is the unknown value\u2019s tag name as a string. Unknown values are decoded to Long , Long , Integer, or ByteString for VARINT, FIXED64, FIXED32, or LENGTH_DELIMITED, respectively.","title":"Proto adapter"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-adapter/#protoadapter","text":"[common]\\ fun protoAdapter (typeName: String , includeUnknown: Boolean ): ProtoAdapter< Any > Returns a wire adapter for the message or enum type named typeName . The returned type adapter doesn\u2019t have model classes to encode and decode from, so instead it uses scalar types ( String , ByteString, Integer, etc.), maps , and lists . It can both encode and decode these objects. Map keys are field names.","title":"protoAdapter"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-adapter/#parameters","text":"common includeUnknown true to include values for unknown tags in the returned model. Map keys for such values is the unknown value\u2019s tag name as a string. Unknown values are decoded to Long , Long , Integer, or ByteString for VARINT, FIXED64, FIXED32, or LENGTH_DELIMITED, respectively.","title":"Parameters"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-file/","text":"// wire-schema / com.squareup.wire.schema / Schema / protoFile protoFile \u00b6 [common]\\ fun protoFile (path: String ): ProtoFile ? fun protoFile (path: Path): ProtoFile ? Returns the proto file at path , or null if this schema has no such file. [common]\\ fun protoFile (protoType: ProtoType ): ProtoFile ? Returns the proto file containing this protoType , or null if there isn\u2019t such file.","title":"Proto file"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-file/#protofile","text":"[common]\\ fun protoFile (path: String ): ProtoFile ? fun protoFile (path: Path): ProtoFile ? Returns the proto file at path , or null if this schema has no such file. [common]\\ fun protoFile (protoType: ProtoType ): ProtoFile ? Returns the proto file containing this protoType , or null if there isn\u2019t such file.","title":"protoFile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-files/","text":"// wire-schema / com.squareup.wire.schema / Schema / protoFiles protoFiles \u00b6 [common]\\ val protoFiles : List < ProtoFile >","title":"Proto files"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/proto-files/#protofiles","text":"[common]\\ val protoFiles : List < ProtoFile >","title":"protoFiles"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/prune/","text":"// wire-schema / com.squareup.wire.schema / Schema / prune prune \u00b6 [common]\\ fun prune (pruningRules: PruningRules ): Schema Returns a copy of this schema that retains only the types and services selected by pruningRules , plus their transitive dependencies.","title":"Prune"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/prune/#prune","text":"[common]\\ fun prune (pruningRules: PruningRules ): Schema Returns a copy of this schema that retains only the types and services selected by pruningRules , plus their transitive dependencies.","title":"prune"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/types/","text":"// wire-schema / com.squareup.wire.schema / Schema / types types \u00b6 [common]\\ val types : Set < ProtoType >","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/types/#types","text":"[common]\\ val types : Set < ProtoType >","title":"types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/-companion/","text":"// wire-schema / com.squareup.wire.schema / Schema / Companion Companion \u00b6 [common]\\ object Companion","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-exception/","text":"// wire-schema / com.squareup.wire.schema / SchemaException SchemaException \u00b6 [common]\\ class SchemaException (errors: List < String >) : RuntimeException Properties \u00b6 Name Summary cause [common] open val cause : Throwable ? message [common] open val message : String ?","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-exception/#schemaexception","text":"[common]\\ class SchemaException (errors: List < String >) : RuntimeException","title":"SchemaException"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-exception/#properties","text":"Name Summary cause [common] open val cause : Throwable ? message [common] open val message : String ?","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-exception/-schema-exception/","text":"// wire-schema / com.squareup.wire.schema / SchemaException / SchemaException SchemaException \u00b6 [common]\\ fun SchemaException (errors: List < String >)","title":" schema exception"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-exception/-schema-exception/#schemaexception","text":"[common]\\ fun SchemaException (errors: List < String >)","title":"SchemaException"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler SchemaHandler \u00b6 [common]\\ abstract class SchemaHandler A SchemaHandler s Schema ! Constructors \u00b6 SchemaHandler [common] fun SchemaHandler () Types \u00b6 Name Summary Context [common] data class Context (fileSystem: FileSystem, outDirectory: Path, logger: WireLogger , errorCollector: ErrorCollector , emittingRules: EmittingRules , claimedDefinitions: ClaimedDefinitions ?, claimedPaths: ClaimedPaths , module: SchemaHandler.Module ?, sourcePathPaths: Set < String >?, profileLoader: ProfileLoader ?) A Context holds the information necessary for a SchemaHandler to do its job. It contains both helping objects such as logger , and constraining objects such as emittingRules . Factory [common] interface Factory : Serializable Implementations of this interface must have a no-arguments public constructor. Module [common] data class Module (name: String , types: Set < ProtoType >, upstreamTypes: Map < ProtoType , String >) A Module dictates how the loaded types are to be partitioned and handled. Functions \u00b6 Name Summary handle [common] open fun handle (schema: Schema , context: SchemaHandler.Context ) This will handle all ProtoFile s which are part of the sourcePath. If a Module is set in the context , it will handle only Type s and Service s the module defines respecting the context rules. Override this method if you have specific needs the default implementation doesn\u2019t address. [common] abstract fun handle (service: Service , context: SchemaHandler.Context ): List <Path> Returns the Paths of the files which service will have been generated into. Null if nothing has been generated. [common] abstract fun handle (type: Type , context: SchemaHandler.Context ): Path? Returns the Path of the file which type will have been generated into. Null if nothing has been generated. [common] abstract fun handle (extend: Extend , field: Field , context: SchemaHandler.Context ): Path? Returns the Path of the files which field will have been generated into. Null if nothing has been generated.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/#schemahandler","text":"[common]\\ abstract class SchemaHandler A SchemaHandler s Schema !","title":"SchemaHandler"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/#constructors","text":"SchemaHandler [common] fun SchemaHandler ()","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/#types","text":"Name Summary Context [common] data class Context (fileSystem: FileSystem, outDirectory: Path, logger: WireLogger , errorCollector: ErrorCollector , emittingRules: EmittingRules , claimedDefinitions: ClaimedDefinitions ?, claimedPaths: ClaimedPaths , module: SchemaHandler.Module ?, sourcePathPaths: Set < String >?, profileLoader: ProfileLoader ?) A Context holds the information necessary for a SchemaHandler to do its job. It contains both helping objects such as logger , and constraining objects such as emittingRules . Factory [common] interface Factory : Serializable Implementations of this interface must have a no-arguments public constructor. Module [common] data class Module (name: String , types: Set < ProtoType >, upstreamTypes: Map < ProtoType , String >) A Module dictates how the loaded types are to be partitioned and handled.","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/#functions","text":"Name Summary handle [common] open fun handle (schema: Schema , context: SchemaHandler.Context ) This will handle all ProtoFile s which are part of the sourcePath. If a Module is set in the context , it will handle only Type s and Service s the module defines respecting the context rules. Override this method if you have specific needs the default implementation doesn\u2019t address. [common] abstract fun handle (service: Service , context: SchemaHandler.Context ): List <Path> Returns the Paths of the files which service will have been generated into. Null if nothing has been generated. [common] abstract fun handle (type: Type , context: SchemaHandler.Context ): Path? Returns the Path of the file which type will have been generated into. Null if nothing has been generated. [common] abstract fun handle (extend: Extend , field: Field , context: SchemaHandler.Context ): Path? Returns the Path of the files which field will have been generated into. Null if nothing has been generated.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-schema-handler/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / SchemaHandler SchemaHandler \u00b6 [common]\\ fun SchemaHandler ()","title":" schema handler"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-schema-handler/#schemahandler","text":"[common]\\ fun SchemaHandler ()","title":"SchemaHandler"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/handle/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / handle handle \u00b6 [common]\\ open fun handle (schema: Schema , context: SchemaHandler.Context ) This will handle all ProtoFile s which are part of the sourcePath. If a Module is set in the context , it will handle only Type s and Service s the module defines respecting the context rules. Override this method if you have specific needs the default implementation doesn\u2019t address. [common]\\ abstract fun handle (type: Type , context: SchemaHandler.Context ): Path? Returns the Path of the file which type will have been generated into. Null if nothing has been generated. [common]\\ abstract fun handle (service: Service , context: SchemaHandler.Context ): List <Path> Returns the Paths of the files which service will have been generated into. Null if nothing has been generated. [common]\\ abstract fun handle (extend: Extend , field: Field , context: SchemaHandler.Context ): Path? Returns the Path of the files which field will have been generated into. Null if nothing has been generated.","title":"Handle"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/handle/#handle","text":"[common]\\ open fun handle (schema: Schema , context: SchemaHandler.Context ) This will handle all ProtoFile s which are part of the sourcePath. If a Module is set in the context , it will handle only Type s and Service s the module defines respecting the context rules. Override this method if you have specific needs the default implementation doesn\u2019t address. [common]\\ abstract fun handle (type: Type , context: SchemaHandler.Context ): Path? Returns the Path of the file which type will have been generated into. Null if nothing has been generated. [common]\\ abstract fun handle (service: Service , context: SchemaHandler.Context ): List <Path> Returns the Paths of the files which service will have been generated into. Null if nothing has been generated. [common]\\ abstract fun handle (extend: Extend , field: Field , context: SchemaHandler.Context ): Path? Returns the Path of the files which field will have been generated into. Null if nothing has been generated.","title":"handle"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context Context \u00b6 [common]\\ data class Context (fileSystem: FileSystem, outDirectory: Path, logger: WireLogger , errorCollector: ErrorCollector , emittingRules: EmittingRules , claimedDefinitions: ClaimedDefinitions ?, claimedPaths: ClaimedPaths , module: SchemaHandler.Module ?, sourcePathPaths: Set < String >?, profileLoader: ProfileLoader ?) A Context holds the information necessary for a SchemaHandler to do its job. It contains both helping objects such as logger , and constraining objects such as emittingRules . Constructors \u00b6 Context [common] fun Context (fileSystem: FileSystem, outDirectory: Path, logger: WireLogger , errorCollector: ErrorCollector = ErrorCollector(), emittingRules: EmittingRules = EmittingRules(), claimedDefinitions: ClaimedDefinitions ? = null, claimedPaths: ClaimedPaths = ClaimedPaths(), module: SchemaHandler.Module ? = null, sourcePathPaths: Set < String >? = null, profileLoader: ProfileLoader ? = null) Functions \u00b6 Name Summary inSourcePath [common] fun inSourcePath (location: Location ): Boolean True if this location ia part of a sourcePath root. [common] fun inSourcePath (protoFile: ProtoFile ): Boolean True if this protoFile ia part of a sourcePath root. Properties \u00b6 Name Summary claimedDefinitions [common] val claimedDefinitions : ClaimedDefinitions ? = null If set, the SchemaHandler is to handle only types which are not claimed yet, and claim itself types it has handled. If null, the SchemaHandler is to handle all types. claimedPaths [common] val claimedPaths : ClaimedPaths If the SchemaHandler writes files, it is to claim Paths of files it created. emittingRules [common] val emittingRules : EmittingRules Set of rules letting the SchemaHandler know what ProtoType to include or exclude in its logic. This object represents the includes and excludes values which were associated with its Target . errorCollector [common] val errorCollector : ErrorCollector Object to be used by the SchemaHandler to store errors. After all SchemaHandler s are finished, Wire will throw an exception if any error are present inside the collector. fileSystem [common] val fileSystem : FileSystem To be used by the SchemaHandler for reading/writing operations on disk. logger [common] val logger : WireLogger Event-listener like logger with which SchemaHandler can notify handled artifacts. module [common] val module : SchemaHandler.Module ? = null A Module dictates how the loaded types are partitioned and how they are to be handled. If null, there are no partition and all types are to be handled. outDirectory [common] val outDirectory : Path Location on fileSystem where the SchemaHandler is to write files, if it needs to. profileLoader [common] val profileLoader : ProfileLoader ? = null To be used by the SchemaHandler if it supports Profile files. Please note that this API is unstable and can change at anytime. sourcePathPaths [common] val sourcePathPaths : Set < String >? = null Contains Location.path values of all sourcePath roots. The SchemaHandler is to ignore ProtoFile s not part of this set; this verification can be executed via the inSourcePath method.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/#context","text":"[common]\\ data class Context (fileSystem: FileSystem, outDirectory: Path, logger: WireLogger , errorCollector: ErrorCollector , emittingRules: EmittingRules , claimedDefinitions: ClaimedDefinitions ?, claimedPaths: ClaimedPaths , module: SchemaHandler.Module ?, sourcePathPaths: Set < String >?, profileLoader: ProfileLoader ?) A Context holds the information necessary for a SchemaHandler to do its job. It contains both helping objects such as logger , and constraining objects such as emittingRules .","title":"Context"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/#constructors","text":"Context [common] fun Context (fileSystem: FileSystem, outDirectory: Path, logger: WireLogger , errorCollector: ErrorCollector = ErrorCollector(), emittingRules: EmittingRules = EmittingRules(), claimedDefinitions: ClaimedDefinitions ? = null, claimedPaths: ClaimedPaths = ClaimedPaths(), module: SchemaHandler.Module ? = null, sourcePathPaths: Set < String >? = null, profileLoader: ProfileLoader ? = null)","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/#functions","text":"Name Summary inSourcePath [common] fun inSourcePath (location: Location ): Boolean True if this location ia part of a sourcePath root. [common] fun inSourcePath (protoFile: ProtoFile ): Boolean True if this protoFile ia part of a sourcePath root.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/#properties","text":"Name Summary claimedDefinitions [common] val claimedDefinitions : ClaimedDefinitions ? = null If set, the SchemaHandler is to handle only types which are not claimed yet, and claim itself types it has handled. If null, the SchemaHandler is to handle all types. claimedPaths [common] val claimedPaths : ClaimedPaths If the SchemaHandler writes files, it is to claim Paths of files it created. emittingRules [common] val emittingRules : EmittingRules Set of rules letting the SchemaHandler know what ProtoType to include or exclude in its logic. This object represents the includes and excludes values which were associated with its Target . errorCollector [common] val errorCollector : ErrorCollector Object to be used by the SchemaHandler to store errors. After all SchemaHandler s are finished, Wire will throw an exception if any error are present inside the collector. fileSystem [common] val fileSystem : FileSystem To be used by the SchemaHandler for reading/writing operations on disk. logger [common] val logger : WireLogger Event-listener like logger with which SchemaHandler can notify handled artifacts. module [common] val module : SchemaHandler.Module ? = null A Module dictates how the loaded types are partitioned and how they are to be handled. If null, there are no partition and all types are to be handled. outDirectory [common] val outDirectory : Path Location on fileSystem where the SchemaHandler is to write files, if it needs to. profileLoader [common] val profileLoader : ProfileLoader ? = null To be used by the SchemaHandler if it supports Profile files. Please note that this API is unstable and can change at anytime. sourcePathPaths [common] val sourcePathPaths : Set < String >? = null Contains Location.path values of all sourcePath roots. The SchemaHandler is to ignore ProtoFile s not part of this set; this verification can be executed via the inSourcePath method.","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/-context/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / Context Context \u00b6 [common]\\ fun Context (fileSystem: FileSystem, outDirectory: Path, logger: WireLogger , errorCollector: ErrorCollector = ErrorCollector(), emittingRules: EmittingRules = EmittingRules(), claimedDefinitions: ClaimedDefinitions ? = null, claimedPaths: ClaimedPaths = ClaimedPaths(), module: SchemaHandler.Module ? = null, sourcePathPaths: Set < String >? = null, profileLoader: ProfileLoader ? = null)","title":" context"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/-context/#context","text":"[common]\\ fun Context (fileSystem: FileSystem, outDirectory: Path, logger: WireLogger , errorCollector: ErrorCollector = ErrorCollector(), emittingRules: EmittingRules = EmittingRules(), claimedDefinitions: ClaimedDefinitions ? = null, claimedPaths: ClaimedPaths = ClaimedPaths(), module: SchemaHandler.Module ? = null, sourcePathPaths: Set < String >? = null, profileLoader: ProfileLoader ? = null)","title":"Context"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/claimed-definitions/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / claimedDefinitions claimedDefinitions \u00b6 [common]\\ val claimedDefinitions : ClaimedDefinitions ? = null If set, the SchemaHandler is to handle only types which are not claimed yet, and claim itself types it has handled. If null, the SchemaHandler is to handle all types.","title":"Claimed definitions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/claimed-definitions/#claimeddefinitions","text":"[common]\\ val claimedDefinitions : ClaimedDefinitions ? = null If set, the SchemaHandler is to handle only types which are not claimed yet, and claim itself types it has handled. If null, the SchemaHandler is to handle all types.","title":"claimedDefinitions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/claimed-paths/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / claimedPaths claimedPaths \u00b6 [common]\\ val claimedPaths : ClaimedPaths If the SchemaHandler writes files, it is to claim Paths of files it created.","title":"Claimed paths"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/claimed-paths/#claimedpaths","text":"[common]\\ val claimedPaths : ClaimedPaths If the SchemaHandler writes files, it is to claim Paths of files it created.","title":"claimedPaths"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/emitting-rules/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / emittingRules emittingRules \u00b6 [common]\\ val emittingRules : EmittingRules Set of rules letting the SchemaHandler know what ProtoType to include or exclude in its logic. This object represents the includes and excludes values which were associated with its Target .","title":"Emitting rules"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/emitting-rules/#emittingrules","text":"[common]\\ val emittingRules : EmittingRules Set of rules letting the SchemaHandler know what ProtoType to include or exclude in its logic. This object represents the includes and excludes values which were associated with its Target .","title":"emittingRules"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/error-collector/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / errorCollector errorCollector \u00b6 [common]\\ val errorCollector : ErrorCollector Object to be used by the SchemaHandler to store errors. After all SchemaHandler s are finished, Wire will throw an exception if any error are present inside the collector.","title":"Error collector"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/error-collector/#errorcollector","text":"[common]\\ val errorCollector : ErrorCollector Object to be used by the SchemaHandler to store errors. After all SchemaHandler s are finished, Wire will throw an exception if any error are present inside the collector.","title":"errorCollector"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/file-system/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / fileSystem fileSystem \u00b6 [common]\\ val fileSystem : FileSystem To be used by the SchemaHandler for reading/writing operations on disk.","title":"File system"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/file-system/#filesystem","text":"[common]\\ val fileSystem : FileSystem To be used by the SchemaHandler for reading/writing operations on disk.","title":"fileSystem"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/in-source-path/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / inSourcePath inSourcePath \u00b6 [common]\\ fun inSourcePath (protoFile: ProtoFile ): Boolean True if this protoFile ia part of a sourcePath root. [common]\\ fun inSourcePath (location: Location ): Boolean True if this location ia part of a sourcePath root.","title":"In source path"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/in-source-path/#insourcepath","text":"[common]\\ fun inSourcePath (protoFile: ProtoFile ): Boolean True if this protoFile ia part of a sourcePath root. [common]\\ fun inSourcePath (location: Location ): Boolean True if this location ia part of a sourcePath root.","title":"inSourcePath"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/logger/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / logger logger \u00b6 [common]\\ val logger : WireLogger Event-listener like logger with which SchemaHandler can notify handled artifacts.","title":"Logger"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/logger/#logger","text":"[common]\\ val logger : WireLogger Event-listener like logger with which SchemaHandler can notify handled artifacts.","title":"logger"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/module/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / module module \u00b6 [common]\\ val module : SchemaHandler.Module ? = null A Module dictates how the loaded types are partitioned and how they are to be handled. If null, there are no partition and all types are to be handled.","title":"Module"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/module/#module","text":"[common]\\ val module : SchemaHandler.Module ? = null A Module dictates how the loaded types are partitioned and how they are to be handled. If null, there are no partition and all types are to be handled.","title":"module"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/out-directory/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / outDirectory outDirectory \u00b6 [common]\\ val outDirectory : Path Location on fileSystem where the SchemaHandler is to write files, if it needs to.","title":"Out directory"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/out-directory/#outdirectory","text":"[common]\\ val outDirectory : Path Location on fileSystem where the SchemaHandler is to write files, if it needs to.","title":"outDirectory"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/profile-loader/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / profileLoader profileLoader \u00b6 [common]\\ val profileLoader : ProfileLoader ? = null To be used by the SchemaHandler if it supports Profile files. Please note that this API is unstable and can change at anytime.","title":"Profile loader"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/profile-loader/#profileloader","text":"[common]\\ val profileLoader : ProfileLoader ? = null To be used by the SchemaHandler if it supports Profile files. Please note that this API is unstable and can change at anytime.","title":"profileLoader"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/source-path-paths/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Context / sourcePathPaths sourcePathPaths \u00b6 [common]\\ val sourcePathPaths : Set < String >? = null Contains Location.path values of all sourcePath roots. The SchemaHandler is to ignore ProtoFile s not part of this set; this verification can be executed via the inSourcePath method.","title":"Source path paths"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-context/source-path-paths/#sourcepathpaths","text":"[common]\\ val sourcePathPaths : Set < String >? = null Contains Location.path values of all sourcePath roots. The SchemaHandler is to ignore ProtoFile s not part of this set; this verification can be executed via the inSourcePath method.","title":"sourcePathPaths"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-factory/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Factory Factory \u00b6 [common]\\ interface Factory : Serializable Implementations of this interface must have a no-arguments public constructor. Functions \u00b6 Name Summary create [common] abstract fun create (): SchemaHandler","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-factory/#factory","text":"[common]\\ interface Factory : Serializable Implementations of this interface must have a no-arguments public constructor.","title":"Factory"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-factory/#functions","text":"Name Summary create [common] abstract fun create (): SchemaHandler","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-factory/create/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Factory / create create \u00b6 [common]\\ abstract fun create (): SchemaHandler","title":"Create"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-factory/create/#create","text":"[common]\\ abstract fun create (): SchemaHandler","title":"create"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Module Module \u00b6 [common]\\ data class Module (name: String , types: Set < ProtoType >, upstreamTypes: Map < ProtoType , String >) A Module dictates how the loaded types are to be partitioned and handled. Constructors \u00b6 Module [common] fun Module (name: String , types: Set < ProtoType >, upstreamTypes: Map < ProtoType , String > = mapOf()) Properties \u00b6 Name Summary name [common] val name : String The name of the Module . types [common] val types : Set < ProtoType > The types that this module is to handle. upstreamTypes [common] val upstreamTypes : Map < ProtoType , String > These are the types depended upon by types associated with their module name.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/#module","text":"[common]\\ data class Module (name: String , types: Set < ProtoType >, upstreamTypes: Map < ProtoType , String >) A Module dictates how the loaded types are to be partitioned and handled.","title":"Module"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/#constructors","text":"Module [common] fun Module (name: String , types: Set < ProtoType >, upstreamTypes: Map < ProtoType , String > = mapOf())","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/#properties","text":"Name Summary name [common] val name : String The name of the Module . types [common] val types : Set < ProtoType > The types that this module is to handle. upstreamTypes [common] val upstreamTypes : Map < ProtoType , String > These are the types depended upon by types associated with their module name.","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/-module/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Module / Module Module \u00b6 [common]\\ fun Module (name: String , types: Set < ProtoType >, upstreamTypes: Map < ProtoType , String > = mapOf())","title":" module"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/-module/#module","text":"[common]\\ fun Module (name: String , types: Set < ProtoType >, upstreamTypes: Map < ProtoType , String > = mapOf())","title":"Module"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/name/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Module / name name \u00b6 [common]\\ val name : String The name of the Module .","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/name/#name","text":"[common]\\ val name : String The name of the Module .","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/types/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Module / types types \u00b6 [common]\\ val types : Set < ProtoType > The types that this module is to handle.","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/types/#types","text":"[common]\\ val types : Set < ProtoType > The types that this module is to handle.","title":"types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/upstream-types/","text":"// wire-schema / com.squareup.wire.schema / SchemaHandler / Module / upstreamTypes upstreamTypes \u00b6 [common]\\ val upstreamTypes : Map < ProtoType , String > These are the types depended upon by types associated with their module name.","title":"Upstream types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-handler/-module/upstream-types/#upstreamtypes","text":"[common]\\ val upstreamTypes : Map < ProtoType , String > These are the types depended upon by types associated with their module name.","title":"upstreamTypes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader SchemaLoader \u00b6 [common]\\ class SchemaLoader : Loader , ProfileLoader Load proto files and their transitive dependencies and parse them. Keep track of which files were loaded from where so that we can use that information later when deciding what to generate. [js, jvm]\\ class SchemaLoader : Loader, ProfileLoader Constructors \u00b6 SchemaLoader [js] fun SchemaLoader (fileSystem: FileSystem) SchemaLoader [jvm] fun SchemaLoader (fileSystem: FileSystem) SchemaLoader [jvm] fun SchemaLoader (fileSystem: FileSystem ) Functions \u00b6 Name Summary initRoots [common, js, jvm] [common] fun initRoots (sourcePath: List < Location >, protoPath: List < Location > = listOf()) [js, jvm] fun initRoots (sourcePath: List <Location>, protoPath: List <Location> = listOf()) Initialize the WireRun.sourcePath and WireRun.protoPath from which files are loaded. load [common, js, jvm] [common] abstract fun load (path: String ): ProtoFile [js] open override fun load (path: String ): ProtoFile [jvm] open override fun load (path: String ): ProtoFile loadProfile [common, js, jvm] [common] abstract fun loadProfile (name: String , schema: Schema ): Profile [js] open override fun loadProfile (name: String , schema: Schema): Profile [jvm] open override fun loadProfile (name: String , schema: Schema): Profile loadSchema [common, js, jvm] [common] fun loadSchema (): Schema [js, jvm] fun loadSchema (): Schema withErrors [common] abstract fun withErrors (errors: ErrorCollector ): Loader Returns a new loader that reports failures to errors . [js] open override fun withErrors (errors: ErrorCollector): SchemaLoader Returns a new loader that reports failures to errors . [jvm] open override fun withErrors (errors: ErrorCollector): SchemaLoader Returns a new loader that reports failures to errors . Properties \u00b6 Name Summary loadExhaustively [common, js, jvm] var loadExhaustively : Boolean If true, the schema loader will load the whole graph, including files and types not used by anything in the source path. permitPackageCycles [common, js, jvm] var permitPackageCycles : Boolean Strict by default. Note that golang cannot build protos with package cycles. sourcePathFiles [common] val sourcePathFiles : List < ProtoFile > Subset of the schema that was loaded from the source path. [js, jvm] val sourcePathFiles : List <ProtoFile> Subset of the schema that was loaded from the source path.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/#schemaloader","text":"[common]\\ class SchemaLoader : Loader , ProfileLoader Load proto files and their transitive dependencies and parse them. Keep track of which files were loaded from where so that we can use that information later when deciding what to generate. [js, jvm]\\ class SchemaLoader : Loader, ProfileLoader","title":"SchemaLoader"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/#constructors","text":"SchemaLoader [js] fun SchemaLoader (fileSystem: FileSystem) SchemaLoader [jvm] fun SchemaLoader (fileSystem: FileSystem) SchemaLoader [jvm] fun SchemaLoader (fileSystem: FileSystem )","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/#functions","text":"Name Summary initRoots [common, js, jvm] [common] fun initRoots (sourcePath: List < Location >, protoPath: List < Location > = listOf()) [js, jvm] fun initRoots (sourcePath: List <Location>, protoPath: List <Location> = listOf()) Initialize the WireRun.sourcePath and WireRun.protoPath from which files are loaded. load [common, js, jvm] [common] abstract fun load (path: String ): ProtoFile [js] open override fun load (path: String ): ProtoFile [jvm] open override fun load (path: String ): ProtoFile loadProfile [common, js, jvm] [common] abstract fun loadProfile (name: String , schema: Schema ): Profile [js] open override fun loadProfile (name: String , schema: Schema): Profile [jvm] open override fun loadProfile (name: String , schema: Schema): Profile loadSchema [common, js, jvm] [common] fun loadSchema (): Schema [js, jvm] fun loadSchema (): Schema withErrors [common] abstract fun withErrors (errors: ErrorCollector ): Loader Returns a new loader that reports failures to errors . [js] open override fun withErrors (errors: ErrorCollector): SchemaLoader Returns a new loader that reports failures to errors . [jvm] open override fun withErrors (errors: ErrorCollector): SchemaLoader Returns a new loader that reports failures to errors .","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/#properties","text":"Name Summary loadExhaustively [common, js, jvm] var loadExhaustively : Boolean If true, the schema loader will load the whole graph, including files and types not used by anything in the source path. permitPackageCycles [common, js, jvm] var permitPackageCycles : Boolean Strict by default. Note that golang cannot build protos with package cycles. sourcePathFiles [common] val sourcePathFiles : List < ProtoFile > Subset of the schema that was loaded from the source path. [js, jvm] val sourcePathFiles : List <ProtoFile> Subset of the schema that was loaded from the source path.","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/-schema-loader/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / SchemaLoader SchemaLoader \u00b6 [js, jvm]\\ [js, jvm]\\ fun SchemaLoader (fileSystem: FileSystem) [jvm]\\ fun SchemaLoader (fileSystem: FileSystem )","title":" schema loader"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/-schema-loader/#schemaloader","text":"[js, jvm]\\ [js, jvm]\\ fun SchemaLoader (fileSystem: FileSystem) [jvm]\\ fun SchemaLoader (fileSystem: FileSystem )","title":"SchemaLoader"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dload-profile/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / [js]loadProfile loadProfile \u00b6 [js]\\ open override fun loadProfile (name: String , schema: Schema): Profile","title":"[js]load profile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dload-profile/#loadprofile","text":"[js]\\ open override fun loadProfile (name: String , schema: Schema): Profile","title":"loadProfile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dload/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / [js]load load \u00b6 [js]\\ open override fun load (path: String ): ProtoFile","title":"[js]load"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dload/#load","text":"[js]\\ open override fun load (path: String ): ProtoFile","title":"load"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dwith-errors/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / [js]withErrors withErrors \u00b6 [js]\\ open override fun withErrors (errors: ErrorCollector): SchemaLoader Returns a new loader that reports failures to errors .","title":"[js]with errors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjs%5Dwith-errors/#witherrors","text":"[js]\\ open override fun withErrors (errors: ErrorCollector): SchemaLoader Returns a new loader that reports failures to errors .","title":"withErrors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dload-profile/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / [jvm]loadProfile loadProfile \u00b6 [jvm]\\ open override fun loadProfile (name: String , schema: Schema): Profile","title":"[jvm]load profile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dload-profile/#loadprofile","text":"[jvm]\\ open override fun loadProfile (name: String , schema: Schema): Profile","title":"loadProfile"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dload/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / [jvm]load load \u00b6 [jvm]\\ open override fun load (path: String ): ProtoFile","title":"[jvm]load"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dload/#load","text":"[jvm]\\ open override fun load (path: String ): ProtoFile","title":"load"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dwith-errors/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / [jvm]withErrors withErrors \u00b6 [jvm]\\ open override fun withErrors (errors: ErrorCollector): SchemaLoader Returns a new loader that reports failures to errors .","title":"[jvm]with errors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/%5Bjvm%5Dwith-errors/#witherrors","text":"[jvm]\\ open override fun withErrors (errors: ErrorCollector): SchemaLoader Returns a new loader that reports failures to errors .","title":"withErrors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/init-roots/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / initRoots initRoots \u00b6 [common, js, jvm]\\ [common]\\ fun initRoots (sourcePath: List < Location >, protoPath: List < Location > = listOf()) [js, jvm]\\ fun initRoots (sourcePath: List <Location>, protoPath: List <Location> = listOf()) Initialize the WireRun.sourcePath and WireRun.protoPath from which files are loaded.","title":"Init roots"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/init-roots/#initroots","text":"[common, js, jvm]\\ [common]\\ fun initRoots (sourcePath: List < Location >, protoPath: List < Location > = listOf()) [js, jvm]\\ fun initRoots (sourcePath: List <Location>, protoPath: List <Location> = listOf()) Initialize the WireRun.sourcePath and WireRun.protoPath from which files are loaded.","title":"initRoots"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/load-exhaustively/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / loadExhaustively loadExhaustively \u00b6 [common, js, jvm]\\ [common, js, jvm]\\ var loadExhaustively : Boolean If true, the schema loader will load the whole graph, including files and types not used by anything in the source path.","title":"Load exhaustively"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/load-exhaustively/#loadexhaustively","text":"[common, js, jvm]\\ [common, js, jvm]\\ var loadExhaustively : Boolean If true, the schema loader will load the whole graph, including files and types not used by anything in the source path.","title":"loadExhaustively"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/load-schema/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / loadSchema loadSchema \u00b6 [common, js, jvm]\\ [common]\\ fun loadSchema (): Schema [js, jvm]\\ fun loadSchema (): Schema","title":"Load schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/load-schema/#loadschema","text":"[common, js, jvm]\\ [common]\\ fun loadSchema (): Schema [js, jvm]\\ fun loadSchema (): Schema","title":"loadSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/permit-package-cycles/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / permitPackageCycles permitPackageCycles \u00b6 [common, js, jvm]\\ [common, js, jvm]\\ var permitPackageCycles : Boolean Strict by default. Note that golang cannot build protos with package cycles.","title":"Permit package cycles"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/permit-package-cycles/#permitpackagecycles","text":"[common, js, jvm]\\ [common, js, jvm]\\ var permitPackageCycles : Boolean Strict by default. Note that golang cannot build protos with package cycles.","title":"permitPackageCycles"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/source-path-files/","text":"// wire-schema / com.squareup.wire.schema / SchemaLoader / sourcePathFiles sourcePathFiles \u00b6 [common, js, jvm]\\ [common]\\ val sourcePathFiles : List < ProtoFile > [js, jvm]\\ val sourcePathFiles : List <ProtoFile> Subset of the schema that was loaded from the source path.","title":"Source path files"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-schema-loader/source-path-files/#sourcepathfiles","text":"[common, js, jvm]\\ [common]\\ val sourcePathFiles : List < ProtoFile > [js, jvm]\\ val sourcePathFiles : List <ProtoFile> Subset of the schema that was loaded from the source path.","title":"sourcePathFiles"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/","text":"// wire-schema / com.squareup.wire.schema / Service Service \u00b6 [common]\\ data class Service (type: ProtoType , location: Location , documentation: String , name: String , rpcs: List < Rpc >, options: Options ) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary link [common] fun link (linker: Linker ) linkOptions [common] fun linkOptions (linker: Linker , validate: Boolean ) retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet ): Service ? rpc [common] fun rpc (name: String ): Rpc ? Returns the RPC named name, or null if this service has no such method. validate [common] fun validate (linker: Linker ) Properties \u00b6 Name Summary documentation [common] @get: JvmName (name = \u201cdocumentation\u201d) val documentation : String location [common] @get: JvmName (name = \u201clocation\u201d) val location : Location name [common] @get: JvmName (name = \u201cname\u201d) val name : String options [common] @get: JvmName (name = \u201coptions\u201d) val options : Options rpcs [common] @get: JvmName (name = \u201crpcs\u201d) val rpcs : List < Rpc > type [common] @get: JvmName (name = \u201ctype\u201d) val type : ProtoType","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/#service","text":"[common]\\ data class Service (type: ProtoType , location: Location , documentation: String , name: String , rpcs: List < Rpc >, options: Options )","title":"Service"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/#functions","text":"Name Summary link [common] fun link (linker: Linker ) linkOptions [common] fun linkOptions (linker: Linker , validate: Boolean ) retainAll [common] fun retainAll (schema: Schema , markSet: MarkSet ): Service ? rpc [common] fun rpc (name: String ): Rpc ? Returns the RPC named name, or null if this service has no such method. validate [common] fun validate (linker: Linker )","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/#properties","text":"Name Summary documentation [common] @get: JvmName (name = \u201cdocumentation\u201d) val documentation : String location [common] @get: JvmName (name = \u201clocation\u201d) val location : Location name [common] @get: JvmName (name = \u201cname\u201d) val name : String options [common] @get: JvmName (name = \u201coptions\u201d) val options : Options rpcs [common] @get: JvmName (name = \u201crpcs\u201d) val rpcs : List < Rpc > type [common] @get: JvmName (name = \u201ctype\u201d) val type : ProtoType","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/-service/","text":"// wire-schema / com.squareup.wire.schema / Service / Service Service \u00b6 [common]\\ fun Service (type: ProtoType , location: Location , documentation: String , name: String , rpcs: List < Rpc >, options: Options )","title":" service"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/-service/#service","text":"[common]\\ fun Service (type: ProtoType , location: Location , documentation: String , name: String , rpcs: List < Rpc >, options: Options )","title":"Service"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/documentation/","text":"// wire-schema / com.squareup.wire.schema / Service / documentation documentation \u00b6 [common]\\ @get: JvmName (name = \u201cdocumentation\u201d) val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/documentation/#documentation","text":"[common]\\ @get: JvmName (name = \u201cdocumentation\u201d) val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/link-options/","text":"// wire-schema / com.squareup.wire.schema / Service / linkOptions linkOptions \u00b6 [common]\\ fun linkOptions (linker: Linker , validate: Boolean )","title":"Link options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/link-options/#linkoptions","text":"[common]\\ fun linkOptions (linker: Linker , validate: Boolean )","title":"linkOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/link/","text":"// wire-schema / com.squareup.wire.schema / Service / link link \u00b6 [common]\\ fun link (linker: Linker )","title":"Link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/link/#link","text":"[common]\\ fun link (linker: Linker )","title":"link"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/location/","text":"// wire-schema / com.squareup.wire.schema / Service / location location \u00b6 [common]\\ @get: JvmName (name = \u201clocation\u201d) val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/location/#location","text":"[common]\\ @get: JvmName (name = \u201clocation\u201d) val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/name/","text":"// wire-schema / com.squareup.wire.schema / Service / name name \u00b6 [common]\\ @get: JvmName (name = \u201cname\u201d) val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/name/#name","text":"[common]\\ @get: JvmName (name = \u201cname\u201d) val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/options/","text":"// wire-schema / com.squareup.wire.schema / Service / options options \u00b6 [common]\\ @get: JvmName (name = \u201coptions\u201d) val options : Options","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/options/#options","text":"[common]\\ @get: JvmName (name = \u201coptions\u201d) val options : Options","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/retain-all/","text":"// wire-schema / com.squareup.wire.schema / Service / retainAll retainAll \u00b6 [common]\\ fun retainAll (schema: Schema , markSet: MarkSet ): Service ?","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/retain-all/#retainall","text":"[common]\\ fun retainAll (schema: Schema , markSet: MarkSet ): Service ?","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/rpc/","text":"// wire-schema / com.squareup.wire.schema / Service / rpc rpc \u00b6 [common]\\ fun rpc (name: String ): Rpc ? Returns the RPC named name, or null if this service has no such method.","title":"Rpc"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/rpc/#rpc","text":"[common]\\ fun rpc (name: String ): Rpc ? Returns the RPC named name, or null if this service has no such method.","title":"rpc"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/rpcs/","text":"// wire-schema / com.squareup.wire.schema / Service / rpcs rpcs \u00b6 [common]\\ @get: JvmName (name = \u201crpcs\u201d) val rpcs : List < Rpc >","title":"Rpcs"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/rpcs/#rpcs","text":"[common]\\ @get: JvmName (name = \u201crpcs\u201d) val rpcs : List < Rpc >","title":"rpcs"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/type/","text":"// wire-schema / com.squareup.wire.schema / Service / type type \u00b6 [common]\\ @get: JvmName (name = \u201ctype\u201d) val type : ProtoType","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/type/#type","text":"[common]\\ @get: JvmName (name = \u201ctype\u201d) val type : ProtoType","title":"type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/validate/","text":"// wire-schema / com.squareup.wire.schema / Service / validate validate \u00b6 [common]\\ fun validate (linker: Linker )","title":"Validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/validate/#validate","text":"[common]\\ fun validate (linker: Linker )","title":"validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/-companion/","text":"// wire-schema / com.squareup.wire.schema / Service / Companion Companion \u00b6 [common]\\ object Companion","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-service/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/","text":"// wire-schema / com.squareup.wire.schema / SyntaxRules SyntaxRules \u00b6 [common]\\ interface SyntaxRules A set of rules which defines schema requirements for a specific Syntax. Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary getEncodeMode [common] abstract fun getEncodeMode (protoType: ProtoType , label: Field.Label ?, isPacked: Boolean , isOneOf: Boolean ): Field.EncodeMode isPackedByDefault [common] abstract fun isPackedByDefault (type: ProtoType , label: Field.Label ?): Boolean jsonName [common] abstract fun jsonName (name: String , declaredJsonName: String ?): String validateDefaultValue [common] abstract fun validateDefaultValue (hasDefaultValue: Boolean , errors: ErrorCollector ) validateEnumConstants [common] abstract fun validateEnumConstants (constants: List < EnumConstant >, errors: ErrorCollector ) validateExtension [common] abstract fun validateExtension (protoType: ProtoType , errors: ErrorCollector ) validateTypeReference [common] abstract fun validateTypeReference (type: Type ?, errors: ErrorCollector )","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/#syntaxrules","text":"[common]\\ interface SyntaxRules A set of rules which defines schema requirements for a specific Syntax.","title":"SyntaxRules"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/#functions","text":"Name Summary getEncodeMode [common] abstract fun getEncodeMode (protoType: ProtoType , label: Field.Label ?, isPacked: Boolean , isOneOf: Boolean ): Field.EncodeMode isPackedByDefault [common] abstract fun isPackedByDefault (type: ProtoType , label: Field.Label ?): Boolean jsonName [common] abstract fun jsonName (name: String , declaredJsonName: String ?): String validateDefaultValue [common] abstract fun validateDefaultValue (hasDefaultValue: Boolean , errors: ErrorCollector ) validateEnumConstants [common] abstract fun validateEnumConstants (constants: List < EnumConstant >, errors: ErrorCollector ) validateExtension [common] abstract fun validateExtension (protoType: ProtoType , errors: ErrorCollector ) validateTypeReference [common] abstract fun validateTypeReference (type: Type ?, errors: ErrorCollector )","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/get-encode-mode/","text":"// wire-schema / com.squareup.wire.schema / SyntaxRules / getEncodeMode getEncodeMode \u00b6 [common]\\ abstract fun getEncodeMode (protoType: ProtoType , label: Field.Label ?, isPacked: Boolean , isOneOf: Boolean ): Field.EncodeMode","title":"Get encode mode"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/get-encode-mode/#getencodemode","text":"[common]\\ abstract fun getEncodeMode (protoType: ProtoType , label: Field.Label ?, isPacked: Boolean , isOneOf: Boolean ): Field.EncodeMode","title":"getEncodeMode"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/is-packed-by-default/","text":"// wire-schema / com.squareup.wire.schema / SyntaxRules / isPackedByDefault isPackedByDefault \u00b6 [common]\\ abstract fun isPackedByDefault (type: ProtoType , label: Field.Label ?): Boolean","title":"Is packed by default"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/is-packed-by-default/#ispackedbydefault","text":"[common]\\ abstract fun isPackedByDefault (type: ProtoType , label: Field.Label ?): Boolean","title":"isPackedByDefault"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/json-name/","text":"// wire-schema / com.squareup.wire.schema / SyntaxRules / jsonName jsonName \u00b6 [common]\\ abstract fun jsonName (name: String , declaredJsonName: String ?): String","title":"Json name"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/json-name/#jsonname","text":"[common]\\ abstract fun jsonName (name: String , declaredJsonName: String ?): String","title":"jsonName"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-default-value/","text":"// wire-schema / com.squareup.wire.schema / SyntaxRules / validateDefaultValue validateDefaultValue \u00b6 [common]\\ abstract fun validateDefaultValue (hasDefaultValue: Boolean , errors: ErrorCollector )","title":"Validate default value"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-default-value/#validatedefaultvalue","text":"[common]\\ abstract fun validateDefaultValue (hasDefaultValue: Boolean , errors: ErrorCollector )","title":"validateDefaultValue"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-enum-constants/","text":"// wire-schema / com.squareup.wire.schema / SyntaxRules / validateEnumConstants validateEnumConstants \u00b6 [common]\\ abstract fun validateEnumConstants (constants: List < EnumConstant >, errors: ErrorCollector )","title":"Validate enum constants"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-enum-constants/#validateenumconstants","text":"[common]\\ abstract fun validateEnumConstants (constants: List < EnumConstant >, errors: ErrorCollector )","title":"validateEnumConstants"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-extension/","text":"// wire-schema / com.squareup.wire.schema / SyntaxRules / validateExtension validateExtension \u00b6 [common]\\ abstract fun validateExtension (protoType: ProtoType , errors: ErrorCollector )","title":"Validate extension"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-extension/#validateextension","text":"[common]\\ abstract fun validateExtension (protoType: ProtoType , errors: ErrorCollector )","title":"validateExtension"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-type-reference/","text":"// wire-schema / com.squareup.wire.schema / SyntaxRules / validateTypeReference validateTypeReference \u00b6 [common]\\ abstract fun validateTypeReference (type: Type ?, errors: ErrorCollector )","title":"Validate type reference"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/validate-type-reference/#validatetypereference","text":"[common]\\ abstract fun validateTypeReference (type: Type ?, errors: ErrorCollector )","title":"validateTypeReference"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/-companion/","text":"// wire-schema / com.squareup.wire.schema / SyntaxRules / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary get [common] fun get (syntax: Syntax?): SyntaxRules","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/-companion/#functions","text":"Name Summary get [common] fun get (syntax: Syntax?): SyntaxRules","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/-companion/get/","text":"// wire-schema / com.squareup.wire.schema / SyntaxRules / Companion / get get \u00b6 [common]\\ fun get (syntax: Syntax?): SyntaxRules","title":"Get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-syntax-rules/-companion/get/#get","text":"[common]\\ fun get (syntax: Syntax?): SyntaxRules","title":"get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/","text":"// wire-schema / com.squareup.wire.schema / Type Type \u00b6 [common]\\ sealed class Type Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary linkMembers [common] abstract fun linkMembers (linker: Linker ) linkOptions [common] abstract fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] abstract fun retainAll (schema: Schema , markSet: MarkSet ): Type ? retainLinked [common] abstract fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. typesAndNestedTypes [common] fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are linked to the type. validate [common] abstract fun validate (linker: Linker , syntaxRules: SyntaxRules ) Properties \u00b6 Name Summary documentation [common] abstract val documentation : String location [common] abstract val location : Location nestedTypes [common] abstract val nestedTypes : List < Type > options [common] abstract val options : Options syntax [common] abstract val syntax : Syntax type [common] abstract val type : ProtoType Inheritors \u00b6 Name EnclosingType EnumType MessageType","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/#type","text":"[common]\\ sealed class Type","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/#functions","text":"Name Summary linkMembers [common] abstract fun linkMembers (linker: Linker ) linkOptions [common] abstract fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean ) retainAll [common] abstract fun retainAll (schema: Schema , markSet: MarkSet ): Type ? retainLinked [common] abstract fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. typesAndNestedTypes [common] fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are linked to the type. validate [common] abstract fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/#properties","text":"Name Summary documentation [common] abstract val documentation : String location [common] abstract val location : Location nestedTypes [common] abstract val nestedTypes : List < Type > options [common] abstract val options : Options syntax [common] abstract val syntax : Syntax type [common] abstract val type : ProtoType","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/#inheritors","text":"Name EnclosingType EnumType MessageType","title":"Inheritors"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/documentation/","text":"// wire-schema / com.squareup.wire.schema / Type / documentation documentation \u00b6 [common]\\ abstract val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/documentation/#documentation","text":"[common]\\ abstract val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/link-members/","text":"// wire-schema / com.squareup.wire.schema / Type / linkMembers linkMembers \u00b6 [common]\\ abstract fun linkMembers (linker: Linker )","title":"Link members"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/link-members/#linkmembers","text":"[common]\\ abstract fun linkMembers (linker: Linker )","title":"linkMembers"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/link-options/","text":"// wire-schema / com.squareup.wire.schema / Type / linkOptions linkOptions \u00b6 [common]\\ abstract fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"Link options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/link-options/#linkoptions","text":"[common]\\ abstract fun linkOptions (linker: Linker , syntaxRules: SyntaxRules , validate: Boolean )","title":"linkOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/location/","text":"// wire-schema / com.squareup.wire.schema / Type / location location \u00b6 [common]\\ abstract val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/location/#location","text":"[common]\\ abstract val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/nested-types/","text":"// wire-schema / com.squareup.wire.schema / Type / nestedTypes nestedTypes \u00b6 [common]\\ abstract val nestedTypes : List < Type >","title":"Nested types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/nested-types/#nestedtypes","text":"[common]\\ abstract val nestedTypes : List < Type >","title":"nestedTypes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/options/","text":"// wire-schema / com.squareup.wire.schema / Type / options options \u00b6 [common]\\ abstract val options : Options","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/options/#options","text":"[common]\\ abstract val options : Options","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/retain-all/","text":"// wire-schema / com.squareup.wire.schema / Type / retainAll retainAll \u00b6 [common]\\ abstract fun retainAll (schema: Schema , markSet: MarkSet ): Type ?","title":"Retain all"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/retain-all/#retainall","text":"[common]\\ abstract fun retainAll (schema: Schema , markSet: MarkSet ): Type ?","title":"retainAll"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/retain-linked/","text":"// wire-schema / com.squareup.wire.schema / Type / retainLinked retainLinked \u00b6 [common]\\ abstract fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.","title":"Retain linked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/retain-linked/#retainlinked","text":"[common]\\ abstract fun retainLinked (linkedTypes: Set < ProtoType >): Type ? Returns a copy of this containing only the types in linkedTypes , or null if that set is empty. This will return an EnclosingType if it is itself not linked, but its nested types are linked. The returned type is a shadow of its former self. It it useful for linking against, but lacks most of the members of the original type.","title":"retainLinked"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/syntax/","text":"// wire-schema / com.squareup.wire.schema / Type / syntax syntax \u00b6 [common]\\ abstract val syntax : Syntax","title":"Syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/syntax/#syntax","text":"[common]\\ abstract val syntax : Syntax","title":"syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/type/","text":"// wire-schema / com.squareup.wire.schema / Type / type type \u00b6 [common]\\ abstract val type : ProtoType","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/type/#type","text":"[common]\\ abstract val type : ProtoType","title":"type"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/types-and-nested-types/","text":"// wire-schema / com.squareup.wire.schema / Type / typesAndNestedTypes typesAndNestedTypes \u00b6 [common]\\ fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are linked to the type.","title":"Types and nested types"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/types-and-nested-types/#typesandnestedtypes","text":"[common]\\ fun typesAndNestedTypes (): List < Type > Returns all types and subtypes which are linked to the type.","title":"typesAndNestedTypes"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/validate/","text":"// wire-schema / com.squareup.wire.schema / Type / validate validate \u00b6 [common]\\ abstract fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"Validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/validate/#validate","text":"[common]\\ abstract fun validate (linker: Linker , syntaxRules: SyntaxRules )","title":"validate"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/","text":"// wire-schema / com.squareup.wire.schema / Type / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary fromElements [common] @ JvmStatic fun fromElements (packageName: String ?, elements: List < TypeElement >, syntax: Syntax): List < Type > get [common] fun get (packageName: String ?, protoType: ProtoType , type: TypeElement , syntax: Syntax): Type toElements [common] @ JvmStatic fun toElements (types: List < Type >): List < TypeElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/#functions","text":"Name Summary fromElements [common] @ JvmStatic fun fromElements (packageName: String ?, elements: List < TypeElement >, syntax: Syntax): List < Type > get [common] fun get (packageName: String ?, protoType: ProtoType , type: TypeElement , syntax: Syntax): Type toElements [common] @ JvmStatic fun toElements (types: List < Type >): List < TypeElement >","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/from-elements/","text":"// wire-schema / com.squareup.wire.schema / Type / Companion / fromElements fromElements \u00b6 [common]\\ @ JvmStatic fun fromElements (packageName: String ?, elements: List < TypeElement >, syntax: Syntax): List < Type >","title":"From elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/from-elements/#fromelements","text":"[common]\\ @ JvmStatic fun fromElements (packageName: String ?, elements: List < TypeElement >, syntax: Syntax): List < Type >","title":"fromElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/get/","text":"// wire-schema / com.squareup.wire.schema / Type / Companion / get get \u00b6 [common]\\ fun get (packageName: String ?, protoType: ProtoType , type: TypeElement , syntax: Syntax): Type","title":"Get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/get/#get","text":"[common]\\ fun get (packageName: String ?, protoType: ProtoType , type: TypeElement , syntax: Syntax): Type","title":"get"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/to-elements/","text":"// wire-schema / com.squareup.wire.schema / Type / Companion / toElements toElements \u00b6 [common]\\ @ JvmStatic fun toElements (types: List < Type >): List < TypeElement >","title":"To elements"},{"location":"3.x/wire-schema/com.squareup.wire.schema/-type/-companion/to-elements/#toelements","text":"[common]\\ @ JvmStatic fun toElements (types: List < Type >): List < TypeElement >","title":"toElements"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/","text":"// wire-schema / com.squareup.wire.schema.internal Package com.squareup.wire.schema.internal \u00b6 Types \u00b6 Name Summary DagChecker [common] class DagChecker < N >(nodes: Iterable < N >, edges: ( N ) -> Iterable < N >) Checks whether a graph is a directed acyclic graph using Tarjan\u2019s algorithm . MutableQueue [common, js, jvm] [common, js] interface MutableQueue < T : Any > : MutableCollection < T > [jvm] typealias MutableQueue = Queue < T > ProfileFileElement [common] data class ProfileFileElement (location: Location , packageName: String ?, imports: List < String >, typeConfigs: List < TypeConfigElement >) A single .wire file. This file is structured similarly to a .proto file, but with different elements. ProfileParser [common] class ProfileParser (location: Location , data: String ) Parses .wire files. SchemaEncoder [common] class SchemaEncoder (schema: Schema ) This class encodes files from a Wire schema using the types in protobuf\u2019s descriptor.proto. Unfortunately, the two models don\u2019t line up directly: TypeConfigElement [common] data class TypeConfigElement (location: Location , type: String ?, documentation: String , with: List < OptionElement >, target: String ?, adapter: String ?) Configures how Wire will generate code for a specific type. This configuration belongs in a build.wire file that is in the same directory as the configured type. TypeMover [common] class TypeMover (oldSchema: Schema , moves: List < TypeMover.Move >) Refactor a schema by moving a proto type declaration. Functions \u00b6 Name Summary annotationTargetType [jvm] fun annotationTargetType (extend: Extend): ElementType ? appendDocumentation [common] fun StringBuilder . appendDocumentation (documentation: String ) appendIndented [common] fun StringBuilder . appendIndented (value: String ) builtInAdapterString [jvm] fun builtInAdapterString (type: ProtoType): String ? eligibleAsAnnotationMember [jvm] fun eligibleAsAnnotationMember (schema: Schema, field: Field): Boolean javaPackage [jvm] fun javaPackage (protoFile: ProtoFile): String optionValueToInt [jvm] fun optionValueToInt (value: Any ?): Int optionValueToLong [jvm] fun optionValueToLong (value: Any ?): Long withStubs [common] fun Schema . withStubs (typesToStub: Set < ProtoType >): Schema Replace types in this schema which are present in typesToStub with empty shells that have no outward references. This has to be done in this module so that we can access the internal constructor to avoid re-linking. withUnixSlashes [common] fun Path. withUnixSlashes (): Path","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/#package-comsquareupwireschemainternal","text":"","title":"Package com.squareup.wire.schema.internal"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/#types","text":"Name Summary DagChecker [common] class DagChecker < N >(nodes: Iterable < N >, edges: ( N ) -> Iterable < N >) Checks whether a graph is a directed acyclic graph using Tarjan\u2019s algorithm . MutableQueue [common, js, jvm] [common, js] interface MutableQueue < T : Any > : MutableCollection < T > [jvm] typealias MutableQueue = Queue < T > ProfileFileElement [common] data class ProfileFileElement (location: Location , packageName: String ?, imports: List < String >, typeConfigs: List < TypeConfigElement >) A single .wire file. This file is structured similarly to a .proto file, but with different elements. ProfileParser [common] class ProfileParser (location: Location , data: String ) Parses .wire files. SchemaEncoder [common] class SchemaEncoder (schema: Schema ) This class encodes files from a Wire schema using the types in protobuf\u2019s descriptor.proto. Unfortunately, the two models don\u2019t line up directly: TypeConfigElement [common] data class TypeConfigElement (location: Location , type: String ?, documentation: String , with: List < OptionElement >, target: String ?, adapter: String ?) Configures how Wire will generate code for a specific type. This configuration belongs in a build.wire file that is in the same directory as the configured type. TypeMover [common] class TypeMover (oldSchema: Schema , moves: List < TypeMover.Move >) Refactor a schema by moving a proto type declaration.","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/#functions","text":"Name Summary annotationTargetType [jvm] fun annotationTargetType (extend: Extend): ElementType ? appendDocumentation [common] fun StringBuilder . appendDocumentation (documentation: String ) appendIndented [common] fun StringBuilder . appendIndented (value: String ) builtInAdapterString [jvm] fun builtInAdapterString (type: ProtoType): String ? eligibleAsAnnotationMember [jvm] fun eligibleAsAnnotationMember (schema: Schema, field: Field): Boolean javaPackage [jvm] fun javaPackage (protoFile: ProtoFile): String optionValueToInt [jvm] fun optionValueToInt (value: Any ?): Int optionValueToLong [jvm] fun optionValueToLong (value: Any ?): Long withStubs [common] fun Schema . withStubs (typesToStub: Set < ProtoType >): Schema Replace types in this schema which are present in typesToStub with empty shells that have no outward references. This has to be done in this module so that we can access the internal constructor to avoid re-linking. withUnixSlashes [common] fun Path. withUnixSlashes (): Path","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/annotation-target-type/","text":"// wire-schema / com.squareup.wire.schema.internal / annotationTargetType annotationTargetType \u00b6 [jvm]\\ fun annotationTargetType (extend: Extend): ElementType ?","title":"Annotation target type"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/annotation-target-type/#annotationtargettype","text":"[jvm]\\ fun annotationTargetType (extend: Extend): ElementType ?","title":"annotationTargetType"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/append-documentation/","text":"// wire-schema / com.squareup.wire.schema.internal / appendDocumentation appendDocumentation \u00b6 [common]\\ fun StringBuilder . appendDocumentation (documentation: String )","title":"Append documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/append-documentation/#appenddocumentation","text":"[common]\\ fun StringBuilder . appendDocumentation (documentation: String )","title":"appendDocumentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/append-indented/","text":"// wire-schema / com.squareup.wire.schema.internal / appendIndented appendIndented \u00b6 [common]\\ fun StringBuilder . appendIndented (value: String )","title":"Append indented"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/append-indented/#appendindented","text":"[common]\\ fun StringBuilder . appendIndented (value: String )","title":"appendIndented"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/built-in-adapter-string/","text":"// wire-schema / com.squareup.wire.schema.internal / builtInAdapterString builtInAdapterString \u00b6 [jvm]\\ fun builtInAdapterString (type: ProtoType): String ?","title":"Built in adapter string"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/built-in-adapter-string/#builtinadapterstring","text":"[jvm]\\ fun builtInAdapterString (type: ProtoType): String ?","title":"builtInAdapterString"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/eligible-as-annotation-member/","text":"// wire-schema / com.squareup.wire.schema.internal / eligibleAsAnnotationMember eligibleAsAnnotationMember \u00b6 [jvm]\\ fun eligibleAsAnnotationMember (schema: Schema, field: Field): Boolean","title":"Eligible as annotation member"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/eligible-as-annotation-member/#eligibleasannotationmember","text":"[jvm]\\ fun eligibleAsAnnotationMember (schema: Schema, field: Field): Boolean","title":"eligibleAsAnnotationMember"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/java-package/","text":"// wire-schema / com.squareup.wire.schema.internal / javaPackage javaPackage \u00b6 [jvm]\\ fun javaPackage (protoFile: ProtoFile): String","title":"Java package"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/java-package/#javapackage","text":"[jvm]\\ fun javaPackage (protoFile: ProtoFile): String","title":"javaPackage"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/option-value-to-int/","text":"// wire-schema / com.squareup.wire.schema.internal / optionValueToInt optionValueToInt \u00b6 [jvm]\\ fun optionValueToInt (value: Any ?): Int","title":"Option value to int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/option-value-to-int/#optionvaluetoint","text":"[jvm]\\ fun optionValueToInt (value: Any ?): Int","title":"optionValueToInt"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/option-value-to-long/","text":"// wire-schema / com.squareup.wire.schema.internal / optionValueToLong optionValueToLong \u00b6 [jvm]\\ fun optionValueToLong (value: Any ?): Long","title":"Option value to long"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/option-value-to-long/#optionvaluetolong","text":"[jvm]\\ fun optionValueToLong (value: Any ?): Long","title":"optionValueToLong"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/with-stubs/","text":"// wire-schema / com.squareup.wire.schema.internal / withStubs withStubs \u00b6 [common]\\ fun Schema . withStubs (typesToStub: Set < ProtoType >): Schema Replace types in this schema which are present in typesToStub with empty shells that have no outward references. This has to be done in this module so that we can access the internal constructor to avoid re-linking.","title":"With stubs"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/with-stubs/#withstubs","text":"[common]\\ fun Schema . withStubs (typesToStub: Set < ProtoType >): Schema Replace types in this schema which are present in typesToStub with empty shells that have no outward references. This has to be done in this module so that we can access the internal constructor to avoid re-linking.","title":"withStubs"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/with-unix-slashes/","text":"// wire-schema / com.squareup.wire.schema.internal / withUnixSlashes withUnixSlashes \u00b6 [common]\\ fun Path. withUnixSlashes (): Path","title":"With unix slashes"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/with-unix-slashes/#withunixslashes","text":"[common]\\ fun Path. withUnixSlashes (): Path","title":"withUnixSlashes"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/","text":"// wire-schema / com.squareup.wire.schema.internal / DagChecker DagChecker \u00b6 [common]\\ class DagChecker < N >(nodes: Iterable < N >, edges: ( N ) -> Iterable < N >) Checks whether a graph is a directed acyclic graph using Tarjan\u2019s algorithm . Note that all cycles are strongly connected components, but a strongly connected component is not strictly a cycle. In particular it may contain nodes that are mutually reachable from each other through multiple paths. Constructors \u00b6 DagChecker [common] fun < N > DagChecker (nodes: Iterable < N >, edges: ( N ) -> Iterable < N >) Functions \u00b6 Name Summary check [common] fun check (): Set < List < N >> Returns a set of strongly connected components. Each strongly connected component is a list of nodes that are mutually reachable to each other.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/#dagchecker","text":"[common]\\ class DagChecker < N >(nodes: Iterable < N >, edges: ( N ) -> Iterable < N >) Checks whether a graph is a directed acyclic graph using Tarjan\u2019s algorithm . Note that all cycles are strongly connected components, but a strongly connected component is not strictly a cycle. In particular it may contain nodes that are mutually reachable from each other through multiple paths.","title":"DagChecker"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/#constructors","text":"DagChecker [common] fun < N > DagChecker (nodes: Iterable < N >, edges: ( N ) -> Iterable < N >)","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/#functions","text":"Name Summary check [common] fun check (): Set < List < N >> Returns a set of strongly connected components. Each strongly connected component is a list of nodes that are mutually reachable to each other.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/-dag-checker/","text":"// wire-schema / com.squareup.wire.schema.internal / DagChecker / DagChecker DagChecker \u00b6 [common]\\ fun < N > DagChecker (nodes: Iterable < N >, edges: ( N ) -> Iterable < N >)","title":" dag checker"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/-dag-checker/#dagchecker","text":"[common]\\ fun < N > DagChecker (nodes: Iterable < N >, edges: ( N ) -> Iterable < N >)","title":"DagChecker"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/check/","text":"// wire-schema / com.squareup.wire.schema.internal / DagChecker / check check \u00b6 [common]\\ fun check (): Set < List < N >> Returns a set of strongly connected components. Each strongly connected component is a list of nodes that are mutually reachable to each other. If the graph contains nodes that have self edges but are not strongly connected to any other nodes, those nodes will be single-element lists in the result. If the result is empty the graph is acyclic.","title":"Check"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-dag-checker/check/#check","text":"[common]\\ fun check (): Set < List < N >> Returns a set of strongly connected components. Each strongly connected component is a list of nodes that are mutually reachable to each other. If the graph contains nodes that have self edges but are not strongly connected to any other nodes, those nodes will be single-element lists in the result. If the result is empty the graph is acyclic.","title":"check"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/","text":"// wire-schema / com.squareup.wire.schema.internal / MutableQueue MutableQueue \u00b6 [common, js]\\ interface MutableQueue < T : Any > : MutableCollection < T > [jvm]\\ typealias MutableQueue = Queue < T > Functions \u00b6 Name Summary add [common, js] [common] abstract fun add (element: T ): Boolean [js] abstract fun add (element: T ): Boolean addAll [common, js] [common] abstract fun addAll (elements: Collection < T >): Boolean [js] abstract fun addAll (elements: Collection < T >): Boolean clear [common, js] [common] abstract fun clear () [js] abstract fun clear () contains [common, js] [common] abstract operator fun contains (element: T ): Boolean [js] abstract operator fun contains (element: T ): Boolean containsAll [common, js] [common] abstract fun containsAll (elements: Collection < T >): Boolean [js] abstract fun containsAll (elements: Collection < T >): Boolean isEmpty [common, js] [common] abstract fun isEmpty (): Boolean [js] abstract fun isEmpty (): Boolean iterator [common, js] [common] abstract operator override fun iterator (): MutableIterator < T > [js] abstract operator override fun iterator (): MutableIterator < T > poll [common, js] [common, js] abstract fun poll (): T ? remove [common, js] [common] abstract fun remove (element: T ): Boolean [js] abstract fun remove (element: T ): Boolean removeAll [common, js] [common] abstract fun removeAll (elements: Collection < T >): Boolean [js] abstract fun removeAll (elements: Collection < T >): Boolean retainAll [common, js] [common] abstract fun retainAll (elements: Collection < T >): Boolean [js] abstract fun retainAll (elements: Collection < T >): Boolean Properties \u00b6 Name Summary size [common] abstract val size : Int size [js] abstract val size : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/#mutablequeue","text":"[common, js]\\ interface MutableQueue < T : Any > : MutableCollection < T > [jvm]\\ typealias MutableQueue = Queue < T >","title":"MutableQueue"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/#functions","text":"Name Summary add [common, js] [common] abstract fun add (element: T ): Boolean [js] abstract fun add (element: T ): Boolean addAll [common, js] [common] abstract fun addAll (elements: Collection < T >): Boolean [js] abstract fun addAll (elements: Collection < T >): Boolean clear [common, js] [common] abstract fun clear () [js] abstract fun clear () contains [common, js] [common] abstract operator fun contains (element: T ): Boolean [js] abstract operator fun contains (element: T ): Boolean containsAll [common, js] [common] abstract fun containsAll (elements: Collection < T >): Boolean [js] abstract fun containsAll (elements: Collection < T >): Boolean isEmpty [common, js] [common] abstract fun isEmpty (): Boolean [js] abstract fun isEmpty (): Boolean iterator [common, js] [common] abstract operator override fun iterator (): MutableIterator < T > [js] abstract operator override fun iterator (): MutableIterator < T > poll [common, js] [common, js] abstract fun poll (): T ? remove [common, js] [common] abstract fun remove (element: T ): Boolean [js] abstract fun remove (element: T ): Boolean removeAll [common, js] [common] abstract fun removeAll (elements: Collection < T >): Boolean [js] abstract fun removeAll (elements: Collection < T >): Boolean retainAll [common, js] [common] abstract fun retainAll (elements: Collection < T >): Boolean [js] abstract fun retainAll (elements: Collection < T >): Boolean","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/#properties","text":"Name Summary size [common] abstract val size : Int size [js] abstract val size : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/poll/","text":"// wire-schema / com.squareup.wire.schema.internal / MutableQueue / poll poll \u00b6 [common, js]\\ [common, js]\\ abstract fun poll (): T ?","title":"Poll"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-mutable-queue/poll/#poll","text":"[common, js]\\ [common, js]\\ abstract fun poll (): T ?","title":"poll"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/","text":"// wire-schema / com.squareup.wire.schema.internal / ProfileFileElement ProfileFileElement \u00b6 [common]\\ data class ProfileFileElement (location: Location , packageName: String ?, imports: List < String >, typeConfigs: List < TypeConfigElement >) A single .wire file. This file is structured similarly to a .proto file, but with different elements. File Structure A project may have 0 or more .wire files. These files should be in the same directory as the .proto files so they may be automatically discovered by Wire. Each file starts with a syntax declaration. The syntax must be \u201cwire2\u201d. This is followed by an optional package declaration, which should match to the package declarations of the .proto files in the directory. Profiles may import any number of proto files. Note that it is an error to import .wire files. These imports are used to resolve types specified later in the file. Profiles may specify any number of type configurations. These specify a fully qualified type, its target Java type, and an adapter to do the encoding and decoding. syntax = \u201cwire2\u201d;\\ package squareup.dinosaurs;\\ \\ import \u201csquareup/geology/period.proto\u201d;\\ \\ // Roar!\\ type squareup.dinosaurs.Dinosaur {\\ target com.squareup.dino.Dinosaur using com.squareup.dino.Dinosaurs#DINO_ADAPTER;\\ } Constructors \u00b6 ProfileFileElement [common] fun ProfileFileElement (location: Location , packageName: String ? = null, imports: List < String > = emptyList(), typeConfigs: List < TypeConfigElement > = emptyList()) Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary imports [common] val imports : List < String > location [common] val location : Location packageName [common] val packageName : String ? = null typeConfigs [common] val typeConfigs : List < TypeConfigElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/#profilefileelement","text":"[common]\\ data class ProfileFileElement (location: Location , packageName: String ?, imports: List < String >, typeConfigs: List < TypeConfigElement >) A single .wire file. This file is structured similarly to a .proto file, but with different elements. File Structure A project may have 0 or more .wire files. These files should be in the same directory as the .proto files so they may be automatically discovered by Wire. Each file starts with a syntax declaration. The syntax must be \u201cwire2\u201d. This is followed by an optional package declaration, which should match to the package declarations of the .proto files in the directory. Profiles may import any number of proto files. Note that it is an error to import .wire files. These imports are used to resolve types specified later in the file. Profiles may specify any number of type configurations. These specify a fully qualified type, its target Java type, and an adapter to do the encoding and decoding. syntax = \u201cwire2\u201d;\\ package squareup.dinosaurs;\\ \\ import \u201csquareup/geology/period.proto\u201d;\\ \\ // Roar!\\ type squareup.dinosaurs.Dinosaur {\\ target com.squareup.dino.Dinosaur using com.squareup.dino.Dinosaurs#DINO_ADAPTER;\\ }","title":"ProfileFileElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/#constructors","text":"ProfileFileElement [common] fun ProfileFileElement (location: Location , packageName: String ? = null, imports: List < String > = emptyList(), typeConfigs: List < TypeConfigElement > = emptyList())","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/#properties","text":"Name Summary imports [common] val imports : List < String > location [common] val location : Location packageName [common] val packageName : String ? = null typeConfigs [common] val typeConfigs : List < TypeConfigElement >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/-profile-file-element/","text":"// wire-schema / com.squareup.wire.schema.internal / ProfileFileElement / ProfileFileElement ProfileFileElement \u00b6 [common]\\ fun ProfileFileElement (location: Location , packageName: String ? = null, imports: List < String > = emptyList(), typeConfigs: List < TypeConfigElement > = emptyList())","title":" profile file element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/-profile-file-element/#profilefileelement","text":"[common]\\ fun ProfileFileElement (location: Location , packageName: String ? = null, imports: List < String > = emptyList(), typeConfigs: List < TypeConfigElement > = emptyList())","title":"ProfileFileElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/imports/","text":"// wire-schema / com.squareup.wire.schema.internal / ProfileFileElement / imports imports \u00b6 [common]\\ val imports : List < String >","title":"Imports"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/imports/#imports","text":"[common]\\ val imports : List < String >","title":"imports"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal / ProfileFileElement / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/package-name/","text":"// wire-schema / com.squareup.wire.schema.internal / ProfileFileElement / packageName packageName \u00b6 [common]\\ val packageName : String ? = null","title":"Package name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/package-name/#packagename","text":"[common]\\ val packageName : String ? = null","title":"packageName"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal / ProfileFileElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/type-configs/","text":"// wire-schema / com.squareup.wire.schema.internal / ProfileFileElement / typeConfigs typeConfigs \u00b6 [common]\\ val typeConfigs : List < TypeConfigElement >","title":"Type configs"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-file-element/type-configs/#typeconfigs","text":"[common]\\ val typeConfigs : List < TypeConfigElement >","title":"typeConfigs"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/","text":"// wire-schema / com.squareup.wire.schema.internal / ProfileParser ProfileParser \u00b6 [common]\\ class ProfileParser (location: Location , data: String ) Parses .wire files. Constructors \u00b6 ProfileParser [common] fun ProfileParser (location: Location , data: String ) Functions \u00b6 Name Summary read [common] fun read (): ProfileFileElement","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/#profileparser","text":"[common]\\ class ProfileParser (location: Location , data: String ) Parses .wire files.","title":"ProfileParser"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/#constructors","text":"ProfileParser [common] fun ProfileParser (location: Location , data: String )","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/#functions","text":"Name Summary read [common] fun read (): ProfileFileElement","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/-profile-parser/","text":"// wire-schema / com.squareup.wire.schema.internal / ProfileParser / ProfileParser ProfileParser \u00b6 [common]\\ fun ProfileParser (location: Location , data: String )","title":" profile parser"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/-profile-parser/#profileparser","text":"[common]\\ fun ProfileParser (location: Location , data: String )","title":"ProfileParser"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/read/","text":"// wire-schema / com.squareup.wire.schema.internal / ProfileParser / read read \u00b6 [common]\\ fun read (): ProfileFileElement","title":"Read"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-profile-parser/read/#read","text":"[common]\\ fun read (): ProfileFileElement","title":"read"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/","text":"// wire-schema / com.squareup.wire.schema.internal / SchemaEncoder SchemaEncoder \u00b6 [common]\\ class SchemaEncoder (schema: Schema ) This class encodes files from a Wire schema using the types in protobuf\u2019s descriptor.proto. Unfortunately, the two models don\u2019t line up directly: Wire keeps a heterogeneous list of messages and enums; descriptor.proto keeps each in its own list. Descriptors don't have first class support for [Field.EncodeMode.OMIT_IDENTITY](../../com.squareup.wire.schema/-field/-encode-mode/-o-m-i-t_-i-d-e-n-t-i-t-y/index.md), which is the default in proto3. Instead these are synthesized with oneofs. Descriptors don't support maps. Instead these are synthesized with entry classes. This file requires we manually keep tags and types in sync with descriptor.proto. TODO(jwilson): this class doesn\u2019t yet extension ranges and several other fields that are commented out below. Constructors \u00b6 SchemaEncoder [common] fun SchemaEncoder (schema: Schema ) Functions \u00b6 Name Summary encode [common] fun encode (protoFile: ProtoFile ): ByteString","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/#schemaencoder","text":"[common]\\ class SchemaEncoder (schema: Schema ) This class encodes files from a Wire schema using the types in protobuf\u2019s descriptor.proto. Unfortunately, the two models don\u2019t line up directly: Wire keeps a heterogeneous list of messages and enums; descriptor.proto keeps each in its own list. Descriptors don't have first class support for [Field.EncodeMode.OMIT_IDENTITY](../../com.squareup.wire.schema/-field/-encode-mode/-o-m-i-t_-i-d-e-n-t-i-t-y/index.md), which is the default in proto3. Instead these are synthesized with oneofs. Descriptors don't support maps. Instead these are synthesized with entry classes. This file requires we manually keep tags and types in sync with descriptor.proto. TODO(jwilson): this class doesn\u2019t yet extension ranges and several other fields that are commented out below.","title":"SchemaEncoder"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/#constructors","text":"SchemaEncoder [common] fun SchemaEncoder (schema: Schema )","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/#functions","text":"Name Summary encode [common] fun encode (protoFile: ProtoFile ): ByteString","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/-schema-encoder/","text":"// wire-schema / com.squareup.wire.schema.internal / SchemaEncoder / SchemaEncoder SchemaEncoder \u00b6 [common]\\ fun SchemaEncoder (schema: Schema )","title":" schema encoder"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/-schema-encoder/#schemaencoder","text":"[common]\\ fun SchemaEncoder (schema: Schema )","title":"SchemaEncoder"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/encode/","text":"// wire-schema / com.squareup.wire.schema.internal / SchemaEncoder / encode encode \u00b6 [common]\\ fun encode (protoFile: ProtoFile ): ByteString","title":"Encode"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-schema-encoder/encode/#encode","text":"[common]\\ fun encode (protoFile: ProtoFile ): ByteString","title":"encode"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeConfigElement TypeConfigElement \u00b6 [common]\\ data class TypeConfigElement (location: Location , type: String ?, documentation: String , with: List < OptionElement >, target: String ?, adapter: String ?) Configures how Wire will generate code for a specific type. This configuration belongs in a build.wire file that is in the same directory as the configured type. Constructors \u00b6 TypeConfigElement [common] fun TypeConfigElement (location: Location , type: String ? = null, documentation: String = \u201c\u201d, with: List < OptionElement > = emptyList(), target: String ? = null, adapter: String ? = null) Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary adapter [common] val adapter : String ? = null documentation [common] val documentation : String location [common] val location : Location target [common] val target : String ? = null type [common] val type : String ? = null with [common] val with : List < OptionElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/#typeconfigelement","text":"[common]\\ data class TypeConfigElement (location: Location , type: String ?, documentation: String , with: List < OptionElement >, target: String ?, adapter: String ?) Configures how Wire will generate code for a specific type. This configuration belongs in a build.wire file that is in the same directory as the configured type.","title":"TypeConfigElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/#constructors","text":"TypeConfigElement [common] fun TypeConfigElement (location: Location , type: String ? = null, documentation: String = \u201c\u201d, with: List < OptionElement > = emptyList(), target: String ? = null, adapter: String ? = null)","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/#properties","text":"Name Summary adapter [common] val adapter : String ? = null documentation [common] val documentation : String location [common] val location : Location target [common] val target : String ? = null type [common] val type : String ? = null with [common] val with : List < OptionElement >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/-type-config-element/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeConfigElement / TypeConfigElement TypeConfigElement \u00b6 [common]\\ fun TypeConfigElement (location: Location , type: String ? = null, documentation: String = \u201c\u201d, with: List < OptionElement > = emptyList(), target: String ? = null, adapter: String ? = null)","title":" type config element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/-type-config-element/#typeconfigelement","text":"[common]\\ fun TypeConfigElement (location: Location , type: String ? = null, documentation: String = \u201c\u201d, with: List < OptionElement > = emptyList(), target: String ? = null, adapter: String ? = null)","title":"TypeConfigElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/adapter/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeConfigElement / adapter adapter \u00b6 [common]\\ val adapter : String ? = null","title":"Adapter"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/adapter/#adapter","text":"[common]\\ val adapter : String ? = null","title":"adapter"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeConfigElement / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeConfigElement / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/target/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeConfigElement / target target \u00b6 [common]\\ val target : String ? = null","title":"Target"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/target/#target","text":"[common]\\ val target : String ? = null","title":"target"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeConfigElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/type/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeConfigElement / type type \u00b6 [common]\\ val type : String ? = null","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/type/#type","text":"[common]\\ val type : String ? = null","title":"type"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/with/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeConfigElement / with with \u00b6 [common]\\ val with : List < OptionElement >","title":"With"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-config-element/with/#with","text":"[common]\\ val with : List < OptionElement >","title":"with"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeMover TypeMover \u00b6 [common]\\ class TypeMover (oldSchema: Schema , moves: List < TypeMover.Move >) Refactor a schema by moving a proto type declaration. This class attempts to avoid making unnecessary changes to the target schema. For example, it won\u2019t remove unused imports if they are unrelated to the types being moved. Constructors \u00b6 TypeMover [common] fun TypeMover (oldSchema: Schema , moves: List < TypeMover.Move >) Types \u00b6 Name Summary Move [common] data class Move (type: ProtoType , targetPath: String ) Functions \u00b6 Name Summary move [common] fun move (): Schema","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/#typemover","text":"[common]\\ class TypeMover (oldSchema: Schema , moves: List < TypeMover.Move >) Refactor a schema by moving a proto type declaration. This class attempts to avoid making unnecessary changes to the target schema. For example, it won\u2019t remove unused imports if they are unrelated to the types being moved.","title":"TypeMover"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/#constructors","text":"TypeMover [common] fun TypeMover (oldSchema: Schema , moves: List < TypeMover.Move >)","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/#types","text":"Name Summary Move [common] data class Move (type: ProtoType , targetPath: String )","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/#functions","text":"Name Summary move [common] fun move (): Schema","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-type-mover/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeMover / TypeMover TypeMover \u00b6 [common]\\ fun TypeMover (oldSchema: Schema , moves: List < TypeMover.Move >)","title":" type mover"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-type-mover/#typemover","text":"[common]\\ fun TypeMover (oldSchema: Schema , moves: List < TypeMover.Move >)","title":"TypeMover"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/move/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeMover / move move \u00b6 [common]\\ fun move (): Schema","title":"Move"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/move/#move","text":"[common]\\ fun move (): Schema","title":"move"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeMover / Move Move \u00b6 [common]\\ data class Move (type: ProtoType , targetPath: String ) Properties \u00b6 Name Summary targetPath [common] val targetPath : String type [common] val type : ProtoType","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/#move","text":"[common]\\ data class Move (type: ProtoType , targetPath: String )","title":"Move"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/#properties","text":"Name Summary targetPath [common] val targetPath : String type [common] val type : ProtoType","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/-move/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeMover / Move / Move Move \u00b6 [common]\\ fun Move (type: ProtoType , targetPath: String )","title":" move"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/-move/#move","text":"[common]\\ fun Move (type: ProtoType , targetPath: String )","title":"Move"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/target-path/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeMover / Move / targetPath targetPath \u00b6 [common]\\ val targetPath : String","title":"Target path"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/target-path/#targetpath","text":"[common]\\ val targetPath : String","title":"targetPath"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/type/","text":"// wire-schema / com.squareup.wire.schema.internal / TypeMover / Move / type type \u00b6 [common]\\ val type : ProtoType","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal/-type-mover/-move/type/#type","text":"[common]\\ val type : ProtoType","title":"type"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/","text":"// wire-schema / com.squareup.wire.schema.internal.parser Package com.squareup.wire.schema.internal.parser \u00b6 Types \u00b6 Name Summary EnumConstantElement [common] data class EnumConstantElement (location: Location , name: String , tag: Int , documentation: String , options: List < OptionElement >) EnumElement [common] data class EnumElement (location: Location , name: String , documentation: String , options: List < OptionElement >, constants: List < EnumConstantElement >, reserveds: List < ReservedElement >) : TypeElement ExtendElement [common] data class ExtendElement (location: Location , name: String , documentation: String , fields: List < FieldElement >) ExtensionsElement [common] data class ExtensionsElement (location: Location , documentation: String , values: List < Any >) FieldElement [common] data class FieldElement (location: Location , label: Field.Label ?, type: String , name: String , defaultValue: String ?, jsonName: String ?, tag: Int , documentation: String , options: List < OptionElement >) GroupElement [common] data class GroupElement (label: Field.Label ?, location: Location , name: String , tag: Int , documentation: String , fields: List < FieldElement >) MessageElement [common] data class MessageElement (location: Location , name: String , documentation: String , nestedTypes: List < TypeElement >, options: List < OptionElement >, reserveds: List < ReservedElement >, fields: List < FieldElement >, oneOfs: List < OneOfElement >, extensions: List < ExtensionsElement >, groups: List < GroupElement >) : TypeElement OneOfElement [common] data class OneOfElement (name: String , documentation: String , fields: List < FieldElement >, groups: List < GroupElement >, options: List < OptionElement >) OptionElement [common] data class OptionElement (name: String , kind: OptionElement.Kind , value: Any , isParenthesized: Boolean ) OptionReader [common] class OptionReader (reader: SyntaxReader ) ProtoFileElement [common] data class ProtoFileElement (location: Location , packageName: String ?, syntax: Syntax?, imports: List < String >, publicImports: List < String >, types: List < TypeElement >, services: List < ServiceElement >, extendDeclarations: List < ExtendElement >, options: List < OptionElement >) A single .proto file. ProtoParser [common] class ProtoParser Basic parser for .proto schema declarations. ReservedElement [common] data class ReservedElement (location: Location , documentation: String , values: List < Any >) RpcElement [common] data class RpcElement (location: Location , name: String , documentation: String , requestType: String , responseType: String , requestStreaming: Boolean , responseStreaming: Boolean , options: List < OptionElement >) ServiceElement [common] data class ServiceElement (location: Location , name: String , documentation: String , rpcs: List < RpcElement >, options: List < OptionElement >) SyntaxReader [common] class SyntaxReader (data: CharArray , location: Location ) A general purpose reader for formats like .proto. TypeElement [common] interface TypeElement A message type or enum type declaration.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/#package-comsquareupwireschemainternalparser","text":"","title":"Package com.squareup.wire.schema.internal.parser"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/#types","text":"Name Summary EnumConstantElement [common] data class EnumConstantElement (location: Location , name: String , tag: Int , documentation: String , options: List < OptionElement >) EnumElement [common] data class EnumElement (location: Location , name: String , documentation: String , options: List < OptionElement >, constants: List < EnumConstantElement >, reserveds: List < ReservedElement >) : TypeElement ExtendElement [common] data class ExtendElement (location: Location , name: String , documentation: String , fields: List < FieldElement >) ExtensionsElement [common] data class ExtensionsElement (location: Location , documentation: String , values: List < Any >) FieldElement [common] data class FieldElement (location: Location , label: Field.Label ?, type: String , name: String , defaultValue: String ?, jsonName: String ?, tag: Int , documentation: String , options: List < OptionElement >) GroupElement [common] data class GroupElement (label: Field.Label ?, location: Location , name: String , tag: Int , documentation: String , fields: List < FieldElement >) MessageElement [common] data class MessageElement (location: Location , name: String , documentation: String , nestedTypes: List < TypeElement >, options: List < OptionElement >, reserveds: List < ReservedElement >, fields: List < FieldElement >, oneOfs: List < OneOfElement >, extensions: List < ExtensionsElement >, groups: List < GroupElement >) : TypeElement OneOfElement [common] data class OneOfElement (name: String , documentation: String , fields: List < FieldElement >, groups: List < GroupElement >, options: List < OptionElement >) OptionElement [common] data class OptionElement (name: String , kind: OptionElement.Kind , value: Any , isParenthesized: Boolean ) OptionReader [common] class OptionReader (reader: SyntaxReader ) ProtoFileElement [common] data class ProtoFileElement (location: Location , packageName: String ?, syntax: Syntax?, imports: List < String >, publicImports: List < String >, types: List < TypeElement >, services: List < ServiceElement >, extendDeclarations: List < ExtendElement >, options: List < OptionElement >) A single .proto file. ProtoParser [common] class ProtoParser Basic parser for .proto schema declarations. ReservedElement [common] data class ReservedElement (location: Location , documentation: String , values: List < Any >) RpcElement [common] data class RpcElement (location: Location , name: String , documentation: String , requestType: String , responseType: String , requestStreaming: Boolean , responseStreaming: Boolean , options: List < OptionElement >) ServiceElement [common] data class ServiceElement (location: Location , name: String , documentation: String , rpcs: List < RpcElement >, options: List < OptionElement >) SyntaxReader [common] class SyntaxReader (data: CharArray , location: Location ) A general purpose reader for formats like .proto. TypeElement [common] interface TypeElement A message type or enum type declaration.","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumConstantElement EnumConstantElement \u00b6 [common]\\ data class EnumConstantElement (location: Location , name: String , tag: Int , documentation: String , options: List < OptionElement >) Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary documentation [common] val documentation : String location [common] val location : Location name [common] val name : String options [common] val options : List < OptionElement > tag [common] val tag : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/#enumconstantelement","text":"[common]\\ data class EnumConstantElement (location: Location , name: String , tag: Int , documentation: String , options: List < OptionElement >)","title":"EnumConstantElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/#properties","text":"Name Summary documentation [common] val documentation : String location [common] val location : Location name [common] val name : String options [common] val options : List < OptionElement > tag [common] val tag : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/-enum-constant-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumConstantElement / EnumConstantElement EnumConstantElement \u00b6 [common]\\ fun EnumConstantElement (location: Location , name: String , tag: Int , documentation: String = \u201c\u201d, options: List < OptionElement > = emptyList())","title":" enum constant element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/-enum-constant-element/#enumconstantelement","text":"[common]\\ fun EnumConstantElement (location: Location , name: String , tag: Int , documentation: String = \u201c\u201d, options: List < OptionElement > = emptyList())","title":"EnumConstantElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumConstantElement / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumConstantElement / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumConstantElement / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/options/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumConstantElement / options options \u00b6 [common]\\ val options : List < OptionElement >","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/options/#options","text":"[common]\\ val options : List < OptionElement >","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/tag/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumConstantElement / tag tag \u00b6 [common]\\ val tag : Int","title":"Tag"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/tag/#tag","text":"[common]\\ val tag : Int","title":"tag"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumConstantElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-constant-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumElement EnumElement \u00b6 [common]\\ data class EnumElement (location: Location , name: String , documentation: String , options: List < OptionElement >, constants: List < EnumConstantElement >, reserveds: List < ReservedElement >) : TypeElement Functions \u00b6 Name Summary toSchema [common] open override fun toSchema (): String Properties \u00b6 Name Summary constants [common] val constants : List < EnumConstantElement > documentation [common] open override val documentation : String location [common] open override val location : Location name [common] open override val name : String nestedTypes [common] open override val nestedTypes : List < TypeElement > options [common] open override val options : List < OptionElement > reserveds [common] val reserveds : List < ReservedElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/#enumelement","text":"[common]\\ data class EnumElement (location: Location , name: String , documentation: String , options: List < OptionElement >, constants: List < EnumConstantElement >, reserveds: List < ReservedElement >) : TypeElement","title":"EnumElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/#functions","text":"Name Summary toSchema [common] open override fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/#properties","text":"Name Summary constants [common] val constants : List < EnumConstantElement > documentation [common] open override val documentation : String location [common] open override val location : Location name [common] open override val name : String nestedTypes [common] open override val nestedTypes : List < TypeElement > options [common] open override val options : List < OptionElement > reserveds [common] val reserveds : List < ReservedElement >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/-enum-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumElement / EnumElement EnumElement \u00b6 [common]\\ fun EnumElement (location: Location , name: String , documentation: String = \u201c\u201d, options: List < OptionElement > = emptyList(), constants: List < EnumConstantElement > = emptyList(), reserveds: List < ReservedElement > = emptyList())","title":" enum element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/-enum-element/#enumelement","text":"[common]\\ fun EnumElement (location: Location , name: String , documentation: String = \u201c\u201d, options: List < OptionElement > = emptyList(), constants: List < EnumConstantElement > = emptyList(), reserveds: List < ReservedElement > = emptyList())","title":"EnumElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/constants/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumElement / constants constants \u00b6 [common]\\ val constants : List < EnumConstantElement >","title":"Constants"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/constants/#constants","text":"[common]\\ val constants : List < EnumConstantElement >","title":"constants"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumElement / documentation documentation \u00b6 [common]\\ open override val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/documentation/#documentation","text":"[common]\\ open override val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumElement / location location \u00b6 [common]\\ open override val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/location/#location","text":"[common]\\ open override val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumElement / name name \u00b6 [common]\\ open override val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/name/#name","text":"[common]\\ open override val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/nested-types/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumElement / nestedTypes nestedTypes \u00b6 [common]\\ open override val nestedTypes : List < TypeElement >","title":"Nested types"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/nested-types/#nestedtypes","text":"[common]\\ open override val nestedTypes : List < TypeElement >","title":"nestedTypes"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/options/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumElement / options options \u00b6 [common]\\ open override val options : List < OptionElement >","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/options/#options","text":"[common]\\ open override val options : List < OptionElement >","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/reserveds/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumElement / reserveds reserveds \u00b6 [common]\\ val reserveds : List < ReservedElement >","title":"Reserveds"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/reserveds/#reserveds","text":"[common]\\ val reserveds : List < ReservedElement >","title":"reserveds"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / EnumElement / toSchema toSchema \u00b6 [common]\\ open override fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-enum-element/to-schema/#toschema","text":"[common]\\ open override fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtendElement ExtendElement \u00b6 [common]\\ data class ExtendElement (location: Location , name: String , documentation: String , fields: List < FieldElement >) Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary documentation [common] val documentation : String fields [common] val fields : List < FieldElement > location [common] val location : Location name [common] val name : String","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/#extendelement","text":"[common]\\ data class ExtendElement (location: Location , name: String , documentation: String , fields: List < FieldElement >)","title":"ExtendElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/#properties","text":"Name Summary documentation [common] val documentation : String fields [common] val fields : List < FieldElement > location [common] val location : Location name [common] val name : String","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/-extend-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtendElement / ExtendElement ExtendElement \u00b6 [common]\\ fun ExtendElement (location: Location , name: String , documentation: String = \u201c\u201d, fields: List < FieldElement > = emptyList())","title":" extend element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/-extend-element/#extendelement","text":"[common]\\ fun ExtendElement (location: Location , name: String , documentation: String = \u201c\u201d, fields: List < FieldElement > = emptyList())","title":"ExtendElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtendElement / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/fields/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtendElement / fields fields \u00b6 [common]\\ val fields : List < FieldElement >","title":"Fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/fields/#fields","text":"[common]\\ val fields : List < FieldElement >","title":"fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtendElement / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtendElement / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtendElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extend-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtensionsElement ExtensionsElement \u00b6 [common]\\ data class ExtensionsElement (location: Location , documentation: String , values: List < Any >) Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary documentation [common] val documentation : String location [common] val location : Location values [common] val values : List < Any > An Int or IntRange tag.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/#extensionselement","text":"[common]\\ data class ExtensionsElement (location: Location , documentation: String , values: List < Any >)","title":"ExtensionsElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/#properties","text":"Name Summary documentation [common] val documentation : String location [common] val location : Location values [common] val values : List < Any > An Int or IntRange tag.","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/-extensions-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtensionsElement / ExtensionsElement ExtensionsElement \u00b6 [common]\\ fun ExtensionsElement (location: Location , documentation: String = \u201c\u201d, values: List < Any >)","title":" extensions element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/-extensions-element/#extensionselement","text":"[common]\\ fun ExtensionsElement (location: Location , documentation: String = \u201c\u201d, values: List < Any >)","title":"ExtensionsElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtensionsElement / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtensionsElement / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtensionsElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/values/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ExtensionsElement / values values \u00b6 [common]\\ val values : List < Any > An Int or IntRange tag.","title":"Values"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-extensions-element/values/#values","text":"[common]\\ val values : List < Any > An Int or IntRange tag.","title":"values"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement FieldElement \u00b6 [common]\\ data class FieldElement (location: Location , label: Field.Label ?, type: String , name: String , defaultValue: String ?, jsonName: String ?, tag: Int , documentation: String , options: List < OptionElement >) Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary defaultValue [common] val defaultValue : String ? = null documentation [common] val documentation : String jsonName [common] val jsonName : String ? = null label [common] val label : Field.Label ? = null location [common] val location : Location name [common] val name : String options [common] val options : List < OptionElement > tag [common] val tag : Int = 0 type [common] val type : String","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/#fieldelement","text":"[common]\\ data class FieldElement (location: Location , label: Field.Label ?, type: String , name: String , defaultValue: String ?, jsonName: String ?, tag: Int , documentation: String , options: List < OptionElement >)","title":"FieldElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/#properties","text":"Name Summary defaultValue [common] val defaultValue : String ? = null documentation [common] val documentation : String jsonName [common] val jsonName : String ? = null label [common] val label : Field.Label ? = null location [common] val location : Location name [common] val name : String options [common] val options : List < OptionElement > tag [common] val tag : Int = 0 type [common] val type : String","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/-field-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement / FieldElement FieldElement \u00b6 [common]\\ fun FieldElement (location: Location , label: Field.Label ? = null, type: String , name: String , defaultValue: String ? = null, jsonName: String ? = null, tag: Int = 0, documentation: String = \u201c\u201d, options: List < OptionElement > = emptyList())","title":" field element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/-field-element/#fieldelement","text":"[common]\\ fun FieldElement (location: Location , label: Field.Label ? = null, type: String , name: String , defaultValue: String ? = null, jsonName: String ? = null, tag: Int = 0, documentation: String = \u201c\u201d, options: List < OptionElement > = emptyList())","title":"FieldElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/default-value/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement / defaultValue defaultValue \u00b6 [common]\\ val defaultValue : String ? = null","title":"Default value"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/default-value/#defaultvalue","text":"[common]\\ val defaultValue : String ? = null","title":"defaultValue"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/json-name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement / jsonName jsonName \u00b6 [common]\\ val jsonName : String ? = null","title":"Json name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/json-name/#jsonname","text":"[common]\\ val jsonName : String ? = null","title":"jsonName"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/label/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement / label label \u00b6 [common]\\ val label : Field.Label ? = null","title":"Label"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/label/#label","text":"[common]\\ val label : Field.Label ? = null","title":"label"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/options/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement / options options \u00b6 [common]\\ val options : List < OptionElement >","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/options/#options","text":"[common]\\ val options : List < OptionElement >","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/tag/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement / tag tag \u00b6 [common]\\ val tag : Int = 0","title":"Tag"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/tag/#tag","text":"[common]\\ val tag : Int = 0","title":"tag"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/type/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / FieldElement / type type \u00b6 [common]\\ val type : String","title":"Type"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-field-element/type/#type","text":"[common]\\ val type : String","title":"type"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / GroupElement GroupElement \u00b6 [common]\\ data class GroupElement (label: Field.Label ?, location: Location , name: String , tag: Int , documentation: String , fields: List < FieldElement >) Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary documentation [common] val documentation : String fields [common] val fields : List < FieldElement > label [common] val label : Field.Label ? = null location [common] val location : Location name [common] val name : String tag [common] val tag : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/#groupelement","text":"[common]\\ data class GroupElement (label: Field.Label ?, location: Location , name: String , tag: Int , documentation: String , fields: List < FieldElement >)","title":"GroupElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/#properties","text":"Name Summary documentation [common] val documentation : String fields [common] val fields : List < FieldElement > label [common] val label : Field.Label ? = null location [common] val location : Location name [common] val name : String tag [common] val tag : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/-group-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / GroupElement / GroupElement GroupElement \u00b6 [common]\\ fun GroupElement (label: Field.Label ? = null, location: Location , name: String , tag: Int , documentation: String = \u201c\u201d, fields: List < FieldElement > = emptyList())","title":" group element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/-group-element/#groupelement","text":"[common]\\ fun GroupElement (label: Field.Label ? = null, location: Location , name: String , tag: Int , documentation: String = \u201c\u201d, fields: List < FieldElement > = emptyList())","title":"GroupElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / GroupElement / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/fields/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / GroupElement / fields fields \u00b6 [common]\\ val fields : List < FieldElement >","title":"Fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/fields/#fields","text":"[common]\\ val fields : List < FieldElement >","title":"fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/label/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / GroupElement / label label \u00b6 [common]\\ val label : Field.Label ? = null","title":"Label"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/label/#label","text":"[common]\\ val label : Field.Label ? = null","title":"label"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / GroupElement / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / GroupElement / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/tag/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / GroupElement / tag tag \u00b6 [common]\\ val tag : Int","title":"Tag"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/tag/#tag","text":"[common]\\ val tag : Int","title":"tag"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / GroupElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-group-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement MessageElement \u00b6 [common]\\ data class MessageElement (location: Location , name: String , documentation: String , nestedTypes: List < TypeElement >, options: List < OptionElement >, reserveds: List < ReservedElement >, fields: List < FieldElement >, oneOfs: List < OneOfElement >, extensions: List < ExtensionsElement >, groups: List < GroupElement >) : TypeElement Functions \u00b6 Name Summary toSchema [common] open override fun toSchema (): String Properties \u00b6 Name Summary documentation [common] open override val documentation : String extensions [common] val extensions : List < ExtensionsElement > fields [common] val fields : List < FieldElement > groups [common] val groups : List < GroupElement > location [common] open override val location : Location name [common] open override val name : String nestedTypes [common] open override val nestedTypes : List < TypeElement > oneOfs [common] val oneOfs : List < OneOfElement > options [common] open override val options : List < OptionElement > reserveds [common] val reserveds : List < ReservedElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/#messageelement","text":"[common]\\ data class MessageElement (location: Location , name: String , documentation: String , nestedTypes: List < TypeElement >, options: List < OptionElement >, reserveds: List < ReservedElement >, fields: List < FieldElement >, oneOfs: List < OneOfElement >, extensions: List < ExtensionsElement >, groups: List < GroupElement >) : TypeElement","title":"MessageElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/#functions","text":"Name Summary toSchema [common] open override fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/#properties","text":"Name Summary documentation [common] open override val documentation : String extensions [common] val extensions : List < ExtensionsElement > fields [common] val fields : List < FieldElement > groups [common] val groups : List < GroupElement > location [common] open override val location : Location name [common] open override val name : String nestedTypes [common] open override val nestedTypes : List < TypeElement > oneOfs [common] val oneOfs : List < OneOfElement > options [common] open override val options : List < OptionElement > reserveds [common] val reserveds : List < ReservedElement >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/-message-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / MessageElement MessageElement \u00b6 [common]\\ fun MessageElement (location: Location , name: String , documentation: String = \u201c\u201d, nestedTypes: List < TypeElement > = emptyList(), options: List < OptionElement > = emptyList(), reserveds: List < ReservedElement > = emptyList(), fields: List < FieldElement > = emptyList(), oneOfs: List < OneOfElement > = emptyList(), extensions: List < ExtensionsElement > = emptyList(), groups: List < GroupElement > = emptyList())","title":" message element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/-message-element/#messageelement","text":"[common]\\ fun MessageElement (location: Location , name: String , documentation: String = \u201c\u201d, nestedTypes: List < TypeElement > = emptyList(), options: List < OptionElement > = emptyList(), reserveds: List < ReservedElement > = emptyList(), fields: List < FieldElement > = emptyList(), oneOfs: List < OneOfElement > = emptyList(), extensions: List < ExtensionsElement > = emptyList(), groups: List < GroupElement > = emptyList())","title":"MessageElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / documentation documentation \u00b6 [common]\\ open override val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/documentation/#documentation","text":"[common]\\ open override val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/extensions/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / extensions extensions \u00b6 [common]\\ val extensions : List < ExtensionsElement >","title":"Extensions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/extensions/#extensions","text":"[common]\\ val extensions : List < ExtensionsElement >","title":"extensions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/fields/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / fields fields \u00b6 [common]\\ val fields : List < FieldElement >","title":"Fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/fields/#fields","text":"[common]\\ val fields : List < FieldElement >","title":"fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/groups/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / groups groups \u00b6 [common]\\ val groups : List < GroupElement >","title":"Groups"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/groups/#groups","text":"[common]\\ val groups : List < GroupElement >","title":"groups"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / location location \u00b6 [common]\\ open override val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/location/#location","text":"[common]\\ open override val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / name name \u00b6 [common]\\ open override val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/name/#name","text":"[common]\\ open override val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/nested-types/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / nestedTypes nestedTypes \u00b6 [common]\\ open override val nestedTypes : List < TypeElement >","title":"Nested types"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/nested-types/#nestedtypes","text":"[common]\\ open override val nestedTypes : List < TypeElement >","title":"nestedTypes"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/one-ofs/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / oneOfs oneOfs \u00b6 [common]\\ val oneOfs : List < OneOfElement >","title":"One ofs"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/one-ofs/#oneofs","text":"[common]\\ val oneOfs : List < OneOfElement >","title":"oneOfs"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/options/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / options options \u00b6 [common]\\ open override val options : List < OptionElement >","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/options/#options","text":"[common]\\ open override val options : List < OptionElement >","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/reserveds/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / reserveds reserveds \u00b6 [common]\\ val reserveds : List < ReservedElement >","title":"Reserveds"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/reserveds/#reserveds","text":"[common]\\ val reserveds : List < ReservedElement >","title":"reserveds"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / MessageElement / toSchema toSchema \u00b6 [common]\\ open override fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-message-element/to-schema/#toschema","text":"[common]\\ open override fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OneOfElement OneOfElement \u00b6 [common]\\ data class OneOfElement (name: String , documentation: String , fields: List < FieldElement >, groups: List < GroupElement >, options: List < OptionElement >) Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary documentation [common] val documentation : String fields [common] val fields : List < FieldElement > groups [common] val groups : List < GroupElement > name [common] val name : String options [common] val options : List < OptionElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/#oneofelement","text":"[common]\\ data class OneOfElement (name: String , documentation: String , fields: List < FieldElement >, groups: List < GroupElement >, options: List < OptionElement >)","title":"OneOfElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/#properties","text":"Name Summary documentation [common] val documentation : String fields [common] val fields : List < FieldElement > groups [common] val groups : List < GroupElement > name [common] val name : String options [common] val options : List < OptionElement >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/-one-of-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OneOfElement / OneOfElement OneOfElement \u00b6 [common]\\ fun OneOfElement (name: String , documentation: String = \u201c\u201d, fields: List < FieldElement > = emptyList(), groups: List < GroupElement > = emptyList(), options: List < OptionElement > = emptyList())","title":" one of element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/-one-of-element/#oneofelement","text":"[common]\\ fun OneOfElement (name: String , documentation: String = \u201c\u201d, fields: List < FieldElement > = emptyList(), groups: List < GroupElement > = emptyList(), options: List < OptionElement > = emptyList())","title":"OneOfElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OneOfElement / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/fields/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OneOfElement / fields fields \u00b6 [common]\\ val fields : List < FieldElement >","title":"Fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/fields/#fields","text":"[common]\\ val fields : List < FieldElement >","title":"fields"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/groups/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OneOfElement / groups groups \u00b6 [common]\\ val groups : List < GroupElement >","title":"Groups"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/groups/#groups","text":"[common]\\ val groups : List < GroupElement >","title":"groups"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OneOfElement / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/options/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OneOfElement / options options \u00b6 [common]\\ val options : List < OptionElement >","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/options/#options","text":"[common]\\ val options : List < OptionElement >","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OneOfElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-one-of-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement OptionElement \u00b6 [common]\\ data class OptionElement (name: String , kind: OptionElement.Kind , value: Any , isParenthesized: Boolean ) Types \u00b6 Name Summary Companion [common] object Companion Kind [common] enum Kind : Enum < OptionElement.Kind > OptionPrimitive [common] data class OptionPrimitive (kind: OptionElement.Kind , value: Any ) An internal representation of the Option primitive types. Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String toSchemaDeclaration [common] fun toSchemaDeclaration (): String Properties \u00b6 Name Summary isParenthesized [common] val isParenthesized : Boolean If true, this OptionElement is a custom option. kind [common] val kind : OptionElement.Kind name [common] val name : String value [common] val value : Any","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/#optionelement","text":"[common]\\ data class OptionElement (name: String , kind: OptionElement.Kind , value: Any , isParenthesized: Boolean )","title":"OptionElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/#types","text":"Name Summary Companion [common] object Companion Kind [common] enum Kind : Enum < OptionElement.Kind > OptionPrimitive [common] data class OptionPrimitive (kind: OptionElement.Kind , value: Any ) An internal representation of the Option primitive types.","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String toSchemaDeclaration [common] fun toSchemaDeclaration (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/#properties","text":"Name Summary isParenthesized [common] val isParenthesized : Boolean If true, this OptionElement is a custom option. kind [common] val kind : OptionElement.Kind name [common] val name : String value [common] val value : Any","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / OptionElement OptionElement \u00b6 [common]\\ fun OptionElement (name: String , kind: OptionElement.Kind , value: Any , isParenthesized: Boolean )","title":" option element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-element/#optionelement","text":"[common]\\ fun OptionElement (name: String , kind: OptionElement.Kind , value: Any , isParenthesized: Boolean )","title":"OptionElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/is-parenthesized/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / isParenthesized isParenthesized \u00b6 [common]\\ val isParenthesized : Boolean If true, this OptionElement is a custom option.","title":"Is parenthesized"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/is-parenthesized/#isparenthesized","text":"[common]\\ val isParenthesized : Boolean If true, this OptionElement is a custom option.","title":"isParenthesized"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/kind/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / kind kind \u00b6 [common]\\ val kind : OptionElement.Kind","title":"Kind"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/kind/#kind","text":"[common]\\ val kind : OptionElement.Kind","title":"kind"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/to-schema-declaration/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / toSchemaDeclaration toSchemaDeclaration \u00b6 [common]\\ fun toSchemaDeclaration (): String","title":"To schema declaration"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/to-schema-declaration/#toschemadeclaration","text":"[common]\\ fun toSchemaDeclaration (): String","title":"toSchemaDeclaration"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/value/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / value value \u00b6 [common]\\ val value : Any","title":"Value"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/value/#value","text":"[common]\\ val value : Any","title":"value"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-companion/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary create [common] @ JvmOverloads fun create (name: String , kind: OptionElement.Kind , value: Any , isParenthesized: Boolean = false): OptionElement","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-companion/#functions","text":"Name Summary create [common] @ JvmOverloads fun create (name: String , kind: OptionElement.Kind , value: Any , isParenthesized: Boolean = false): OptionElement","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-companion/create/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / Companion / create create \u00b6 [common]\\ @ JvmOverloads fun create (name: String , kind: OptionElement.Kind , value: Any , isParenthesized: Boolean = false): OptionElement","title":"Create"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-companion/create/#create","text":"[common]\\ @ JvmOverloads fun create (name: String , kind: OptionElement.Kind , value: Any , isParenthesized: Boolean = false): OptionElement","title":"create"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / Kind Kind \u00b6 [common]\\ enum Kind : Enum < OptionElement.Kind > Entries \u00b6 OPTION [common] OPTION () LIST [common] LIST () MAP [common] MAP () ENUM [common] ENUM () NUMBER [common] NUMBER () BOOLEAN [common] BOOLEAN () STRING [common] STRING () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/#kind","text":"[common]\\ enum Kind : Enum < OptionElement.Kind >","title":"Kind"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/#entries","text":"OPTION [common] OPTION () LIST [common] LIST () MAP [common] MAP () ENUM [common] ENUM () NUMBER [common] NUMBER () BOOLEAN [common] BOOLEAN () STRING [common] STRING ()","title":"Entries"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-b-o-o-l-e-a-n/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / Kind / BOOLEAN BOOLEAN \u00b6 [common]\\ BOOLEAN () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-b-o-o-l-e-a-n/#boolean","text":"[common]\\ BOOLEAN ()","title":"BOOLEAN"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-b-o-o-l-e-a-n/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-e-n-u-m/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / Kind / ENUM ENUM \u00b6 [common]\\ ENUM () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-e-n-u-m/#enum","text":"[common]\\ ENUM ()","title":"ENUM"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-e-n-u-m/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-l-i-s-t/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / Kind / LIST LIST \u00b6 [common]\\ LIST () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-l-i-s-t/#list","text":"[common]\\ LIST ()","title":"LIST"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-l-i-s-t/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-m-a-p/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / Kind / MAP MAP \u00b6 [common]\\ MAP () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-m-a-p/#map","text":"[common]\\ MAP ()","title":"MAP"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-m-a-p/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-n-u-m-b-e-r/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / Kind / NUMBER NUMBER \u00b6 [common]\\ NUMBER () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-n-u-m-b-e-r/#number","text":"[common]\\ NUMBER ()","title":"NUMBER"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-n-u-m-b-e-r/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-o-p-t-i-o-n/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / Kind / OPTION OPTION \u00b6 [common]\\ OPTION () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-o-p-t-i-o-n/#option","text":"[common]\\ OPTION ()","title":"OPTION"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-o-p-t-i-o-n/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-s-t-r-i-n-g/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / Kind / STRING STRING \u00b6 [common]\\ STRING () Properties \u00b6 Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-s-t-r-i-n-g/#string","text":"[common]\\ STRING ()","title":"STRING"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-kind/-s-t-r-i-n-g/#properties","text":"Name Summary name [common] val name : String ordinal [common] val ordinal : Int","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / OptionPrimitive OptionPrimitive \u00b6 [common]\\ data class OptionPrimitive (kind: OptionElement.Kind , value: Any ) An internal representation of the Option primitive types. Constructors \u00b6 OptionPrimitive [common] fun OptionPrimitive (kind: OptionElement.Kind , value: Any ) Properties \u00b6 Name Summary kind [common] val kind : OptionElement.Kind value [common] val value : Any","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/#optionprimitive","text":"[common]\\ data class OptionPrimitive (kind: OptionElement.Kind , value: Any ) An internal representation of the Option primitive types.","title":"OptionPrimitive"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/#constructors","text":"OptionPrimitive [common] fun OptionPrimitive (kind: OptionElement.Kind , value: Any )","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/#properties","text":"Name Summary kind [common] val kind : OptionElement.Kind value [common] val value : Any","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/-option-primitive/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / OptionPrimitive / OptionPrimitive OptionPrimitive \u00b6 [common]\\ fun OptionPrimitive (kind: OptionElement.Kind , value: Any )","title":" option primitive"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/-option-primitive/#optionprimitive","text":"[common]\\ fun OptionPrimitive (kind: OptionElement.Kind , value: Any )","title":"OptionPrimitive"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/kind/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / OptionPrimitive / kind kind \u00b6 [common]\\ val kind : OptionElement.Kind","title":"Kind"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/kind/#kind","text":"[common]\\ val kind : OptionElement.Kind","title":"kind"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/value/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionElement / OptionPrimitive / value value \u00b6 [common]\\ val value : Any","title":"Value"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-element/-option-primitive/value/#value","text":"[common]\\ val value : Any","title":"value"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionReader OptionReader \u00b6 [common]\\ class OptionReader (reader: SyntaxReader ) Functions \u00b6 Name Summary readOption [common] fun readOption (keyValueSeparator: Char ): OptionElement Reads a option containing a name, an \u2018=\u2019 or \u2018:\u2019, and a value. readOptions [common] fun readOptions (): List < OptionElement > Reads options enclosed in \u2018\u2019 and \u2018\u2019 if they are present and returns them. Returns an empty list if no options are present.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/#optionreader","text":"[common]\\ class OptionReader (reader: SyntaxReader )","title":"OptionReader"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/#functions","text":"Name Summary readOption [common] fun readOption (keyValueSeparator: Char ): OptionElement Reads a option containing a name, an \u2018=\u2019 or \u2018:\u2019, and a value. readOptions [common] fun readOptions (): List < OptionElement > Reads options enclosed in \u2018\u2019 and \u2018\u2019 if they are present and returns them. Returns an empty list if no options are present.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/-option-reader/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionReader / OptionReader OptionReader \u00b6 [common]\\ fun OptionReader (reader: SyntaxReader )","title":" option reader"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/-option-reader/#optionreader","text":"[common]\\ fun OptionReader (reader: SyntaxReader )","title":"OptionReader"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/read-option/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionReader / readOption readOption \u00b6 [common]\\ fun readOption (keyValueSeparator: Char ): OptionElement Reads a option containing a name, an \u2018=\u2019 or \u2018:\u2019, and a value.","title":"Read option"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/read-option/#readoption","text":"[common]\\ fun readOption (keyValueSeparator: Char ): OptionElement Reads a option containing a name, an \u2018=\u2019 or \u2018:\u2019, and a value.","title":"readOption"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/read-options/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / OptionReader / readOptions readOptions \u00b6 [common]\\ fun readOptions (): List < OptionElement > Reads options enclosed in \u2018\u2019 and \u2018\u2019 if they are present and returns them. Returns an empty list if no options are present.","title":"Read options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-option-reader/read-options/#readoptions","text":"[common]\\ fun readOptions (): List < OptionElement > Reads options enclosed in \u2018\u2019 and \u2018\u2019 if they are present and returns them. Returns an empty list if no options are present.","title":"readOptions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement ProtoFileElement \u00b6 [common]\\ data class ProtoFileElement (location: Location , packageName: String ?, syntax: Syntax?, imports: List < String >, publicImports: List < String >, types: List < TypeElement >, services: List < ServiceElement >, extendDeclarations: List < ExtendElement >, options: List < OptionElement >) A single .proto file. Constructors \u00b6 ProtoFileElement [common] fun ProtoFileElement (location: Location , packageName: String ? = null, syntax: Syntax? = null, imports: List < String > = emptyList(), publicImports: List < String > = emptyList(), types: List < TypeElement > = emptyList(), services: List < ServiceElement > = emptyList(), extendDeclarations: List < ExtendElement > = emptyList(), options: List < OptionElement > = emptyList()) Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary extendDeclarations [common] val extendDeclarations : List < ExtendElement > imports [common] val imports : List < String > location [common] val location : Location options [common] val options : List < OptionElement > packageName [common] val packageName : String ? = null publicImports [common] val publicImports : List < String > services [common] val services : List < ServiceElement > syntax [common] val syntax : Syntax? = null types [common] val types : List < TypeElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/#protofileelement","text":"[common]\\ data class ProtoFileElement (location: Location , packageName: String ?, syntax: Syntax?, imports: List < String >, publicImports: List < String >, types: List < TypeElement >, services: List < ServiceElement >, extendDeclarations: List < ExtendElement >, options: List < OptionElement >) A single .proto file.","title":"ProtoFileElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/#constructors","text":"ProtoFileElement [common] fun ProtoFileElement (location: Location , packageName: String ? = null, syntax: Syntax? = null, imports: List < String > = emptyList(), publicImports: List < String > = emptyList(), types: List < TypeElement > = emptyList(), services: List < ServiceElement > = emptyList(), extendDeclarations: List < ExtendElement > = emptyList(), options: List < OptionElement > = emptyList())","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/#properties","text":"Name Summary extendDeclarations [common] val extendDeclarations : List < ExtendElement > imports [common] val imports : List < String > location [common] val location : Location options [common] val options : List < OptionElement > packageName [common] val packageName : String ? = null publicImports [common] val publicImports : List < String > services [common] val services : List < ServiceElement > syntax [common] val syntax : Syntax? = null types [common] val types : List < TypeElement >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-proto-file-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / ProtoFileElement ProtoFileElement \u00b6 [common]\\ fun ProtoFileElement (location: Location , packageName: String ? = null, syntax: Syntax? = null, imports: List < String > = emptyList(), publicImports: List < String > = emptyList(), types: List < TypeElement > = emptyList(), services: List < ServiceElement > = emptyList(), extendDeclarations: List < ExtendElement > = emptyList(), options: List < OptionElement > = emptyList())","title":" proto file element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-proto-file-element/#protofileelement","text":"[common]\\ fun ProtoFileElement (location: Location , packageName: String ? = null, syntax: Syntax? = null, imports: List < String > = emptyList(), publicImports: List < String > = emptyList(), types: List < TypeElement > = emptyList(), services: List < ServiceElement > = emptyList(), extendDeclarations: List < ExtendElement > = emptyList(), options: List < OptionElement > = emptyList())","title":"ProtoFileElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/extend-declarations/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / extendDeclarations extendDeclarations \u00b6 [common]\\ val extendDeclarations : List < ExtendElement >","title":"Extend declarations"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/extend-declarations/#extenddeclarations","text":"[common]\\ val extendDeclarations : List < ExtendElement >","title":"extendDeclarations"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/imports/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / imports imports \u00b6 [common]\\ val imports : List < String >","title":"Imports"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/imports/#imports","text":"[common]\\ val imports : List < String >","title":"imports"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/options/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / options options \u00b6 [common]\\ val options : List < OptionElement >","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/options/#options","text":"[common]\\ val options : List < OptionElement >","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/package-name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / packageName packageName \u00b6 [common]\\ val packageName : String ? = null","title":"Package name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/package-name/#packagename","text":"[common]\\ val packageName : String ? = null","title":"packageName"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/public-imports/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / publicImports publicImports \u00b6 [common]\\ val publicImports : List < String >","title":"Public imports"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/public-imports/#publicimports","text":"[common]\\ val publicImports : List < String >","title":"publicImports"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/services/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / services services \u00b6 [common]\\ val services : List < ServiceElement >","title":"Services"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/services/#services","text":"[common]\\ val services : List < ServiceElement >","title":"services"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/syntax/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / syntax syntax \u00b6 [common]\\ val syntax : Syntax? = null","title":"Syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/syntax/#syntax","text":"[common]\\ val syntax : Syntax? = null","title":"syntax"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/types/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / types types \u00b6 [common]\\ val types : List < TypeElement >","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/types/#types","text":"[common]\\ val types : List < TypeElement >","title":"types"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-companion/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary empty [common] @ JvmStatic fun empty (path: String ): ProtoFileElement Returns an empty proto file to serve as a null object when a file cannot be found.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-companion/#functions","text":"Name Summary empty [common] @ JvmStatic fun empty (path: String ): ProtoFileElement Returns an empty proto file to serve as a null object when a file cannot be found.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-companion/empty/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoFileElement / Companion / empty empty \u00b6 [common]\\ @ JvmStatic fun empty (path: String ): ProtoFileElement Returns an empty proto file to serve as a null object when a file cannot be found.","title":"Empty"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-file-element/-companion/empty/#empty","text":"[common]\\ @ JvmStatic fun empty (path: String ): ProtoFileElement Returns an empty proto file to serve as a null object when a file cannot be found.","title":"empty"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoParser ProtoParser \u00b6 [common]\\ class ProtoParser Basic parser for .proto schema declarations. Types \u00b6 Name Summary Companion [common] object Companion Functions \u00b6 Name Summary readProtoFile [common] fun readProtoFile (): ProtoFileElement","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/#protoparser","text":"[common]\\ class ProtoParser Basic parser for .proto schema declarations.","title":"ProtoParser"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/#types","text":"Name Summary Companion [common] object Companion","title":"Types"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/#functions","text":"Name Summary readProtoFile [common] fun readProtoFile (): ProtoFileElement","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/read-proto-file/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoParser / readProtoFile readProtoFile \u00b6 [common]\\ fun readProtoFile (): ProtoFileElement","title":"Read proto file"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/read-proto-file/#readprotofile","text":"[common]\\ fun readProtoFile (): ProtoFileElement","title":"readProtoFile"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/-companion/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoParser / Companion Companion \u00b6 [common]\\ object Companion Functions \u00b6 Name Summary parse [common] fun parse (location: Location , data: String ): ProtoFileElement Parse a named .proto schema.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/-companion/#companion","text":"[common]\\ object Companion","title":"Companion"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/-companion/#functions","text":"Name Summary parse [common] fun parse (location: Location , data: String ): ProtoFileElement Parse a named .proto schema.","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/-companion/parse/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ProtoParser / Companion / parse parse \u00b6 [common]\\ fun parse (location: Location , data: String ): ProtoFileElement Parse a named .proto schema.","title":"Parse"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-proto-parser/-companion/parse/#parse","text":"[common]\\ fun parse (location: Location , data: String ): ProtoFileElement Parse a named .proto schema.","title":"parse"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ReservedElement ReservedElement \u00b6 [common]\\ data class ReservedElement (location: Location , documentation: String , values: List < Any >) Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary documentation [common] val documentation : String location [common] val location : Location values [common] val values : List < Any > A String name or Int or IntRange tag.","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/#reservedelement","text":"[common]\\ data class ReservedElement (location: Location , documentation: String , values: List < Any >)","title":"ReservedElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/#properties","text":"Name Summary documentation [common] val documentation : String location [common] val location : Location values [common] val values : List < Any > A String name or Int or IntRange tag.","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/-reserved-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ReservedElement / ReservedElement ReservedElement \u00b6 [common]\\ fun ReservedElement (location: Location , documentation: String = \u201c\u201d, values: List < Any >)","title":" reserved element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/-reserved-element/#reservedelement","text":"[common]\\ fun ReservedElement (location: Location , documentation: String = \u201c\u201d, values: List < Any >)","title":"ReservedElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ReservedElement / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ReservedElement / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ReservedElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/values/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ReservedElement / values values \u00b6 [common]\\ val values : List < Any > A String name or Int or IntRange tag.","title":"Values"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-reserved-element/values/#values","text":"[common]\\ val values : List < Any > A String name or Int or IntRange tag.","title":"values"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / RpcElement RpcElement \u00b6 [common]\\ data class RpcElement (location: Location , name: String , documentation: String , requestType: String , responseType: String , requestStreaming: Boolean , responseStreaming: Boolean , options: List < OptionElement >) Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary documentation [common] val documentation : String location [common] val location : Location name [common] val name : String options [common] val options : List < OptionElement > requestStreaming [common] val requestStreaming : Boolean = false requestType [common] val requestType : String responseStreaming [common] val responseStreaming : Boolean = false responseType [common] val responseType : String","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/#rpcelement","text":"[common]\\ data class RpcElement (location: Location , name: String , documentation: String , requestType: String , responseType: String , requestStreaming: Boolean , responseStreaming: Boolean , options: List < OptionElement >)","title":"RpcElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/#properties","text":"Name Summary documentation [common] val documentation : String location [common] val location : Location name [common] val name : String options [common] val options : List < OptionElement > requestStreaming [common] val requestStreaming : Boolean = false requestType [common] val requestType : String responseStreaming [common] val responseStreaming : Boolean = false responseType [common] val responseType : String","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/-rpc-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / RpcElement / RpcElement RpcElement \u00b6 [common]\\ fun RpcElement (location: Location , name: String , documentation: String = \u201c\u201d, requestType: String , responseType: String , requestStreaming: Boolean = false, responseStreaming: Boolean = false, options: List < OptionElement > = emptyList())","title":" rpc element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/-rpc-element/#rpcelement","text":"[common]\\ fun RpcElement (location: Location , name: String , documentation: String = \u201c\u201d, requestType: String , responseType: String , requestStreaming: Boolean = false, responseStreaming: Boolean = false, options: List < OptionElement > = emptyList())","title":"RpcElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / RpcElement / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / RpcElement / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / RpcElement / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/options/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / RpcElement / options options \u00b6 [common]\\ val options : List < OptionElement >","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/options/#options","text":"[common]\\ val options : List < OptionElement >","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/request-streaming/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / RpcElement / requestStreaming requestStreaming \u00b6 [common]\\ val requestStreaming : Boolean = false","title":"Request streaming"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/request-streaming/#requeststreaming","text":"[common]\\ val requestStreaming : Boolean = false","title":"requestStreaming"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/request-type/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / RpcElement / requestType requestType \u00b6 [common]\\ val requestType : String","title":"Request type"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/request-type/#requesttype","text":"[common]\\ val requestType : String","title":"requestType"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/response-streaming/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / RpcElement / responseStreaming responseStreaming \u00b6 [common]\\ val responseStreaming : Boolean = false","title":"Response streaming"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/response-streaming/#responsestreaming","text":"[common]\\ val responseStreaming : Boolean = false","title":"responseStreaming"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/response-type/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / RpcElement / responseType responseType \u00b6 [common]\\ val responseType : String","title":"Response type"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/response-type/#responsetype","text":"[common]\\ val responseType : String","title":"responseType"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / RpcElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-rpc-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ServiceElement ServiceElement \u00b6 [common]\\ data class ServiceElement (location: Location , name: String , documentation: String , rpcs: List < RpcElement >, options: List < OptionElement >) Functions \u00b6 Name Summary toSchema [common] fun toSchema (): String Properties \u00b6 Name Summary documentation [common] val documentation : String location [common] val location : Location name [common] val name : String options [common] val options : List < OptionElement > rpcs [common] val rpcs : List < RpcElement >","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/#serviceelement","text":"[common]\\ data class ServiceElement (location: Location , name: String , documentation: String , rpcs: List < RpcElement >, options: List < OptionElement >)","title":"ServiceElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/#functions","text":"Name Summary toSchema [common] fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/#properties","text":"Name Summary documentation [common] val documentation : String location [common] val location : Location name [common] val name : String options [common] val options : List < OptionElement > rpcs [common] val rpcs : List < RpcElement >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/-service-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ServiceElement / ServiceElement ServiceElement \u00b6 [common]\\ fun ServiceElement (location: Location , name: String , documentation: String = \u201c\u201d, rpcs: List < RpcElement > = emptyList(), options: List < OptionElement > = emptyList())","title":" service element"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/-service-element/#serviceelement","text":"[common]\\ fun ServiceElement (location: Location , name: String , documentation: String = \u201c\u201d, rpcs: List < RpcElement > = emptyList(), options: List < OptionElement > = emptyList())","title":"ServiceElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ServiceElement / documentation documentation \u00b6 [common]\\ val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/documentation/#documentation","text":"[common]\\ val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ServiceElement / location location \u00b6 [common]\\ val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/location/#location","text":"[common]\\ val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ServiceElement / name name \u00b6 [common]\\ val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/name/#name","text":"[common]\\ val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/options/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ServiceElement / options options \u00b6 [common]\\ val options : List < OptionElement >","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/options/#options","text":"[common]\\ val options : List < OptionElement >","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/rpcs/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ServiceElement / rpcs rpcs \u00b6 [common]\\ val rpcs : List < RpcElement >","title":"Rpcs"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/rpcs/#rpcs","text":"[common]\\ val rpcs : List < RpcElement >","title":"rpcs"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / ServiceElement / toSchema toSchema \u00b6 [common]\\ fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-service-element/to-schema/#toschema","text":"[common]\\ fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader SyntaxReader \u00b6 [common]\\ class SyntaxReader (data: CharArray , location: Location ) A general purpose reader for formats like .proto. Constructors \u00b6 SyntaxReader [common] fun SyntaxReader (data: CharArray , location: Location ) Functions \u00b6 Name Summary exhausted [common] fun exhausted (): Boolean expect [common] inline fun expect (condition: Boolean , location: Location = location(), message: () -> String ) location [common] fun location (): Location peekChar [common] fun peekChar (): Char Peeks a non-whitespace character and returns it. The only difference between this and readChar is that this doesn\u2019t consume the char. [common] fun peekChar (c: Char ): Boolean pushBack [common] fun pushBack (c: Char ) Push back the most recently read character. readChar [common] fun readChar (): Char Reads a non-whitespace character and returns it. readDataType [common] fun readDataType (): String Reads a scalar, map, or type name. [common] fun readDataType (name: String ): String Reads a scalar, map, or type name with name as a prefix word. readDocumentation [common] fun readDocumentation (): String Like skipWhitespace, but this returns a string containing all comment text. By convention, comments before a declaration document that declaration. readInt [common] fun readInt (): Int Reads an integer and returns it. readName [common] fun readName (allowLeadingDigit: Boolean = true): String Reads a (paren-wrapped), square-wrapped or naked symbol name. readQuotedString [common] fun readQuotedString (): String readString [common] fun readString (): String Reads a quoted or unquoted string and returns it. readWord [common] fun readWord (allowLeadingDigit: Boolean = true): String Reads a non-empty word and returns it. require [common] fun require (c: Char ) Reads a non-whitespace character \u2018c\u2019, or throws an exception. tryAppendTrailingDocumentation [common] fun tryAppendTrailingDocumentation (documentation: String ): String unexpected [common] fun unexpected (message: String , location: Location ? = location()): RuntimeException","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/#syntaxreader","text":"[common]\\ class SyntaxReader (data: CharArray , location: Location ) A general purpose reader for formats like .proto.","title":"SyntaxReader"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/#constructors","text":"SyntaxReader [common] fun SyntaxReader (data: CharArray , location: Location )","title":"Constructors"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/#functions","text":"Name Summary exhausted [common] fun exhausted (): Boolean expect [common] inline fun expect (condition: Boolean , location: Location = location(), message: () -> String ) location [common] fun location (): Location peekChar [common] fun peekChar (): Char Peeks a non-whitespace character and returns it. The only difference between this and readChar is that this doesn\u2019t consume the char. [common] fun peekChar (c: Char ): Boolean pushBack [common] fun pushBack (c: Char ) Push back the most recently read character. readChar [common] fun readChar (): Char Reads a non-whitespace character and returns it. readDataType [common] fun readDataType (): String Reads a scalar, map, or type name. [common] fun readDataType (name: String ): String Reads a scalar, map, or type name with name as a prefix word. readDocumentation [common] fun readDocumentation (): String Like skipWhitespace, but this returns a string containing all comment text. By convention, comments before a declaration document that declaration. readInt [common] fun readInt (): Int Reads an integer and returns it. readName [common] fun readName (allowLeadingDigit: Boolean = true): String Reads a (paren-wrapped), square-wrapped or naked symbol name. readQuotedString [common] fun readQuotedString (): String readString [common] fun readString (): String Reads a quoted or unquoted string and returns it. readWord [common] fun readWord (allowLeadingDigit: Boolean = true): String Reads a non-empty word and returns it. require [common] fun require (c: Char ) Reads a non-whitespace character \u2018c\u2019, or throws an exception. tryAppendTrailingDocumentation [common] fun tryAppendTrailingDocumentation (documentation: String ): String unexpected [common] fun unexpected (message: String , location: Location ? = location()): RuntimeException","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/-syntax-reader/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / SyntaxReader SyntaxReader \u00b6 [common]\\ fun SyntaxReader (data: CharArray , location: Location )","title":" syntax reader"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/-syntax-reader/#syntaxreader","text":"[common]\\ fun SyntaxReader (data: CharArray , location: Location )","title":"SyntaxReader"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/exhausted/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / exhausted exhausted \u00b6 [common]\\ fun exhausted (): Boolean","title":"Exhausted"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/exhausted/#exhausted","text":"[common]\\ fun exhausted (): Boolean","title":"exhausted"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/expect/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / expect expect \u00b6 [common]\\ inline fun expect (condition: Boolean , location: Location = location(), message: () -> String )","title":"Expect"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/expect/#expect","text":"[common]\\ inline fun expect (condition: Boolean , location: Location = location(), message: () -> String )","title":"expect"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / location location \u00b6 [common]\\ fun location (): Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/location/#location","text":"[common]\\ fun location (): Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/peek-char/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / peekChar peekChar \u00b6 [common]\\ fun peekChar (): Char Peeks a non-whitespace character and returns it. The only difference between this and readChar is that this doesn\u2019t consume the char. [common]\\ fun peekChar (c: Char ): Boolean","title":"Peek char"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/peek-char/#peekchar","text":"[common]\\ fun peekChar (): Char Peeks a non-whitespace character and returns it. The only difference between this and readChar is that this doesn\u2019t consume the char. [common]\\ fun peekChar (c: Char ): Boolean","title":"peekChar"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/push-back/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / pushBack pushBack \u00b6 [common]\\ fun pushBack (c: Char ) Push back the most recently read character.","title":"Push back"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/push-back/#pushback","text":"[common]\\ fun pushBack (c: Char ) Push back the most recently read character.","title":"pushBack"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-char/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / readChar readChar \u00b6 [common]\\ fun readChar (): Char Reads a non-whitespace character and returns it.","title":"Read char"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-char/#readchar","text":"[common]\\ fun readChar (): Char Reads a non-whitespace character and returns it.","title":"readChar"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-data-type/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / readDataType readDataType \u00b6 [common]\\ fun readDataType (): String Reads a scalar, map, or type name. [common]\\ fun readDataType (name: String ): String Reads a scalar, map, or type name with name as a prefix word.","title":"Read data type"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-data-type/#readdatatype","text":"[common]\\ fun readDataType (): String Reads a scalar, map, or type name. [common]\\ fun readDataType (name: String ): String Reads a scalar, map, or type name with name as a prefix word.","title":"readDataType"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / readDocumentation readDocumentation \u00b6 [common]\\ fun readDocumentation (): String Like skipWhitespace, but this returns a string containing all comment text. By convention, comments before a declaration document that declaration.","title":"Read documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-documentation/#readdocumentation","text":"[common]\\ fun readDocumentation (): String Like skipWhitespace, but this returns a string containing all comment text. By convention, comments before a declaration document that declaration.","title":"readDocumentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-int/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / readInt readInt \u00b6 [common]\\ fun readInt (): Int Reads an integer and returns it.","title":"Read int"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-int/#readint","text":"[common]\\ fun readInt (): Int Reads an integer and returns it.","title":"readInt"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / readName readName \u00b6 [common]\\ fun readName (allowLeadingDigit: Boolean = true): String Reads a (paren-wrapped), square-wrapped or naked symbol name.","title":"Read name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-name/#readname","text":"[common]\\ fun readName (allowLeadingDigit: Boolean = true): String Reads a (paren-wrapped), square-wrapped or naked symbol name.","title":"readName"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-quoted-string/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / readQuotedString readQuotedString \u00b6 [common]\\ fun readQuotedString (): String","title":"Read quoted string"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-quoted-string/#readquotedstring","text":"[common]\\ fun readQuotedString (): String","title":"readQuotedString"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-string/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / readString readString \u00b6 [common]\\ fun readString (): String Reads a quoted or unquoted string and returns it.","title":"Read string"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-string/#readstring","text":"[common]\\ fun readString (): String Reads a quoted or unquoted string and returns it.","title":"readString"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-word/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / readWord readWord \u00b6 [common]\\ fun readWord (allowLeadingDigit: Boolean = true): String Reads a non-empty word and returns it.","title":"Read word"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/read-word/#readword","text":"[common]\\ fun readWord (allowLeadingDigit: Boolean = true): String Reads a non-empty word and returns it.","title":"readWord"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/require/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / require require \u00b6 [common]\\ fun require (c: Char ) Reads a non-whitespace character \u2018c\u2019, or throws an exception.","title":"Require"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/require/#require","text":"[common]\\ fun require (c: Char ) Reads a non-whitespace character \u2018c\u2019, or throws an exception.","title":"require"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/try-append-trailing-documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / tryAppendTrailingDocumentation tryAppendTrailingDocumentation \u00b6 [common]\\ fun tryAppendTrailingDocumentation (documentation: String ): String","title":"Try append trailing documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/try-append-trailing-documentation/#tryappendtrailingdocumentation","text":"[common]\\ fun tryAppendTrailingDocumentation (documentation: String ): String","title":"tryAppendTrailingDocumentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/unexpected/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / SyntaxReader / unexpected unexpected \u00b6 [common]\\ fun unexpected (message: String , location: Location ? = location()): RuntimeException","title":"Unexpected"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-syntax-reader/unexpected/#unexpected","text":"[common]\\ fun unexpected (message: String , location: Location ? = location()): RuntimeException","title":"unexpected"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / TypeElement TypeElement \u00b6 [common]\\ interface TypeElement A message type or enum type declaration. Functions \u00b6 Name Summary toSchema [common] abstract fun toSchema (): String Properties \u00b6 Name Summary documentation [common] abstract val documentation : String location [common] abstract val location : Location name [common] abstract val name : String nestedTypes [common] abstract val nestedTypes : List < TypeElement > options [common] abstract val options : List < OptionElement > Inheritors \u00b6 Name EnumElement MessageElement","title":"Index"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/#typeelement","text":"[common]\\ interface TypeElement A message type or enum type declaration.","title":"TypeElement"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/#functions","text":"Name Summary toSchema [common] abstract fun toSchema (): String","title":"Functions"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/#properties","text":"Name Summary documentation [common] abstract val documentation : String location [common] abstract val location : Location name [common] abstract val name : String nestedTypes [common] abstract val nestedTypes : List < TypeElement > options [common] abstract val options : List < OptionElement >","title":"Properties"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/#inheritors","text":"Name EnumElement MessageElement","title":"Inheritors"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/documentation/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / TypeElement / documentation documentation \u00b6 [common]\\ abstract val documentation : String","title":"Documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/documentation/#documentation","text":"[common]\\ abstract val documentation : String","title":"documentation"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/location/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / TypeElement / location location \u00b6 [common]\\ abstract val location : Location","title":"Location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/location/#location","text":"[common]\\ abstract val location : Location","title":"location"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/name/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / TypeElement / name name \u00b6 [common]\\ abstract val name : String","title":"Name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/name/#name","text":"[common]\\ abstract val name : String","title":"name"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/nested-types/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / TypeElement / nestedTypes nestedTypes \u00b6 [common]\\ abstract val nestedTypes : List < TypeElement >","title":"Nested types"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/nested-types/#nestedtypes","text":"[common]\\ abstract val nestedTypes : List < TypeElement >","title":"nestedTypes"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/options/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / TypeElement / options options \u00b6 [common]\\ abstract val options : List < OptionElement >","title":"Options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/options/#options","text":"[common]\\ abstract val options : List < OptionElement >","title":"options"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/to-schema/","text":"// wire-schema / com.squareup.wire.schema.internal.parser / TypeElement / toSchema toSchema \u00b6 [common]\\ abstract fun toSchema (): String","title":"To schema"},{"location":"3.x/wire-schema/com.squareup.wire.schema.internal.parser/-type-element/to-schema/#toschema","text":"[common]\\ abstract fun toSchema (): String","title":"toSchema"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/","text":"// wire-swift-generator / com.squareup.wire.swift Package com.squareup.wire.swift \u00b6 Types \u00b6 Name Summary SwiftGenerator [jvm] class SwiftGenerator","title":"Index"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/#package-comsquareupwireswift","text":"","title":"Package com.squareup.wire.swift"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/#types","text":"Name Summary SwiftGenerator [jvm] class SwiftGenerator","title":"Types"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/","text":"// wire-swift-generator / com.squareup.wire.swift / SwiftGenerator SwiftGenerator \u00b6 [jvm]\\ class SwiftGenerator Types \u00b6 Name Summary Companion [jvm] object Companion Functions \u00b6 Name Summary generatedTypeName [jvm] fun generatedTypeName (type: Type): <ERROR CLASS> generateTypeTo [jvm] fun generateTypeTo (type: Type, builder: FileSpec.Builder) Properties \u00b6 Name Summary schema [jvm] val schema : Schema","title":"Index"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/#swiftgenerator","text":"[jvm]\\ class SwiftGenerator","title":"SwiftGenerator"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/#types","text":"Name Summary Companion [jvm] object Companion","title":"Types"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/#functions","text":"Name Summary generatedTypeName [jvm] fun generatedTypeName (type: Type): <ERROR CLASS> generateTypeTo [jvm] fun generateTypeTo (type: Type, builder: FileSpec.Builder)","title":"Functions"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/#properties","text":"Name Summary schema [jvm] val schema : Schema","title":"Properties"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/generate-type-to/","text":"// wire-swift-generator / com.squareup.wire.swift / SwiftGenerator / generateTypeTo generateTypeTo \u00b6 [jvm]\\ fun generateTypeTo (type: Type, builder: FileSpec.Builder)","title":"Generate type to"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/generate-type-to/#generatetypeto","text":"[jvm]\\ fun generateTypeTo (type: Type, builder: FileSpec.Builder)","title":"generateTypeTo"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/generated-type-name/","text":"// wire-swift-generator / com.squareup.wire.swift / SwiftGenerator / generatedTypeName generatedTypeName \u00b6 [jvm]\\ fun generatedTypeName (type: Type): <ERROR CLASS>","title":"Generated type name"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/generated-type-name/#generatedtypename","text":"[jvm]\\ fun generatedTypeName (type: Type): <ERROR CLASS>","title":"generatedTypeName"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/schema/","text":"// wire-swift-generator / com.squareup.wire.swift / SwiftGenerator / schema schema \u00b6 [jvm]\\ val schema : Schema","title":"Schema"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/schema/#schema","text":"[jvm]\\ val schema : Schema","title":"schema"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/","text":"// wire-swift-generator / com.squareup.wire.swift / SwiftGenerator / Companion Companion \u00b6 [jvm]\\ object Companion Functions \u00b6 Name Summary builtInType [jvm] fun builtInType (protoType: ProtoType): Boolean invoke [jvm] @ JvmStatic @ JvmName (name = \u201cget\u201d) operator fun invoke (schema: Schema, existingTypeModuleName: Map <ProtoType, String > = emptyMap()): SwiftGenerator","title":"Index"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/#companion","text":"[jvm]\\ object Companion","title":"Companion"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/#functions","text":"Name Summary builtInType [jvm] fun builtInType (protoType: ProtoType): Boolean invoke [jvm] @ JvmStatic @ JvmName (name = \u201cget\u201d) operator fun invoke (schema: Schema, existingTypeModuleName: Map <ProtoType, String > = emptyMap()): SwiftGenerator","title":"Functions"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/built-in-type/","text":"// wire-swift-generator / com.squareup.wire.swift / SwiftGenerator / Companion / builtInType builtInType \u00b6 [jvm]\\ fun builtInType (protoType: ProtoType): Boolean","title":"Built in type"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/built-in-type/#builtintype","text":"[jvm]\\ fun builtInType (protoType: ProtoType): Boolean","title":"builtInType"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/invoke/","text":"// wire-swift-generator / com.squareup.wire.swift / SwiftGenerator / Companion / invoke invoke \u00b6 [jvm]\\ @ JvmStatic @ JvmName (name = \u201cget\u201d) operator fun invoke (schema: Schema, existingTypeModuleName: Map <ProtoType, String > = emptyMap()): SwiftGenerator","title":"Invoke"},{"location":"3.x/wire-swift-generator/com.squareup.wire.swift/-swift-generator/-companion/invoke/#invoke","text":"[jvm]\\ @ JvmStatic @ JvmName (name = \u201cget\u201d) operator fun invoke (schema: Schema, existingTypeModuleName: Map <ProtoType, String > = emptyMap()): SwiftGenerator","title":"invoke"}]}